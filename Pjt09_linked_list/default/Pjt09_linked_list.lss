
Pjt09_linked_list.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008a  00800200  000012d2  00001366  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000012d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000098  0080028a  0080028a  000013f0  2**0
                  ALLOC
  3 .stab         00001110  00000000  00000000  000013f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000033b  00000000  00000000  00002500  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000002a8  00000000  00000000  00002840  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000022c8  00000000  00000000  00002ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010bb  00000000  00000000  00004db0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013f7  00000000  00000000  00005e6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000061c  00000000  00000000  00007264  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000722  00000000  00000000  00007880  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001774  00000000  00000000  00007fa2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00009716  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      3c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      5c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      60:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      64:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__vector_25>
      68:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      6c:	0c 94 44 02 	jmp	0x488	; 0x488 <__vector_27>
      70:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      74:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      78:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      7c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      80:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      84:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      88:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      8c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      90:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      94:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      98:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      9c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      ac:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      bc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      cc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      dc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      e0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e2 ed       	ldi	r30, 0xD2	; 210
      fc:	f2 e1       	ldi	r31, 0x12	; 18
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	aa 38       	cpi	r26, 0x8A	; 138
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
     10e:	1b be       	out	0x3b, r1	; 59

00000110 <__do_clear_bss>:
     110:	13 e0       	ldi	r17, 0x03	; 3
     112:	aa e8       	ldi	r26, 0x8A	; 138
     114:	b2 e0       	ldi	r27, 0x02	; 2
     116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
     118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
     11a:	a2 32       	cpi	r26, 0x22	; 34
     11c:	b1 07       	cpc	r27, r17
     11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
     120:	0e 94 f7 03 	call	0x7ee	; 0x7ee <main>
     124:	0c 94 67 09 	jmp	0x12ce	; 0x12ce <_exit>

00000128 <__bad_interrupt>:
     128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <is_prime>:
// app_prime.c
#include <stdio.h>
#include <stdlib.h>
#include "app_prime.h"

int is_prime(int n) {
     12c:	cf 93       	push	r28
     12e:	df 93       	push	r29
     130:	fc 01       	movw	r30, r24
    int i;
	for(i = 2; i <= n/2; i++){
     132:	62 e0       	ldi	r22, 0x02	; 2
     134:	70 e0       	ldi	r23, 0x00	; 0
     136:	0e 94 54 04 	call	0x8a8	; 0x8a8 <__divmodhi4>
     13a:	eb 01       	movw	r28, r22
     13c:	22 e0       	ldi	r18, 0x02	; 2
     13e:	30 e0       	ldi	r19, 0x00	; 0
     140:	08 c0       	rjmp	.+16     	; 0x152 <is_prime+0x26>
		if((n % i) == 0) 
     142:	cf 01       	movw	r24, r30
     144:	b9 01       	movw	r22, r18
     146:	0e 94 54 04 	call	0x8a8	; 0x8a8 <__divmodhi4>
     14a:	00 97       	sbiw	r24, 0x00	; 0
     14c:	41 f0       	breq	.+16     	; 0x15e <is_prime+0x32>
#include <stdlib.h>
#include "app_prime.h"

int is_prime(int n) {
    int i;
	for(i = 2; i <= n/2; i++){
     14e:	2f 5f       	subi	r18, 0xFF	; 255
     150:	3f 4f       	sbci	r19, 0xFF	; 255
     152:	c2 17       	cp	r28, r18
     154:	d3 07       	cpc	r29, r19
     156:	ac f7       	brge	.-22     	; 0x142 <is_prime+0x16>
		if((n % i) == 0) 
			return(0);
	}
	return(1);
     158:	81 e0       	ldi	r24, 0x01	; 1
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	02 c0       	rjmp	.+4      	; 0x162 <is_prime+0x36>

int is_prime(int n) {
    int i;
	for(i = 2; i <= n/2; i++){
		if((n % i) == 0) 
			return(0);
     15e:	80 e0       	ldi	r24, 0x00	; 0
     160:	90 e0       	ldi	r25, 0x00	; 0
	}
	return(1);
}
     162:	df 91       	pop	r29
     164:	cf 91       	pop	r28
     166:	08 95       	ret

00000168 <app_prime>:

void app_prime(char *ap) {
     168:	cf 92       	push	r12
     16a:	df 92       	push	r13
     16c:	ef 92       	push	r14
     16e:	ff 92       	push	r15
     170:	0f 93       	push	r16
     172:	1f 93       	push	r17
     174:	cf 93       	push	r28
     176:	df 93       	push	r29
    int t = 2000, count = 0, n;

	if(ap) t = atoi(ap);
     178:	00 97       	sbiw	r24, 0x00	; 0
     17a:	21 f0       	breq	.+8      	; 0x184 <app_prime+0x1c>
     17c:	0e 94 aa 05 	call	0xb54	; 0xb54 <atoi>
     180:	7c 01       	movw	r14, r24
     182:	04 c0       	rjmp	.+8      	; 0x18c <app_prime+0x24>
	}
	return(1);
}

void app_prime(char *ap) {
    int t = 2000, count = 0, n;
     184:	90 ed       	ldi	r25, 0xD0	; 208
     186:	e9 2e       	mov	r14, r25
     188:	97 e0       	ldi	r25, 0x07	; 7
     18a:	f9 2e       	mov	r15, r25

	if(ap) t = atoi(ap);

	for (n = 2; n <= t; n++){
     18c:	c2 e0       	ldi	r28, 0x02	; 2
     18e:	d0 e0       	ldi	r29, 0x00	; 0
	}
	return(1);
}

void app_prime(char *ap) {
    int t = 2000, count = 0, n;
     190:	00 e0       	ldi	r16, 0x00	; 0
     192:	10 e0       	ldi	r17, 0x00	; 0
	if(ap) t = atoi(ap);

	for (n = 2; n <= t; n++){
		if(is_prime(n)) {
		    count++;
			printf("%d is a prime number!!!\n", n);
     194:	80 e0       	ldi	r24, 0x00	; 0
     196:	c8 2e       	mov	r12, r24
     198:	82 e0       	ldi	r24, 0x02	; 2
     19a:	d8 2e       	mov	r13, r24
void app_prime(char *ap) {
    int t = 2000, count = 0, n;

	if(ap) t = atoi(ap);

	for (n = 2; n <= t; n++){
     19c:	16 c0       	rjmp	.+44     	; 0x1ca <app_prime+0x62>
		if(is_prime(n)) {
     19e:	ce 01       	movw	r24, r28
     1a0:	0e 94 96 00 	call	0x12c	; 0x12c <is_prime>
     1a4:	00 97       	sbiw	r24, 0x00	; 0
     1a6:	81 f0       	breq	.+32     	; 0x1c8 <app_prime+0x60>
		    count++;
     1a8:	0f 5f       	subi	r16, 0xFF	; 255
     1aa:	1f 4f       	sbci	r17, 0xFF	; 255
			printf("%d is a prime number!!!\n", n);
     1ac:	00 d0       	rcall	.+0      	; 0x1ae <app_prime+0x46>
     1ae:	0f 92       	push	r0
     1b0:	ed b7       	in	r30, 0x3d	; 61
     1b2:	fe b7       	in	r31, 0x3e	; 62
     1b4:	d2 82       	std	Z+2, r13	; 0x02
     1b6:	c1 82       	std	Z+1, r12	; 0x01
     1b8:	d4 83       	std	Z+4, r29	; 0x04
     1ba:	c3 83       	std	Z+3, r28	; 0x03
     1bc:	0e 94 39 06 	call	0xc72	; 0xc72 <printf>
     1c0:	0f 90       	pop	r0
     1c2:	0f 90       	pop	r0
     1c4:	0f 90       	pop	r0
     1c6:	0f 90       	pop	r0
void app_prime(char *ap) {
    int t = 2000, count = 0, n;

	if(ap) t = atoi(ap);

	for (n = 2; n <= t; n++){
     1c8:	21 96       	adiw	r28, 0x01	; 1
     1ca:	ec 16       	cp	r14, r28
     1cc:	fd 06       	cpc	r15, r29
     1ce:	3c f7       	brge	.-50     	; 0x19e <app_prime+0x36>
		if(is_prime(n)) {
		    count++;
			printf("%d is a prime number!!!\n", n);
		}
	}
	printf("count=%d\n", count);
     1d0:	00 d0       	rcall	.+0      	; 0x1d2 <app_prime+0x6a>
     1d2:	0f 92       	push	r0
     1d4:	89 e1       	ldi	r24, 0x19	; 25
     1d6:	92 e0       	ldi	r25, 0x02	; 2
     1d8:	ed b7       	in	r30, 0x3d	; 61
     1da:	fe b7       	in	r31, 0x3e	; 62
     1dc:	92 83       	std	Z+2, r25	; 0x02
     1de:	81 83       	std	Z+1, r24	; 0x01
     1e0:	14 83       	std	Z+4, r17	; 0x04
     1e2:	03 83       	std	Z+3, r16	; 0x03
     1e4:	0e 94 39 06 	call	0xc72	; 0xc72 <printf>
     1e8:	0f 90       	pop	r0
     1ea:	0f 90       	pop	r0
     1ec:	0f 90       	pop	r0
     1ee:	0f 90       	pop	r0
}
     1f0:	df 91       	pop	r29
     1f2:	cf 91       	pop	r28
     1f4:	1f 91       	pop	r17
     1f6:	0f 91       	pop	r16
     1f8:	ff 90       	pop	r15
     1fa:	ef 90       	pop	r14
     1fc:	df 90       	pop	r13
     1fe:	cf 90       	pop	r12
     200:	08 95       	ret

00000202 <q_init>:
#include "cir_queue.h"

char qi[QI_SIZE], qo[QO_SIZE];
int fi, ri, fo, ro;
void q_init(void) {
	fi = ri = fo = ro = 0;
     202:	10 92 d4 02 	sts	0x02D4, r1
     206:	10 92 d3 02 	sts	0x02D3, r1
     20a:	10 92 d2 02 	sts	0x02D2, r1
     20e:	10 92 d1 02 	sts	0x02D1, r1
     212:	10 92 d6 02 	sts	0x02D6, r1
     216:	10 92 d5 02 	sts	0x02D5, r1
     21a:	10 92 90 02 	sts	0x0290, r1
     21e:	10 92 8f 02 	sts	0x028F, r1
}
     222:	08 95       	ret

00000224 <qi_insert>:
int qi_insert(char ch) {
     224:	48 2f       	mov	r20, r24
	if((ri + 1) % QI_SIZE == fi)
     226:	20 91 d5 02 	lds	r18, 0x02D5
     22a:	30 91 d6 02 	lds	r19, 0x02D6
     22e:	2f 5f       	subi	r18, 0xFF	; 255
     230:	3f 4f       	sbci	r19, 0xFF	; 255
     232:	c9 01       	movw	r24, r18
     234:	60 e4       	ldi	r22, 0x40	; 64
     236:	70 e0       	ldi	r23, 0x00	; 0
     238:	0e 94 54 04 	call	0x8a8	; 0x8a8 <__divmodhi4>
     23c:	9c 01       	movw	r18, r24
     23e:	80 91 8f 02 	lds	r24, 0x028F
     242:	90 91 90 02 	lds	r25, 0x0290
     246:	28 17       	cp	r18, r24
     248:	39 07       	cpc	r19, r25
     24a:	59 f0       	breq	.+22     	; 0x262 <qi_insert+0x3e>
		return (0);
	ri = (ri + 1) % QI_SIZE;
     24c:	30 93 d6 02 	sts	0x02D6, r19
     250:	20 93 d5 02 	sts	0x02D5, r18
	qi[ri] = ch;
     254:	29 52       	subi	r18, 0x29	; 41
     256:	3d 4f       	sbci	r19, 0xFD	; 253
     258:	f9 01       	movw	r30, r18
     25a:	40 83       	st	Z, r20
	return(1);
     25c:	81 e0       	ldi	r24, 0x01	; 1
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	08 95       	ret
void q_init(void) {
	fi = ri = fo = ro = 0;
}
int qi_insert(char ch) {
	if((ri + 1) % QI_SIZE == fi)
		return (0);
     262:	80 e0       	ldi	r24, 0x00	; 0
     264:	90 e0       	ldi	r25, 0x00	; 0
	ri = (ri + 1) % QI_SIZE;
	qi[ri] = ch;
	return(1);
}
     266:	08 95       	ret

00000268 <qi_delete>:
int qi_delete(void) {
	if( ri == fi)
     268:	80 91 8f 02 	lds	r24, 0x028F
     26c:	90 91 90 02 	lds	r25, 0x0290
     270:	20 91 d5 02 	lds	r18, 0x02D5
     274:	30 91 d6 02 	lds	r19, 0x02D6
     278:	28 17       	cp	r18, r24
     27a:	39 07       	cpc	r19, r25
     27c:	79 f0       	breq	.+30     	; 0x29c <qi_delete+0x34>
		return(0);
    fi = (fi+1) % QI_SIZE;
     27e:	01 96       	adiw	r24, 0x01	; 1
     280:	60 e4       	ldi	r22, 0x40	; 64
     282:	70 e0       	ldi	r23, 0x00	; 0
     284:	0e 94 54 04 	call	0x8a8	; 0x8a8 <__divmodhi4>
     288:	90 93 90 02 	sts	0x0290, r25
     28c:	80 93 8f 02 	sts	0x028F, r24
	return(qi[fi]);
     290:	89 52       	subi	r24, 0x29	; 41
     292:	9d 4f       	sbci	r25, 0xFD	; 253
     294:	fc 01       	movw	r30, r24
     296:	80 81       	ld	r24, Z
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	08 95       	ret
	qi[ri] = ch;
	return(1);
}
int qi_delete(void) {
	if( ri == fi)
		return(0);
     29c:	80 e0       	ldi	r24, 0x00	; 0
     29e:	90 e0       	ldi	r25, 0x00	; 0
    fi = (fi+1) % QI_SIZE;
	return(qi[fi]);
}
     2a0:	08 95       	ret

000002a2 <qo_insert>:
int qo_insert(char ch) {
     2a2:	48 2f       	mov	r20, r24
	if((ro + 1) % QO_SIZE == fo)
     2a4:	20 91 d3 02 	lds	r18, 0x02D3
     2a8:	30 91 d4 02 	lds	r19, 0x02D4
     2ac:	2f 5f       	subi	r18, 0xFF	; 255
     2ae:	3f 4f       	sbci	r19, 0xFF	; 255
     2b0:	c9 01       	movw	r24, r18
     2b2:	60 e4       	ldi	r22, 0x40	; 64
     2b4:	70 e0       	ldi	r23, 0x00	; 0
     2b6:	0e 94 54 04 	call	0x8a8	; 0x8a8 <__divmodhi4>
     2ba:	9c 01       	movw	r18, r24
     2bc:	80 91 d1 02 	lds	r24, 0x02D1
     2c0:	90 91 d2 02 	lds	r25, 0x02D2
     2c4:	28 17       	cp	r18, r24
     2c6:	39 07       	cpc	r19, r25
     2c8:	59 f0       	breq	.+22     	; 0x2e0 <qo_insert+0x3e>
		return (0);
	ro = (ro + 1) % QO_SIZE;
     2ca:	30 93 d4 02 	sts	0x02D4, r19
     2ce:	20 93 d3 02 	sts	0x02D3, r18
	qo[ro] = ch;
     2d2:	2f 56       	subi	r18, 0x6F	; 111
     2d4:	3d 4f       	sbci	r19, 0xFD	; 253
     2d6:	f9 01       	movw	r30, r18
     2d8:	40 83       	st	Z, r20
	return(1);
     2da:	81 e0       	ldi	r24, 0x01	; 1
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	08 95       	ret
    fi = (fi+1) % QI_SIZE;
	return(qi[fi]);
}
int qo_insert(char ch) {
	if((ro + 1) % QO_SIZE == fo)
		return (0);
     2e0:	80 e0       	ldi	r24, 0x00	; 0
     2e2:	90 e0       	ldi	r25, 0x00	; 0
	ro = (ro + 1) % QO_SIZE;
	qo[ro] = ch;
	return(1);
}
     2e4:	08 95       	ret

000002e6 <qo_delete>:
int qo_delete(void) {
	if( ro == fo)
     2e6:	80 91 d1 02 	lds	r24, 0x02D1
     2ea:	90 91 d2 02 	lds	r25, 0x02D2
     2ee:	20 91 d3 02 	lds	r18, 0x02D3
     2f2:	30 91 d4 02 	lds	r19, 0x02D4
     2f6:	28 17       	cp	r18, r24
     2f8:	39 07       	cpc	r19, r25
     2fa:	79 f0       	breq	.+30     	; 0x31a <qo_delete+0x34>
		return(0);
    fo = (fo+1) % QO_SIZE;
     2fc:	01 96       	adiw	r24, 0x01	; 1
     2fe:	60 e4       	ldi	r22, 0x40	; 64
     300:	70 e0       	ldi	r23, 0x00	; 0
     302:	0e 94 54 04 	call	0x8a8	; 0x8a8 <__divmodhi4>
     306:	90 93 d2 02 	sts	0x02D2, r25
     30a:	80 93 d1 02 	sts	0x02D1, r24
	return(qo[fo]);
     30e:	8f 56       	subi	r24, 0x6F	; 111
     310:	9d 4f       	sbci	r25, 0xFD	; 253
     312:	fc 01       	movw	r30, r24
     314:	80 81       	ld	r24, Z
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	08 95       	ret
	qo[ro] = ch;
	return(1);
}
int qo_delete(void) {
	if( ro == fo)
		return(0);
     31a:	80 e0       	ldi	r24, 0x00	; 0
     31c:	90 e0       	ldi	r25, 0x00	; 0
    fo = (fo+1) % QO_SIZE;
	return(qo[fo]);
}
     31e:	08 95       	ret

00000320 <led_init>:
#include "led.h"

static uint8_t Leds;

void led_init(void) {
    DDRL = PORTL = 0xff;
     320:	8f ef       	ldi	r24, 0xFF	; 255
     322:	80 93 0b 01 	sts	0x010B, r24
     326:	80 93 0a 01 	sts	0x010A, r24
} 
     32a:	08 95       	ret

0000032c <led_on_all>:
void led_on_all(void) {
    Leds = PORTL = 0x00;
     32c:	10 92 0b 01 	sts	0x010B, r1
     330:	10 92 8a 02 	sts	0x028A, r1
}
     334:	08 95       	ret

00000336 <led_off_all>:
void led_off_all(void) {
    Leds = PORTL = 0xff;
     336:	8f ef       	ldi	r24, 0xFF	; 255
     338:	80 93 0b 01 	sts	0x010B, r24
     33c:	80 93 8a 02 	sts	0x028A, r24
}
     340:	08 95       	ret

00000342 <led_on>:
void led_on(uint8_t led_no) {
    Leds &= ~(1 << led_no);
     342:	21 e0       	ldi	r18, 0x01	; 1
     344:	30 e0       	ldi	r19, 0x00	; 0
     346:	02 c0       	rjmp	.+4      	; 0x34c <led_on+0xa>
     348:	22 0f       	add	r18, r18
     34a:	33 1f       	adc	r19, r19
     34c:	8a 95       	dec	r24
     34e:	e2 f7       	brpl	.-8      	; 0x348 <led_on+0x6>
     350:	20 95       	com	r18
     352:	80 91 8a 02 	lds	r24, 0x028A
     356:	28 23       	and	r18, r24
     358:	20 93 8a 02 	sts	0x028A, r18
	PORTL = Leds;
     35c:	20 93 0b 01 	sts	0x010B, r18
}
     360:	08 95       	ret

00000362 <led_off>:
void led_off(uint8_t led_no) {
	Leds |= (1 << led_no);
     362:	21 e0       	ldi	r18, 0x01	; 1
     364:	30 e0       	ldi	r19, 0x00	; 0
     366:	02 c0       	rjmp	.+4      	; 0x36c <led_off+0xa>
     368:	22 0f       	add	r18, r18
     36a:	33 1f       	adc	r19, r19
     36c:	8a 95       	dec	r24
     36e:	e2 f7       	brpl	.-8      	; 0x368 <led_off+0x6>
     370:	80 91 8a 02 	lds	r24, 0x028A
     374:	82 2b       	or	r24, r18
     376:	80 93 8a 02 	sts	0x028A, r24
	PORTL = Leds;
     37a:	80 93 0b 01 	sts	0x010B, r24
}
     37e:	08 95       	ret

00000380 <led_set>:
void led_set(uint8_t led_mask) {
    Leds = ~led_mask;
     380:	80 95       	com	r24
     382:	80 93 8a 02 	sts	0x028A, r24
	PORTL = Leds;
     386:	80 93 0b 01 	sts	0x010B, r24
}
     38a:	08 95       	ret

0000038c <uart_getchar>:

int uart_getchar(FILE *stream) {
	char ch;

	do {
		cli();
     38c:	f8 94       	cli
		ch = qi_delete();
     38e:	0e 94 34 01 	call	0x268	; 0x268 <qi_delete>
		sei();
     392:	78 94       	sei
	} while (ch == 0);
     394:	88 23       	and	r24, r24
     396:	d1 f3       	breq	.-12     	; 0x38c <uart_getchar>

	if (ch == EOT) return(-1);
     398:	84 30       	cpi	r24, 0x04	; 4
     39a:	11 f0       	breq	.+4      	; 0x3a0 <uart_getchar+0x14>
	else 		   return(ch);
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	08 95       	ret
		cli();
		ch = qi_delete();
		sei();
	} while (ch == 0);

	if (ch == EOT) return(-1);
     3a0:	8f ef       	ldi	r24, 0xFF	; 255
     3a2:	9f ef       	ldi	r25, 0xFF	; 255
	else 		   return(ch);
}
     3a4:	08 95       	ret

000003a6 <uart_putchar>:
	sbi(UCSR0B, TXCIE0);
	sbi(UCSR0B, RXEN0);
	sbi(UCSR0B, RXCIE0);
}

int uart_putchar(char ch, FILE *stream){
     3a6:	cf 93       	push	r28
     3a8:	c8 2f       	mov	r28, r24
    if(ch == '\n') 
     3aa:	8a 30       	cpi	r24, 0x0A	; 10
     3ac:	19 f4       	brne	.+6      	; 0x3b4 <uart_putchar+0xe>
	    uart_putchar('\r', stream);
     3ae:	8d e0       	ldi	r24, 0x0D	; 13
     3b0:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <uart_putchar>

	cli();
     3b4:	f8 94       	cli
	
	if(!uart_busy) {
     3b6:	80 91 17 03 	lds	r24, 0x0317
     3ba:	88 23       	and	r24, r24
     3bc:	59 f4       	brne	.+22     	; 0x3d4 <uart_putchar+0x2e>
	    UDR0 = ch;
     3be:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy = 1;
     3c2:	81 e0       	ldi	r24, 0x01	; 1
     3c4:	80 93 17 03 	sts	0x0317, r24
     3c8:	0a c0       	rjmp	.+20     	; 0x3de <uart_putchar+0x38>
	} else {
		while(qo_insert(ch) == 0) {
		    sei();
     3ca:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3cc:	86 ef       	ldi	r24, 0xF6	; 246
     3ce:	8a 95       	dec	r24
     3d0:	f1 f7       	brne	.-4      	; 0x3ce <uart_putchar+0x28>
			_delay_us(100);
			cli();
     3d2:	f8 94       	cli
	
	if(!uart_busy) {
	    UDR0 = ch;
		uart_busy = 1;
	} else {
		while(qo_insert(ch) == 0) {
     3d4:	8c 2f       	mov	r24, r28
     3d6:	0e 94 51 01 	call	0x2a2	; 0x2a2 <qo_insert>
     3da:	00 97       	sbiw	r24, 0x00	; 0
     3dc:	b1 f3       	breq	.-20     	; 0x3ca <uart_putchar+0x24>
		    sei();
			_delay_us(100);
			cli();
		}
	}
	sei();
     3de:	78 94       	sei
	return (1);
}
     3e0:	81 e0       	ldi	r24, 0x01	; 1
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	cf 91       	pop	r28
     3e6:	08 95       	ret

000003e8 <uart_init>:
FILE Mystdout = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);
FILE Mystdin  = FDEV_SETUP_STREAM(NULL, uart_getchar, _FDEV_SETUP_READ);
char uart_busy;

void uart_init() {
	stdin = &Mystdin; stdout = &Mystdout;
     3e8:	8e e5       	ldi	r24, 0x5E	; 94
     3ea:	92 e0       	ldi	r25, 0x02	; 2
     3ec:	90 93 1d 03 	sts	0x031D, r25
     3f0:	80 93 1c 03 	sts	0x031C, r24
     3f4:	8c e6       	ldi	r24, 0x6C	; 108
     3f6:	92 e0       	ldi	r25, 0x02	; 2
     3f8:	90 93 1f 03 	sts	0x031F, r25
     3fc:	80 93 1e 03 	sts	0x031E, r24
	uart_busy = 0;
     400:	10 92 17 03 	sts	0x0317, r1
	q_init();
     404:	0e 94 01 01 	call	0x202	; 0x202 <q_init>
    UBRR0H = 0x00; UBRR0L = 0x07;
     408:	10 92 c5 00 	sts	0x00C5, r1
     40c:	87 e0       	ldi	r24, 0x07	; 7
     40e:	80 93 c4 00 	sts	0x00C4, r24
	sbi(UCSR0A, U2X0);
     412:	e0 ec       	ldi	r30, 0xC0	; 192
     414:	f0 e0       	ldi	r31, 0x00	; 0
     416:	80 81       	ld	r24, Z
     418:	82 60       	ori	r24, 0x02	; 2
     41a:	80 83       	st	Z, r24
	sbi(UCSR0B, TXEN0);
     41c:	e1 ec       	ldi	r30, 0xC1	; 193
     41e:	f0 e0       	ldi	r31, 0x00	; 0
     420:	80 81       	ld	r24, Z
     422:	88 60       	ori	r24, 0x08	; 8
     424:	80 83       	st	Z, r24
	sbi(UCSR0B, TXCIE0);
     426:	80 81       	ld	r24, Z
     428:	80 64       	ori	r24, 0x40	; 64
     42a:	80 83       	st	Z, r24
	sbi(UCSR0B, RXEN0);
     42c:	80 81       	ld	r24, Z
     42e:	80 61       	ori	r24, 0x10	; 16
     430:	80 83       	st	Z, r24
	sbi(UCSR0B, RXCIE0);
     432:	80 81       	ld	r24, Z
     434:	80 68       	ori	r24, 0x80	; 128
     436:	80 83       	st	Z, r24
}
     438:	08 95       	ret

0000043a <uart_putchar_1>:
void uart_putstr(char *sp){
    for(; *sp; sp++)
	    uart_putchar(*sp);
}
*/
int uart_putchar_1(char ch, FILE *stream) {
     43a:	cf 93       	push	r28
     43c:	c8 2f       	mov	r28, r24
    if(ch == '\n')
     43e:	8a 30       	cpi	r24, 0x0A	; 10
     440:	19 f4       	brne	.+6      	; 0x448 <uart_putchar_1+0xe>
	    uart_putchar_1('\r', stream);
     442:	8d e0       	ldi	r24, 0x0D	; 13
     444:	0e 94 1d 02 	call	0x43a	; 0x43a <uart_putchar_1>
    //_delay_ms(10);
	while(1) {
	    if((UCSR0A & (1 << UDRE0)) != 0 )
     448:	80 91 c0 00 	lds	r24, 0x00C0
     44c:	85 ff       	sbrs	r24, 5
     44e:	fc cf       	rjmp	.-8      	; 0x448 <uart_putchar_1+0xe>
		    break;
	}
	UDR0 = ch;
     450:	c0 93 c6 00 	sts	0x00C6, r28
	return (1);
}
     454:	81 e0       	ldi	r24, 0x01	; 1
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	cf 91       	pop	r28
     45a:	08 95       	ret

0000045c <uart_echo>:

	if (ch == EOT) return(-1);
	else 		   return(ch);
}

void uart_echo(char ch) {
     45c:	cf 93       	push	r28
     45e:	c8 2f       	mov	r28, r24
	if(ch == '\n') uart_echo('\r');
     460:	8a 30       	cpi	r24, 0x0A	; 10
     462:	19 f4       	brne	.+6      	; 0x46a <uart_echo+0xe>
     464:	8d e0       	ldi	r24, 0x0D	; 13
     466:	0e 94 2e 02 	call	0x45c	; 0x45c <uart_echo>
	if(!uart_busy) {
     46a:	80 91 17 03 	lds	r24, 0x0317
     46e:	88 23       	and	r24, r24
     470:	31 f4       	brne	.+12     	; 0x47e <uart_echo+0x22>
		UDR0 = ch;
     472:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy = 1;
     476:	81 e0       	ldi	r24, 0x01	; 1
     478:	80 93 17 03 	sts	0x0317, r24
     47c:	03 c0       	rjmp	.+6      	; 0x484 <uart_echo+0x28>
	}
	else
		qo_insert(ch);
     47e:	8c 2f       	mov	r24, r28
     480:	0e 94 51 01 	call	0x2a2	; 0x2a2 <qo_insert>
}
     484:	cf 91       	pop	r28
     486:	08 95       	ret

00000488 <__vector_27>:

ISR(USART0_TX_vect){
     488:	1f 92       	push	r1
     48a:	0f 92       	push	r0
     48c:	0f b6       	in	r0, 0x3f	; 63
     48e:	0f 92       	push	r0
     490:	0b b6       	in	r0, 0x3b	; 59
     492:	0f 92       	push	r0
     494:	11 24       	eor	r1, r1
     496:	2f 93       	push	r18
     498:	3f 93       	push	r19
     49a:	4f 93       	push	r20
     49c:	5f 93       	push	r21
     49e:	6f 93       	push	r22
     4a0:	7f 93       	push	r23
     4a2:	8f 93       	push	r24
     4a4:	9f 93       	push	r25
     4a6:	af 93       	push	r26
     4a8:	bf 93       	push	r27
     4aa:	ef 93       	push	r30
     4ac:	ff 93       	push	r31
	char ch;

	if((ch = qo_delete()) == 0)
     4ae:	0e 94 73 01 	call	0x2e6	; 0x2e6 <qo_delete>
     4b2:	88 23       	and	r24, r24
     4b4:	19 f4       	brne	.+6      	; 0x4bc <__vector_27+0x34>
		uart_busy = 0;
     4b6:	10 92 17 03 	sts	0x0317, r1
     4ba:	02 c0       	rjmp	.+4      	; 0x4c0 <__vector_27+0x38>
	else 
		UDR0 = ch;
     4bc:	80 93 c6 00 	sts	0x00C6, r24
}
     4c0:	ff 91       	pop	r31
     4c2:	ef 91       	pop	r30
     4c4:	bf 91       	pop	r27
     4c6:	af 91       	pop	r26
     4c8:	9f 91       	pop	r25
     4ca:	8f 91       	pop	r24
     4cc:	7f 91       	pop	r23
     4ce:	6f 91       	pop	r22
     4d0:	5f 91       	pop	r21
     4d2:	4f 91       	pop	r20
     4d4:	3f 91       	pop	r19
     4d6:	2f 91       	pop	r18
     4d8:	0f 90       	pop	r0
     4da:	0b be       	out	0x3b, r0	; 59
     4dc:	0f 90       	pop	r0
     4de:	0f be       	out	0x3f, r0	; 63
     4e0:	0f 90       	pop	r0
     4e2:	1f 90       	pop	r1
     4e4:	18 95       	reti

000004e6 <__vector_25>:

ISR(USART0_RX_vect) {
     4e6:	1f 92       	push	r1
     4e8:	0f 92       	push	r0
     4ea:	0f b6       	in	r0, 0x3f	; 63
     4ec:	0f 92       	push	r0
     4ee:	0b b6       	in	r0, 0x3b	; 59
     4f0:	0f 92       	push	r0
     4f2:	11 24       	eor	r1, r1
     4f4:	2f 93       	push	r18
     4f6:	3f 93       	push	r19
     4f8:	4f 93       	push	r20
     4fa:	5f 93       	push	r21
     4fc:	6f 93       	push	r22
     4fe:	7f 93       	push	r23
     500:	8f 93       	push	r24
     502:	9f 93       	push	r25
     504:	af 93       	push	r26
     506:	bf 93       	push	r27
     508:	cf 93       	push	r28
     50a:	ef 93       	push	r30
     50c:	ff 93       	push	r31
	char ch;
	ch = UDR0;
     50e:	c0 91 c6 00 	lds	r28, 0x00C6
	if(ch != EOT) {
     512:	c4 30       	cpi	r28, 0x04	; 4
     514:	31 f0       	breq	.+12     	; 0x522 <__vector_25+0x3c>
		if(ch == '\r')  ch = '\n';
     516:	cd 30       	cpi	r28, 0x0D	; 13
     518:	09 f4       	brne	.+2      	; 0x51c <__vector_25+0x36>
     51a:	ca e0       	ldi	r28, 0x0A	; 10
		uart_echo(ch);
     51c:	8c 2f       	mov	r24, r28
     51e:	0e 94 2e 02 	call	0x45c	; 0x45c <uart_echo>
	}
	qi_insert(ch);
     522:	8c 2f       	mov	r24, r28
     524:	0e 94 12 01 	call	0x224	; 0x224 <qi_insert>
}
     528:	ff 91       	pop	r31
     52a:	ef 91       	pop	r30
     52c:	cf 91       	pop	r28
     52e:	bf 91       	pop	r27
     530:	af 91       	pop	r26
     532:	9f 91       	pop	r25
     534:	8f 91       	pop	r24
     536:	7f 91       	pop	r23
     538:	6f 91       	pop	r22
     53a:	5f 91       	pop	r21
     53c:	4f 91       	pop	r20
     53e:	3f 91       	pop	r19
     540:	2f 91       	pop	r18
     542:	0f 90       	pop	r0
     544:	0b be       	out	0x3b, r0	; 59
     546:	0f 90       	pop	r0
     548:	0f be       	out	0x3f, r0	; 63
     54a:	0f 90       	pop	r0
     54c:	1f 90       	pop	r1
     54e:	18 95       	reti

00000550 <get_node>:
struct node *Head = NULL;

struct node *get_node() {
	struct node *cp;
	
	cp = (struct node *)malloc(sizeof(struct node));
     550:	84 e0       	ldi	r24, 0x04	; 4
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <malloc>
	return cp;
}
     558:	08 95       	ret

0000055a <free_node>:

void free_node(struct node *np) {
	free(np);
     55a:	0e 94 11 05 	call	0xa22	; 0xa22 <free>
	np = NULL;
}
     55e:	08 95       	ret

00000560 <insert_node_head>:

void insert_node_head(struct node *np) {
     560:	fc 01       	movw	r30, r24
	if(!Head) {
     562:	80 91 8b 02 	lds	r24, 0x028B
     566:	90 91 8c 02 	lds	r25, 0x028C
     56a:	00 97       	sbiw	r24, 0x00	; 0
     56c:	39 f4       	brne	.+14     	; 0x57c <insert_node_head+0x1c>
		Head = np;
     56e:	f0 93 8c 02 	sts	0x028C, r31
     572:	e0 93 8b 02 	sts	0x028B, r30
		np->link = NULL;
     576:	13 82       	std	Z+3, r1	; 0x03
     578:	12 82       	std	Z+2, r1	; 0x02
     57a:	08 95       	ret
	} else {
		np->link = Head;
     57c:	93 83       	std	Z+3, r25	; 0x03
     57e:	82 83       	std	Z+2, r24	; 0x02
		Head = np;
     580:	f0 93 8c 02 	sts	0x028C, r31
     584:	e0 93 8b 02 	sts	0x028B, r30
     588:	08 95       	ret

0000058a <insert_node_tail>:
	}
}
void insert_node_tail(struct node *np){
	struct node *cp;
	if(!Head)
     58a:	e0 91 8b 02 	lds	r30, 0x028B
     58e:	f0 91 8c 02 	lds	r31, 0x028C
     592:	30 97       	sbiw	r30, 0x00	; 0
     594:	31 f4       	brne	.+12     	; 0x5a2 <insert_node_tail+0x18>
		Head = np;
     596:	90 93 8c 02 	sts	0x028C, r25
     59a:	80 93 8b 02 	sts	0x028B, r24
     59e:	08 95       	ret
	else {
		for (cp = Head; cp->link != NULL; cp = cp->link);
     5a0:	f9 01       	movw	r30, r18
     5a2:	22 81       	ldd	r18, Z+2	; 0x02
     5a4:	33 81       	ldd	r19, Z+3	; 0x03
     5a6:	21 15       	cp	r18, r1
     5a8:	31 05       	cpc	r19, r1
     5aa:	d1 f7       	brne	.-12     	; 0x5a0 <insert_node_tail+0x16>
		cp->link = np;
     5ac:	93 83       	std	Z+3, r25	; 0x03
     5ae:	82 83       	std	Z+2, r24	; 0x02
     5b0:	08 95       	ret

000005b2 <insert_node_ascn>:
	}
}
void insert_node_ascn(struct node *np) {
     5b2:	cf 93       	push	r28
     5b4:	df 93       	push	r29
     5b6:	fc 01       	movw	r30, r24
	struct node *cp, *pp;
//	printf("%c\n" , np->data);
	if(!Head) {
     5b8:	20 91 8b 02 	lds	r18, 0x028B
     5bc:	30 91 8c 02 	lds	r19, 0x028C
     5c0:	21 15       	cp	r18, r1
     5c2:	31 05       	cpc	r19, r1
     5c4:	31 f0       	breq	.+12     	; 0x5d2 <insert_node_ascn+0x20>
		Head = np;
		np->link = NULL;
	} else {
		for (cp = Head, pp = NULL; cp != NULL && cp->data < np->data;
     5c6:	40 81       	ld	r20, Z
     5c8:	51 81       	ldd	r21, Z+1	; 0x01
     5ca:	d9 01       	movw	r26, r18
     5cc:	c0 e0       	ldi	r28, 0x00	; 0
     5ce:	d0 e0       	ldi	r29, 0x00	; 0
     5d0:	0f c0       	rjmp	.+30     	; 0x5f0 <insert_node_ascn+0x3e>
}
void insert_node_ascn(struct node *np) {
	struct node *cp, *pp;
//	printf("%c\n" , np->data);
	if(!Head) {
		Head = np;
     5d2:	90 93 8c 02 	sts	0x028C, r25
     5d6:	80 93 8b 02 	sts	0x028B, r24
		np->link = NULL;
     5da:	13 82       	std	Z+3, r1	; 0x03
     5dc:	12 82       	std	Z+2, r1	; 0x02
     5de:	1d c0       	rjmp	.+58     	; 0x61a <insert_node_ascn+0x68>
	} else {
		for (cp = Head, pp = NULL; cp != NULL && cp->data < np->data;
												pp = cp, cp = cp->link);
     5e0:	12 96       	adiw	r26, 0x02	; 2
     5e2:	8d 91       	ld	r24, X+
     5e4:	9c 91       	ld	r25, X
     5e6:	13 97       	sbiw	r26, 0x03	; 3
//	printf("%c\n" , np->data);
	if(!Head) {
		Head = np;
		np->link = NULL;
	} else {
		for (cp = Head, pp = NULL; cp != NULL && cp->data < np->data;
     5e8:	ed 01       	movw	r28, r26
     5ea:	00 97       	sbiw	r24, 0x00	; 0
     5ec:	39 f0       	breq	.+14     	; 0x5fc <insert_node_ascn+0x4a>
												pp = cp, cp = cp->link);
     5ee:	dc 01       	movw	r26, r24
//	printf("%c\n" , np->data);
	if(!Head) {
		Head = np;
		np->link = NULL;
	} else {
		for (cp = Head, pp = NULL; cp != NULL && cp->data < np->data;
     5f0:	8d 91       	ld	r24, X+
     5f2:	9c 91       	ld	r25, X
     5f4:	11 97       	sbiw	r26, 0x01	; 1
     5f6:	84 17       	cp	r24, r20
     5f8:	95 07       	cpc	r25, r21
     5fa:	94 f3       	brlt	.-28     	; 0x5e0 <insert_node_ascn+0x2e>
												pp = cp, cp = cp->link);
		
		if(pp == NULL) {
     5fc:	20 97       	sbiw	r28, 0x00	; 0
     5fe:	39 f4       	brne	.+14     	; 0x60e <insert_node_ascn+0x5c>
			np->link = Head;
     600:	33 83       	std	Z+3, r19	; 0x03
     602:	22 83       	std	Z+2, r18	; 0x02
			Head = np;
     604:	f0 93 8c 02 	sts	0x028C, r31
     608:	e0 93 8b 02 	sts	0x028B, r30
     60c:	06 c0       	rjmp	.+12     	; 0x61a <insert_node_ascn+0x68>
		} else {
			np->link = pp->link;
     60e:	8a 81       	ldd	r24, Y+2	; 0x02
     610:	9b 81       	ldd	r25, Y+3	; 0x03
     612:	93 83       	std	Z+3, r25	; 0x03
     614:	82 83       	std	Z+2, r24	; 0x02
			pp->link = np;
     616:	fb 83       	std	Y+3, r31	; 0x03
     618:	ea 83       	std	Y+2, r30	; 0x02
		}
	}
}
     61a:	df 91       	pop	r29
     61c:	cf 91       	pop	r28
     61e:	08 95       	ret

00000620 <insert_node_decn>:

void insert_node_decn(struct node *np) {
     620:	cf 93       	push	r28
     622:	df 93       	push	r29
     624:	fc 01       	movw	r30, r24
	struct node *cp, *pp;
	if(!Head) {
     626:	20 91 8b 02 	lds	r18, 0x028B
     62a:	30 91 8c 02 	lds	r19, 0x028C
     62e:	21 15       	cp	r18, r1
     630:	31 05       	cpc	r19, r1
     632:	31 f0       	breq	.+12     	; 0x640 <insert_node_decn+0x20>
		Head = np;
		np->link = NULL;
	} else {
		for (cp = Head, pp = NULL; cp != NULL && cp->data > np->data;
     634:	40 81       	ld	r20, Z
     636:	51 81       	ldd	r21, Z+1	; 0x01
     638:	d9 01       	movw	r26, r18
     63a:	c0 e0       	ldi	r28, 0x00	; 0
     63c:	d0 e0       	ldi	r29, 0x00	; 0
     63e:	0f c0       	rjmp	.+30     	; 0x65e <insert_node_decn+0x3e>
}

void insert_node_decn(struct node *np) {
	struct node *cp, *pp;
	if(!Head) {
		Head = np;
     640:	90 93 8c 02 	sts	0x028C, r25
     644:	80 93 8b 02 	sts	0x028B, r24
		np->link = NULL;
     648:	13 82       	std	Z+3, r1	; 0x03
     64a:	12 82       	std	Z+2, r1	; 0x02
     64c:	1d c0       	rjmp	.+58     	; 0x688 <insert_node_decn+0x68>
	} else {
		for (cp = Head, pp = NULL; cp != NULL && cp->data > np->data;
												pp = cp, cp = cp->link);
     64e:	12 96       	adiw	r26, 0x02	; 2
     650:	8d 91       	ld	r24, X+
     652:	9c 91       	ld	r25, X
     654:	13 97       	sbiw	r26, 0x03	; 3
	struct node *cp, *pp;
	if(!Head) {
		Head = np;
		np->link = NULL;
	} else {
		for (cp = Head, pp = NULL; cp != NULL && cp->data > np->data;
     656:	ed 01       	movw	r28, r26
     658:	00 97       	sbiw	r24, 0x00	; 0
     65a:	39 f0       	breq	.+14     	; 0x66a <insert_node_decn+0x4a>
												pp = cp, cp = cp->link);
     65c:	dc 01       	movw	r26, r24
	struct node *cp, *pp;
	if(!Head) {
		Head = np;
		np->link = NULL;
	} else {
		for (cp = Head, pp = NULL; cp != NULL && cp->data > np->data;
     65e:	8d 91       	ld	r24, X+
     660:	9c 91       	ld	r25, X
     662:	11 97       	sbiw	r26, 0x01	; 1
     664:	48 17       	cp	r20, r24
     666:	59 07       	cpc	r21, r25
     668:	94 f3       	brlt	.-28     	; 0x64e <insert_node_decn+0x2e>
												pp = cp, cp = cp->link);
		
		if(pp == NULL) {
     66a:	20 97       	sbiw	r28, 0x00	; 0
     66c:	39 f4       	brne	.+14     	; 0x67c <insert_node_decn+0x5c>
			np->link = Head;
     66e:	33 83       	std	Z+3, r19	; 0x03
     670:	22 83       	std	Z+2, r18	; 0x02
			Head = np;
     672:	f0 93 8c 02 	sts	0x028C, r31
     676:	e0 93 8b 02 	sts	0x028B, r30
     67a:	06 c0       	rjmp	.+12     	; 0x688 <insert_node_decn+0x68>
		} else {
			np->link = pp->link;
     67c:	8a 81       	ldd	r24, Y+2	; 0x02
     67e:	9b 81       	ldd	r25, Y+3	; 0x03
     680:	93 83       	std	Z+3, r25	; 0x03
     682:	82 83       	std	Z+2, r24	; 0x02
			pp->link = np;
     684:	fb 83       	std	Y+3, r31	; 0x03
     686:	ea 83       	std	Y+2, r30	; 0x02
		}
	}
}
     688:	df 91       	pop	r29
     68a:	cf 91       	pop	r28
     68c:	08 95       	ret

0000068e <tour_list>:

void tour_list() {
     68e:	0f 93       	push	r16
     690:	1f 93       	push	r17
     692:	cf 93       	push	r28
     694:	df 93       	push	r29
	struct node *cp;

	printf("\n");
     696:	8a e0       	ldi	r24, 0x0A	; 10
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	0e 94 4b 06 	call	0xc96	; 0xc96 <putchar>
	for (cp = Head; cp !=NULL; cp = cp->link)
     69e:	c0 91 8b 02 	lds	r28, 0x028B
     6a2:	d0 91 8c 02 	lds	r29, 0x028C
		printf("-->%c ", (char)(cp->data));
     6a6:	0a e7       	ldi	r16, 0x7A	; 122
     6a8:	12 e0       	ldi	r17, 0x02	; 2

void tour_list() {
	struct node *cp;

	printf("\n");
	for (cp = Head; cp !=NULL; cp = cp->link)
     6aa:	17 c0       	rjmp	.+46     	; 0x6da <tour_list+0x4c>
		printf("-->%c ", (char)(cp->data));
     6ac:	00 d0       	rcall	.+0      	; 0x6ae <tour_list+0x20>
     6ae:	0f 92       	push	r0
     6b0:	ed b7       	in	r30, 0x3d	; 61
     6b2:	fe b7       	in	r31, 0x3e	; 62
     6b4:	31 96       	adiw	r30, 0x01	; 1
     6b6:	ad b7       	in	r26, 0x3d	; 61
     6b8:	be b7       	in	r27, 0x3e	; 62
     6ba:	12 96       	adiw	r26, 0x02	; 2
     6bc:	1c 93       	st	X, r17
     6be:	0e 93       	st	-X, r16
     6c0:	11 97       	sbiw	r26, 0x01	; 1
     6c2:	88 81       	ld	r24, Y
     6c4:	82 83       	std	Z+2, r24	; 0x02
     6c6:	13 82       	std	Z+3, r1	; 0x03
     6c8:	0e 94 39 06 	call	0xc72	; 0xc72 <printf>

void tour_list() {
	struct node *cp;

	printf("\n");
	for (cp = Head; cp !=NULL; cp = cp->link)
     6cc:	0a 80       	ldd	r0, Y+2	; 0x02
     6ce:	db 81       	ldd	r29, Y+3	; 0x03
     6d0:	c0 2d       	mov	r28, r0
     6d2:	0f 90       	pop	r0
     6d4:	0f 90       	pop	r0
     6d6:	0f 90       	pop	r0
     6d8:	0f 90       	pop	r0
     6da:	20 97       	sbiw	r28, 0x00	; 0
     6dc:	39 f7       	brne	.-50     	; 0x6ac <tour_list+0x1e>
		printf("-->%c ", (char)(cp->data));
	printf("\n");
     6de:	8a e0       	ldi	r24, 0x0A	; 10
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	0e 94 4b 06 	call	0xc96	; 0xc96 <putchar>
}
     6e6:	df 91       	pop	r29
     6e8:	cf 91       	pop	r28
     6ea:	1f 91       	pop	r17
     6ec:	0f 91       	pop	r16
     6ee:	08 95       	ret

000006f0 <free_list>:

void free_list() {
	struct node *cp;

	for( ; Head != NULL; ) {
     6f0:	09 c0       	rjmp	.+18     	; 0x704 <free_list+0x14>
		cp = Head;
		Head = cp->link;
     6f2:	fc 01       	movw	r30, r24
     6f4:	22 81       	ldd	r18, Z+2	; 0x02
     6f6:	33 81       	ldd	r19, Z+3	; 0x03
     6f8:	30 93 8c 02 	sts	0x028C, r19
     6fc:	20 93 8b 02 	sts	0x028B, r18
	cp = (struct node *)malloc(sizeof(struct node));
	return cp;
}

void free_node(struct node *np) {
	free(np);
     700:	0e 94 11 05 	call	0xa22	; 0xa22 <free>
}

void free_list() {
	struct node *cp;

	for( ; Head != NULL; ) {
     704:	80 91 8b 02 	lds	r24, 0x028B
     708:	90 91 8c 02 	lds	r25, 0x028C
     70c:	00 97       	sbiw	r24, 0x00	; 0
     70e:	89 f7       	brne	.-30     	; 0x6f2 <free_list+0x2>
		cp = Head;
		Head = cp->link;
		free_node(cp);
	}
}
     710:	08 95       	ret

00000712 <app_list>:
#include <stdio.h>
#include <stdlib.h>
#include "linked_list.h"
#include "uart.h"

void app_list(char *ap) {
     712:	cf 92       	push	r12
     714:	df 92       	push	r13
     716:	ff 92       	push	r15
     718:	0f 93       	push	r16
     71a:	1f 93       	push	r17
     71c:	cf 93       	push	r28
     71e:	df 93       	push	r29
     720:	cd b7       	in	r28, 0x3d	; 61
     722:	de b7       	in	r29, 0x3e	; 62
     724:	28 97       	sbiw	r28, 0x08	; 8
     726:	0f b6       	in	r0, 0x3f	; 63
     728:	f8 94       	cli
     72a:	de bf       	out	0x3e, r29	; 62
     72c:	0f be       	out	0x3f, r0	; 63
     72e:	cd bf       	out	0x3d, r28	; 61
	char buf[8], how = 'a', ch;
	int i;
	struct node *np;

	if (ap) how = *ap;
     730:	00 97       	sbiw	r24, 0x00	; 0
     732:	19 f0       	breq	.+6      	; 0x73a <app_list+0x28>
     734:	fc 01       	movw	r30, r24
     736:	10 81       	ld	r17, Z
     738:	04 c0       	rjmp	.+8      	; 0x742 <app_list+0x30>
#include <stdlib.h>
#include "linked_list.h"
#include "uart.h"

void app_list(char *ap) {
	char buf[8], how = 'a', ch;
     73a:	11 e6       	ldi	r17, 0x61	; 97
     73c:	02 c0       	rjmp	.+4      	; 0x742 <app_list+0x30>
     73e:	f0 2e       	mov	r15, r16
     740:	04 c0       	rjmp	.+8      	; 0x74a <app_list+0x38>
	int i;
	struct node *np;

	if (ap) how = *ap;
	while(1) {
		printf("> ");
     742:	81 e8       	ldi	r24, 0x81	; 129
     744:	c8 2e       	mov	r12, r24
     746:	82 e0       	ldi	r24, 0x02	; 2
     748:	d8 2e       	mov	r13, r24
     74a:	0f 92       	push	r0
     74c:	0f 92       	push	r0
     74e:	ed b7       	in	r30, 0x3d	; 61
     750:	fe b7       	in	r31, 0x3e	; 62
     752:	d2 82       	std	Z+2, r13	; 0x02
     754:	c1 82       	std	Z+1, r12	; 0x01
     756:	0e 94 39 06 	call	0xc72	; 0xc72 <printf>
		if (fgets(buf, 8, stdin) == NULL)
     75a:	0f 90       	pop	r0
     75c:	0f 90       	pop	r0
     75e:	40 91 1c 03 	lds	r20, 0x031C
     762:	50 91 1d 03 	lds	r21, 0x031D
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	68 e0       	ldi	r22, 0x08	; 8
     76c:	70 e0       	ldi	r23, 0x00	; 0
     76e:	0e 94 05 06 	call	0xc0a	; 0xc0a <fgets>
     772:	00 97       	sbiw	r24, 0x00	; 0
     774:	51 f1       	breq	.+84     	; 0x7ca <app_list+0xb8>
			break;
		np = get_node();
     776:	0e 94 a8 02 	call	0x550	; 0x550 <get_node>
     77a:	fe 01       	movw	r30, r28
     77c:	31 96       	adiw	r30, 0x01	; 1
		for (i = 0; i < 8; i++) {
     77e:	20 e0       	ldi	r18, 0x00	; 0
     780:	30 e0       	ldi	r19, 0x00	; 0
			if (buf[i] >= 'a' && buf[i] <= 'z') {
     782:	01 91       	ld	r16, Z+
     784:	40 2f       	mov	r20, r16
     786:	41 56       	subi	r20, 0x61	; 97
     788:	4a 31       	cpi	r20, 0x1A	; 26
     78a:	48 f0       	brcs	.+18     	; 0x79e <app_list+0x8c>
				ch = buf[i];
				break;
			}  else if ( buf[i] >= 'A' && buf[i] <= 'Z' ) {
     78c:	40 5e       	subi	r20, 0xE0	; 224
     78e:	4a 31       	cpi	r20, 0x1A	; 26
     790:	30 f0       	brcs	.+12     	; 0x79e <app_list+0x8c>
	while(1) {
		printf("> ");
		if (fgets(buf, 8, stdin) == NULL)
			break;
		np = get_node();
		for (i = 0; i < 8; i++) {
     792:	2f 5f       	subi	r18, 0xFF	; 255
     794:	3f 4f       	sbci	r19, 0xFF	; 255
     796:	28 30       	cpi	r18, 0x08	; 8
     798:	31 05       	cpc	r19, r1
     79a:	99 f7       	brne	.-26     	; 0x782 <app_list+0x70>
     79c:	0f 2d       	mov	r16, r15
			}  else if ( buf[i] >= 'A' && buf[i] <= 'Z' ) {
				ch = buf[i];
				break;
			}
		}
		np->data = ch;
     79e:	fc 01       	movw	r30, r24
     7a0:	00 83       	st	Z, r16
     7a2:	11 82       	std	Z+1, r1	; 0x01
		switch(how) {
     7a4:	18 36       	cpi	r17, 0x68	; 104
     7a6:	29 f0       	breq	.+10     	; 0x7b2 <app_list+0xa0>
     7a8:	14 37       	cpi	r17, 0x74	; 116
     7aa:	31 f0       	breq	.+12     	; 0x7b8 <app_list+0xa6>
     7ac:	14 36       	cpi	r17, 0x64	; 100
     7ae:	51 f4       	brne	.+20     	; 0x7c4 <app_list+0xb2>
     7b0:	06 c0       	rjmp	.+12     	; 0x7be <app_list+0xac>
			case 'h' : insert_node_head(np); break;
     7b2:	0e 94 b0 02 	call	0x560	; 0x560 <insert_node_head>
     7b6:	c3 cf       	rjmp	.-122    	; 0x73e <app_list+0x2c>
			case 't' : insert_node_tail(np); break;
     7b8:	0e 94 c5 02 	call	0x58a	; 0x58a <insert_node_tail>
     7bc:	c0 cf       	rjmp	.-128    	; 0x73e <app_list+0x2c>
			case 'd' : insert_node_decn(np); break;
     7be:	0e 94 10 03 	call	0x620	; 0x620 <insert_node_decn>
     7c2:	bd cf       	rjmp	.-134    	; 0x73e <app_list+0x2c>
			default  : insert_node_ascn(np);
     7c4:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <insert_node_ascn>
     7c8:	ba cf       	rjmp	.-140    	; 0x73e <app_list+0x2c>
		}
	}
	tour_list();
     7ca:	0e 94 47 03 	call	0x68e	; 0x68e <tour_list>
	free_list();
     7ce:	0e 94 78 03 	call	0x6f0	; 0x6f0 <free_list>
}
     7d2:	28 96       	adiw	r28, 0x08	; 8
     7d4:	0f b6       	in	r0, 0x3f	; 63
     7d6:	f8 94       	cli
     7d8:	de bf       	out	0x3e, r29	; 62
     7da:	0f be       	out	0x3f, r0	; 63
     7dc:	cd bf       	out	0x3d, r28	; 61
     7de:	df 91       	pop	r29
     7e0:	cf 91       	pop	r28
     7e2:	1f 91       	pop	r17
     7e4:	0f 91       	pop	r16
     7e6:	ff 90       	pop	r15
     7e8:	df 90       	pop	r13
     7ea:	cf 90       	pop	r12
     7ec:	08 95       	ret

000007ee <main>:
#include "app_prime.h"
#include "cir_queue.h"
#include "app_linked_list.h"

int main()
{
     7ee:	cf 93       	push	r28
     7f0:	df 93       	push	r29
     7f2:	cd b7       	in	r28, 0x3d	; 61
     7f4:	de b7       	in	r29, 0x3e	; 62
     7f6:	c0 58       	subi	r28, 0x80	; 128
     7f8:	d0 40       	sbci	r29, 0x00	; 0
     7fa:	0f b6       	in	r0, 0x3f	; 63
     7fc:	f8 94       	cli
     7fe:	de bf       	out	0x3e, r29	; 62
     800:	0f be       	out	0x3f, r0	; 63
     802:	cd bf       	out	0x3d, r28	; 61
	char cmd[128], *cp, *ap;
	//int n;
	uart_init();
     804:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <uart_init>
   	sei();	
     808:	78 94       	sei
	printf("%s\n", cmd);
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5f       	subi	r16, 0xFF	; 255
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	c8 01       	movw	r24, r16
     812:	0e 94 52 06 	call	0xca4	; 0xca4 <puts>
	while(1) {
		printf("$ ");
     816:	83 e2       	ldi	r24, 0x23	; 35
     818:	a8 2e       	mov	r10, r24
     81a:	82 e0       	ldi	r24, 0x02	; 2
     81c:	b8 2e       	mov	r11, r24
		if(fgets(cmd, sizeof(cmd), stdin) == NULL)
     81e:	78 01       	movw	r14, r16
	//int n;
	uart_init();
   	sei();	
	printf("%s\n", cmd);
	while(1) {
		printf("$ ");
     820:	0f 92       	push	r0
     822:	0f 92       	push	r0
     824:	ed b7       	in	r30, 0x3d	; 61
     826:	fe b7       	in	r31, 0x3e	; 62
     828:	b2 82       	std	Z+2, r11	; 0x02
     82a:	a1 82       	std	Z+1, r10	; 0x01
     82c:	0e 94 39 06 	call	0xc72	; 0xc72 <printf>
		if(fgets(cmd, sizeof(cmd), stdin) == NULL)
     830:	0f 90       	pop	r0
     832:	0f 90       	pop	r0
     834:	40 91 1c 03 	lds	r20, 0x031C
     838:	50 91 1d 03 	lds	r21, 0x031D
     83c:	c7 01       	movw	r24, r14
     83e:	60 e8       	ldi	r22, 0x80	; 128
     840:	70 e0       	ldi	r23, 0x00	; 0
     842:	0e 94 05 06 	call	0xc0a	; 0xc0a <fgets>
     846:	00 97       	sbiw	r24, 0x00	; 0
     848:	51 f1       	breq	.+84     	; 0x89e <main+0xb0>
			break;
		if((cp = strtok(cmd, "\n\r\t ")) == NULL) continue;
     84a:	c7 01       	movw	r24, r14
     84c:	66 e2       	ldi	r22, 0x26	; 38
     84e:	72 e0       	ldi	r23, 0x02	; 2
     850:	0e 94 c8 05 	call	0xb90	; 0xb90 <strtok>
     854:	8c 01       	movw	r16, r24
     856:	00 97       	sbiw	r24, 0x00	; 0
     858:	19 f3       	breq	.-58     	; 0x820 <main+0x32>
		ap = strtok(NULL, "\n\r\t ");
     85a:	80 e0       	ldi	r24, 0x00	; 0
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	66 e2       	ldi	r22, 0x26	; 38
     860:	72 e0       	ldi	r23, 0x02	; 2
     862:	0e 94 c8 05 	call	0xb90	; 0xb90 <strtok>
     866:	6c 01       	movw	r12, r24
		if     (!strcmp(cp, "prime")) app_prime(ap);
     868:	c8 01       	movw	r24, r16
     86a:	6b e2       	ldi	r22, 0x2B	; 43
     86c:	72 e0       	ldi	r23, 0x02	; 2
     86e:	0e 94 cd 05 	call	0xb9a	; 0xb9a <strcmp>
     872:	00 97       	sbiw	r24, 0x00	; 0
     874:	21 f4       	brne	.+8      	; 0x87e <main+0x90>
     876:	c6 01       	movw	r24, r12
     878:	0e 94 b4 00 	call	0x168	; 0x168 <app_prime>
     87c:	d1 cf       	rjmp	.-94     	; 0x820 <main+0x32>
		else if(!strcmp(cp, "list"))  app_list(ap);
     87e:	c8 01       	movw	r24, r16
     880:	61 e3       	ldi	r22, 0x31	; 49
     882:	72 e0       	ldi	r23, 0x02	; 2
     884:	0e 94 cd 05 	call	0xb9a	; 0xb9a <strcmp>
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	21 f4       	brne	.+8      	; 0x894 <main+0xa6>
     88c:	c6 01       	movw	r24, r12
     88e:	0e 94 89 03 	call	0x712	; 0x712 <app_list>
     892:	c6 cf       	rjmp	.-116    	; 0x820 <main+0x32>
		else 					 printf("Unknown command...\n");
     894:	86 e3       	ldi	r24, 0x36	; 54
     896:	92 e0       	ldi	r25, 0x02	; 2
     898:	0e 94 52 06 	call	0xca4	; 0xca4 <puts>
     89c:	c1 cf       	rjmp	.-126    	; 0x820 <main+0x32>
	}
	printf("logout, good bye!!! \n");
     89e:	89 e4       	ldi	r24, 0x49	; 73
     8a0:	92 e0       	ldi	r25, 0x02	; 2
     8a2:	0e 94 52 06 	call	0xca4	; 0xca4 <puts>
     8a6:	ff cf       	rjmp	.-2      	; 0x8a6 <main+0xb8>

000008a8 <__divmodhi4>:
     8a8:	97 fb       	bst	r25, 7
     8aa:	09 2e       	mov	r0, r25
     8ac:	07 26       	eor	r0, r23
     8ae:	0a d0       	rcall	.+20     	; 0x8c4 <__divmodhi4_neg1>
     8b0:	77 fd       	sbrc	r23, 7
     8b2:	04 d0       	rcall	.+8      	; 0x8bc <__divmodhi4_neg2>
     8b4:	0c d0       	rcall	.+24     	; 0x8ce <__udivmodhi4>
     8b6:	06 d0       	rcall	.+12     	; 0x8c4 <__divmodhi4_neg1>
     8b8:	00 20       	and	r0, r0
     8ba:	1a f4       	brpl	.+6      	; 0x8c2 <__divmodhi4_exit>

000008bc <__divmodhi4_neg2>:
     8bc:	70 95       	com	r23
     8be:	61 95       	neg	r22
     8c0:	7f 4f       	sbci	r23, 0xFF	; 255

000008c2 <__divmodhi4_exit>:
     8c2:	08 95       	ret

000008c4 <__divmodhi4_neg1>:
     8c4:	f6 f7       	brtc	.-4      	; 0x8c2 <__divmodhi4_exit>
     8c6:	90 95       	com	r25
     8c8:	81 95       	neg	r24
     8ca:	9f 4f       	sbci	r25, 0xFF	; 255
     8cc:	08 95       	ret

000008ce <__udivmodhi4>:
     8ce:	aa 1b       	sub	r26, r26
     8d0:	bb 1b       	sub	r27, r27
     8d2:	51 e1       	ldi	r21, 0x11	; 17
     8d4:	07 c0       	rjmp	.+14     	; 0x8e4 <__udivmodhi4_ep>

000008d6 <__udivmodhi4_loop>:
     8d6:	aa 1f       	adc	r26, r26
     8d8:	bb 1f       	adc	r27, r27
     8da:	a6 17       	cp	r26, r22
     8dc:	b7 07       	cpc	r27, r23
     8de:	10 f0       	brcs	.+4      	; 0x8e4 <__udivmodhi4_ep>
     8e0:	a6 1b       	sub	r26, r22
     8e2:	b7 0b       	sbc	r27, r23

000008e4 <__udivmodhi4_ep>:
     8e4:	88 1f       	adc	r24, r24
     8e6:	99 1f       	adc	r25, r25
     8e8:	5a 95       	dec	r21
     8ea:	a9 f7       	brne	.-22     	; 0x8d6 <__udivmodhi4_loop>
     8ec:	80 95       	com	r24
     8ee:	90 95       	com	r25
     8f0:	bc 01       	movw	r22, r24
     8f2:	cd 01       	movw	r24, r26
     8f4:	08 95       	ret

000008f6 <malloc>:
     8f6:	cf 93       	push	r28
     8f8:	df 93       	push	r29
     8fa:	ac 01       	movw	r20, r24
     8fc:	82 30       	cpi	r24, 0x02	; 2
     8fe:	91 05       	cpc	r25, r1
     900:	10 f4       	brcc	.+4      	; 0x906 <malloc+0x10>
     902:	42 e0       	ldi	r20, 0x02	; 2
     904:	50 e0       	ldi	r21, 0x00	; 0
     906:	e0 91 1a 03 	lds	r30, 0x031A
     90a:	f0 91 1b 03 	lds	r31, 0x031B
     90e:	20 e0       	ldi	r18, 0x00	; 0
     910:	30 e0       	ldi	r19, 0x00	; 0
     912:	a0 e0       	ldi	r26, 0x00	; 0
     914:	b0 e0       	ldi	r27, 0x00	; 0
     916:	24 c0       	rjmp	.+72     	; 0x960 <malloc+0x6a>
     918:	80 81       	ld	r24, Z
     91a:	91 81       	ldd	r25, Z+1	; 0x01
     91c:	84 17       	cp	r24, r20
     91e:	95 07       	cpc	r25, r21
     920:	d0 f0       	brcs	.+52     	; 0x956 <malloc+0x60>
     922:	84 17       	cp	r24, r20
     924:	95 07       	cpc	r25, r21
     926:	71 f4       	brne	.+28     	; 0x944 <malloc+0x4e>
     928:	82 81       	ldd	r24, Z+2	; 0x02
     92a:	93 81       	ldd	r25, Z+3	; 0x03
     92c:	10 97       	sbiw	r26, 0x00	; 0
     92e:	29 f0       	breq	.+10     	; 0x93a <malloc+0x44>
     930:	13 96       	adiw	r26, 0x03	; 3
     932:	9c 93       	st	X, r25
     934:	8e 93       	st	-X, r24
     936:	12 97       	sbiw	r26, 0x02	; 2
     938:	2c c0       	rjmp	.+88     	; 0x992 <malloc+0x9c>
     93a:	90 93 1b 03 	sts	0x031B, r25
     93e:	80 93 1a 03 	sts	0x031A, r24
     942:	27 c0       	rjmp	.+78     	; 0x992 <malloc+0x9c>
     944:	21 15       	cp	r18, r1
     946:	31 05       	cpc	r19, r1
     948:	19 f0       	breq	.+6      	; 0x950 <malloc+0x5a>
     94a:	82 17       	cp	r24, r18
     94c:	93 07       	cpc	r25, r19
     94e:	18 f4       	brcc	.+6      	; 0x956 <malloc+0x60>
     950:	9c 01       	movw	r18, r24
     952:	bd 01       	movw	r22, r26
     954:	ef 01       	movw	r28, r30
     956:	92 81       	ldd	r25, Z+2	; 0x02
     958:	83 81       	ldd	r24, Z+3	; 0x03
     95a:	df 01       	movw	r26, r30
     95c:	e9 2f       	mov	r30, r25
     95e:	f8 2f       	mov	r31, r24
     960:	30 97       	sbiw	r30, 0x00	; 0
     962:	d1 f6       	brne	.-76     	; 0x918 <malloc+0x22>
     964:	21 15       	cp	r18, r1
     966:	31 05       	cpc	r19, r1
     968:	f9 f0       	breq	.+62     	; 0x9a8 <malloc+0xb2>
     96a:	c9 01       	movw	r24, r18
     96c:	84 1b       	sub	r24, r20
     96e:	95 0b       	sbc	r25, r21
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	91 05       	cpc	r25, r1
     974:	80 f4       	brcc	.+32     	; 0x996 <malloc+0xa0>
     976:	8a 81       	ldd	r24, Y+2	; 0x02
     978:	9b 81       	ldd	r25, Y+3	; 0x03
     97a:	61 15       	cp	r22, r1
     97c:	71 05       	cpc	r23, r1
     97e:	21 f0       	breq	.+8      	; 0x988 <malloc+0x92>
     980:	fb 01       	movw	r30, r22
     982:	93 83       	std	Z+3, r25	; 0x03
     984:	82 83       	std	Z+2, r24	; 0x02
     986:	04 c0       	rjmp	.+8      	; 0x990 <malloc+0x9a>
     988:	90 93 1b 03 	sts	0x031B, r25
     98c:	80 93 1a 03 	sts	0x031A, r24
     990:	fe 01       	movw	r30, r28
     992:	32 96       	adiw	r30, 0x02	; 2
     994:	42 c0       	rjmp	.+132    	; 0xa1a <malloc+0x124>
     996:	fe 01       	movw	r30, r28
     998:	e8 0f       	add	r30, r24
     99a:	f9 1f       	adc	r31, r25
     99c:	41 93       	st	Z+, r20
     99e:	51 93       	st	Z+, r21
     9a0:	02 97       	sbiw	r24, 0x02	; 2
     9a2:	99 83       	std	Y+1, r25	; 0x01
     9a4:	88 83       	st	Y, r24
     9a6:	39 c0       	rjmp	.+114    	; 0xa1a <malloc+0x124>
     9a8:	80 91 18 03 	lds	r24, 0x0318
     9ac:	90 91 19 03 	lds	r25, 0x0319
     9b0:	00 97       	sbiw	r24, 0x00	; 0
     9b2:	41 f4       	brne	.+16     	; 0x9c4 <malloc+0xce>
     9b4:	80 91 86 02 	lds	r24, 0x0286
     9b8:	90 91 87 02 	lds	r25, 0x0287
     9bc:	90 93 19 03 	sts	0x0319, r25
     9c0:	80 93 18 03 	sts	0x0318, r24
     9c4:	20 91 84 02 	lds	r18, 0x0284
     9c8:	30 91 85 02 	lds	r19, 0x0285
     9cc:	21 15       	cp	r18, r1
     9ce:	31 05       	cpc	r19, r1
     9d0:	41 f4       	brne	.+16     	; 0x9e2 <malloc+0xec>
     9d2:	2d b7       	in	r18, 0x3d	; 61
     9d4:	3e b7       	in	r19, 0x3e	; 62
     9d6:	80 91 88 02 	lds	r24, 0x0288
     9da:	90 91 89 02 	lds	r25, 0x0289
     9de:	28 1b       	sub	r18, r24
     9e0:	39 0b       	sbc	r19, r25
     9e2:	e0 91 18 03 	lds	r30, 0x0318
     9e6:	f0 91 19 03 	lds	r31, 0x0319
     9ea:	e2 17       	cp	r30, r18
     9ec:	f3 07       	cpc	r31, r19
     9ee:	98 f4       	brcc	.+38     	; 0xa16 <malloc+0x120>
     9f0:	2e 1b       	sub	r18, r30
     9f2:	3f 0b       	sbc	r19, r31
     9f4:	24 17       	cp	r18, r20
     9f6:	35 07       	cpc	r19, r21
     9f8:	70 f0       	brcs	.+28     	; 0xa16 <malloc+0x120>
     9fa:	ca 01       	movw	r24, r20
     9fc:	02 96       	adiw	r24, 0x02	; 2
     9fe:	28 17       	cp	r18, r24
     a00:	39 07       	cpc	r19, r25
     a02:	48 f0       	brcs	.+18     	; 0xa16 <malloc+0x120>
     a04:	8e 0f       	add	r24, r30
     a06:	9f 1f       	adc	r25, r31
     a08:	90 93 19 03 	sts	0x0319, r25
     a0c:	80 93 18 03 	sts	0x0318, r24
     a10:	41 93       	st	Z+, r20
     a12:	51 93       	st	Z+, r21
     a14:	02 c0       	rjmp	.+4      	; 0xa1a <malloc+0x124>
     a16:	e0 e0       	ldi	r30, 0x00	; 0
     a18:	f0 e0       	ldi	r31, 0x00	; 0
     a1a:	cf 01       	movw	r24, r30
     a1c:	df 91       	pop	r29
     a1e:	cf 91       	pop	r28
     a20:	08 95       	ret

00000a22 <free>:
     a22:	0f 93       	push	r16
     a24:	1f 93       	push	r17
     a26:	cf 93       	push	r28
     a28:	df 93       	push	r29
     a2a:	9c 01       	movw	r18, r24
     a2c:	00 97       	sbiw	r24, 0x00	; 0
     a2e:	09 f4       	brne	.+2      	; 0xa32 <free+0x10>
     a30:	8c c0       	rjmp	.+280    	; 0xb4a <free+0x128>
     a32:	dc 01       	movw	r26, r24
     a34:	12 97       	sbiw	r26, 0x02	; 2
     a36:	13 96       	adiw	r26, 0x03	; 3
     a38:	1c 92       	st	X, r1
     a3a:	1e 92       	st	-X, r1
     a3c:	12 97       	sbiw	r26, 0x02	; 2
     a3e:	60 91 1a 03 	lds	r22, 0x031A
     a42:	70 91 1b 03 	lds	r23, 0x031B
     a46:	61 15       	cp	r22, r1
     a48:	71 05       	cpc	r23, r1
     a4a:	89 f4       	brne	.+34     	; 0xa6e <free+0x4c>
     a4c:	8d 91       	ld	r24, X+
     a4e:	9c 91       	ld	r25, X
     a50:	11 97       	sbiw	r26, 0x01	; 1
     a52:	82 0f       	add	r24, r18
     a54:	93 1f       	adc	r25, r19
     a56:	20 91 18 03 	lds	r18, 0x0318
     a5a:	30 91 19 03 	lds	r19, 0x0319
     a5e:	28 17       	cp	r18, r24
     a60:	39 07       	cpc	r19, r25
     a62:	69 f5       	brne	.+90     	; 0xabe <free+0x9c>
     a64:	b0 93 19 03 	sts	0x0319, r27
     a68:	a0 93 18 03 	sts	0x0318, r26
     a6c:	6e c0       	rjmp	.+220    	; 0xb4a <free+0x128>
     a6e:	fb 01       	movw	r30, r22
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	01 c0       	rjmp	.+2      	; 0xa78 <free+0x56>
     a76:	fc 01       	movw	r30, r24
     a78:	ea 17       	cp	r30, r26
     a7a:	fb 07       	cpc	r31, r27
     a7c:	30 f4       	brcc	.+12     	; 0xa8a <free+0x68>
     a7e:	82 81       	ldd	r24, Z+2	; 0x02
     a80:	93 81       	ldd	r25, Z+3	; 0x03
     a82:	af 01       	movw	r20, r30
     a84:	00 97       	sbiw	r24, 0x00	; 0
     a86:	b9 f7       	brne	.-18     	; 0xa76 <free+0x54>
     a88:	1f c0       	rjmp	.+62     	; 0xac8 <free+0xa6>
     a8a:	e9 01       	movw	r28, r18
     a8c:	22 97       	sbiw	r28, 0x02	; 2
     a8e:	fb 83       	std	Y+3, r31	; 0x03
     a90:	ea 83       	std	Y+2, r30	; 0x02
     a92:	08 81       	ld	r16, Y
     a94:	19 81       	ldd	r17, Y+1	; 0x01
     a96:	c9 01       	movw	r24, r18
     a98:	80 0f       	add	r24, r16
     a9a:	91 1f       	adc	r25, r17
     a9c:	8e 17       	cp	r24, r30
     a9e:	9f 07       	cpc	r25, r31
     aa0:	59 f4       	brne	.+22     	; 0xab8 <free+0x96>
     aa2:	80 81       	ld	r24, Z
     aa4:	91 81       	ldd	r25, Z+1	; 0x01
     aa6:	80 0f       	add	r24, r16
     aa8:	91 1f       	adc	r25, r17
     aaa:	02 96       	adiw	r24, 0x02	; 2
     aac:	99 83       	std	Y+1, r25	; 0x01
     aae:	88 83       	st	Y, r24
     ab0:	82 81       	ldd	r24, Z+2	; 0x02
     ab2:	93 81       	ldd	r25, Z+3	; 0x03
     ab4:	9b 83       	std	Y+3, r25	; 0x03
     ab6:	8a 83       	std	Y+2, r24	; 0x02
     ab8:	41 15       	cp	r20, r1
     aba:	51 05       	cpc	r21, r1
     abc:	29 f4       	brne	.+10     	; 0xac8 <free+0xa6>
     abe:	b0 93 1b 03 	sts	0x031B, r27
     ac2:	a0 93 1a 03 	sts	0x031A, r26
     ac6:	41 c0       	rjmp	.+130    	; 0xb4a <free+0x128>
     ac8:	fa 01       	movw	r30, r20
     aca:	b3 83       	std	Z+3, r27	; 0x03
     acc:	a2 83       	std	Z+2, r26	; 0x02
     ace:	c1 91       	ld	r28, Z+
     ad0:	d1 91       	ld	r29, Z+
     ad2:	ec 0f       	add	r30, r28
     ad4:	fd 1f       	adc	r31, r29
     ad6:	ae 17       	cp	r26, r30
     ad8:	bf 07       	cpc	r27, r31
     ada:	81 f4       	brne	.+32     	; 0xafc <free+0xda>
     adc:	f9 01       	movw	r30, r18
     ade:	92 91       	ld	r25, -Z
     ae0:	82 91       	ld	r24, -Z
     ae2:	8c 0f       	add	r24, r28
     ae4:	9d 1f       	adc	r25, r29
     ae6:	02 96       	adiw	r24, 0x02	; 2
     ae8:	da 01       	movw	r26, r20
     aea:	11 96       	adiw	r26, 0x01	; 1
     aec:	9c 93       	st	X, r25
     aee:	8e 93       	st	-X, r24
     af0:	82 81       	ldd	r24, Z+2	; 0x02
     af2:	93 81       	ldd	r25, Z+3	; 0x03
     af4:	13 96       	adiw	r26, 0x03	; 3
     af6:	9c 93       	st	X, r25
     af8:	8e 93       	st	-X, r24
     afa:	12 97       	sbiw	r26, 0x02	; 2
     afc:	e0 e0       	ldi	r30, 0x00	; 0
     afe:	f0 e0       	ldi	r31, 0x00	; 0
     b00:	02 c0       	rjmp	.+4      	; 0xb06 <free+0xe4>
     b02:	fb 01       	movw	r30, r22
     b04:	bc 01       	movw	r22, r24
     b06:	db 01       	movw	r26, r22
     b08:	12 96       	adiw	r26, 0x02	; 2
     b0a:	8d 91       	ld	r24, X+
     b0c:	9c 91       	ld	r25, X
     b0e:	13 97       	sbiw	r26, 0x03	; 3
     b10:	00 97       	sbiw	r24, 0x00	; 0
     b12:	b9 f7       	brne	.-18     	; 0xb02 <free+0xe0>
     b14:	cb 01       	movw	r24, r22
     b16:	02 96       	adiw	r24, 0x02	; 2
     b18:	2d 91       	ld	r18, X+
     b1a:	3c 91       	ld	r19, X
     b1c:	11 97       	sbiw	r26, 0x01	; 1
     b1e:	82 0f       	add	r24, r18
     b20:	93 1f       	adc	r25, r19
     b22:	20 91 18 03 	lds	r18, 0x0318
     b26:	30 91 19 03 	lds	r19, 0x0319
     b2a:	28 17       	cp	r18, r24
     b2c:	39 07       	cpc	r19, r25
     b2e:	69 f4       	brne	.+26     	; 0xb4a <free+0x128>
     b30:	30 97       	sbiw	r30, 0x00	; 0
     b32:	29 f4       	brne	.+10     	; 0xb3e <free+0x11c>
     b34:	10 92 1b 03 	sts	0x031B, r1
     b38:	10 92 1a 03 	sts	0x031A, r1
     b3c:	02 c0       	rjmp	.+4      	; 0xb42 <free+0x120>
     b3e:	13 82       	std	Z+3, r1	; 0x03
     b40:	12 82       	std	Z+2, r1	; 0x02
     b42:	70 93 19 03 	sts	0x0319, r23
     b46:	60 93 18 03 	sts	0x0318, r22
     b4a:	df 91       	pop	r29
     b4c:	cf 91       	pop	r28
     b4e:	1f 91       	pop	r17
     b50:	0f 91       	pop	r16
     b52:	08 95       	ret

00000b54 <atoi>:
     b54:	fc 01       	movw	r30, r24
     b56:	88 27       	eor	r24, r24
     b58:	99 27       	eor	r25, r25
     b5a:	e8 94       	clt
     b5c:	21 91       	ld	r18, Z+
     b5e:	20 32       	cpi	r18, 0x20	; 32
     b60:	e9 f3       	breq	.-6      	; 0xb5c <atoi+0x8>
     b62:	29 30       	cpi	r18, 0x09	; 9
     b64:	10 f0       	brcs	.+4      	; 0xb6a <atoi+0x16>
     b66:	2e 30       	cpi	r18, 0x0E	; 14
     b68:	c8 f3       	brcs	.-14     	; 0xb5c <atoi+0x8>
     b6a:	2b 32       	cpi	r18, 0x2B	; 43
     b6c:	41 f0       	breq	.+16     	; 0xb7e <atoi+0x2a>
     b6e:	2d 32       	cpi	r18, 0x2D	; 45
     b70:	39 f4       	brne	.+14     	; 0xb80 <atoi+0x2c>
     b72:	68 94       	set
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <atoi+0x2a>
     b76:	0e 94 fd 05 	call	0xbfa	; 0xbfa <__mulhi_const_10>
     b7a:	82 0f       	add	r24, r18
     b7c:	91 1d       	adc	r25, r1
     b7e:	21 91       	ld	r18, Z+
     b80:	20 53       	subi	r18, 0x30	; 48
     b82:	2a 30       	cpi	r18, 0x0A	; 10
     b84:	c0 f3       	brcs	.-16     	; 0xb76 <atoi+0x22>
     b86:	1e f4       	brtc	.+6      	; 0xb8e <atoi+0x3a>
     b88:	90 95       	com	r25
     b8a:	81 95       	neg	r24
     b8c:	9f 4f       	sbci	r25, 0xFF	; 255
     b8e:	08 95       	ret

00000b90 <strtok>:
     b90:	4d e8       	ldi	r20, 0x8D	; 141
     b92:	52 e0       	ldi	r21, 0x02	; 2
     b94:	0e 94 d6 05 	call	0xbac	; 0xbac <strtok_r>
     b98:	08 95       	ret

00000b9a <strcmp>:
     b9a:	fb 01       	movw	r30, r22
     b9c:	dc 01       	movw	r26, r24
     b9e:	8d 91       	ld	r24, X+
     ba0:	01 90       	ld	r0, Z+
     ba2:	80 19       	sub	r24, r0
     ba4:	01 10       	cpse	r0, r1
     ba6:	d9 f3       	breq	.-10     	; 0xb9e <strcmp+0x4>
     ba8:	99 0b       	sbc	r25, r25
     baa:	08 95       	ret

00000bac <strtok_r>:
     bac:	fa 01       	movw	r30, r20
     bae:	a1 91       	ld	r26, Z+
     bb0:	b0 81       	ld	r27, Z
     bb2:	00 97       	sbiw	r24, 0x00	; 0
     bb4:	19 f4       	brne	.+6      	; 0xbbc <strtok_r+0x10>
     bb6:	10 97       	sbiw	r26, 0x00	; 0
     bb8:	e1 f0       	breq	.+56     	; 0xbf2 <strtok_r+0x46>
     bba:	cd 01       	movw	r24, r26
     bbc:	dc 01       	movw	r26, r24
     bbe:	cd 01       	movw	r24, r26
     bc0:	0d 90       	ld	r0, X+
     bc2:	00 20       	and	r0, r0
     bc4:	11 f4       	brne	.+4      	; 0xbca <strtok_r+0x1e>
     bc6:	c0 01       	movw	r24, r0
     bc8:	13 c0       	rjmp	.+38     	; 0xbf0 <strtok_r+0x44>
     bca:	fb 01       	movw	r30, r22
     bcc:	21 91       	ld	r18, Z+
     bce:	22 23       	and	r18, r18
     bd0:	19 f0       	breq	.+6      	; 0xbd8 <strtok_r+0x2c>
     bd2:	20 15       	cp	r18, r0
     bd4:	d9 f7       	brne	.-10     	; 0xbcc <strtok_r+0x20>
     bd6:	f3 cf       	rjmp	.-26     	; 0xbbe <strtok_r+0x12>
     bd8:	fb 01       	movw	r30, r22
     bda:	21 91       	ld	r18, Z+
     bdc:	20 15       	cp	r18, r0
     bde:	19 f4       	brne	.+6      	; 0xbe6 <strtok_r+0x3a>
     be0:	1e 92       	st	-X, r1
     be2:	11 96       	adiw	r26, 0x01	; 1
     be4:	06 c0       	rjmp	.+12     	; 0xbf2 <strtok_r+0x46>
     be6:	22 23       	and	r18, r18
     be8:	c1 f7       	brne	.-16     	; 0xbda <strtok_r+0x2e>
     bea:	0d 90       	ld	r0, X+
     bec:	00 20       	and	r0, r0
     bee:	a1 f7       	brne	.-24     	; 0xbd8 <strtok_r+0x2c>
     bf0:	d0 01       	movw	r26, r0
     bf2:	fa 01       	movw	r30, r20
     bf4:	a1 93       	st	Z+, r26
     bf6:	b0 83       	st	Z, r27
     bf8:	08 95       	ret

00000bfa <__mulhi_const_10>:
     bfa:	7a e0       	ldi	r23, 0x0A	; 10
     bfc:	97 9f       	mul	r25, r23
     bfe:	90 2d       	mov	r25, r0
     c00:	87 9f       	mul	r24, r23
     c02:	80 2d       	mov	r24, r0
     c04:	91 0d       	add	r25, r1
     c06:	11 24       	eor	r1, r1
     c08:	08 95       	ret

00000c0a <fgets>:
     c0a:	cf 92       	push	r12
     c0c:	df 92       	push	r13
     c0e:	ef 92       	push	r14
     c10:	ff 92       	push	r15
     c12:	0f 93       	push	r16
     c14:	1f 93       	push	r17
     c16:	cf 93       	push	r28
     c18:	df 93       	push	r29
     c1a:	8c 01       	movw	r16, r24
     c1c:	6a 01       	movw	r12, r20
     c1e:	fa 01       	movw	r30, r20
     c20:	83 81       	ldd	r24, Z+3	; 0x03
     c22:	80 ff       	sbrs	r24, 0
     c24:	1a c0       	rjmp	.+52     	; 0xc5a <fgets+0x50>
     c26:	16 16       	cp	r1, r22
     c28:	17 06       	cpc	r1, r23
     c2a:	bc f4       	brge	.+46     	; 0xc5a <fgets+0x50>
     c2c:	7b 01       	movw	r14, r22
     c2e:	e8 01       	movw	r28, r16
     c30:	0e c0       	rjmp	.+28     	; 0xc4e <fgets+0x44>
     c32:	c6 01       	movw	r24, r12
     c34:	0e 94 9d 08 	call	0x113a	; 0x113a <fgetc>
     c38:	ff ef       	ldi	r31, 0xFF	; 255
     c3a:	8f 3f       	cpi	r24, 0xFF	; 255
     c3c:	9f 07       	cpc	r25, r31
     c3e:	69 f0       	breq	.+26     	; 0xc5a <fgets+0x50>
     c40:	89 93       	st	Y+, r24
     c42:	08 94       	sec
     c44:	e1 08       	sbc	r14, r1
     c46:	f1 08       	sbc	r15, r1
     c48:	8a 30       	cpi	r24, 0x0A	; 10
     c4a:	91 05       	cpc	r25, r1
     c4c:	21 f0       	breq	.+8      	; 0xc56 <fgets+0x4c>
     c4e:	21 e0       	ldi	r18, 0x01	; 1
     c50:	e2 16       	cp	r14, r18
     c52:	f1 04       	cpc	r15, r1
     c54:	71 f7       	brne	.-36     	; 0xc32 <fgets+0x28>
     c56:	18 82       	st	Y, r1
     c58:	02 c0       	rjmp	.+4      	; 0xc5e <fgets+0x54>
     c5a:	00 e0       	ldi	r16, 0x00	; 0
     c5c:	10 e0       	ldi	r17, 0x00	; 0
     c5e:	c8 01       	movw	r24, r16
     c60:	df 91       	pop	r29
     c62:	cf 91       	pop	r28
     c64:	1f 91       	pop	r17
     c66:	0f 91       	pop	r16
     c68:	ff 90       	pop	r15
     c6a:	ef 90       	pop	r14
     c6c:	df 90       	pop	r13
     c6e:	cf 90       	pop	r12
     c70:	08 95       	ret

00000c72 <printf>:
     c72:	cf 93       	push	r28
     c74:	df 93       	push	r29
     c76:	cd b7       	in	r28, 0x3d	; 61
     c78:	de b7       	in	r29, 0x3e	; 62
     c7a:	fe 01       	movw	r30, r28
     c7c:	36 96       	adiw	r30, 0x06	; 6
     c7e:	61 91       	ld	r22, Z+
     c80:	71 91       	ld	r23, Z+
     c82:	80 91 1e 03 	lds	r24, 0x031E
     c86:	90 91 1f 03 	lds	r25, 0x031F
     c8a:	af 01       	movw	r20, r30
     c8c:	0e 94 80 06 	call	0xd00	; 0xd00 <vfprintf>
     c90:	df 91       	pop	r29
     c92:	cf 91       	pop	r28
     c94:	08 95       	ret

00000c96 <putchar>:
     c96:	60 91 1e 03 	lds	r22, 0x031E
     c9a:	70 91 1f 03 	lds	r23, 0x031F
     c9e:	0e 94 dd 08 	call	0x11ba	; 0x11ba <fputc>
     ca2:	08 95       	ret

00000ca4 <puts>:
     ca4:	0f 93       	push	r16
     ca6:	1f 93       	push	r17
     ca8:	cf 93       	push	r28
     caa:	df 93       	push	r29
     cac:	8c 01       	movw	r16, r24
     cae:	e0 91 1e 03 	lds	r30, 0x031E
     cb2:	f0 91 1f 03 	lds	r31, 0x031F
     cb6:	83 81       	ldd	r24, Z+3	; 0x03
     cb8:	81 ff       	sbrs	r24, 1
     cba:	1a c0       	rjmp	.+52     	; 0xcf0 <puts+0x4c>
     cbc:	c0 e0       	ldi	r28, 0x00	; 0
     cbe:	d0 e0       	ldi	r29, 0x00	; 0
     cc0:	05 c0       	rjmp	.+10     	; 0xccc <puts+0x28>
     cc2:	19 95       	eicall
     cc4:	00 97       	sbiw	r24, 0x00	; 0
     cc6:	11 f0       	breq	.+4      	; 0xccc <puts+0x28>
     cc8:	cf ef       	ldi	r28, 0xFF	; 255
     cca:	df ef       	ldi	r29, 0xFF	; 255
     ccc:	f8 01       	movw	r30, r16
     cce:	81 91       	ld	r24, Z+
     cd0:	8f 01       	movw	r16, r30
     cd2:	60 91 1e 03 	lds	r22, 0x031E
     cd6:	70 91 1f 03 	lds	r23, 0x031F
     cda:	db 01       	movw	r26, r22
     cdc:	18 96       	adiw	r26, 0x08	; 8
     cde:	ed 91       	ld	r30, X+
     ce0:	fc 91       	ld	r31, X
     ce2:	19 97       	sbiw	r26, 0x09	; 9
     ce4:	88 23       	and	r24, r24
     ce6:	69 f7       	brne	.-38     	; 0xcc2 <puts+0x1e>
     ce8:	8a e0       	ldi	r24, 0x0A	; 10
     cea:	19 95       	eicall
     cec:	00 97       	sbiw	r24, 0x00	; 0
     cee:	11 f0       	breq	.+4      	; 0xcf4 <puts+0x50>
     cf0:	cf ef       	ldi	r28, 0xFF	; 255
     cf2:	df ef       	ldi	r29, 0xFF	; 255
     cf4:	ce 01       	movw	r24, r28
     cf6:	df 91       	pop	r29
     cf8:	cf 91       	pop	r28
     cfa:	1f 91       	pop	r17
     cfc:	0f 91       	pop	r16
     cfe:	08 95       	ret

00000d00 <vfprintf>:
     d00:	2f 92       	push	r2
     d02:	3f 92       	push	r3
     d04:	4f 92       	push	r4
     d06:	5f 92       	push	r5
     d08:	6f 92       	push	r6
     d0a:	7f 92       	push	r7
     d0c:	8f 92       	push	r8
     d0e:	9f 92       	push	r9
     d10:	af 92       	push	r10
     d12:	bf 92       	push	r11
     d14:	cf 92       	push	r12
     d16:	df 92       	push	r13
     d18:	ef 92       	push	r14
     d1a:	ff 92       	push	r15
     d1c:	0f 93       	push	r16
     d1e:	1f 93       	push	r17
     d20:	cf 93       	push	r28
     d22:	df 93       	push	r29
     d24:	cd b7       	in	r28, 0x3d	; 61
     d26:	de b7       	in	r29, 0x3e	; 62
     d28:	2d 97       	sbiw	r28, 0x0d	; 13
     d2a:	0f b6       	in	r0, 0x3f	; 63
     d2c:	f8 94       	cli
     d2e:	de bf       	out	0x3e, r29	; 62
     d30:	0f be       	out	0x3f, r0	; 63
     d32:	cd bf       	out	0x3d, r28	; 61
     d34:	3c 01       	movw	r6, r24
     d36:	7d 87       	std	Y+13, r23	; 0x0d
     d38:	6c 87       	std	Y+12, r22	; 0x0c
     d3a:	5a 01       	movw	r10, r20
     d3c:	fc 01       	movw	r30, r24
     d3e:	17 82       	std	Z+7, r1	; 0x07
     d40:	16 82       	std	Z+6, r1	; 0x06
     d42:	83 81       	ldd	r24, Z+3	; 0x03
     d44:	81 ff       	sbrs	r24, 1
     d46:	c8 c1       	rjmp	.+912    	; 0x10d8 <vfprintf+0x3d8>
     d48:	2e 01       	movw	r4, r28
     d4a:	08 94       	sec
     d4c:	41 1c       	adc	r4, r1
     d4e:	51 1c       	adc	r5, r1
     d50:	f3 01       	movw	r30, r6
     d52:	93 81       	ldd	r25, Z+3	; 0x03
     d54:	ec 85       	ldd	r30, Y+12	; 0x0c
     d56:	fd 85       	ldd	r31, Y+13	; 0x0d
     d58:	93 fd       	sbrc	r25, 3
     d5a:	85 91       	lpm	r24, Z+
     d5c:	93 ff       	sbrs	r25, 3
     d5e:	81 91       	ld	r24, Z+
     d60:	fd 87       	std	Y+13, r31	; 0x0d
     d62:	ec 87       	std	Y+12, r30	; 0x0c
     d64:	88 23       	and	r24, r24
     d66:	09 f4       	brne	.+2      	; 0xd6a <vfprintf+0x6a>
     d68:	b3 c1       	rjmp	.+870    	; 0x10d0 <vfprintf+0x3d0>
     d6a:	85 32       	cpi	r24, 0x25	; 37
     d6c:	41 f4       	brne	.+16     	; 0xd7e <vfprintf+0x7e>
     d6e:	93 fd       	sbrc	r25, 3
     d70:	85 91       	lpm	r24, Z+
     d72:	93 ff       	sbrs	r25, 3
     d74:	81 91       	ld	r24, Z+
     d76:	fd 87       	std	Y+13, r31	; 0x0d
     d78:	ec 87       	std	Y+12, r30	; 0x0c
     d7a:	85 32       	cpi	r24, 0x25	; 37
     d7c:	29 f4       	brne	.+10     	; 0xd88 <vfprintf+0x88>
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	b3 01       	movw	r22, r6
     d82:	0e 94 dd 08 	call	0x11ba	; 0x11ba <fputc>
     d86:	e4 cf       	rjmp	.-56     	; 0xd50 <vfprintf+0x50>
     d88:	ff 24       	eor	r15, r15
     d8a:	ee 24       	eor	r14, r14
     d8c:	10 e0       	ldi	r17, 0x00	; 0
     d8e:	10 32       	cpi	r17, 0x20	; 32
     d90:	b0 f4       	brcc	.+44     	; 0xdbe <vfprintf+0xbe>
     d92:	8b 32       	cpi	r24, 0x2B	; 43
     d94:	69 f0       	breq	.+26     	; 0xdb0 <vfprintf+0xb0>
     d96:	8c 32       	cpi	r24, 0x2C	; 44
     d98:	28 f4       	brcc	.+10     	; 0xda4 <vfprintf+0xa4>
     d9a:	80 32       	cpi	r24, 0x20	; 32
     d9c:	51 f0       	breq	.+20     	; 0xdb2 <vfprintf+0xb2>
     d9e:	83 32       	cpi	r24, 0x23	; 35
     da0:	71 f4       	brne	.+28     	; 0xdbe <vfprintf+0xbe>
     da2:	0b c0       	rjmp	.+22     	; 0xdba <vfprintf+0xba>
     da4:	8d 32       	cpi	r24, 0x2D	; 45
     da6:	39 f0       	breq	.+14     	; 0xdb6 <vfprintf+0xb6>
     da8:	80 33       	cpi	r24, 0x30	; 48
     daa:	49 f4       	brne	.+18     	; 0xdbe <vfprintf+0xbe>
     dac:	11 60       	ori	r17, 0x01	; 1
     dae:	2c c0       	rjmp	.+88     	; 0xe08 <vfprintf+0x108>
     db0:	12 60       	ori	r17, 0x02	; 2
     db2:	14 60       	ori	r17, 0x04	; 4
     db4:	29 c0       	rjmp	.+82     	; 0xe08 <vfprintf+0x108>
     db6:	18 60       	ori	r17, 0x08	; 8
     db8:	27 c0       	rjmp	.+78     	; 0xe08 <vfprintf+0x108>
     dba:	10 61       	ori	r17, 0x10	; 16
     dbc:	25 c0       	rjmp	.+74     	; 0xe08 <vfprintf+0x108>
     dbe:	17 fd       	sbrc	r17, 7
     dc0:	2e c0       	rjmp	.+92     	; 0xe1e <vfprintf+0x11e>
     dc2:	28 2f       	mov	r18, r24
     dc4:	20 53       	subi	r18, 0x30	; 48
     dc6:	2a 30       	cpi	r18, 0x0A	; 10
     dc8:	98 f4       	brcc	.+38     	; 0xdf0 <vfprintf+0xf0>
     dca:	16 ff       	sbrs	r17, 6
     dcc:	08 c0       	rjmp	.+16     	; 0xdde <vfprintf+0xde>
     dce:	8f 2d       	mov	r24, r15
     dd0:	88 0f       	add	r24, r24
     dd2:	f8 2e       	mov	r15, r24
     dd4:	ff 0c       	add	r15, r15
     dd6:	ff 0c       	add	r15, r15
     dd8:	f8 0e       	add	r15, r24
     dda:	f2 0e       	add	r15, r18
     ddc:	15 c0       	rjmp	.+42     	; 0xe08 <vfprintf+0x108>
     dde:	8e 2d       	mov	r24, r14
     de0:	88 0f       	add	r24, r24
     de2:	e8 2e       	mov	r14, r24
     de4:	ee 0c       	add	r14, r14
     de6:	ee 0c       	add	r14, r14
     de8:	e8 0e       	add	r14, r24
     dea:	e2 0e       	add	r14, r18
     dec:	10 62       	ori	r17, 0x20	; 32
     dee:	0c c0       	rjmp	.+24     	; 0xe08 <vfprintf+0x108>
     df0:	8e 32       	cpi	r24, 0x2E	; 46
     df2:	21 f4       	brne	.+8      	; 0xdfc <vfprintf+0xfc>
     df4:	16 fd       	sbrc	r17, 6
     df6:	6c c1       	rjmp	.+728    	; 0x10d0 <vfprintf+0x3d0>
     df8:	10 64       	ori	r17, 0x40	; 64
     dfa:	06 c0       	rjmp	.+12     	; 0xe08 <vfprintf+0x108>
     dfc:	8c 36       	cpi	r24, 0x6C	; 108
     dfe:	11 f4       	brne	.+4      	; 0xe04 <vfprintf+0x104>
     e00:	10 68       	ori	r17, 0x80	; 128
     e02:	02 c0       	rjmp	.+4      	; 0xe08 <vfprintf+0x108>
     e04:	88 36       	cpi	r24, 0x68	; 104
     e06:	59 f4       	brne	.+22     	; 0xe1e <vfprintf+0x11e>
     e08:	ec 85       	ldd	r30, Y+12	; 0x0c
     e0a:	fd 85       	ldd	r31, Y+13	; 0x0d
     e0c:	93 fd       	sbrc	r25, 3
     e0e:	85 91       	lpm	r24, Z+
     e10:	93 ff       	sbrs	r25, 3
     e12:	81 91       	ld	r24, Z+
     e14:	fd 87       	std	Y+13, r31	; 0x0d
     e16:	ec 87       	std	Y+12, r30	; 0x0c
     e18:	88 23       	and	r24, r24
     e1a:	09 f0       	breq	.+2      	; 0xe1e <vfprintf+0x11e>
     e1c:	b8 cf       	rjmp	.-144    	; 0xd8e <vfprintf+0x8e>
     e1e:	98 2f       	mov	r25, r24
     e20:	95 54       	subi	r25, 0x45	; 69
     e22:	93 30       	cpi	r25, 0x03	; 3
     e24:	18 f0       	brcs	.+6      	; 0xe2c <vfprintf+0x12c>
     e26:	90 52       	subi	r25, 0x20	; 32
     e28:	93 30       	cpi	r25, 0x03	; 3
     e2a:	38 f4       	brcc	.+14     	; 0xe3a <vfprintf+0x13a>
     e2c:	24 e0       	ldi	r18, 0x04	; 4
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	a2 0e       	add	r10, r18
     e32:	b3 1e       	adc	r11, r19
     e34:	3f e3       	ldi	r19, 0x3F	; 63
     e36:	39 83       	std	Y+1, r19	; 0x01
     e38:	0f c0       	rjmp	.+30     	; 0xe58 <vfprintf+0x158>
     e3a:	83 36       	cpi	r24, 0x63	; 99
     e3c:	31 f0       	breq	.+12     	; 0xe4a <vfprintf+0x14a>
     e3e:	83 37       	cpi	r24, 0x73	; 115
     e40:	81 f0       	breq	.+32     	; 0xe62 <vfprintf+0x162>
     e42:	83 35       	cpi	r24, 0x53	; 83
     e44:	09 f0       	breq	.+2      	; 0xe48 <vfprintf+0x148>
     e46:	5a c0       	rjmp	.+180    	; 0xefc <vfprintf+0x1fc>
     e48:	22 c0       	rjmp	.+68     	; 0xe8e <vfprintf+0x18e>
     e4a:	f5 01       	movw	r30, r10
     e4c:	80 81       	ld	r24, Z
     e4e:	89 83       	std	Y+1, r24	; 0x01
     e50:	22 e0       	ldi	r18, 0x02	; 2
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	a2 0e       	add	r10, r18
     e56:	b3 1e       	adc	r11, r19
     e58:	21 e0       	ldi	r18, 0x01	; 1
     e5a:	c2 2e       	mov	r12, r18
     e5c:	d1 2c       	mov	r13, r1
     e5e:	42 01       	movw	r8, r4
     e60:	14 c0       	rjmp	.+40     	; 0xe8a <vfprintf+0x18a>
     e62:	92 e0       	ldi	r25, 0x02	; 2
     e64:	29 2e       	mov	r2, r25
     e66:	31 2c       	mov	r3, r1
     e68:	2a 0c       	add	r2, r10
     e6a:	3b 1c       	adc	r3, r11
     e6c:	f5 01       	movw	r30, r10
     e6e:	80 80       	ld	r8, Z
     e70:	91 80       	ldd	r9, Z+1	; 0x01
     e72:	16 ff       	sbrs	r17, 6
     e74:	03 c0       	rjmp	.+6      	; 0xe7c <vfprintf+0x17c>
     e76:	6f 2d       	mov	r22, r15
     e78:	70 e0       	ldi	r23, 0x00	; 0
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <vfprintf+0x180>
     e7c:	6f ef       	ldi	r22, 0xFF	; 255
     e7e:	7f ef       	ldi	r23, 0xFF	; 255
     e80:	c4 01       	movw	r24, r8
     e82:	0e 94 92 08 	call	0x1124	; 0x1124 <strnlen>
     e86:	6c 01       	movw	r12, r24
     e88:	51 01       	movw	r10, r2
     e8a:	1f 77       	andi	r17, 0x7F	; 127
     e8c:	15 c0       	rjmp	.+42     	; 0xeb8 <vfprintf+0x1b8>
     e8e:	82 e0       	ldi	r24, 0x02	; 2
     e90:	28 2e       	mov	r2, r24
     e92:	31 2c       	mov	r3, r1
     e94:	2a 0c       	add	r2, r10
     e96:	3b 1c       	adc	r3, r11
     e98:	f5 01       	movw	r30, r10
     e9a:	80 80       	ld	r8, Z
     e9c:	91 80       	ldd	r9, Z+1	; 0x01
     e9e:	16 ff       	sbrs	r17, 6
     ea0:	03 c0       	rjmp	.+6      	; 0xea8 <vfprintf+0x1a8>
     ea2:	6f 2d       	mov	r22, r15
     ea4:	70 e0       	ldi	r23, 0x00	; 0
     ea6:	02 c0       	rjmp	.+4      	; 0xeac <vfprintf+0x1ac>
     ea8:	6f ef       	ldi	r22, 0xFF	; 255
     eaa:	7f ef       	ldi	r23, 0xFF	; 255
     eac:	c4 01       	movw	r24, r8
     eae:	0e 94 87 08 	call	0x110e	; 0x110e <strnlen_P>
     eb2:	6c 01       	movw	r12, r24
     eb4:	10 68       	ori	r17, 0x80	; 128
     eb6:	51 01       	movw	r10, r2
     eb8:	13 fd       	sbrc	r17, 3
     eba:	1c c0       	rjmp	.+56     	; 0xef4 <vfprintf+0x1f4>
     ebc:	06 c0       	rjmp	.+12     	; 0xeca <vfprintf+0x1ca>
     ebe:	80 e2       	ldi	r24, 0x20	; 32
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	b3 01       	movw	r22, r6
     ec4:	0e 94 dd 08 	call	0x11ba	; 0x11ba <fputc>
     ec8:	ea 94       	dec	r14
     eca:	8e 2d       	mov	r24, r14
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	c8 16       	cp	r12, r24
     ed0:	d9 06       	cpc	r13, r25
     ed2:	a8 f3       	brcs	.-22     	; 0xebe <vfprintf+0x1be>
     ed4:	0f c0       	rjmp	.+30     	; 0xef4 <vfprintf+0x1f4>
     ed6:	f4 01       	movw	r30, r8
     ed8:	17 fd       	sbrc	r17, 7
     eda:	85 91       	lpm	r24, Z+
     edc:	17 ff       	sbrs	r17, 7
     ede:	81 91       	ld	r24, Z+
     ee0:	4f 01       	movw	r8, r30
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	b3 01       	movw	r22, r6
     ee6:	0e 94 dd 08 	call	0x11ba	; 0x11ba <fputc>
     eea:	e1 10       	cpse	r14, r1
     eec:	ea 94       	dec	r14
     eee:	08 94       	sec
     ef0:	c1 08       	sbc	r12, r1
     ef2:	d1 08       	sbc	r13, r1
     ef4:	c1 14       	cp	r12, r1
     ef6:	d1 04       	cpc	r13, r1
     ef8:	71 f7       	brne	.-36     	; 0xed6 <vfprintf+0x1d6>
     efa:	e7 c0       	rjmp	.+462    	; 0x10ca <vfprintf+0x3ca>
     efc:	84 36       	cpi	r24, 0x64	; 100
     efe:	11 f0       	breq	.+4      	; 0xf04 <vfprintf+0x204>
     f00:	89 36       	cpi	r24, 0x69	; 105
     f02:	51 f5       	brne	.+84     	; 0xf58 <vfprintf+0x258>
     f04:	f5 01       	movw	r30, r10
     f06:	17 ff       	sbrs	r17, 7
     f08:	07 c0       	rjmp	.+14     	; 0xf18 <vfprintf+0x218>
     f0a:	80 81       	ld	r24, Z
     f0c:	91 81       	ldd	r25, Z+1	; 0x01
     f0e:	a2 81       	ldd	r26, Z+2	; 0x02
     f10:	b3 81       	ldd	r27, Z+3	; 0x03
     f12:	24 e0       	ldi	r18, 0x04	; 4
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	08 c0       	rjmp	.+16     	; 0xf28 <vfprintf+0x228>
     f18:	80 81       	ld	r24, Z
     f1a:	91 81       	ldd	r25, Z+1	; 0x01
     f1c:	aa 27       	eor	r26, r26
     f1e:	97 fd       	sbrc	r25, 7
     f20:	a0 95       	com	r26
     f22:	ba 2f       	mov	r27, r26
     f24:	22 e0       	ldi	r18, 0x02	; 2
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	a2 0e       	add	r10, r18
     f2a:	b3 1e       	adc	r11, r19
     f2c:	01 2f       	mov	r16, r17
     f2e:	0f 76       	andi	r16, 0x6F	; 111
     f30:	b7 ff       	sbrs	r27, 7
     f32:	08 c0       	rjmp	.+16     	; 0xf44 <vfprintf+0x244>
     f34:	b0 95       	com	r27
     f36:	a0 95       	com	r26
     f38:	90 95       	com	r25
     f3a:	81 95       	neg	r24
     f3c:	9f 4f       	sbci	r25, 0xFF	; 255
     f3e:	af 4f       	sbci	r26, 0xFF	; 255
     f40:	bf 4f       	sbci	r27, 0xFF	; 255
     f42:	00 68       	ori	r16, 0x80	; 128
     f44:	bc 01       	movw	r22, r24
     f46:	cd 01       	movw	r24, r26
     f48:	a2 01       	movw	r20, r4
     f4a:	2a e0       	ldi	r18, 0x0A	; 10
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	0e 94 09 09 	call	0x1212	; 0x1212 <__ultoa_invert>
     f52:	d8 2e       	mov	r13, r24
     f54:	d4 18       	sub	r13, r4
     f56:	3f c0       	rjmp	.+126    	; 0xfd6 <vfprintf+0x2d6>
     f58:	85 37       	cpi	r24, 0x75	; 117
     f5a:	21 f4       	brne	.+8      	; 0xf64 <vfprintf+0x264>
     f5c:	1f 7e       	andi	r17, 0xEF	; 239
     f5e:	2a e0       	ldi	r18, 0x0A	; 10
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	20 c0       	rjmp	.+64     	; 0xfa4 <vfprintf+0x2a4>
     f64:	19 7f       	andi	r17, 0xF9	; 249
     f66:	8f 36       	cpi	r24, 0x6F	; 111
     f68:	a9 f0       	breq	.+42     	; 0xf94 <vfprintf+0x294>
     f6a:	80 37       	cpi	r24, 0x70	; 112
     f6c:	20 f4       	brcc	.+8      	; 0xf76 <vfprintf+0x276>
     f6e:	88 35       	cpi	r24, 0x58	; 88
     f70:	09 f0       	breq	.+2      	; 0xf74 <vfprintf+0x274>
     f72:	ae c0       	rjmp	.+348    	; 0x10d0 <vfprintf+0x3d0>
     f74:	0b c0       	rjmp	.+22     	; 0xf8c <vfprintf+0x28c>
     f76:	80 37       	cpi	r24, 0x70	; 112
     f78:	21 f0       	breq	.+8      	; 0xf82 <vfprintf+0x282>
     f7a:	88 37       	cpi	r24, 0x78	; 120
     f7c:	09 f0       	breq	.+2      	; 0xf80 <vfprintf+0x280>
     f7e:	a8 c0       	rjmp	.+336    	; 0x10d0 <vfprintf+0x3d0>
     f80:	01 c0       	rjmp	.+2      	; 0xf84 <vfprintf+0x284>
     f82:	10 61       	ori	r17, 0x10	; 16
     f84:	14 ff       	sbrs	r17, 4
     f86:	09 c0       	rjmp	.+18     	; 0xf9a <vfprintf+0x29a>
     f88:	14 60       	ori	r17, 0x04	; 4
     f8a:	07 c0       	rjmp	.+14     	; 0xf9a <vfprintf+0x29a>
     f8c:	14 ff       	sbrs	r17, 4
     f8e:	08 c0       	rjmp	.+16     	; 0xfa0 <vfprintf+0x2a0>
     f90:	16 60       	ori	r17, 0x06	; 6
     f92:	06 c0       	rjmp	.+12     	; 0xfa0 <vfprintf+0x2a0>
     f94:	28 e0       	ldi	r18, 0x08	; 8
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	05 c0       	rjmp	.+10     	; 0xfa4 <vfprintf+0x2a4>
     f9a:	20 e1       	ldi	r18, 0x10	; 16
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	02 c0       	rjmp	.+4      	; 0xfa4 <vfprintf+0x2a4>
     fa0:	20 e1       	ldi	r18, 0x10	; 16
     fa2:	32 e0       	ldi	r19, 0x02	; 2
     fa4:	f5 01       	movw	r30, r10
     fa6:	17 ff       	sbrs	r17, 7
     fa8:	07 c0       	rjmp	.+14     	; 0xfb8 <vfprintf+0x2b8>
     faa:	60 81       	ld	r22, Z
     fac:	71 81       	ldd	r23, Z+1	; 0x01
     fae:	82 81       	ldd	r24, Z+2	; 0x02
     fb0:	93 81       	ldd	r25, Z+3	; 0x03
     fb2:	44 e0       	ldi	r20, 0x04	; 4
     fb4:	50 e0       	ldi	r21, 0x00	; 0
     fb6:	06 c0       	rjmp	.+12     	; 0xfc4 <vfprintf+0x2c4>
     fb8:	60 81       	ld	r22, Z
     fba:	71 81       	ldd	r23, Z+1	; 0x01
     fbc:	80 e0       	ldi	r24, 0x00	; 0
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	42 e0       	ldi	r20, 0x02	; 2
     fc2:	50 e0       	ldi	r21, 0x00	; 0
     fc4:	a4 0e       	add	r10, r20
     fc6:	b5 1e       	adc	r11, r21
     fc8:	a2 01       	movw	r20, r4
     fca:	0e 94 09 09 	call	0x1212	; 0x1212 <__ultoa_invert>
     fce:	d8 2e       	mov	r13, r24
     fd0:	d4 18       	sub	r13, r4
     fd2:	01 2f       	mov	r16, r17
     fd4:	0f 77       	andi	r16, 0x7F	; 127
     fd6:	06 ff       	sbrs	r16, 6
     fd8:	09 c0       	rjmp	.+18     	; 0xfec <vfprintf+0x2ec>
     fda:	0e 7f       	andi	r16, 0xFE	; 254
     fdc:	df 14       	cp	r13, r15
     fde:	30 f4       	brcc	.+12     	; 0xfec <vfprintf+0x2ec>
     fe0:	04 ff       	sbrs	r16, 4
     fe2:	06 c0       	rjmp	.+12     	; 0xff0 <vfprintf+0x2f0>
     fe4:	02 fd       	sbrc	r16, 2
     fe6:	04 c0       	rjmp	.+8      	; 0xff0 <vfprintf+0x2f0>
     fe8:	0f 7e       	andi	r16, 0xEF	; 239
     fea:	02 c0       	rjmp	.+4      	; 0xff0 <vfprintf+0x2f0>
     fec:	1d 2d       	mov	r17, r13
     fee:	01 c0       	rjmp	.+2      	; 0xff2 <vfprintf+0x2f2>
     ff0:	1f 2d       	mov	r17, r15
     ff2:	80 2f       	mov	r24, r16
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	04 ff       	sbrs	r16, 4
     ff8:	0c c0       	rjmp	.+24     	; 0x1012 <vfprintf+0x312>
     ffa:	fe 01       	movw	r30, r28
     ffc:	ed 0d       	add	r30, r13
     ffe:	f1 1d       	adc	r31, r1
    1000:	20 81       	ld	r18, Z
    1002:	20 33       	cpi	r18, 0x30	; 48
    1004:	11 f4       	brne	.+4      	; 0x100a <vfprintf+0x30a>
    1006:	09 7e       	andi	r16, 0xE9	; 233
    1008:	09 c0       	rjmp	.+18     	; 0x101c <vfprintf+0x31c>
    100a:	02 ff       	sbrs	r16, 2
    100c:	06 c0       	rjmp	.+12     	; 0x101a <vfprintf+0x31a>
    100e:	1e 5f       	subi	r17, 0xFE	; 254
    1010:	05 c0       	rjmp	.+10     	; 0x101c <vfprintf+0x31c>
    1012:	86 78       	andi	r24, 0x86	; 134
    1014:	90 70       	andi	r25, 0x00	; 0
    1016:	00 97       	sbiw	r24, 0x00	; 0
    1018:	09 f0       	breq	.+2      	; 0x101c <vfprintf+0x31c>
    101a:	1f 5f       	subi	r17, 0xFF	; 255
    101c:	80 2e       	mov	r8, r16
    101e:	99 24       	eor	r9, r9
    1020:	03 fd       	sbrc	r16, 3
    1022:	12 c0       	rjmp	.+36     	; 0x1048 <vfprintf+0x348>
    1024:	00 ff       	sbrs	r16, 0
    1026:	0d c0       	rjmp	.+26     	; 0x1042 <vfprintf+0x342>
    1028:	fd 2c       	mov	r15, r13
    102a:	1e 15       	cp	r17, r14
    102c:	50 f4       	brcc	.+20     	; 0x1042 <vfprintf+0x342>
    102e:	fe 0c       	add	r15, r14
    1030:	f1 1a       	sub	r15, r17
    1032:	1e 2d       	mov	r17, r14
    1034:	06 c0       	rjmp	.+12     	; 0x1042 <vfprintf+0x342>
    1036:	80 e2       	ldi	r24, 0x20	; 32
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	b3 01       	movw	r22, r6
    103c:	0e 94 dd 08 	call	0x11ba	; 0x11ba <fputc>
    1040:	1f 5f       	subi	r17, 0xFF	; 255
    1042:	1e 15       	cp	r17, r14
    1044:	c0 f3       	brcs	.-16     	; 0x1036 <vfprintf+0x336>
    1046:	04 c0       	rjmp	.+8      	; 0x1050 <vfprintf+0x350>
    1048:	1e 15       	cp	r17, r14
    104a:	10 f4       	brcc	.+4      	; 0x1050 <vfprintf+0x350>
    104c:	e1 1a       	sub	r14, r17
    104e:	01 c0       	rjmp	.+2      	; 0x1052 <vfprintf+0x352>
    1050:	ee 24       	eor	r14, r14
    1052:	84 fe       	sbrs	r8, 4
    1054:	0f c0       	rjmp	.+30     	; 0x1074 <vfprintf+0x374>
    1056:	80 e3       	ldi	r24, 0x30	; 48
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	b3 01       	movw	r22, r6
    105c:	0e 94 dd 08 	call	0x11ba	; 0x11ba <fputc>
    1060:	82 fe       	sbrs	r8, 2
    1062:	1f c0       	rjmp	.+62     	; 0x10a2 <vfprintf+0x3a2>
    1064:	81 fe       	sbrs	r8, 1
    1066:	03 c0       	rjmp	.+6      	; 0x106e <vfprintf+0x36e>
    1068:	88 e5       	ldi	r24, 0x58	; 88
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	10 c0       	rjmp	.+32     	; 0x108e <vfprintf+0x38e>
    106e:	88 e7       	ldi	r24, 0x78	; 120
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	0d c0       	rjmp	.+26     	; 0x108e <vfprintf+0x38e>
    1074:	c4 01       	movw	r24, r8
    1076:	86 78       	andi	r24, 0x86	; 134
    1078:	90 70       	andi	r25, 0x00	; 0
    107a:	00 97       	sbiw	r24, 0x00	; 0
    107c:	91 f0       	breq	.+36     	; 0x10a2 <vfprintf+0x3a2>
    107e:	81 fc       	sbrc	r8, 1
    1080:	02 c0       	rjmp	.+4      	; 0x1086 <vfprintf+0x386>
    1082:	80 e2       	ldi	r24, 0x20	; 32
    1084:	01 c0       	rjmp	.+2      	; 0x1088 <vfprintf+0x388>
    1086:	8b e2       	ldi	r24, 0x2B	; 43
    1088:	07 fd       	sbrc	r16, 7
    108a:	8d e2       	ldi	r24, 0x2D	; 45
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	b3 01       	movw	r22, r6
    1090:	0e 94 dd 08 	call	0x11ba	; 0x11ba <fputc>
    1094:	06 c0       	rjmp	.+12     	; 0x10a2 <vfprintf+0x3a2>
    1096:	80 e3       	ldi	r24, 0x30	; 48
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	b3 01       	movw	r22, r6
    109c:	0e 94 dd 08 	call	0x11ba	; 0x11ba <fputc>
    10a0:	fa 94       	dec	r15
    10a2:	df 14       	cp	r13, r15
    10a4:	c0 f3       	brcs	.-16     	; 0x1096 <vfprintf+0x396>
    10a6:	da 94       	dec	r13
    10a8:	f2 01       	movw	r30, r4
    10aa:	ed 0d       	add	r30, r13
    10ac:	f1 1d       	adc	r31, r1
    10ae:	80 81       	ld	r24, Z
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	b3 01       	movw	r22, r6
    10b4:	0e 94 dd 08 	call	0x11ba	; 0x11ba <fputc>
    10b8:	dd 20       	and	r13, r13
    10ba:	a9 f7       	brne	.-22     	; 0x10a6 <vfprintf+0x3a6>
    10bc:	06 c0       	rjmp	.+12     	; 0x10ca <vfprintf+0x3ca>
    10be:	80 e2       	ldi	r24, 0x20	; 32
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	b3 01       	movw	r22, r6
    10c4:	0e 94 dd 08 	call	0x11ba	; 0x11ba <fputc>
    10c8:	ea 94       	dec	r14
    10ca:	ee 20       	and	r14, r14
    10cc:	c1 f7       	brne	.-16     	; 0x10be <vfprintf+0x3be>
    10ce:	40 ce       	rjmp	.-896    	; 0xd50 <vfprintf+0x50>
    10d0:	f3 01       	movw	r30, r6
    10d2:	86 81       	ldd	r24, Z+6	; 0x06
    10d4:	97 81       	ldd	r25, Z+7	; 0x07
    10d6:	02 c0       	rjmp	.+4      	; 0x10dc <vfprintf+0x3dc>
    10d8:	8f ef       	ldi	r24, 0xFF	; 255
    10da:	9f ef       	ldi	r25, 0xFF	; 255
    10dc:	2d 96       	adiw	r28, 0x0d	; 13
    10de:	0f b6       	in	r0, 0x3f	; 63
    10e0:	f8 94       	cli
    10e2:	de bf       	out	0x3e, r29	; 62
    10e4:	0f be       	out	0x3f, r0	; 63
    10e6:	cd bf       	out	0x3d, r28	; 61
    10e8:	df 91       	pop	r29
    10ea:	cf 91       	pop	r28
    10ec:	1f 91       	pop	r17
    10ee:	0f 91       	pop	r16
    10f0:	ff 90       	pop	r15
    10f2:	ef 90       	pop	r14
    10f4:	df 90       	pop	r13
    10f6:	cf 90       	pop	r12
    10f8:	bf 90       	pop	r11
    10fa:	af 90       	pop	r10
    10fc:	9f 90       	pop	r9
    10fe:	8f 90       	pop	r8
    1100:	7f 90       	pop	r7
    1102:	6f 90       	pop	r6
    1104:	5f 90       	pop	r5
    1106:	4f 90       	pop	r4
    1108:	3f 90       	pop	r3
    110a:	2f 90       	pop	r2
    110c:	08 95       	ret

0000110e <strnlen_P>:
    110e:	fc 01       	movw	r30, r24
    1110:	05 90       	lpm	r0, Z+
    1112:	61 50       	subi	r22, 0x01	; 1
    1114:	70 40       	sbci	r23, 0x00	; 0
    1116:	01 10       	cpse	r0, r1
    1118:	d8 f7       	brcc	.-10     	; 0x1110 <strnlen_P+0x2>
    111a:	80 95       	com	r24
    111c:	90 95       	com	r25
    111e:	8e 0f       	add	r24, r30
    1120:	9f 1f       	adc	r25, r31
    1122:	08 95       	ret

00001124 <strnlen>:
    1124:	fc 01       	movw	r30, r24
    1126:	61 50       	subi	r22, 0x01	; 1
    1128:	70 40       	sbci	r23, 0x00	; 0
    112a:	01 90       	ld	r0, Z+
    112c:	01 10       	cpse	r0, r1
    112e:	d8 f7       	brcc	.-10     	; 0x1126 <strnlen+0x2>
    1130:	80 95       	com	r24
    1132:	90 95       	com	r25
    1134:	8e 0f       	add	r24, r30
    1136:	9f 1f       	adc	r25, r31
    1138:	08 95       	ret

0000113a <fgetc>:
    113a:	cf 93       	push	r28
    113c:	df 93       	push	r29
    113e:	ec 01       	movw	r28, r24
    1140:	2b 81       	ldd	r18, Y+3	; 0x03
    1142:	20 ff       	sbrs	r18, 0
    1144:	35 c0       	rjmp	.+106    	; 0x11b0 <fgetc+0x76>
    1146:	26 ff       	sbrs	r18, 6
    1148:	09 c0       	rjmp	.+18     	; 0x115c <fgetc+0x22>
    114a:	2f 7b       	andi	r18, 0xBF	; 191
    114c:	2b 83       	std	Y+3, r18	; 0x03
    114e:	8e 81       	ldd	r24, Y+6	; 0x06
    1150:	9f 81       	ldd	r25, Y+7	; 0x07
    1152:	01 96       	adiw	r24, 0x01	; 1
    1154:	9f 83       	std	Y+7, r25	; 0x07
    1156:	8e 83       	std	Y+6, r24	; 0x06
    1158:	8a 81       	ldd	r24, Y+2	; 0x02
    115a:	28 c0       	rjmp	.+80     	; 0x11ac <fgetc+0x72>
    115c:	22 ff       	sbrs	r18, 2
    115e:	0f c0       	rjmp	.+30     	; 0x117e <fgetc+0x44>
    1160:	e8 81       	ld	r30, Y
    1162:	f9 81       	ldd	r31, Y+1	; 0x01
    1164:	80 81       	ld	r24, Z
    1166:	99 27       	eor	r25, r25
    1168:	87 fd       	sbrc	r24, 7
    116a:	90 95       	com	r25
    116c:	00 97       	sbiw	r24, 0x00	; 0
    116e:	19 f4       	brne	.+6      	; 0x1176 <fgetc+0x3c>
    1170:	20 62       	ori	r18, 0x20	; 32
    1172:	2b 83       	std	Y+3, r18	; 0x03
    1174:	1d c0       	rjmp	.+58     	; 0x11b0 <fgetc+0x76>
    1176:	31 96       	adiw	r30, 0x01	; 1
    1178:	f9 83       	std	Y+1, r31	; 0x01
    117a:	e8 83       	st	Y, r30
    117c:	11 c0       	rjmp	.+34     	; 0x11a0 <fgetc+0x66>
    117e:	ea 85       	ldd	r30, Y+10	; 0x0a
    1180:	fb 85       	ldd	r31, Y+11	; 0x0b
    1182:	ce 01       	movw	r24, r28
    1184:	19 95       	eicall
    1186:	97 ff       	sbrs	r25, 7
    1188:	0b c0       	rjmp	.+22     	; 0x11a0 <fgetc+0x66>
    118a:	2b 81       	ldd	r18, Y+3	; 0x03
    118c:	3f ef       	ldi	r19, 0xFF	; 255
    118e:	8f 3f       	cpi	r24, 0xFF	; 255
    1190:	93 07       	cpc	r25, r19
    1192:	11 f4       	brne	.+4      	; 0x1198 <fgetc+0x5e>
    1194:	80 e1       	ldi	r24, 0x10	; 16
    1196:	01 c0       	rjmp	.+2      	; 0x119a <fgetc+0x60>
    1198:	80 e2       	ldi	r24, 0x20	; 32
    119a:	82 2b       	or	r24, r18
    119c:	8b 83       	std	Y+3, r24	; 0x03
    119e:	08 c0       	rjmp	.+16     	; 0x11b0 <fgetc+0x76>
    11a0:	2e 81       	ldd	r18, Y+6	; 0x06
    11a2:	3f 81       	ldd	r19, Y+7	; 0x07
    11a4:	2f 5f       	subi	r18, 0xFF	; 255
    11a6:	3f 4f       	sbci	r19, 0xFF	; 255
    11a8:	3f 83       	std	Y+7, r19	; 0x07
    11aa:	2e 83       	std	Y+6, r18	; 0x06
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	02 c0       	rjmp	.+4      	; 0x11b4 <fgetc+0x7a>
    11b0:	8f ef       	ldi	r24, 0xFF	; 255
    11b2:	9f ef       	ldi	r25, 0xFF	; 255
    11b4:	df 91       	pop	r29
    11b6:	cf 91       	pop	r28
    11b8:	08 95       	ret

000011ba <fputc>:
    11ba:	0f 93       	push	r16
    11bc:	1f 93       	push	r17
    11be:	cf 93       	push	r28
    11c0:	df 93       	push	r29
    11c2:	8c 01       	movw	r16, r24
    11c4:	eb 01       	movw	r28, r22
    11c6:	8b 81       	ldd	r24, Y+3	; 0x03
    11c8:	81 ff       	sbrs	r24, 1
    11ca:	1b c0       	rjmp	.+54     	; 0x1202 <fputc+0x48>
    11cc:	82 ff       	sbrs	r24, 2
    11ce:	0d c0       	rjmp	.+26     	; 0x11ea <fputc+0x30>
    11d0:	2e 81       	ldd	r18, Y+6	; 0x06
    11d2:	3f 81       	ldd	r19, Y+7	; 0x07
    11d4:	8c 81       	ldd	r24, Y+4	; 0x04
    11d6:	9d 81       	ldd	r25, Y+5	; 0x05
    11d8:	28 17       	cp	r18, r24
    11da:	39 07       	cpc	r19, r25
    11dc:	64 f4       	brge	.+24     	; 0x11f6 <fputc+0x3c>
    11de:	e8 81       	ld	r30, Y
    11e0:	f9 81       	ldd	r31, Y+1	; 0x01
    11e2:	01 93       	st	Z+, r16
    11e4:	f9 83       	std	Y+1, r31	; 0x01
    11e6:	e8 83       	st	Y, r30
    11e8:	06 c0       	rjmp	.+12     	; 0x11f6 <fputc+0x3c>
    11ea:	e8 85       	ldd	r30, Y+8	; 0x08
    11ec:	f9 85       	ldd	r31, Y+9	; 0x09
    11ee:	80 2f       	mov	r24, r16
    11f0:	19 95       	eicall
    11f2:	00 97       	sbiw	r24, 0x00	; 0
    11f4:	31 f4       	brne	.+12     	; 0x1202 <fputc+0x48>
    11f6:	8e 81       	ldd	r24, Y+6	; 0x06
    11f8:	9f 81       	ldd	r25, Y+7	; 0x07
    11fa:	01 96       	adiw	r24, 0x01	; 1
    11fc:	9f 83       	std	Y+7, r25	; 0x07
    11fe:	8e 83       	std	Y+6, r24	; 0x06
    1200:	02 c0       	rjmp	.+4      	; 0x1206 <fputc+0x4c>
    1202:	0f ef       	ldi	r16, 0xFF	; 255
    1204:	1f ef       	ldi	r17, 0xFF	; 255
    1206:	c8 01       	movw	r24, r16
    1208:	df 91       	pop	r29
    120a:	cf 91       	pop	r28
    120c:	1f 91       	pop	r17
    120e:	0f 91       	pop	r16
    1210:	08 95       	ret

00001212 <__ultoa_invert>:
    1212:	fa 01       	movw	r30, r20
    1214:	aa 27       	eor	r26, r26
    1216:	28 30       	cpi	r18, 0x08	; 8
    1218:	51 f1       	breq	.+84     	; 0x126e <__ultoa_invert+0x5c>
    121a:	20 31       	cpi	r18, 0x10	; 16
    121c:	81 f1       	breq	.+96     	; 0x127e <__ultoa_invert+0x6c>
    121e:	e8 94       	clt
    1220:	6f 93       	push	r22
    1222:	6e 7f       	andi	r22, 0xFE	; 254
    1224:	6e 5f       	subi	r22, 0xFE	; 254
    1226:	7f 4f       	sbci	r23, 0xFF	; 255
    1228:	8f 4f       	sbci	r24, 0xFF	; 255
    122a:	9f 4f       	sbci	r25, 0xFF	; 255
    122c:	af 4f       	sbci	r26, 0xFF	; 255
    122e:	b1 e0       	ldi	r27, 0x01	; 1
    1230:	3e d0       	rcall	.+124    	; 0x12ae <__ultoa_invert+0x9c>
    1232:	b4 e0       	ldi	r27, 0x04	; 4
    1234:	3c d0       	rcall	.+120    	; 0x12ae <__ultoa_invert+0x9c>
    1236:	67 0f       	add	r22, r23
    1238:	78 1f       	adc	r23, r24
    123a:	89 1f       	adc	r24, r25
    123c:	9a 1f       	adc	r25, r26
    123e:	a1 1d       	adc	r26, r1
    1240:	68 0f       	add	r22, r24
    1242:	79 1f       	adc	r23, r25
    1244:	8a 1f       	adc	r24, r26
    1246:	91 1d       	adc	r25, r1
    1248:	a1 1d       	adc	r26, r1
    124a:	6a 0f       	add	r22, r26
    124c:	71 1d       	adc	r23, r1
    124e:	81 1d       	adc	r24, r1
    1250:	91 1d       	adc	r25, r1
    1252:	a1 1d       	adc	r26, r1
    1254:	20 d0       	rcall	.+64     	; 0x1296 <__ultoa_invert+0x84>
    1256:	09 f4       	brne	.+2      	; 0x125a <__ultoa_invert+0x48>
    1258:	68 94       	set
    125a:	3f 91       	pop	r19
    125c:	2a e0       	ldi	r18, 0x0A	; 10
    125e:	26 9f       	mul	r18, r22
    1260:	11 24       	eor	r1, r1
    1262:	30 19       	sub	r19, r0
    1264:	30 5d       	subi	r19, 0xD0	; 208
    1266:	31 93       	st	Z+, r19
    1268:	de f6       	brtc	.-74     	; 0x1220 <__ultoa_invert+0xe>
    126a:	cf 01       	movw	r24, r30
    126c:	08 95       	ret
    126e:	46 2f       	mov	r20, r22
    1270:	47 70       	andi	r20, 0x07	; 7
    1272:	40 5d       	subi	r20, 0xD0	; 208
    1274:	41 93       	st	Z+, r20
    1276:	b3 e0       	ldi	r27, 0x03	; 3
    1278:	0f d0       	rcall	.+30     	; 0x1298 <__ultoa_invert+0x86>
    127a:	c9 f7       	brne	.-14     	; 0x126e <__ultoa_invert+0x5c>
    127c:	f6 cf       	rjmp	.-20     	; 0x126a <__ultoa_invert+0x58>
    127e:	46 2f       	mov	r20, r22
    1280:	4f 70       	andi	r20, 0x0F	; 15
    1282:	40 5d       	subi	r20, 0xD0	; 208
    1284:	4a 33       	cpi	r20, 0x3A	; 58
    1286:	18 f0       	brcs	.+6      	; 0x128e <__ultoa_invert+0x7c>
    1288:	49 5d       	subi	r20, 0xD9	; 217
    128a:	31 fd       	sbrc	r19, 1
    128c:	40 52       	subi	r20, 0x20	; 32
    128e:	41 93       	st	Z+, r20
    1290:	02 d0       	rcall	.+4      	; 0x1296 <__ultoa_invert+0x84>
    1292:	a9 f7       	brne	.-22     	; 0x127e <__ultoa_invert+0x6c>
    1294:	ea cf       	rjmp	.-44     	; 0x126a <__ultoa_invert+0x58>
    1296:	b4 e0       	ldi	r27, 0x04	; 4
    1298:	a6 95       	lsr	r26
    129a:	97 95       	ror	r25
    129c:	87 95       	ror	r24
    129e:	77 95       	ror	r23
    12a0:	67 95       	ror	r22
    12a2:	ba 95       	dec	r27
    12a4:	c9 f7       	brne	.-14     	; 0x1298 <__ultoa_invert+0x86>
    12a6:	00 97       	sbiw	r24, 0x00	; 0
    12a8:	61 05       	cpc	r22, r1
    12aa:	71 05       	cpc	r23, r1
    12ac:	08 95       	ret
    12ae:	9b 01       	movw	r18, r22
    12b0:	ac 01       	movw	r20, r24
    12b2:	0a 2e       	mov	r0, r26
    12b4:	06 94       	lsr	r0
    12b6:	57 95       	ror	r21
    12b8:	47 95       	ror	r20
    12ba:	37 95       	ror	r19
    12bc:	27 95       	ror	r18
    12be:	ba 95       	dec	r27
    12c0:	c9 f7       	brne	.-14     	; 0x12b4 <__ultoa_invert+0xa2>
    12c2:	62 0f       	add	r22, r18
    12c4:	73 1f       	adc	r23, r19
    12c6:	84 1f       	adc	r24, r20
    12c8:	95 1f       	adc	r25, r21
    12ca:	a0 1d       	adc	r26, r0
    12cc:	08 95       	ret

000012ce <_exit>:
    12ce:	f8 94       	cli

000012d0 <__stop_program>:
    12d0:	ff cf       	rjmp	.-2      	; 0x12d0 <__stop_program>
