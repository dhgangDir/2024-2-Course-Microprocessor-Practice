
Pjt10_timer_linked_list.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a0  00800200  0000145e  000014f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000145e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000009a  008002a0  008002a0  00001592  2**0
                  ALLOC
  3 .stab         00001110  00000000  00000000  00001594  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000033b  00000000  00000000  000026a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000002c8  00000000  00000000  000029e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000025ca  00000000  00000000  00002ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001271  00000000  00000000  00005272  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000150a  00000000  00000000  000064e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006d0  00000000  00000000  000079f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000077e  00000000  00000000  000080c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000018f5  00000000  00000000  0000883e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  0000a133  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      3c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      5c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      60:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      64:	0c 94 78 03 	jmp	0x6f0	; 0x6f0 <__vector_25>
      68:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      6c:	0c 94 49 03 	jmp	0x692	; 0x692 <__vector_27>
      70:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      74:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      78:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      7c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      80:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      84:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      88:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      8c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      90:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      94:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      98:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      9c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      ac:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      bc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      cc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      dc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      e0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ee e5       	ldi	r30, 0x5E	; 94
      fc:	f4 e1       	ldi	r31, 0x14	; 20
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a0 3a       	cpi	r26, 0xA0	; 160
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
     10e:	1b be       	out	0x3b, r1	; 59

00000110 <__do_clear_bss>:
     110:	13 e0       	ldi	r17, 0x03	; 3
     112:	a0 ea       	ldi	r26, 0xA0	; 160
     114:	b2 e0       	ldi	r27, 0x02	; 2
     116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
     118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
     11a:	aa 33       	cpi	r26, 0x3A	; 58
     11c:	b1 07       	cpc	r27, r17
     11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
     120:	0e 94 b7 04 	call	0x96e	; 0x96e <main>
     124:	0c 94 2d 0a 	jmp	0x145a	; 0x145a <_exit>

00000128 <__bad_interrupt>:
     128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <app_list>:
#include <stdio.h>
#include <stdlib.h>
#include "linked_list.h"
#include "uart.h"

void app_list(char *ap) {
     12c:	cf 92       	push	r12
     12e:	df 92       	push	r13
     130:	ff 92       	push	r15
     132:	0f 93       	push	r16
     134:	1f 93       	push	r17
     136:	cf 93       	push	r28
     138:	df 93       	push	r29
     13a:	cd b7       	in	r28, 0x3d	; 61
     13c:	de b7       	in	r29, 0x3e	; 62
     13e:	28 97       	sbiw	r28, 0x08	; 8
     140:	0f b6       	in	r0, 0x3f	; 63
     142:	f8 94       	cli
     144:	de bf       	out	0x3e, r29	; 62
     146:	0f be       	out	0x3f, r0	; 63
     148:	cd bf       	out	0x3d, r28	; 61
	char buf[8], how = 'a';
	struct node *np;

	if (ap) how = *ap;
     14a:	00 97       	sbiw	r24, 0x00	; 0
     14c:	19 f0       	breq	.+6      	; 0x154 <app_list+0x28>
     14e:	fc 01       	movw	r30, r24
     150:	f0 80       	ld	r15, Z
     152:	02 c0       	rjmp	.+4      	; 0x158 <app_list+0x2c>
#include <stdlib.h>
#include "linked_list.h"
#include "uart.h"

void app_list(char *ap) {
	char buf[8], how = 'a';
     154:	91 e6       	ldi	r25, 0x61	; 97
     156:	f9 2e       	mov	r15, r25
	struct node *np;

	if (ap) how = *ap;
	while(1) {
		printf("> ");
     158:	80 e0       	ldi	r24, 0x00	; 0
     15a:	c8 2e       	mov	r12, r24
     15c:	82 e0       	ldi	r24, 0x02	; 2
     15e:	d8 2e       	mov	r13, r24
     160:	0f 92       	push	r0
     162:	0f 92       	push	r0
     164:	ed b7       	in	r30, 0x3d	; 61
     166:	fe b7       	in	r31, 0x3e	; 62
     168:	d2 82       	std	Z+2, r13	; 0x02
     16a:	c1 82       	std	Z+1, r12	; 0x01
     16c:	0e 94 ff 06 	call	0xdfe	; 0xdfe <printf>
		if (fgets(buf, 8, stdin) == NULL)
     170:	0f 90       	pop	r0
     172:	0f 90       	pop	r0
     174:	40 91 34 03 	lds	r20, 0x0334
     178:	50 91 35 03 	lds	r21, 0x0335
     17c:	ce 01       	movw	r24, r28
     17e:	01 96       	adiw	r24, 0x01	; 1
     180:	68 e0       	ldi	r22, 0x08	; 8
     182:	70 e0       	ldi	r23, 0x00	; 0
     184:	0e 94 cb 06 	call	0xd96	; 0xd96 <fgets>
     188:	00 97       	sbiw	r24, 0x00	; 0
     18a:	e9 f0       	breq	.+58     	; 0x1c6 <app_list+0x9a>
			break;
		np = get_node();
     18c:	0e 94 25 02 	call	0x44a	; 0x44a <get_node>
     190:	8c 01       	movw	r16, r24
		np->data = atoi(buf);
     192:	ce 01       	movw	r24, r28
     194:	01 96       	adiw	r24, 0x01	; 1
     196:	0e 94 70 06 	call	0xce0	; 0xce0 <atoi>
     19a:	f8 01       	movw	r30, r16
     19c:	91 83       	std	Z+1, r25	; 0x01
     19e:	80 83       	st	Z, r24
		switch(how) {
     1a0:	f8 e6       	ldi	r31, 0x68	; 104
     1a2:	ff 16       	cp	r15, r31
     1a4:	21 f0       	breq	.+8      	; 0x1ae <app_list+0x82>
     1a6:	84 e7       	ldi	r24, 0x74	; 116
     1a8:	f8 16       	cp	r15, r24
     1aa:	49 f4       	brne	.+18     	; 0x1be <app_list+0x92>
     1ac:	04 c0       	rjmp	.+8      	; 0x1b6 <app_list+0x8a>
			case 'h' : insert_node_head(np); break;
     1ae:	c8 01       	movw	r24, r16
     1b0:	0e 94 2d 02 	call	0x45a	; 0x45a <insert_node_head>
     1b4:	d5 cf       	rjmp	.-86     	; 0x160 <app_list+0x34>
			case 't' : insert_node_tail(np); break;
     1b6:	c8 01       	movw	r24, r16
     1b8:	0e 94 42 02 	call	0x484	; 0x484 <insert_node_tail>
     1bc:	d1 cf       	rjmp	.-94     	; 0x160 <app_list+0x34>
			default  : insert_node_ascn(np);
     1be:	c8 01       	movw	r24, r16
     1c0:	0e 94 56 02 	call	0x4ac	; 0x4ac <insert_node_ascn>
     1c4:	cd cf       	rjmp	.-102    	; 0x160 <app_list+0x34>
		}
	}
	tour_list();
     1c6:	0e 94 8d 02 	call	0x51a	; 0x51a <tour_list>
	free_list();
     1ca:	0e 94 ba 02 	call	0x574	; 0x574 <free_list>
}
     1ce:	28 96       	adiw	r28, 0x08	; 8
     1d0:	0f b6       	in	r0, 0x3f	; 63
     1d2:	f8 94       	cli
     1d4:	de bf       	out	0x3e, r29	; 62
     1d6:	0f be       	out	0x3f, r0	; 63
     1d8:	cd bf       	out	0x3d, r28	; 61
     1da:	df 91       	pop	r29
     1dc:	cf 91       	pop	r28
     1de:	1f 91       	pop	r17
     1e0:	0f 91       	pop	r16
     1e2:	ff 90       	pop	r15
     1e4:	df 90       	pop	r13
     1e6:	cf 90       	pop	r12
     1e8:	08 95       	ret

000001ea <is_prime>:
// app_prime.c
#include <stdio.h>
#include <stdlib.h>
#include "app_prime.h"

int is_prime(int n) {
     1ea:	cf 93       	push	r28
     1ec:	df 93       	push	r29
     1ee:	fc 01       	movw	r30, r24
    int i;
	for(i = 2; i <= n/2; i++){
     1f0:	62 e0       	ldi	r22, 0x02	; 2
     1f2:	70 e0       	ldi	r23, 0x00	; 0
     1f4:	0e 94 1a 05 	call	0xa34	; 0xa34 <__divmodhi4>
     1f8:	eb 01       	movw	r28, r22
     1fa:	22 e0       	ldi	r18, 0x02	; 2
     1fc:	30 e0       	ldi	r19, 0x00	; 0
     1fe:	08 c0       	rjmp	.+16     	; 0x210 <is_prime+0x26>
		if((n % i) == 0) 
     200:	cf 01       	movw	r24, r30
     202:	b9 01       	movw	r22, r18
     204:	0e 94 1a 05 	call	0xa34	; 0xa34 <__divmodhi4>
     208:	00 97       	sbiw	r24, 0x00	; 0
     20a:	41 f0       	breq	.+16     	; 0x21c <is_prime+0x32>
#include <stdlib.h>
#include "app_prime.h"

int is_prime(int n) {
    int i;
	for(i = 2; i <= n/2; i++){
     20c:	2f 5f       	subi	r18, 0xFF	; 255
     20e:	3f 4f       	sbci	r19, 0xFF	; 255
     210:	c2 17       	cp	r28, r18
     212:	d3 07       	cpc	r29, r19
     214:	ac f7       	brge	.-22     	; 0x200 <is_prime+0x16>
		if((n % i) == 0) 
			return(0);
	}
	return(1);
     216:	81 e0       	ldi	r24, 0x01	; 1
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	02 c0       	rjmp	.+4      	; 0x220 <is_prime+0x36>

int is_prime(int n) {
    int i;
	for(i = 2; i <= n/2; i++){
		if((n % i) == 0) 
			return(0);
     21c:	80 e0       	ldi	r24, 0x00	; 0
     21e:	90 e0       	ldi	r25, 0x00	; 0
	}
	return(1);
}
     220:	df 91       	pop	r29
     222:	cf 91       	pop	r28
     224:	08 95       	ret

00000226 <app_prime>:

void app_prime(char *ap) {
     226:	cf 92       	push	r12
     228:	df 92       	push	r13
     22a:	ef 92       	push	r14
     22c:	ff 92       	push	r15
     22e:	0f 93       	push	r16
     230:	1f 93       	push	r17
     232:	cf 93       	push	r28
     234:	df 93       	push	r29
    int t = 2000, count = 0, n;

	if(ap) t = atoi(ap);
     236:	00 97       	sbiw	r24, 0x00	; 0
     238:	21 f0       	breq	.+8      	; 0x242 <app_prime+0x1c>
     23a:	0e 94 70 06 	call	0xce0	; 0xce0 <atoi>
     23e:	7c 01       	movw	r14, r24
     240:	04 c0       	rjmp	.+8      	; 0x24a <app_prime+0x24>
	}
	return(1);
}

void app_prime(char *ap) {
    int t = 2000, count = 0, n;
     242:	90 ed       	ldi	r25, 0xD0	; 208
     244:	e9 2e       	mov	r14, r25
     246:	97 e0       	ldi	r25, 0x07	; 7
     248:	f9 2e       	mov	r15, r25

	if(ap) t = atoi(ap);

	for (n = 2; n <= t; n++){
     24a:	c2 e0       	ldi	r28, 0x02	; 2
     24c:	d0 e0       	ldi	r29, 0x00	; 0
	}
	return(1);
}

void app_prime(char *ap) {
    int t = 2000, count = 0, n;
     24e:	00 e0       	ldi	r16, 0x00	; 0
     250:	10 e0       	ldi	r17, 0x00	; 0
	if(ap) t = atoi(ap);

	for (n = 2; n <= t; n++){
		if(is_prime(n)) {
		    count++;
			printf("%d is a prime number!!!\n", n);
     252:	83 e0       	ldi	r24, 0x03	; 3
     254:	c8 2e       	mov	r12, r24
     256:	82 e0       	ldi	r24, 0x02	; 2
     258:	d8 2e       	mov	r13, r24
void app_prime(char *ap) {
    int t = 2000, count = 0, n;

	if(ap) t = atoi(ap);

	for (n = 2; n <= t; n++){
     25a:	16 c0       	rjmp	.+44     	; 0x288 <app_prime+0x62>
		if(is_prime(n)) {
     25c:	ce 01       	movw	r24, r28
     25e:	0e 94 f5 00 	call	0x1ea	; 0x1ea <is_prime>
     262:	00 97       	sbiw	r24, 0x00	; 0
     264:	81 f0       	breq	.+32     	; 0x286 <app_prime+0x60>
		    count++;
     266:	0f 5f       	subi	r16, 0xFF	; 255
     268:	1f 4f       	sbci	r17, 0xFF	; 255
			printf("%d is a prime number!!!\n", n);
     26a:	00 d0       	rcall	.+0      	; 0x26c <app_prime+0x46>
     26c:	0f 92       	push	r0
     26e:	ed b7       	in	r30, 0x3d	; 61
     270:	fe b7       	in	r31, 0x3e	; 62
     272:	d2 82       	std	Z+2, r13	; 0x02
     274:	c1 82       	std	Z+1, r12	; 0x01
     276:	d4 83       	std	Z+4, r29	; 0x04
     278:	c3 83       	std	Z+3, r28	; 0x03
     27a:	0e 94 ff 06 	call	0xdfe	; 0xdfe <printf>
     27e:	0f 90       	pop	r0
     280:	0f 90       	pop	r0
     282:	0f 90       	pop	r0
     284:	0f 90       	pop	r0
void app_prime(char *ap) {
    int t = 2000, count = 0, n;

	if(ap) t = atoi(ap);

	for (n = 2; n <= t; n++){
     286:	21 96       	adiw	r28, 0x01	; 1
     288:	ec 16       	cp	r14, r28
     28a:	fd 06       	cpc	r15, r29
     28c:	3c f7       	brge	.-50     	; 0x25c <app_prime+0x36>
		if(is_prime(n)) {
		    count++;
			printf("%d is a prime number!!!\n", n);
		}
	}
	printf("count=%d\n", count);
     28e:	00 d0       	rcall	.+0      	; 0x290 <app_prime+0x6a>
     290:	0f 92       	push	r0
     292:	8c e1       	ldi	r24, 0x1C	; 28
     294:	92 e0       	ldi	r25, 0x02	; 2
     296:	ed b7       	in	r30, 0x3d	; 61
     298:	fe b7       	in	r31, 0x3e	; 62
     29a:	92 83       	std	Z+2, r25	; 0x02
     29c:	81 83       	std	Z+1, r24	; 0x01
     29e:	14 83       	std	Z+4, r17	; 0x04
     2a0:	03 83       	std	Z+3, r16	; 0x03
     2a2:	0e 94 ff 06 	call	0xdfe	; 0xdfe <printf>
     2a6:	0f 90       	pop	r0
     2a8:	0f 90       	pop	r0
     2aa:	0f 90       	pop	r0
     2ac:	0f 90       	pop	r0
}
     2ae:	df 91       	pop	r29
     2b0:	cf 91       	pop	r28
     2b2:	1f 91       	pop	r17
     2b4:	0f 91       	pop	r16
     2b6:	ff 90       	pop	r15
     2b8:	ef 90       	pop	r14
     2ba:	df 90       	pop	r13
     2bc:	cf 90       	pop	r12
     2be:	08 95       	ret

000002c0 <q_init>:
#include "cir_queue.h"

char qi[QI_SIZE], qo[QO_SIZE];
int fi, ri, fo, ro;
void q_init(void) {
	fi = ri = fo = ro = 0;
     2c0:	10 92 ec 02 	sts	0x02EC, r1
     2c4:	10 92 eb 02 	sts	0x02EB, r1
     2c8:	10 92 ea 02 	sts	0x02EA, r1
     2cc:	10 92 e9 02 	sts	0x02E9, r1
     2d0:	10 92 ee 02 	sts	0x02EE, r1
     2d4:	10 92 ed 02 	sts	0x02ED, r1
     2d8:	10 92 a8 02 	sts	0x02A8, r1
     2dc:	10 92 a7 02 	sts	0x02A7, r1
}
     2e0:	08 95       	ret

000002e2 <qi_insert>:
int qi_insert(char ch) {
     2e2:	48 2f       	mov	r20, r24
	if((ri + 1) % QI_SIZE == fi)
     2e4:	20 91 ed 02 	lds	r18, 0x02ED
     2e8:	30 91 ee 02 	lds	r19, 0x02EE
     2ec:	2f 5f       	subi	r18, 0xFF	; 255
     2ee:	3f 4f       	sbci	r19, 0xFF	; 255
     2f0:	c9 01       	movw	r24, r18
     2f2:	60 e4       	ldi	r22, 0x40	; 64
     2f4:	70 e0       	ldi	r23, 0x00	; 0
     2f6:	0e 94 1a 05 	call	0xa34	; 0xa34 <__divmodhi4>
     2fa:	9c 01       	movw	r18, r24
     2fc:	80 91 a7 02 	lds	r24, 0x02A7
     300:	90 91 a8 02 	lds	r25, 0x02A8
     304:	28 17       	cp	r18, r24
     306:	39 07       	cpc	r19, r25
     308:	59 f0       	breq	.+22     	; 0x320 <qi_insert+0x3e>
		return (0);
	ri = (ri + 1) % QI_SIZE;
     30a:	30 93 ee 02 	sts	0x02EE, r19
     30e:	20 93 ed 02 	sts	0x02ED, r18
	qi[ri] = ch;
     312:	21 51       	subi	r18, 0x11	; 17
     314:	3d 4f       	sbci	r19, 0xFD	; 253
     316:	f9 01       	movw	r30, r18
     318:	40 83       	st	Z, r20
	return(1);
     31a:	81 e0       	ldi	r24, 0x01	; 1
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	08 95       	ret
void q_init(void) {
	fi = ri = fo = ro = 0;
}
int qi_insert(char ch) {
	if((ri + 1) % QI_SIZE == fi)
		return (0);
     320:	80 e0       	ldi	r24, 0x00	; 0
     322:	90 e0       	ldi	r25, 0x00	; 0
	ri = (ri + 1) % QI_SIZE;
	qi[ri] = ch;
	return(1);
}
     324:	08 95       	ret

00000326 <qi_delete>:
int qi_delete(void) {
	if( ri == fi)
     326:	80 91 a7 02 	lds	r24, 0x02A7
     32a:	90 91 a8 02 	lds	r25, 0x02A8
     32e:	20 91 ed 02 	lds	r18, 0x02ED
     332:	30 91 ee 02 	lds	r19, 0x02EE
     336:	28 17       	cp	r18, r24
     338:	39 07       	cpc	r19, r25
     33a:	79 f0       	breq	.+30     	; 0x35a <qi_delete+0x34>
		return(0);
    fi = (fi+1) % QI_SIZE;
     33c:	01 96       	adiw	r24, 0x01	; 1
     33e:	60 e4       	ldi	r22, 0x40	; 64
     340:	70 e0       	ldi	r23, 0x00	; 0
     342:	0e 94 1a 05 	call	0xa34	; 0xa34 <__divmodhi4>
     346:	90 93 a8 02 	sts	0x02A8, r25
     34a:	80 93 a7 02 	sts	0x02A7, r24
	return(qi[fi]);
     34e:	81 51       	subi	r24, 0x11	; 17
     350:	9d 4f       	sbci	r25, 0xFD	; 253
     352:	fc 01       	movw	r30, r24
     354:	80 81       	ld	r24, Z
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	08 95       	ret
	qi[ri] = ch;
	return(1);
}
int qi_delete(void) {
	if( ri == fi)
		return(0);
     35a:	80 e0       	ldi	r24, 0x00	; 0
     35c:	90 e0       	ldi	r25, 0x00	; 0
    fi = (fi+1) % QI_SIZE;
	return(qi[fi]);
}
     35e:	08 95       	ret

00000360 <qo_insert>:
int qo_insert(char ch) {
     360:	48 2f       	mov	r20, r24
	if((ro + 1) % QO_SIZE == fo)
     362:	20 91 eb 02 	lds	r18, 0x02EB
     366:	30 91 ec 02 	lds	r19, 0x02EC
     36a:	2f 5f       	subi	r18, 0xFF	; 255
     36c:	3f 4f       	sbci	r19, 0xFF	; 255
     36e:	c9 01       	movw	r24, r18
     370:	60 e4       	ldi	r22, 0x40	; 64
     372:	70 e0       	ldi	r23, 0x00	; 0
     374:	0e 94 1a 05 	call	0xa34	; 0xa34 <__divmodhi4>
     378:	9c 01       	movw	r18, r24
     37a:	80 91 e9 02 	lds	r24, 0x02E9
     37e:	90 91 ea 02 	lds	r25, 0x02EA
     382:	28 17       	cp	r18, r24
     384:	39 07       	cpc	r19, r25
     386:	59 f0       	breq	.+22     	; 0x39e <qo_insert+0x3e>
		return (0);
	ro = (ro + 1) % QO_SIZE;
     388:	30 93 ec 02 	sts	0x02EC, r19
     38c:	20 93 eb 02 	sts	0x02EB, r18
	qo[ro] = ch;
     390:	27 55       	subi	r18, 0x57	; 87
     392:	3d 4f       	sbci	r19, 0xFD	; 253
     394:	f9 01       	movw	r30, r18
     396:	40 83       	st	Z, r20
	return(1);
     398:	81 e0       	ldi	r24, 0x01	; 1
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	08 95       	ret
    fi = (fi+1) % QI_SIZE;
	return(qi[fi]);
}
int qo_insert(char ch) {
	if((ro + 1) % QO_SIZE == fo)
		return (0);
     39e:	80 e0       	ldi	r24, 0x00	; 0
     3a0:	90 e0       	ldi	r25, 0x00	; 0
	ro = (ro + 1) % QO_SIZE;
	qo[ro] = ch;
	return(1);
}
     3a2:	08 95       	ret

000003a4 <qo_delete>:
int qo_delete(void) {
	if( ro == fo)
     3a4:	80 91 e9 02 	lds	r24, 0x02E9
     3a8:	90 91 ea 02 	lds	r25, 0x02EA
     3ac:	20 91 eb 02 	lds	r18, 0x02EB
     3b0:	30 91 ec 02 	lds	r19, 0x02EC
     3b4:	28 17       	cp	r18, r24
     3b6:	39 07       	cpc	r19, r25
     3b8:	79 f0       	breq	.+30     	; 0x3d8 <qo_delete+0x34>
		return(0);
    fo = (fo+1) % QO_SIZE;
     3ba:	01 96       	adiw	r24, 0x01	; 1
     3bc:	60 e4       	ldi	r22, 0x40	; 64
     3be:	70 e0       	ldi	r23, 0x00	; 0
     3c0:	0e 94 1a 05 	call	0xa34	; 0xa34 <__divmodhi4>
     3c4:	90 93 ea 02 	sts	0x02EA, r25
     3c8:	80 93 e9 02 	sts	0x02E9, r24
	return(qo[fo]);
     3cc:	87 55       	subi	r24, 0x57	; 87
     3ce:	9d 4f       	sbci	r25, 0xFD	; 253
     3d0:	fc 01       	movw	r30, r24
     3d2:	80 81       	ld	r24, Z
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	08 95       	ret
	qo[ro] = ch;
	return(1);
}
int qo_delete(void) {
	if( ro == fo)
		return(0);
     3d8:	80 e0       	ldi	r24, 0x00	; 0
     3da:	90 e0       	ldi	r25, 0x00	; 0
    fo = (fo+1) % QO_SIZE;
	return(qo[fo]);
}
     3dc:	08 95       	ret

000003de <led_init>:
#include "led.h"

static uint8_t Leds;

void led_init(void) {
    DDRL = PORTL = 0xff;
     3de:	8f ef       	ldi	r24, 0xFF	; 255
     3e0:	80 93 0b 01 	sts	0x010B, r24
     3e4:	80 93 0a 01 	sts	0x010A, r24
} 
     3e8:	08 95       	ret

000003ea <led_on_all>:
void led_on_all(void) {
    Leds = PORTL = 0x00;
     3ea:	10 92 0b 01 	sts	0x010B, r1
     3ee:	10 92 a0 02 	sts	0x02A0, r1
}
     3f2:	08 95       	ret

000003f4 <led_off_all>:
void led_off_all(void) {
    Leds = PORTL = 0xff;
     3f4:	8f ef       	ldi	r24, 0xFF	; 255
     3f6:	80 93 0b 01 	sts	0x010B, r24
     3fa:	80 93 a0 02 	sts	0x02A0, r24
}
     3fe:	08 95       	ret

00000400 <led_on>:
void led_on(uint8_t led_no) {
    Leds &= ~(1 << led_no);
     400:	21 e0       	ldi	r18, 0x01	; 1
     402:	30 e0       	ldi	r19, 0x00	; 0
     404:	02 c0       	rjmp	.+4      	; 0x40a <led_on+0xa>
     406:	22 0f       	add	r18, r18
     408:	33 1f       	adc	r19, r19
     40a:	8a 95       	dec	r24
     40c:	e2 f7       	brpl	.-8      	; 0x406 <led_on+0x6>
     40e:	20 95       	com	r18
     410:	80 91 a0 02 	lds	r24, 0x02A0
     414:	28 23       	and	r18, r24
     416:	20 93 a0 02 	sts	0x02A0, r18
	PORTL = Leds;
     41a:	20 93 0b 01 	sts	0x010B, r18
}
     41e:	08 95       	ret

00000420 <led_off>:
void led_off(uint8_t led_no) {
	Leds |= (1 << led_no);
     420:	21 e0       	ldi	r18, 0x01	; 1
     422:	30 e0       	ldi	r19, 0x00	; 0
     424:	02 c0       	rjmp	.+4      	; 0x42a <led_off+0xa>
     426:	22 0f       	add	r18, r18
     428:	33 1f       	adc	r19, r19
     42a:	8a 95       	dec	r24
     42c:	e2 f7       	brpl	.-8      	; 0x426 <led_off+0x6>
     42e:	80 91 a0 02 	lds	r24, 0x02A0
     432:	82 2b       	or	r24, r18
     434:	80 93 a0 02 	sts	0x02A0, r24
	PORTL = Leds;
     438:	80 93 0b 01 	sts	0x010B, r24
}
     43c:	08 95       	ret

0000043e <led_set>:
void led_set(uint8_t led_mask) {
    Leds = ~led_mask;
     43e:	80 95       	com	r24
     440:	80 93 a0 02 	sts	0x02A0, r24
	PORTL = Leds;
     444:	80 93 0b 01 	sts	0x010B, r24
}
     448:	08 95       	ret

0000044a <get_node>:
struct node *Head = NULL;

struct node *get_node() {
	struct node *cp;
	
	cp = (struct node *)malloc(sizeof(struct node));
     44a:	84 e0       	ldi	r24, 0x04	; 4
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	0e 94 41 05 	call	0xa82	; 0xa82 <malloc>
	return cp;
}
     452:	08 95       	ret

00000454 <free_node>:

void free_node(struct node *np) {
	free(np);
     454:	0e 94 d7 05 	call	0xbae	; 0xbae <free>
	np = NULL;
}
     458:	08 95       	ret

0000045a <insert_node_head>:

void insert_node_head(struct node *np) {
     45a:	fc 01       	movw	r30, r24
	if(!Head) {
     45c:	80 91 a1 02 	lds	r24, 0x02A1
     460:	90 91 a2 02 	lds	r25, 0x02A2
     464:	00 97       	sbiw	r24, 0x00	; 0
     466:	39 f4       	brne	.+14     	; 0x476 <insert_node_head+0x1c>
		Head = np;
     468:	f0 93 a2 02 	sts	0x02A2, r31
     46c:	e0 93 a1 02 	sts	0x02A1, r30
		np->link = NULL;
     470:	13 82       	std	Z+3, r1	; 0x03
     472:	12 82       	std	Z+2, r1	; 0x02
     474:	08 95       	ret
	} else {
		np->link = Head;
     476:	93 83       	std	Z+3, r25	; 0x03
     478:	82 83       	std	Z+2, r24	; 0x02
		Head = np;
     47a:	f0 93 a2 02 	sts	0x02A2, r31
     47e:	e0 93 a1 02 	sts	0x02A1, r30
     482:	08 95       	ret

00000484 <insert_node_tail>:
	}
}
void insert_node_tail(struct node *np){
	struct node *cp;
	if(!Head)
     484:	e0 91 a1 02 	lds	r30, 0x02A1
     488:	f0 91 a2 02 	lds	r31, 0x02A2
     48c:	30 97       	sbiw	r30, 0x00	; 0
     48e:	31 f4       	brne	.+12     	; 0x49c <insert_node_tail+0x18>
		Head = np;
     490:	90 93 a2 02 	sts	0x02A2, r25
     494:	80 93 a1 02 	sts	0x02A1, r24
     498:	08 95       	ret
	else {
		for (cp = Head; cp->link != NULL; cp = cp->link);
     49a:	f9 01       	movw	r30, r18
     49c:	22 81       	ldd	r18, Z+2	; 0x02
     49e:	33 81       	ldd	r19, Z+3	; 0x03
     4a0:	21 15       	cp	r18, r1
     4a2:	31 05       	cpc	r19, r1
     4a4:	d1 f7       	brne	.-12     	; 0x49a <insert_node_tail+0x16>
		cp->link = np;
     4a6:	93 83       	std	Z+3, r25	; 0x03
     4a8:	82 83       	std	Z+2, r24	; 0x02
     4aa:	08 95       	ret

000004ac <insert_node_ascn>:
	}
}
void insert_node_ascn(struct node *np) {
     4ac:	cf 93       	push	r28
     4ae:	df 93       	push	r29
     4b0:	fc 01       	movw	r30, r24
	struct node *cp, *pp;
	if(!Head) {
     4b2:	20 91 a1 02 	lds	r18, 0x02A1
     4b6:	30 91 a2 02 	lds	r19, 0x02A2
     4ba:	21 15       	cp	r18, r1
     4bc:	31 05       	cpc	r19, r1
     4be:	31 f0       	breq	.+12     	; 0x4cc <insert_node_ascn+0x20>
		Head = np;
		np->link = NULL;
	} else {
		for (cp = Head, pp = NULL; cp != NULL && cp->data < np->data;
     4c0:	40 81       	ld	r20, Z
     4c2:	51 81       	ldd	r21, Z+1	; 0x01
     4c4:	d9 01       	movw	r26, r18
     4c6:	c0 e0       	ldi	r28, 0x00	; 0
     4c8:	d0 e0       	ldi	r29, 0x00	; 0
     4ca:	0f c0       	rjmp	.+30     	; 0x4ea <insert_node_ascn+0x3e>
	}
}
void insert_node_ascn(struct node *np) {
	struct node *cp, *pp;
	if(!Head) {
		Head = np;
     4cc:	90 93 a2 02 	sts	0x02A2, r25
     4d0:	80 93 a1 02 	sts	0x02A1, r24
		np->link = NULL;
     4d4:	13 82       	std	Z+3, r1	; 0x03
     4d6:	12 82       	std	Z+2, r1	; 0x02
     4d8:	1d c0       	rjmp	.+58     	; 0x514 <insert_node_ascn+0x68>
	} else {
		for (cp = Head, pp = NULL; cp != NULL && cp->data < np->data;
												pp = cp, cp = cp->link);
     4da:	12 96       	adiw	r26, 0x02	; 2
     4dc:	8d 91       	ld	r24, X+
     4de:	9c 91       	ld	r25, X
     4e0:	13 97       	sbiw	r26, 0x03	; 3
	struct node *cp, *pp;
	if(!Head) {
		Head = np;
		np->link = NULL;
	} else {
		for (cp = Head, pp = NULL; cp != NULL && cp->data < np->data;
     4e2:	ed 01       	movw	r28, r26
     4e4:	00 97       	sbiw	r24, 0x00	; 0
     4e6:	39 f0       	breq	.+14     	; 0x4f6 <insert_node_ascn+0x4a>
												pp = cp, cp = cp->link);
     4e8:	dc 01       	movw	r26, r24
	struct node *cp, *pp;
	if(!Head) {
		Head = np;
		np->link = NULL;
	} else {
		for (cp = Head, pp = NULL; cp != NULL && cp->data < np->data;
     4ea:	8d 91       	ld	r24, X+
     4ec:	9c 91       	ld	r25, X
     4ee:	11 97       	sbiw	r26, 0x01	; 1
     4f0:	84 17       	cp	r24, r20
     4f2:	95 07       	cpc	r25, r21
     4f4:	94 f3       	brlt	.-28     	; 0x4da <insert_node_ascn+0x2e>
												pp = cp, cp = cp->link);
		
		if(pp == NULL) {
     4f6:	20 97       	sbiw	r28, 0x00	; 0
     4f8:	39 f4       	brne	.+14     	; 0x508 <insert_node_ascn+0x5c>
			np->link = Head;
     4fa:	33 83       	std	Z+3, r19	; 0x03
     4fc:	22 83       	std	Z+2, r18	; 0x02
			Head = np;
     4fe:	f0 93 a2 02 	sts	0x02A2, r31
     502:	e0 93 a1 02 	sts	0x02A1, r30
     506:	06 c0       	rjmp	.+12     	; 0x514 <insert_node_ascn+0x68>
		} else {
			np->link = pp->link;
     508:	8a 81       	ldd	r24, Y+2	; 0x02
     50a:	9b 81       	ldd	r25, Y+3	; 0x03
     50c:	93 83       	std	Z+3, r25	; 0x03
     50e:	82 83       	std	Z+2, r24	; 0x02
			pp->link = np;
     510:	fb 83       	std	Y+3, r31	; 0x03
     512:	ea 83       	std	Y+2, r30	; 0x02
		}
	}
}
     514:	df 91       	pop	r29
     516:	cf 91       	pop	r28
     518:	08 95       	ret

0000051a <tour_list>:

void tour_list() {
     51a:	0f 93       	push	r16
     51c:	1f 93       	push	r17
     51e:	cf 93       	push	r28
     520:	df 93       	push	r29
	struct node *cp;

	printf("\n");
     522:	8a e0       	ldi	r24, 0x0A	; 10
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	0e 94 11 07 	call	0xe22	; 0xe22 <putchar>
	for (cp = Head; cp !=NULL; cp = cp->link)
     52a:	c0 91 a1 02 	lds	r28, 0x02A1
     52e:	d0 91 a2 02 	lds	r29, 0x02A2
		printf("-->%d ", cp->data);
     532:	06 e2       	ldi	r16, 0x26	; 38
     534:	12 e0       	ldi	r17, 0x02	; 2

void tour_list() {
	struct node *cp;

	printf("\n");
	for (cp = Head; cp !=NULL; cp = cp->link)
     536:	13 c0       	rjmp	.+38     	; 0x55e <tour_list+0x44>
		printf("-->%d ", cp->data);
     538:	00 d0       	rcall	.+0      	; 0x53a <tour_list+0x20>
     53a:	0f 92       	push	r0
     53c:	ed b7       	in	r30, 0x3d	; 61
     53e:	fe b7       	in	r31, 0x3e	; 62
     540:	12 83       	std	Z+2, r17	; 0x02
     542:	01 83       	std	Z+1, r16	; 0x01
     544:	88 81       	ld	r24, Y
     546:	99 81       	ldd	r25, Y+1	; 0x01
     548:	94 83       	std	Z+4, r25	; 0x04
     54a:	83 83       	std	Z+3, r24	; 0x03
     54c:	0e 94 ff 06 	call	0xdfe	; 0xdfe <printf>

void tour_list() {
	struct node *cp;

	printf("\n");
	for (cp = Head; cp !=NULL; cp = cp->link)
     550:	0a 80       	ldd	r0, Y+2	; 0x02
     552:	db 81       	ldd	r29, Y+3	; 0x03
     554:	c0 2d       	mov	r28, r0
     556:	0f 90       	pop	r0
     558:	0f 90       	pop	r0
     55a:	0f 90       	pop	r0
     55c:	0f 90       	pop	r0
     55e:	20 97       	sbiw	r28, 0x00	; 0
     560:	59 f7       	brne	.-42     	; 0x538 <tour_list+0x1e>
		printf("-->%d ", cp->data);
	printf("\n");
     562:	8a e0       	ldi	r24, 0x0A	; 10
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	0e 94 11 07 	call	0xe22	; 0xe22 <putchar>
}
     56a:	df 91       	pop	r29
     56c:	cf 91       	pop	r28
     56e:	1f 91       	pop	r17
     570:	0f 91       	pop	r16
     572:	08 95       	ret

00000574 <free_list>:

void free_list() {
	struct node *cp;

	for( ; Head != NULL; ) {
     574:	09 c0       	rjmp	.+18     	; 0x588 <free_list+0x14>
		cp = Head;
		Head = cp->link;
     576:	fc 01       	movw	r30, r24
     578:	22 81       	ldd	r18, Z+2	; 0x02
     57a:	33 81       	ldd	r19, Z+3	; 0x03
     57c:	30 93 a2 02 	sts	0x02A2, r19
     580:	20 93 a1 02 	sts	0x02A1, r18
	cp = (struct node *)malloc(sizeof(struct node));
	return cp;
}

void free_node(struct node *np) {
	free(np);
     584:	0e 94 d7 05 	call	0xbae	; 0xbae <free>
}

void free_list() {
	struct node *cp;

	for( ; Head != NULL; ) {
     588:	80 91 a1 02 	lds	r24, 0x02A1
     58c:	90 91 a2 02 	lds	r25, 0x02A2
     590:	00 97       	sbiw	r24, 0x00	; 0
     592:	89 f7       	brne	.-30     	; 0x576 <free_list+0x2>
		cp = Head;
		Head = cp->link;
		free_node(cp);
	}
}
     594:	08 95       	ret

00000596 <uart_getchar>:

int uart_getchar(FILE *stream) {
	char ch;

	do {
		cli();
     596:	f8 94       	cli
		ch = qi_delete();
     598:	0e 94 93 01 	call	0x326	; 0x326 <qi_delete>
		sei();
     59c:	78 94       	sei
	} while (ch == 0);
     59e:	88 23       	and	r24, r24
     5a0:	d1 f3       	breq	.-12     	; 0x596 <uart_getchar>

	if (ch == EOT) return(-1);
     5a2:	84 30       	cpi	r24, 0x04	; 4
     5a4:	11 f0       	breq	.+4      	; 0x5aa <uart_getchar+0x14>
	else 		   return(ch);
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	08 95       	ret
		cli();
		ch = qi_delete();
		sei();
	} while (ch == 0);

	if (ch == EOT) return(-1);
     5aa:	8f ef       	ldi	r24, 0xFF	; 255
     5ac:	9f ef       	ldi	r25, 0xFF	; 255
	else 		   return(ch);
}
     5ae:	08 95       	ret

000005b0 <uart_putchar>:
	sbi(UCSR0B, TXCIE0);
	sbi(UCSR0B, RXEN0);
	sbi(UCSR0B, RXCIE0);
}

int uart_putchar(char ch, FILE *stream){
     5b0:	cf 93       	push	r28
     5b2:	c8 2f       	mov	r28, r24
    if(ch == '\n') 
     5b4:	8a 30       	cpi	r24, 0x0A	; 10
     5b6:	19 f4       	brne	.+6      	; 0x5be <uart_putchar+0xe>
	    uart_putchar('\r', stream);
     5b8:	8d e0       	ldi	r24, 0x0D	; 13
     5ba:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <uart_putchar>

	cli();
     5be:	f8 94       	cli
	
	if(!uart_busy) {
     5c0:	80 91 2f 03 	lds	r24, 0x032F
     5c4:	88 23       	and	r24, r24
     5c6:	59 f4       	brne	.+22     	; 0x5de <uart_putchar+0x2e>
	    UDR0 = ch;
     5c8:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy = 1;
     5cc:	81 e0       	ldi	r24, 0x01	; 1
     5ce:	80 93 2f 03 	sts	0x032F, r24
     5d2:	0a c0       	rjmp	.+20     	; 0x5e8 <uart_putchar+0x38>
	} else {
		while(qo_insert(ch) == 0) {
		    sei();
     5d4:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5d6:	86 ef       	ldi	r24, 0xF6	; 246
     5d8:	8a 95       	dec	r24
     5da:	f1 f7       	brne	.-4      	; 0x5d8 <uart_putchar+0x28>
			_delay_us(100);
			cli();
     5dc:	f8 94       	cli
	
	if(!uart_busy) {
	    UDR0 = ch;
		uart_busy = 1;
	} else {
		while(qo_insert(ch) == 0) {
     5de:	8c 2f       	mov	r24, r28
     5e0:	0e 94 b0 01 	call	0x360	; 0x360 <qo_insert>
     5e4:	00 97       	sbiw	r24, 0x00	; 0
     5e6:	b1 f3       	breq	.-20     	; 0x5d4 <uart_putchar+0x24>
		    sei();
			_delay_us(100);
			cli();
		}
	}
	sei();
     5e8:	78 94       	sei
	return (1);
}
     5ea:	81 e0       	ldi	r24, 0x01	; 1
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	cf 91       	pop	r28
     5f0:	08 95       	ret

000005f2 <uart_init>:
FILE Mystdout = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);
FILE Mystdin  = FDEV_SETUP_STREAM(NULL, uart_getchar, _FDEV_SETUP_READ);
char uart_busy;

void uart_init() {
	stdin = &Mystdin; stdout = &Mystdout;
     5f2:	8e e6       	ldi	r24, 0x6E	; 110
     5f4:	92 e0       	ldi	r25, 0x02	; 2
     5f6:	90 93 35 03 	sts	0x0335, r25
     5fa:	80 93 34 03 	sts	0x0334, r24
     5fe:	8c e7       	ldi	r24, 0x7C	; 124
     600:	92 e0       	ldi	r25, 0x02	; 2
     602:	90 93 37 03 	sts	0x0337, r25
     606:	80 93 36 03 	sts	0x0336, r24
	uart_busy = 0;
     60a:	10 92 2f 03 	sts	0x032F, r1
	q_init();
     60e:	0e 94 60 01 	call	0x2c0	; 0x2c0 <q_init>
    UBRR0H = 0x00; UBRR0L = 0x07;
     612:	10 92 c5 00 	sts	0x00C5, r1
     616:	87 e0       	ldi	r24, 0x07	; 7
     618:	80 93 c4 00 	sts	0x00C4, r24
	sbi(UCSR0A, U2X0);
     61c:	e0 ec       	ldi	r30, 0xC0	; 192
     61e:	f0 e0       	ldi	r31, 0x00	; 0
     620:	80 81       	ld	r24, Z
     622:	82 60       	ori	r24, 0x02	; 2
     624:	80 83       	st	Z, r24
	sbi(UCSR0B, TXEN0);
     626:	e1 ec       	ldi	r30, 0xC1	; 193
     628:	f0 e0       	ldi	r31, 0x00	; 0
     62a:	80 81       	ld	r24, Z
     62c:	88 60       	ori	r24, 0x08	; 8
     62e:	80 83       	st	Z, r24
	sbi(UCSR0B, TXCIE0);
     630:	80 81       	ld	r24, Z
     632:	80 64       	ori	r24, 0x40	; 64
     634:	80 83       	st	Z, r24
	sbi(UCSR0B, RXEN0);
     636:	80 81       	ld	r24, Z
     638:	80 61       	ori	r24, 0x10	; 16
     63a:	80 83       	st	Z, r24
	sbi(UCSR0B, RXCIE0);
     63c:	80 81       	ld	r24, Z
     63e:	80 68       	ori	r24, 0x80	; 128
     640:	80 83       	st	Z, r24
}
     642:	08 95       	ret

00000644 <uart_putchar_1>:
void uart_putstr(char *sp){
    for(; *sp; sp++)
	    uart_putchar(*sp);
}
*/
int uart_putchar_1(char ch, FILE *stream) {
     644:	cf 93       	push	r28
     646:	c8 2f       	mov	r28, r24
    if(ch == '\n')
     648:	8a 30       	cpi	r24, 0x0A	; 10
     64a:	19 f4       	brne	.+6      	; 0x652 <uart_putchar_1+0xe>
	    uart_putchar_1('\r', stream);
     64c:	8d e0       	ldi	r24, 0x0D	; 13
     64e:	0e 94 22 03 	call	0x644	; 0x644 <uart_putchar_1>
    //_delay_ms(10);
	while(1) {
	    if((UCSR0A & (1 << UDRE0)) != 0 )
     652:	80 91 c0 00 	lds	r24, 0x00C0
     656:	85 ff       	sbrs	r24, 5
     658:	fc cf       	rjmp	.-8      	; 0x652 <uart_putchar_1+0xe>
		    break;
	}
	UDR0 = ch;
     65a:	c0 93 c6 00 	sts	0x00C6, r28
	return (1);
}
     65e:	81 e0       	ldi	r24, 0x01	; 1
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	cf 91       	pop	r28
     664:	08 95       	ret

00000666 <uart_echo>:

	if (ch == EOT) return(-1);
	else 		   return(ch);
}

void uart_echo(char ch) {
     666:	cf 93       	push	r28
     668:	c8 2f       	mov	r28, r24
	if(ch == '\n') uart_echo('\r');
     66a:	8a 30       	cpi	r24, 0x0A	; 10
     66c:	19 f4       	brne	.+6      	; 0x674 <uart_echo+0xe>
     66e:	8d e0       	ldi	r24, 0x0D	; 13
     670:	0e 94 33 03 	call	0x666	; 0x666 <uart_echo>
	if(!uart_busy) {
     674:	80 91 2f 03 	lds	r24, 0x032F
     678:	88 23       	and	r24, r24
     67a:	31 f4       	brne	.+12     	; 0x688 <uart_echo+0x22>
		UDR0 = ch;
     67c:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy = 1;
     680:	81 e0       	ldi	r24, 0x01	; 1
     682:	80 93 2f 03 	sts	0x032F, r24
     686:	03 c0       	rjmp	.+6      	; 0x68e <uart_echo+0x28>
	}
	else
		qo_insert(ch);
     688:	8c 2f       	mov	r24, r28
     68a:	0e 94 b0 01 	call	0x360	; 0x360 <qo_insert>
}
     68e:	cf 91       	pop	r28
     690:	08 95       	ret

00000692 <__vector_27>:

ISR(USART0_TX_vect){
     692:	1f 92       	push	r1
     694:	0f 92       	push	r0
     696:	0f b6       	in	r0, 0x3f	; 63
     698:	0f 92       	push	r0
     69a:	0b b6       	in	r0, 0x3b	; 59
     69c:	0f 92       	push	r0
     69e:	11 24       	eor	r1, r1
     6a0:	2f 93       	push	r18
     6a2:	3f 93       	push	r19
     6a4:	4f 93       	push	r20
     6a6:	5f 93       	push	r21
     6a8:	6f 93       	push	r22
     6aa:	7f 93       	push	r23
     6ac:	8f 93       	push	r24
     6ae:	9f 93       	push	r25
     6b0:	af 93       	push	r26
     6b2:	bf 93       	push	r27
     6b4:	ef 93       	push	r30
     6b6:	ff 93       	push	r31
	char ch;

	if((ch = qo_delete()) == 0)
     6b8:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <qo_delete>
     6bc:	88 23       	and	r24, r24
     6be:	19 f4       	brne	.+6      	; 0x6c6 <__vector_27+0x34>
		uart_busy = 0;
     6c0:	10 92 2f 03 	sts	0x032F, r1
     6c4:	02 c0       	rjmp	.+4      	; 0x6ca <__vector_27+0x38>
	else 
		UDR0 = ch;
     6c6:	80 93 c6 00 	sts	0x00C6, r24
}
     6ca:	ff 91       	pop	r31
     6cc:	ef 91       	pop	r30
     6ce:	bf 91       	pop	r27
     6d0:	af 91       	pop	r26
     6d2:	9f 91       	pop	r25
     6d4:	8f 91       	pop	r24
     6d6:	7f 91       	pop	r23
     6d8:	6f 91       	pop	r22
     6da:	5f 91       	pop	r21
     6dc:	4f 91       	pop	r20
     6de:	3f 91       	pop	r19
     6e0:	2f 91       	pop	r18
     6e2:	0f 90       	pop	r0
     6e4:	0b be       	out	0x3b, r0	; 59
     6e6:	0f 90       	pop	r0
     6e8:	0f be       	out	0x3f, r0	; 63
     6ea:	0f 90       	pop	r0
     6ec:	1f 90       	pop	r1
     6ee:	18 95       	reti

000006f0 <__vector_25>:

ISR(USART0_RX_vect) {
     6f0:	1f 92       	push	r1
     6f2:	0f 92       	push	r0
     6f4:	0f b6       	in	r0, 0x3f	; 63
     6f6:	0f 92       	push	r0
     6f8:	0b b6       	in	r0, 0x3b	; 59
     6fa:	0f 92       	push	r0
     6fc:	11 24       	eor	r1, r1
     6fe:	2f 93       	push	r18
     700:	3f 93       	push	r19
     702:	4f 93       	push	r20
     704:	5f 93       	push	r21
     706:	6f 93       	push	r22
     708:	7f 93       	push	r23
     70a:	8f 93       	push	r24
     70c:	9f 93       	push	r25
     70e:	af 93       	push	r26
     710:	bf 93       	push	r27
     712:	cf 93       	push	r28
     714:	ef 93       	push	r30
     716:	ff 93       	push	r31
	char ch;
	ch = UDR0;
     718:	c0 91 c6 00 	lds	r28, 0x00C6
	if(ch != EOT) {
     71c:	c4 30       	cpi	r28, 0x04	; 4
     71e:	31 f0       	breq	.+12     	; 0x72c <__vector_25+0x3c>
		if(ch == '\r')  ch = '\n';
     720:	cd 30       	cpi	r28, 0x0D	; 13
     722:	09 f4       	brne	.+2      	; 0x726 <__vector_25+0x36>
     724:	ca e0       	ldi	r28, 0x0A	; 10
		uart_echo(ch);
     726:	8c 2f       	mov	r24, r28
     728:	0e 94 33 03 	call	0x666	; 0x666 <uart_echo>
	}
	qi_insert(ch);
     72c:	8c 2f       	mov	r24, r28
     72e:	0e 94 71 01 	call	0x2e2	; 0x2e2 <qi_insert>
}
     732:	ff 91       	pop	r31
     734:	ef 91       	pop	r30
     736:	cf 91       	pop	r28
     738:	bf 91       	pop	r27
     73a:	af 91       	pop	r26
     73c:	9f 91       	pop	r25
     73e:	8f 91       	pop	r24
     740:	7f 91       	pop	r23
     742:	6f 91       	pop	r22
     744:	5f 91       	pop	r21
     746:	4f 91       	pop	r20
     748:	3f 91       	pop	r19
     74a:	2f 91       	pop	r18
     74c:	0f 90       	pop	r0
     74e:	0b be       	out	0x3b, r0	; 59
     750:	0f 90       	pop	r0
     752:	0f be       	out	0x3f, r0	; 63
     754:	0f 90       	pop	r0
     756:	1f 90       	pop	r1
     758:	18 95       	reti

0000075a <get_timer>:
struct timer *Thead = NULL;

struct timer *get_timer() {
	struct timer *tp;

	tp = (struct timer *) malloc(sizeof(*tp));
     75a:	8e e0       	ldi	r24, 0x0E	; 14
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	0e 94 41 05 	call	0xa82	; 0xa82 <malloc>
	return(tp);
}
     762:	08 95       	ret

00000764 <insert_timer>:

void insert_timer(struct task *tskp, int ms) {
     764:	ef 92       	push	r14
     766:	ff 92       	push	r15
     768:	0f 93       	push	r16
     76a:	1f 93       	push	r17
     76c:	cf 93       	push	r28
     76e:	df 93       	push	r29
     770:	f8 2e       	mov	r15, r24
     772:	e9 2e       	mov	r14, r25
     774:	8b 01       	movw	r16, r22
	int total;
	struct timer *tp, *cp, *pp;
	
	tp = get_timer();
     776:	0e 94 ad 03 	call	0x75a	; 0x75a <get_timer>
     77a:	ec 01       	movw	r28, r24
	tp->task = *tskp;
     77c:	dc 01       	movw	r26, r24
     77e:	12 96       	adiw	r26, 0x02	; 2
     780:	ef 2d       	mov	r30, r15
     782:	fe 2d       	mov	r31, r14
     784:	8a e0       	ldi	r24, 0x0A	; 10
     786:	01 90       	ld	r0, Z+
     788:	0d 92       	st	X+, r0
     78a:	81 50       	subi	r24, 0x01	; 1
     78c:	e1 f7       	brne	.-8      	; 0x786 <insert_timer+0x22>
	tp->time = ms;
     78e:	19 83       	std	Y+1, r17	; 0x01
     790:	08 83       	st	Y, r16

	if (Thead == NULL) {
     792:	e0 91 a3 02 	lds	r30, 0x02A3
     796:	f0 91 a4 02 	lds	r31, 0x02A4
     79a:	30 97       	sbiw	r30, 0x00	; 0
     79c:	29 f4       	brne	.+10     	; 0x7a8 <insert_timer+0x44>
		Thead = tp, tp->link =NULL;
     79e:	d0 93 a4 02 	sts	0x02A4, r29
     7a2:	c0 93 a3 02 	sts	0x02A3, r28
     7a6:	2f c0       	rjmp	.+94     	; 0x806 <insert_timer+0xa2>
	
	tp = get_timer();
	tp->task = *tskp;
	tp->time = ms;

	if (Thead == NULL) {
     7a8:	40 e0       	ldi	r20, 0x00	; 0
     7aa:	50 e0       	ldi	r21, 0x00	; 0
     7ac:	20 e0       	ldi	r18, 0x00	; 0
     7ae:	30 e0       	ldi	r19, 0x00	; 0
     7b0:	01 c0       	rjmp	.+2      	; 0x7b4 <insert_timer+0x50>
		Thead = tp, tp->link =NULL;
		return ;
	}

	pp = NULL, total = 0;
	for (cp = Thead; cp; cp = cp->link) {
     7b2:	fd 01       	movw	r30, r26
		total += cp->time;
     7b4:	80 81       	ld	r24, Z
     7b6:	91 81       	ldd	r25, Z+1	; 0x01
     7b8:	28 0f       	add	r18, r24
     7ba:	39 1f       	adc	r19, r25
		if (total >= ms) break;
     7bc:	20 17       	cp	r18, r16
     7be:	31 07       	cpc	r19, r17
     7c0:	34 f4       	brge	.+12     	; 0x7ce <insert_timer+0x6a>
		Thead = tp, tp->link =NULL;
		return ;
	}

	pp = NULL, total = 0;
	for (cp = Thead; cp; cp = cp->link) {
     7c2:	a4 85       	ldd	r26, Z+12	; 0x0c
     7c4:	b5 85       	ldd	r27, Z+13	; 0x0d
     7c6:	af 01       	movw	r20, r30
     7c8:	10 97       	sbiw	r26, 0x00	; 0
     7ca:	99 f7       	brne	.-26     	; 0x7b2 <insert_timer+0x4e>
     7cc:	01 c0       	rjmp	.+2      	; 0x7d0 <insert_timer+0x6c>
		total += cp->time;
		if (total >= ms) break;
     7ce:	df 01       	movw	r26, r30
		pp = cp;
	}

	if (pp == NULL) {
     7d0:	41 15       	cp	r20, r1
     7d2:	51 05       	cpc	r21, r1
     7d4:	79 f4       	brne	.+30     	; 0x7f4 <insert_timer+0x90>
		cp->time -= tp->time;
     7d6:	8d 91       	ld	r24, X+
     7d8:	9c 91       	ld	r25, X
     7da:	11 97       	sbiw	r26, 0x01	; 1
     7dc:	80 1b       	sub	r24, r16
     7de:	91 0b       	sbc	r25, r17
     7e0:	11 96       	adiw	r26, 0x01	; 1
     7e2:	9c 93       	st	X, r25
     7e4:	8e 93       	st	-X, r24
		tp->link = cp, Thead = tp;
     7e6:	bd 87       	std	Y+13, r27	; 0x0d
     7e8:	ac 87       	std	Y+12, r26	; 0x0c
     7ea:	d0 93 a4 02 	sts	0x02A4, r29
     7ee:	c0 93 a3 02 	sts	0x02A3, r28
     7f2:	24 c0       	rjmp	.+72     	; 0x83c <insert_timer+0xd8>
	} else if (cp == NULL) {
     7f4:	10 97       	sbiw	r26, 0x00	; 0
     7f6:	51 f4       	brne	.+20     	; 0x80c <insert_timer+0xa8>
		tp->time -= total;
     7f8:	02 1b       	sub	r16, r18
     7fa:	13 0b       	sbc	r17, r19
     7fc:	19 83       	std	Y+1, r17	; 0x01
     7fe:	08 83       	st	Y, r16
		pp->link = tp;
     800:	fa 01       	movw	r30, r20
     802:	d5 87       	std	Z+13, r29	; 0x0d
     804:	c4 87       	std	Z+12, r28	; 0x0c
		tp->link = NULL;
     806:	1d 86       	std	Y+13, r1	; 0x0d
     808:	1c 86       	std	Y+12, r1	; 0x0c
     80a:	18 c0       	rjmp	.+48     	; 0x83c <insert_timer+0xd8>
	} else {
		total -= cp->time;
     80c:	8d 91       	ld	r24, X+
     80e:	9c 91       	ld	r25, X
     810:	11 97       	sbiw	r26, 0x01	; 1
     812:	b9 01       	movw	r22, r18
     814:	68 1b       	sub	r22, r24
     816:	79 0b       	sbc	r23, r25
		tp->time -= total;
     818:	98 01       	movw	r18, r16
     81a:	26 1b       	sub	r18, r22
     81c:	37 0b       	sbc	r19, r23
     81e:	39 83       	std	Y+1, r19	; 0x01
     820:	28 83       	st	Y, r18
		cp->time -= tp->time;
     822:	8d 91       	ld	r24, X+
     824:	9c 91       	ld	r25, X
     826:	11 97       	sbiw	r26, 0x01	; 1
     828:	82 1b       	sub	r24, r18
     82a:	93 0b       	sbc	r25, r19
     82c:	11 96       	adiw	r26, 0x01	; 1
     82e:	9c 93       	st	X, r25
     830:	8e 93       	st	-X, r24
		pp->link = tp;
     832:	fa 01       	movw	r30, r20
     834:	d5 87       	std	Z+13, r29	; 0x0d
     836:	c4 87       	std	Z+12, r28	; 0x0c
		tp->link = cp;
     838:	bd 87       	std	Y+13, r27	; 0x0d
     83a:	ac 87       	std	Y+12, r26	; 0x0c
	}
}
     83c:	df 91       	pop	r29
     83e:	cf 91       	pop	r28
     840:	1f 91       	pop	r17
     842:	0f 91       	pop	r16
     844:	ff 90       	pop	r15
     846:	ef 90       	pop	r14
     848:	08 95       	ret

0000084a <tour_timer>:

void tour_timer() {
     84a:	ef 92       	push	r14
     84c:	ff 92       	push	r15
     84e:	0f 93       	push	r16
     850:	1f 93       	push	r17
     852:	cf 93       	push	r28
     854:	df 93       	push	r29
	struct timer *cp;
	int total = 0;

	printf("\n");
     856:	8a e0       	ldi	r24, 0x0A	; 10
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	0e 94 11 07 	call	0xe22	; 0xe22 <putchar>
	for (cp = Thead; cp != NULL; cp = cp->link) {
     85e:	c0 91 a3 02 	lds	r28, 0x02A3
     862:	d0 91 a4 02 	lds	r29, 0x02A4
	}
}

void tour_timer() {
	struct timer *cp;
	int total = 0;
     866:	00 e0       	ldi	r16, 0x00	; 0
     868:	10 e0       	ldi	r17, 0x00	; 0

	printf("\n");
	for (cp = Thead; cp != NULL; cp = cp->link) {
		total += cp->time;
		printf("-->%d(%d) ", cp->time, total);
     86a:	8a e8       	ldi	r24, 0x8A	; 138
     86c:	e8 2e       	mov	r14, r24
     86e:	82 e0       	ldi	r24, 0x02	; 2
     870:	f8 2e       	mov	r15, r24
void tour_timer() {
	struct timer *cp;
	int total = 0;

	printf("\n");
	for (cp = Thead; cp != NULL; cp = cp->link) {
     872:	20 c0       	rjmp	.+64     	; 0x8b4 <tour_timer+0x6a>
		total += cp->time;
     874:	88 81       	ld	r24, Y
     876:	99 81       	ldd	r25, Y+1	; 0x01
     878:	08 0f       	add	r16, r24
     87a:	19 1f       	adc	r17, r25
		printf("-->%d(%d) ", cp->time, total);
     87c:	00 d0       	rcall	.+0      	; 0x87e <tour_timer+0x34>
     87e:	00 d0       	rcall	.+0      	; 0x880 <tour_timer+0x36>
     880:	ed b7       	in	r30, 0x3d	; 61
     882:	fe b7       	in	r31, 0x3e	; 62
     884:	31 96       	adiw	r30, 0x01	; 1
     886:	ad b7       	in	r26, 0x3d	; 61
     888:	be b7       	in	r27, 0x3e	; 62
     88a:	12 96       	adiw	r26, 0x02	; 2
     88c:	fc 92       	st	X, r15
     88e:	ee 92       	st	-X, r14
     890:	11 97       	sbiw	r26, 0x01	; 1
     892:	93 83       	std	Z+3, r25	; 0x03
     894:	82 83       	std	Z+2, r24	; 0x02
     896:	15 83       	std	Z+5, r17	; 0x05
     898:	04 83       	std	Z+4, r16	; 0x04
     89a:	0e 94 ff 06 	call	0xdfe	; 0xdfe <printf>
void tour_timer() {
	struct timer *cp;
	int total = 0;

	printf("\n");
	for (cp = Thead; cp != NULL; cp = cp->link) {
     89e:	0c 84       	ldd	r0, Y+12	; 0x0c
     8a0:	dd 85       	ldd	r29, Y+13	; 0x0d
     8a2:	c0 2d       	mov	r28, r0
     8a4:	8d b7       	in	r24, 0x3d	; 61
     8a6:	9e b7       	in	r25, 0x3e	; 62
     8a8:	06 96       	adiw	r24, 0x06	; 6
     8aa:	0f b6       	in	r0, 0x3f	; 63
     8ac:	f8 94       	cli
     8ae:	9e bf       	out	0x3e, r25	; 62
     8b0:	0f be       	out	0x3f, r0	; 63
     8b2:	8d bf       	out	0x3d, r24	; 61
     8b4:	20 97       	sbiw	r28, 0x00	; 0
     8b6:	f1 f6       	brne	.-68     	; 0x874 <tour_timer+0x2a>
		total += cp->time;
		printf("-->%d(%d) ", cp->time, total);
	}
	printf("\n");
     8b8:	8a e0       	ldi	r24, 0x0A	; 10
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	0e 94 11 07 	call	0xe22	; 0xe22 <putchar>
}
     8c0:	df 91       	pop	r29
     8c2:	cf 91       	pop	r28
     8c4:	1f 91       	pop	r17
     8c6:	0f 91       	pop	r16
     8c8:	ff 90       	pop	r15
     8ca:	ef 90       	pop	r14
     8cc:	08 95       	ret

000008ce <free_timer>:

void free_timer() {
	struct timer *cp;

	for (  ; Thead != NULL;  ) {
     8ce:	09 c0       	rjmp	.+18     	; 0x8e2 <free_timer+0x14>
		cp = Thead;
		Thead = cp->link;
     8d0:	fc 01       	movw	r30, r24
     8d2:	24 85       	ldd	r18, Z+12	; 0x0c
     8d4:	35 85       	ldd	r19, Z+13	; 0x0d
     8d6:	30 93 a4 02 	sts	0x02A4, r19
     8da:	20 93 a3 02 	sts	0x02A3, r18
		free(cp);
     8de:	0e 94 d7 05 	call	0xbae	; 0xbae <free>
}

void free_timer() {
	struct timer *cp;

	for (  ; Thead != NULL;  ) {
     8e2:	80 91 a3 02 	lds	r24, 0x02A3
     8e6:	90 91 a4 02 	lds	r25, 0x02A4
     8ea:	00 97       	sbiw	r24, 0x00	; 0
     8ec:	89 f7       	brne	.-30     	; 0x8d0 <free_timer+0x2>
		cp = Thead;
		Thead = cp->link;
		free(cp);
	}
}
     8ee:	08 95       	ret

000008f0 <app_timer>:

void app_timer(char *ap) {
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	cf 93       	push	r28
     8f6:	df 93       	push	r29
     8f8:	cd b7       	in	r28, 0x3d	; 61
     8fa:	de b7       	in	r29, 0x3e	; 62
     8fc:	62 97       	sbiw	r28, 0x12	; 18
     8fe:	0f b6       	in	r0, 0x3f	; 63
     900:	f8 94       	cli
     902:	de bf       	out	0x3e, r29	; 62
     904:	0f be       	out	0x3f, r0	; 63
     906:	cd bf       	out	0x3d, r28	; 61
	char buf[8];
	int ms;
	struct task tsk;

	while(1) {
		printf(">> ");
     908:	05 e9       	ldi	r16, 0x95	; 149
     90a:	12 e0       	ldi	r17, 0x02	; 2
     90c:	0f 92       	push	r0
     90e:	0f 92       	push	r0
     910:	ed b7       	in	r30, 0x3d	; 61
     912:	fe b7       	in	r31, 0x3e	; 62
     914:	12 83       	std	Z+2, r17	; 0x02
     916:	01 83       	std	Z+1, r16	; 0x01
     918:	0e 94 ff 06 	call	0xdfe	; 0xdfe <printf>
		if (fgets(buf, 8, stdin) == NULL || (ms = atoi(buf)) == 0)
     91c:	0f 90       	pop	r0
     91e:	0f 90       	pop	r0
     920:	40 91 34 03 	lds	r20, 0x0334
     924:	50 91 35 03 	lds	r21, 0x0335
     928:	ce 01       	movw	r24, r28
     92a:	01 96       	adiw	r24, 0x01	; 1
     92c:	68 e0       	ldi	r22, 0x08	; 8
     92e:	70 e0       	ldi	r23, 0x00	; 0
     930:	0e 94 cb 06 	call	0xd96	; 0xd96 <fgets>
     934:	00 97       	sbiw	r24, 0x00	; 0
     936:	61 f0       	breq	.+24     	; 0x950 <app_timer+0x60>
     938:	ce 01       	movw	r24, r28
     93a:	01 96       	adiw	r24, 0x01	; 1
     93c:	0e 94 70 06 	call	0xce0	; 0xce0 <atoi>
     940:	bc 01       	movw	r22, r24
     942:	00 97       	sbiw	r24, 0x00	; 0
     944:	29 f0       	breq	.+10     	; 0x950 <app_timer+0x60>
			break;
		
		insert_timer(&tsk, ms);
     946:	ce 01       	movw	r24, r28
     948:	09 96       	adiw	r24, 0x09	; 9
     94a:	0e 94 b2 03 	call	0x764	; 0x764 <insert_timer>
	}
     94e:	de cf       	rjmp	.-68     	; 0x90c <app_timer+0x1c>
	tour_timer();
     950:	0e 94 25 04 	call	0x84a	; 0x84a <tour_timer>
	free_timer();
     954:	0e 94 67 04 	call	0x8ce	; 0x8ce <free_timer>
}
     958:	62 96       	adiw	r28, 0x12	; 18
     95a:	0f b6       	in	r0, 0x3f	; 63
     95c:	f8 94       	cli
     95e:	de bf       	out	0x3e, r29	; 62
     960:	0f be       	out	0x3f, r0	; 63
     962:	cd bf       	out	0x3d, r28	; 61
     964:	df 91       	pop	r29
     966:	cf 91       	pop	r28
     968:	1f 91       	pop	r17
     96a:	0f 91       	pop	r16
     96c:	08 95       	ret

0000096e <main>:
#include "cir_queue.h"
#include "app_linked_list.h"
#include "timer_linked_list.h"

int main()
{
     96e:	cf 93       	push	r28
     970:	df 93       	push	r29
     972:	cd b7       	in	r28, 0x3d	; 61
     974:	de b7       	in	r29, 0x3e	; 62
     976:	c0 58       	subi	r28, 0x80	; 128
     978:	d0 40       	sbci	r29, 0x00	; 0
     97a:	0f b6       	in	r0, 0x3f	; 63
     97c:	f8 94       	cli
     97e:	de bf       	out	0x3e, r29	; 62
     980:	0f be       	out	0x3f, r0	; 63
     982:	cd bf       	out	0x3d, r28	; 61
	char cmd[128], *cp, *ap;
	int n;
	uart_init();
     984:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <uart_init>
   	sei();	
     988:	78 94       	sei
	
	while(1) {
		printf("$ ");
     98a:	8d e2       	ldi	r24, 0x2D	; 45
     98c:	c8 2e       	mov	r12, r24
     98e:	82 e0       	ldi	r24, 0x02	; 2
     990:	d8 2e       	mov	r13, r24
     992:	0f 92       	push	r0
     994:	0f 92       	push	r0
     996:	ed b7       	in	r30, 0x3d	; 61
     998:	fe b7       	in	r31, 0x3e	; 62
     99a:	d2 82       	std	Z+2, r13	; 0x02
     99c:	c1 82       	std	Z+1, r12	; 0x01
     99e:	0e 94 ff 06 	call	0xdfe	; 0xdfe <printf>
		if(fgets(cmd, sizeof(cmd), stdin) == NULL)
     9a2:	0f 90       	pop	r0
     9a4:	0f 90       	pop	r0
     9a6:	40 91 34 03 	lds	r20, 0x0334
     9aa:	50 91 35 03 	lds	r21, 0x0335
     9ae:	ce 01       	movw	r24, r28
     9b0:	01 96       	adiw	r24, 0x01	; 1
     9b2:	60 e8       	ldi	r22, 0x80	; 128
     9b4:	70 e0       	ldi	r23, 0x00	; 0
     9b6:	0e 94 cb 06 	call	0xd96	; 0xd96 <fgets>
     9ba:	00 97       	sbiw	r24, 0x00	; 0
     9bc:	b1 f1       	breq	.+108    	; 0xa2a <main+0xbc>
			break;
		if((cp = strtok(cmd, "\n\r\t ")) == NULL) continue;
     9be:	ce 01       	movw	r24, r28
     9c0:	01 96       	adiw	r24, 0x01	; 1
     9c2:	60 e3       	ldi	r22, 0x30	; 48
     9c4:	72 e0       	ldi	r23, 0x02	; 2
     9c6:	0e 94 8e 06 	call	0xd1c	; 0xd1c <strtok>
     9ca:	8c 01       	movw	r16, r24
     9cc:	00 97       	sbiw	r24, 0x00	; 0
     9ce:	09 f3       	breq	.-62     	; 0x992 <main+0x24>
		ap = strtok(NULL, "\n\r\t ");
     9d0:	80 e0       	ldi	r24, 0x00	; 0
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	60 e3       	ldi	r22, 0x30	; 48
     9d6:	72 e0       	ldi	r23, 0x02	; 2
     9d8:	0e 94 8e 06 	call	0xd1c	; 0xd1c <strtok>
     9dc:	7c 01       	movw	r14, r24
		if      (!strcmp(cp, "prime")) app_prime(ap);
     9de:	c8 01       	movw	r24, r16
     9e0:	65 e3       	ldi	r22, 0x35	; 53
     9e2:	72 e0       	ldi	r23, 0x02	; 2
     9e4:	0e 94 93 06 	call	0xd26	; 0xd26 <strcmp>
     9e8:	00 97       	sbiw	r24, 0x00	; 0
     9ea:	21 f4       	brne	.+8      	; 0x9f4 <main+0x86>
     9ec:	c7 01       	movw	r24, r14
     9ee:	0e 94 13 01 	call	0x226	; 0x226 <app_prime>
     9f2:	cf cf       	rjmp	.-98     	; 0x992 <main+0x24>
		else if (!strcmp(cp, "list"))  app_list(ap);
     9f4:	c8 01       	movw	r24, r16
     9f6:	6b e3       	ldi	r22, 0x3B	; 59
     9f8:	72 e0       	ldi	r23, 0x02	; 2
     9fa:	0e 94 93 06 	call	0xd26	; 0xd26 <strcmp>
     9fe:	00 97       	sbiw	r24, 0x00	; 0
     a00:	21 f4       	brne	.+8      	; 0xa0a <main+0x9c>
     a02:	c7 01       	movw	r24, r14
     a04:	0e 94 96 00 	call	0x12c	; 0x12c <app_list>
     a08:	c4 cf       	rjmp	.-120    	; 0x992 <main+0x24>
		else if (!strcmp(cp, "timer")) app_timer(ap);
     a0a:	c8 01       	movw	r24, r16
     a0c:	60 e4       	ldi	r22, 0x40	; 64
     a0e:	72 e0       	ldi	r23, 0x02	; 2
     a10:	0e 94 93 06 	call	0xd26	; 0xd26 <strcmp>
     a14:	00 97       	sbiw	r24, 0x00	; 0
     a16:	21 f4       	brne	.+8      	; 0xa20 <main+0xb2>
     a18:	c7 01       	movw	r24, r14
     a1a:	0e 94 78 04 	call	0x8f0	; 0x8f0 <app_timer>
     a1e:	b9 cf       	rjmp	.-142    	; 0x992 <main+0x24>
		else 					 	   printf("Unknown command...\n");
     a20:	86 e4       	ldi	r24, 0x46	; 70
     a22:	92 e0       	ldi	r25, 0x02	; 2
     a24:	0e 94 18 07 	call	0xe30	; 0xe30 <puts>
     a28:	b4 cf       	rjmp	.-152    	; 0x992 <main+0x24>
	}
	printf("logout, good bye!!! \n");
     a2a:	89 e5       	ldi	r24, 0x59	; 89
     a2c:	92 e0       	ldi	r25, 0x02	; 2
     a2e:	0e 94 18 07 	call	0xe30	; 0xe30 <puts>
     a32:	ff cf       	rjmp	.-2      	; 0xa32 <main+0xc4>

00000a34 <__divmodhi4>:
     a34:	97 fb       	bst	r25, 7
     a36:	09 2e       	mov	r0, r25
     a38:	07 26       	eor	r0, r23
     a3a:	0a d0       	rcall	.+20     	; 0xa50 <__divmodhi4_neg1>
     a3c:	77 fd       	sbrc	r23, 7
     a3e:	04 d0       	rcall	.+8      	; 0xa48 <__divmodhi4_neg2>
     a40:	0c d0       	rcall	.+24     	; 0xa5a <__udivmodhi4>
     a42:	06 d0       	rcall	.+12     	; 0xa50 <__divmodhi4_neg1>
     a44:	00 20       	and	r0, r0
     a46:	1a f4       	brpl	.+6      	; 0xa4e <__divmodhi4_exit>

00000a48 <__divmodhi4_neg2>:
     a48:	70 95       	com	r23
     a4a:	61 95       	neg	r22
     a4c:	7f 4f       	sbci	r23, 0xFF	; 255

00000a4e <__divmodhi4_exit>:
     a4e:	08 95       	ret

00000a50 <__divmodhi4_neg1>:
     a50:	f6 f7       	brtc	.-4      	; 0xa4e <__divmodhi4_exit>
     a52:	90 95       	com	r25
     a54:	81 95       	neg	r24
     a56:	9f 4f       	sbci	r25, 0xFF	; 255
     a58:	08 95       	ret

00000a5a <__udivmodhi4>:
     a5a:	aa 1b       	sub	r26, r26
     a5c:	bb 1b       	sub	r27, r27
     a5e:	51 e1       	ldi	r21, 0x11	; 17
     a60:	07 c0       	rjmp	.+14     	; 0xa70 <__udivmodhi4_ep>

00000a62 <__udivmodhi4_loop>:
     a62:	aa 1f       	adc	r26, r26
     a64:	bb 1f       	adc	r27, r27
     a66:	a6 17       	cp	r26, r22
     a68:	b7 07       	cpc	r27, r23
     a6a:	10 f0       	brcs	.+4      	; 0xa70 <__udivmodhi4_ep>
     a6c:	a6 1b       	sub	r26, r22
     a6e:	b7 0b       	sbc	r27, r23

00000a70 <__udivmodhi4_ep>:
     a70:	88 1f       	adc	r24, r24
     a72:	99 1f       	adc	r25, r25
     a74:	5a 95       	dec	r21
     a76:	a9 f7       	brne	.-22     	; 0xa62 <__udivmodhi4_loop>
     a78:	80 95       	com	r24
     a7a:	90 95       	com	r25
     a7c:	bc 01       	movw	r22, r24
     a7e:	cd 01       	movw	r24, r26
     a80:	08 95       	ret

00000a82 <malloc>:
     a82:	cf 93       	push	r28
     a84:	df 93       	push	r29
     a86:	ac 01       	movw	r20, r24
     a88:	82 30       	cpi	r24, 0x02	; 2
     a8a:	91 05       	cpc	r25, r1
     a8c:	10 f4       	brcc	.+4      	; 0xa92 <malloc+0x10>
     a8e:	42 e0       	ldi	r20, 0x02	; 2
     a90:	50 e0       	ldi	r21, 0x00	; 0
     a92:	e0 91 32 03 	lds	r30, 0x0332
     a96:	f0 91 33 03 	lds	r31, 0x0333
     a9a:	20 e0       	ldi	r18, 0x00	; 0
     a9c:	30 e0       	ldi	r19, 0x00	; 0
     a9e:	a0 e0       	ldi	r26, 0x00	; 0
     aa0:	b0 e0       	ldi	r27, 0x00	; 0
     aa2:	24 c0       	rjmp	.+72     	; 0xaec <malloc+0x6a>
     aa4:	80 81       	ld	r24, Z
     aa6:	91 81       	ldd	r25, Z+1	; 0x01
     aa8:	84 17       	cp	r24, r20
     aaa:	95 07       	cpc	r25, r21
     aac:	d0 f0       	brcs	.+52     	; 0xae2 <malloc+0x60>
     aae:	84 17       	cp	r24, r20
     ab0:	95 07       	cpc	r25, r21
     ab2:	71 f4       	brne	.+28     	; 0xad0 <malloc+0x4e>
     ab4:	82 81       	ldd	r24, Z+2	; 0x02
     ab6:	93 81       	ldd	r25, Z+3	; 0x03
     ab8:	10 97       	sbiw	r26, 0x00	; 0
     aba:	29 f0       	breq	.+10     	; 0xac6 <malloc+0x44>
     abc:	13 96       	adiw	r26, 0x03	; 3
     abe:	9c 93       	st	X, r25
     ac0:	8e 93       	st	-X, r24
     ac2:	12 97       	sbiw	r26, 0x02	; 2
     ac4:	2c c0       	rjmp	.+88     	; 0xb1e <malloc+0x9c>
     ac6:	90 93 33 03 	sts	0x0333, r25
     aca:	80 93 32 03 	sts	0x0332, r24
     ace:	27 c0       	rjmp	.+78     	; 0xb1e <malloc+0x9c>
     ad0:	21 15       	cp	r18, r1
     ad2:	31 05       	cpc	r19, r1
     ad4:	19 f0       	breq	.+6      	; 0xadc <malloc+0x5a>
     ad6:	82 17       	cp	r24, r18
     ad8:	93 07       	cpc	r25, r19
     ada:	18 f4       	brcc	.+6      	; 0xae2 <malloc+0x60>
     adc:	9c 01       	movw	r18, r24
     ade:	bd 01       	movw	r22, r26
     ae0:	ef 01       	movw	r28, r30
     ae2:	92 81       	ldd	r25, Z+2	; 0x02
     ae4:	83 81       	ldd	r24, Z+3	; 0x03
     ae6:	df 01       	movw	r26, r30
     ae8:	e9 2f       	mov	r30, r25
     aea:	f8 2f       	mov	r31, r24
     aec:	30 97       	sbiw	r30, 0x00	; 0
     aee:	d1 f6       	brne	.-76     	; 0xaa4 <malloc+0x22>
     af0:	21 15       	cp	r18, r1
     af2:	31 05       	cpc	r19, r1
     af4:	f9 f0       	breq	.+62     	; 0xb34 <malloc+0xb2>
     af6:	c9 01       	movw	r24, r18
     af8:	84 1b       	sub	r24, r20
     afa:	95 0b       	sbc	r25, r21
     afc:	84 30       	cpi	r24, 0x04	; 4
     afe:	91 05       	cpc	r25, r1
     b00:	80 f4       	brcc	.+32     	; 0xb22 <malloc+0xa0>
     b02:	8a 81       	ldd	r24, Y+2	; 0x02
     b04:	9b 81       	ldd	r25, Y+3	; 0x03
     b06:	61 15       	cp	r22, r1
     b08:	71 05       	cpc	r23, r1
     b0a:	21 f0       	breq	.+8      	; 0xb14 <malloc+0x92>
     b0c:	fb 01       	movw	r30, r22
     b0e:	93 83       	std	Z+3, r25	; 0x03
     b10:	82 83       	std	Z+2, r24	; 0x02
     b12:	04 c0       	rjmp	.+8      	; 0xb1c <malloc+0x9a>
     b14:	90 93 33 03 	sts	0x0333, r25
     b18:	80 93 32 03 	sts	0x0332, r24
     b1c:	fe 01       	movw	r30, r28
     b1e:	32 96       	adiw	r30, 0x02	; 2
     b20:	42 c0       	rjmp	.+132    	; 0xba6 <malloc+0x124>
     b22:	fe 01       	movw	r30, r28
     b24:	e8 0f       	add	r30, r24
     b26:	f9 1f       	adc	r31, r25
     b28:	41 93       	st	Z+, r20
     b2a:	51 93       	st	Z+, r21
     b2c:	02 97       	sbiw	r24, 0x02	; 2
     b2e:	99 83       	std	Y+1, r25	; 0x01
     b30:	88 83       	st	Y, r24
     b32:	39 c0       	rjmp	.+114    	; 0xba6 <malloc+0x124>
     b34:	80 91 30 03 	lds	r24, 0x0330
     b38:	90 91 31 03 	lds	r25, 0x0331
     b3c:	00 97       	sbiw	r24, 0x00	; 0
     b3e:	41 f4       	brne	.+16     	; 0xb50 <malloc+0xce>
     b40:	80 91 9b 02 	lds	r24, 0x029B
     b44:	90 91 9c 02 	lds	r25, 0x029C
     b48:	90 93 31 03 	sts	0x0331, r25
     b4c:	80 93 30 03 	sts	0x0330, r24
     b50:	20 91 99 02 	lds	r18, 0x0299
     b54:	30 91 9a 02 	lds	r19, 0x029A
     b58:	21 15       	cp	r18, r1
     b5a:	31 05       	cpc	r19, r1
     b5c:	41 f4       	brne	.+16     	; 0xb6e <malloc+0xec>
     b5e:	2d b7       	in	r18, 0x3d	; 61
     b60:	3e b7       	in	r19, 0x3e	; 62
     b62:	80 91 9d 02 	lds	r24, 0x029D
     b66:	90 91 9e 02 	lds	r25, 0x029E
     b6a:	28 1b       	sub	r18, r24
     b6c:	39 0b       	sbc	r19, r25
     b6e:	e0 91 30 03 	lds	r30, 0x0330
     b72:	f0 91 31 03 	lds	r31, 0x0331
     b76:	e2 17       	cp	r30, r18
     b78:	f3 07       	cpc	r31, r19
     b7a:	98 f4       	brcc	.+38     	; 0xba2 <malloc+0x120>
     b7c:	2e 1b       	sub	r18, r30
     b7e:	3f 0b       	sbc	r19, r31
     b80:	24 17       	cp	r18, r20
     b82:	35 07       	cpc	r19, r21
     b84:	70 f0       	brcs	.+28     	; 0xba2 <malloc+0x120>
     b86:	ca 01       	movw	r24, r20
     b88:	02 96       	adiw	r24, 0x02	; 2
     b8a:	28 17       	cp	r18, r24
     b8c:	39 07       	cpc	r19, r25
     b8e:	48 f0       	brcs	.+18     	; 0xba2 <malloc+0x120>
     b90:	8e 0f       	add	r24, r30
     b92:	9f 1f       	adc	r25, r31
     b94:	90 93 31 03 	sts	0x0331, r25
     b98:	80 93 30 03 	sts	0x0330, r24
     b9c:	41 93       	st	Z+, r20
     b9e:	51 93       	st	Z+, r21
     ba0:	02 c0       	rjmp	.+4      	; 0xba6 <malloc+0x124>
     ba2:	e0 e0       	ldi	r30, 0x00	; 0
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	cf 01       	movw	r24, r30
     ba8:	df 91       	pop	r29
     baa:	cf 91       	pop	r28
     bac:	08 95       	ret

00000bae <free>:
     bae:	0f 93       	push	r16
     bb0:	1f 93       	push	r17
     bb2:	cf 93       	push	r28
     bb4:	df 93       	push	r29
     bb6:	9c 01       	movw	r18, r24
     bb8:	00 97       	sbiw	r24, 0x00	; 0
     bba:	09 f4       	brne	.+2      	; 0xbbe <free+0x10>
     bbc:	8c c0       	rjmp	.+280    	; 0xcd6 <free+0x128>
     bbe:	dc 01       	movw	r26, r24
     bc0:	12 97       	sbiw	r26, 0x02	; 2
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	1c 92       	st	X, r1
     bc6:	1e 92       	st	-X, r1
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	60 91 32 03 	lds	r22, 0x0332
     bce:	70 91 33 03 	lds	r23, 0x0333
     bd2:	61 15       	cp	r22, r1
     bd4:	71 05       	cpc	r23, r1
     bd6:	89 f4       	brne	.+34     	; 0xbfa <free+0x4c>
     bd8:	8d 91       	ld	r24, X+
     bda:	9c 91       	ld	r25, X
     bdc:	11 97       	sbiw	r26, 0x01	; 1
     bde:	82 0f       	add	r24, r18
     be0:	93 1f       	adc	r25, r19
     be2:	20 91 30 03 	lds	r18, 0x0330
     be6:	30 91 31 03 	lds	r19, 0x0331
     bea:	28 17       	cp	r18, r24
     bec:	39 07       	cpc	r19, r25
     bee:	69 f5       	brne	.+90     	; 0xc4a <free+0x9c>
     bf0:	b0 93 31 03 	sts	0x0331, r27
     bf4:	a0 93 30 03 	sts	0x0330, r26
     bf8:	6e c0       	rjmp	.+220    	; 0xcd6 <free+0x128>
     bfa:	fb 01       	movw	r30, r22
     bfc:	40 e0       	ldi	r20, 0x00	; 0
     bfe:	50 e0       	ldi	r21, 0x00	; 0
     c00:	01 c0       	rjmp	.+2      	; 0xc04 <free+0x56>
     c02:	fc 01       	movw	r30, r24
     c04:	ea 17       	cp	r30, r26
     c06:	fb 07       	cpc	r31, r27
     c08:	30 f4       	brcc	.+12     	; 0xc16 <free+0x68>
     c0a:	82 81       	ldd	r24, Z+2	; 0x02
     c0c:	93 81       	ldd	r25, Z+3	; 0x03
     c0e:	af 01       	movw	r20, r30
     c10:	00 97       	sbiw	r24, 0x00	; 0
     c12:	b9 f7       	brne	.-18     	; 0xc02 <free+0x54>
     c14:	1f c0       	rjmp	.+62     	; 0xc54 <free+0xa6>
     c16:	e9 01       	movw	r28, r18
     c18:	22 97       	sbiw	r28, 0x02	; 2
     c1a:	fb 83       	std	Y+3, r31	; 0x03
     c1c:	ea 83       	std	Y+2, r30	; 0x02
     c1e:	08 81       	ld	r16, Y
     c20:	19 81       	ldd	r17, Y+1	; 0x01
     c22:	c9 01       	movw	r24, r18
     c24:	80 0f       	add	r24, r16
     c26:	91 1f       	adc	r25, r17
     c28:	8e 17       	cp	r24, r30
     c2a:	9f 07       	cpc	r25, r31
     c2c:	59 f4       	brne	.+22     	; 0xc44 <free+0x96>
     c2e:	80 81       	ld	r24, Z
     c30:	91 81       	ldd	r25, Z+1	; 0x01
     c32:	80 0f       	add	r24, r16
     c34:	91 1f       	adc	r25, r17
     c36:	02 96       	adiw	r24, 0x02	; 2
     c38:	99 83       	std	Y+1, r25	; 0x01
     c3a:	88 83       	st	Y, r24
     c3c:	82 81       	ldd	r24, Z+2	; 0x02
     c3e:	93 81       	ldd	r25, Z+3	; 0x03
     c40:	9b 83       	std	Y+3, r25	; 0x03
     c42:	8a 83       	std	Y+2, r24	; 0x02
     c44:	41 15       	cp	r20, r1
     c46:	51 05       	cpc	r21, r1
     c48:	29 f4       	brne	.+10     	; 0xc54 <free+0xa6>
     c4a:	b0 93 33 03 	sts	0x0333, r27
     c4e:	a0 93 32 03 	sts	0x0332, r26
     c52:	41 c0       	rjmp	.+130    	; 0xcd6 <free+0x128>
     c54:	fa 01       	movw	r30, r20
     c56:	b3 83       	std	Z+3, r27	; 0x03
     c58:	a2 83       	std	Z+2, r26	; 0x02
     c5a:	c1 91       	ld	r28, Z+
     c5c:	d1 91       	ld	r29, Z+
     c5e:	ec 0f       	add	r30, r28
     c60:	fd 1f       	adc	r31, r29
     c62:	ae 17       	cp	r26, r30
     c64:	bf 07       	cpc	r27, r31
     c66:	81 f4       	brne	.+32     	; 0xc88 <free+0xda>
     c68:	f9 01       	movw	r30, r18
     c6a:	92 91       	ld	r25, -Z
     c6c:	82 91       	ld	r24, -Z
     c6e:	8c 0f       	add	r24, r28
     c70:	9d 1f       	adc	r25, r29
     c72:	02 96       	adiw	r24, 0x02	; 2
     c74:	da 01       	movw	r26, r20
     c76:	11 96       	adiw	r26, 0x01	; 1
     c78:	9c 93       	st	X, r25
     c7a:	8e 93       	st	-X, r24
     c7c:	82 81       	ldd	r24, Z+2	; 0x02
     c7e:	93 81       	ldd	r25, Z+3	; 0x03
     c80:	13 96       	adiw	r26, 0x03	; 3
     c82:	9c 93       	st	X, r25
     c84:	8e 93       	st	-X, r24
     c86:	12 97       	sbiw	r26, 0x02	; 2
     c88:	e0 e0       	ldi	r30, 0x00	; 0
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	02 c0       	rjmp	.+4      	; 0xc92 <free+0xe4>
     c8e:	fb 01       	movw	r30, r22
     c90:	bc 01       	movw	r22, r24
     c92:	db 01       	movw	r26, r22
     c94:	12 96       	adiw	r26, 0x02	; 2
     c96:	8d 91       	ld	r24, X+
     c98:	9c 91       	ld	r25, X
     c9a:	13 97       	sbiw	r26, 0x03	; 3
     c9c:	00 97       	sbiw	r24, 0x00	; 0
     c9e:	b9 f7       	brne	.-18     	; 0xc8e <free+0xe0>
     ca0:	cb 01       	movw	r24, r22
     ca2:	02 96       	adiw	r24, 0x02	; 2
     ca4:	2d 91       	ld	r18, X+
     ca6:	3c 91       	ld	r19, X
     ca8:	11 97       	sbiw	r26, 0x01	; 1
     caa:	82 0f       	add	r24, r18
     cac:	93 1f       	adc	r25, r19
     cae:	20 91 30 03 	lds	r18, 0x0330
     cb2:	30 91 31 03 	lds	r19, 0x0331
     cb6:	28 17       	cp	r18, r24
     cb8:	39 07       	cpc	r19, r25
     cba:	69 f4       	brne	.+26     	; 0xcd6 <free+0x128>
     cbc:	30 97       	sbiw	r30, 0x00	; 0
     cbe:	29 f4       	brne	.+10     	; 0xcca <free+0x11c>
     cc0:	10 92 33 03 	sts	0x0333, r1
     cc4:	10 92 32 03 	sts	0x0332, r1
     cc8:	02 c0       	rjmp	.+4      	; 0xcce <free+0x120>
     cca:	13 82       	std	Z+3, r1	; 0x03
     ccc:	12 82       	std	Z+2, r1	; 0x02
     cce:	70 93 31 03 	sts	0x0331, r23
     cd2:	60 93 30 03 	sts	0x0330, r22
     cd6:	df 91       	pop	r29
     cd8:	cf 91       	pop	r28
     cda:	1f 91       	pop	r17
     cdc:	0f 91       	pop	r16
     cde:	08 95       	ret

00000ce0 <atoi>:
     ce0:	fc 01       	movw	r30, r24
     ce2:	88 27       	eor	r24, r24
     ce4:	99 27       	eor	r25, r25
     ce6:	e8 94       	clt
     ce8:	21 91       	ld	r18, Z+
     cea:	20 32       	cpi	r18, 0x20	; 32
     cec:	e9 f3       	breq	.-6      	; 0xce8 <atoi+0x8>
     cee:	29 30       	cpi	r18, 0x09	; 9
     cf0:	10 f0       	brcs	.+4      	; 0xcf6 <atoi+0x16>
     cf2:	2e 30       	cpi	r18, 0x0E	; 14
     cf4:	c8 f3       	brcs	.-14     	; 0xce8 <atoi+0x8>
     cf6:	2b 32       	cpi	r18, 0x2B	; 43
     cf8:	41 f0       	breq	.+16     	; 0xd0a <atoi+0x2a>
     cfa:	2d 32       	cpi	r18, 0x2D	; 45
     cfc:	39 f4       	brne	.+14     	; 0xd0c <atoi+0x2c>
     cfe:	68 94       	set
     d00:	04 c0       	rjmp	.+8      	; 0xd0a <atoi+0x2a>
     d02:	0e 94 c3 06 	call	0xd86	; 0xd86 <__mulhi_const_10>
     d06:	82 0f       	add	r24, r18
     d08:	91 1d       	adc	r25, r1
     d0a:	21 91       	ld	r18, Z+
     d0c:	20 53       	subi	r18, 0x30	; 48
     d0e:	2a 30       	cpi	r18, 0x0A	; 10
     d10:	c0 f3       	brcs	.-16     	; 0xd02 <atoi+0x22>
     d12:	1e f4       	brtc	.+6      	; 0xd1a <atoi+0x3a>
     d14:	90 95       	com	r25
     d16:	81 95       	neg	r24
     d18:	9f 4f       	sbci	r25, 0xFF	; 255
     d1a:	08 95       	ret

00000d1c <strtok>:
     d1c:	45 ea       	ldi	r20, 0xA5	; 165
     d1e:	52 e0       	ldi	r21, 0x02	; 2
     d20:	0e 94 9c 06 	call	0xd38	; 0xd38 <strtok_r>
     d24:	08 95       	ret

00000d26 <strcmp>:
     d26:	fb 01       	movw	r30, r22
     d28:	dc 01       	movw	r26, r24
     d2a:	8d 91       	ld	r24, X+
     d2c:	01 90       	ld	r0, Z+
     d2e:	80 19       	sub	r24, r0
     d30:	01 10       	cpse	r0, r1
     d32:	d9 f3       	breq	.-10     	; 0xd2a <strcmp+0x4>
     d34:	99 0b       	sbc	r25, r25
     d36:	08 95       	ret

00000d38 <strtok_r>:
     d38:	fa 01       	movw	r30, r20
     d3a:	a1 91       	ld	r26, Z+
     d3c:	b0 81       	ld	r27, Z
     d3e:	00 97       	sbiw	r24, 0x00	; 0
     d40:	19 f4       	brne	.+6      	; 0xd48 <strtok_r+0x10>
     d42:	10 97       	sbiw	r26, 0x00	; 0
     d44:	e1 f0       	breq	.+56     	; 0xd7e <strtok_r+0x46>
     d46:	cd 01       	movw	r24, r26
     d48:	dc 01       	movw	r26, r24
     d4a:	cd 01       	movw	r24, r26
     d4c:	0d 90       	ld	r0, X+
     d4e:	00 20       	and	r0, r0
     d50:	11 f4       	brne	.+4      	; 0xd56 <strtok_r+0x1e>
     d52:	c0 01       	movw	r24, r0
     d54:	13 c0       	rjmp	.+38     	; 0xd7c <strtok_r+0x44>
     d56:	fb 01       	movw	r30, r22
     d58:	21 91       	ld	r18, Z+
     d5a:	22 23       	and	r18, r18
     d5c:	19 f0       	breq	.+6      	; 0xd64 <strtok_r+0x2c>
     d5e:	20 15       	cp	r18, r0
     d60:	d9 f7       	brne	.-10     	; 0xd58 <strtok_r+0x20>
     d62:	f3 cf       	rjmp	.-26     	; 0xd4a <strtok_r+0x12>
     d64:	fb 01       	movw	r30, r22
     d66:	21 91       	ld	r18, Z+
     d68:	20 15       	cp	r18, r0
     d6a:	19 f4       	brne	.+6      	; 0xd72 <strtok_r+0x3a>
     d6c:	1e 92       	st	-X, r1
     d6e:	11 96       	adiw	r26, 0x01	; 1
     d70:	06 c0       	rjmp	.+12     	; 0xd7e <strtok_r+0x46>
     d72:	22 23       	and	r18, r18
     d74:	c1 f7       	brne	.-16     	; 0xd66 <strtok_r+0x2e>
     d76:	0d 90       	ld	r0, X+
     d78:	00 20       	and	r0, r0
     d7a:	a1 f7       	brne	.-24     	; 0xd64 <strtok_r+0x2c>
     d7c:	d0 01       	movw	r26, r0
     d7e:	fa 01       	movw	r30, r20
     d80:	a1 93       	st	Z+, r26
     d82:	b0 83       	st	Z, r27
     d84:	08 95       	ret

00000d86 <__mulhi_const_10>:
     d86:	7a e0       	ldi	r23, 0x0A	; 10
     d88:	97 9f       	mul	r25, r23
     d8a:	90 2d       	mov	r25, r0
     d8c:	87 9f       	mul	r24, r23
     d8e:	80 2d       	mov	r24, r0
     d90:	91 0d       	add	r25, r1
     d92:	11 24       	eor	r1, r1
     d94:	08 95       	ret

00000d96 <fgets>:
     d96:	cf 92       	push	r12
     d98:	df 92       	push	r13
     d9a:	ef 92       	push	r14
     d9c:	ff 92       	push	r15
     d9e:	0f 93       	push	r16
     da0:	1f 93       	push	r17
     da2:	cf 93       	push	r28
     da4:	df 93       	push	r29
     da6:	8c 01       	movw	r16, r24
     da8:	6a 01       	movw	r12, r20
     daa:	fa 01       	movw	r30, r20
     dac:	83 81       	ldd	r24, Z+3	; 0x03
     dae:	80 ff       	sbrs	r24, 0
     db0:	1a c0       	rjmp	.+52     	; 0xde6 <fgets+0x50>
     db2:	16 16       	cp	r1, r22
     db4:	17 06       	cpc	r1, r23
     db6:	bc f4       	brge	.+46     	; 0xde6 <fgets+0x50>
     db8:	7b 01       	movw	r14, r22
     dba:	e8 01       	movw	r28, r16
     dbc:	0e c0       	rjmp	.+28     	; 0xdda <fgets+0x44>
     dbe:	c6 01       	movw	r24, r12
     dc0:	0e 94 63 09 	call	0x12c6	; 0x12c6 <fgetc>
     dc4:	ff ef       	ldi	r31, 0xFF	; 255
     dc6:	8f 3f       	cpi	r24, 0xFF	; 255
     dc8:	9f 07       	cpc	r25, r31
     dca:	69 f0       	breq	.+26     	; 0xde6 <fgets+0x50>
     dcc:	89 93       	st	Y+, r24
     dce:	08 94       	sec
     dd0:	e1 08       	sbc	r14, r1
     dd2:	f1 08       	sbc	r15, r1
     dd4:	8a 30       	cpi	r24, 0x0A	; 10
     dd6:	91 05       	cpc	r25, r1
     dd8:	21 f0       	breq	.+8      	; 0xde2 <fgets+0x4c>
     dda:	21 e0       	ldi	r18, 0x01	; 1
     ddc:	e2 16       	cp	r14, r18
     dde:	f1 04       	cpc	r15, r1
     de0:	71 f7       	brne	.-36     	; 0xdbe <fgets+0x28>
     de2:	18 82       	st	Y, r1
     de4:	02 c0       	rjmp	.+4      	; 0xdea <fgets+0x54>
     de6:	00 e0       	ldi	r16, 0x00	; 0
     de8:	10 e0       	ldi	r17, 0x00	; 0
     dea:	c8 01       	movw	r24, r16
     dec:	df 91       	pop	r29
     dee:	cf 91       	pop	r28
     df0:	1f 91       	pop	r17
     df2:	0f 91       	pop	r16
     df4:	ff 90       	pop	r15
     df6:	ef 90       	pop	r14
     df8:	df 90       	pop	r13
     dfa:	cf 90       	pop	r12
     dfc:	08 95       	ret

00000dfe <printf>:
     dfe:	cf 93       	push	r28
     e00:	df 93       	push	r29
     e02:	cd b7       	in	r28, 0x3d	; 61
     e04:	de b7       	in	r29, 0x3e	; 62
     e06:	fe 01       	movw	r30, r28
     e08:	36 96       	adiw	r30, 0x06	; 6
     e0a:	61 91       	ld	r22, Z+
     e0c:	71 91       	ld	r23, Z+
     e0e:	80 91 36 03 	lds	r24, 0x0336
     e12:	90 91 37 03 	lds	r25, 0x0337
     e16:	af 01       	movw	r20, r30
     e18:	0e 94 46 07 	call	0xe8c	; 0xe8c <vfprintf>
     e1c:	df 91       	pop	r29
     e1e:	cf 91       	pop	r28
     e20:	08 95       	ret

00000e22 <putchar>:
     e22:	60 91 36 03 	lds	r22, 0x0336
     e26:	70 91 37 03 	lds	r23, 0x0337
     e2a:	0e 94 a3 09 	call	0x1346	; 0x1346 <fputc>
     e2e:	08 95       	ret

00000e30 <puts>:
     e30:	0f 93       	push	r16
     e32:	1f 93       	push	r17
     e34:	cf 93       	push	r28
     e36:	df 93       	push	r29
     e38:	8c 01       	movw	r16, r24
     e3a:	e0 91 36 03 	lds	r30, 0x0336
     e3e:	f0 91 37 03 	lds	r31, 0x0337
     e42:	83 81       	ldd	r24, Z+3	; 0x03
     e44:	81 ff       	sbrs	r24, 1
     e46:	1a c0       	rjmp	.+52     	; 0xe7c <puts+0x4c>
     e48:	c0 e0       	ldi	r28, 0x00	; 0
     e4a:	d0 e0       	ldi	r29, 0x00	; 0
     e4c:	05 c0       	rjmp	.+10     	; 0xe58 <puts+0x28>
     e4e:	19 95       	eicall
     e50:	00 97       	sbiw	r24, 0x00	; 0
     e52:	11 f0       	breq	.+4      	; 0xe58 <puts+0x28>
     e54:	cf ef       	ldi	r28, 0xFF	; 255
     e56:	df ef       	ldi	r29, 0xFF	; 255
     e58:	f8 01       	movw	r30, r16
     e5a:	81 91       	ld	r24, Z+
     e5c:	8f 01       	movw	r16, r30
     e5e:	60 91 36 03 	lds	r22, 0x0336
     e62:	70 91 37 03 	lds	r23, 0x0337
     e66:	db 01       	movw	r26, r22
     e68:	18 96       	adiw	r26, 0x08	; 8
     e6a:	ed 91       	ld	r30, X+
     e6c:	fc 91       	ld	r31, X
     e6e:	19 97       	sbiw	r26, 0x09	; 9
     e70:	88 23       	and	r24, r24
     e72:	69 f7       	brne	.-38     	; 0xe4e <puts+0x1e>
     e74:	8a e0       	ldi	r24, 0x0A	; 10
     e76:	19 95       	eicall
     e78:	00 97       	sbiw	r24, 0x00	; 0
     e7a:	11 f0       	breq	.+4      	; 0xe80 <puts+0x50>
     e7c:	cf ef       	ldi	r28, 0xFF	; 255
     e7e:	df ef       	ldi	r29, 0xFF	; 255
     e80:	ce 01       	movw	r24, r28
     e82:	df 91       	pop	r29
     e84:	cf 91       	pop	r28
     e86:	1f 91       	pop	r17
     e88:	0f 91       	pop	r16
     e8a:	08 95       	ret

00000e8c <vfprintf>:
     e8c:	2f 92       	push	r2
     e8e:	3f 92       	push	r3
     e90:	4f 92       	push	r4
     e92:	5f 92       	push	r5
     e94:	6f 92       	push	r6
     e96:	7f 92       	push	r7
     e98:	8f 92       	push	r8
     e9a:	9f 92       	push	r9
     e9c:	af 92       	push	r10
     e9e:	bf 92       	push	r11
     ea0:	cf 92       	push	r12
     ea2:	df 92       	push	r13
     ea4:	ef 92       	push	r14
     ea6:	ff 92       	push	r15
     ea8:	0f 93       	push	r16
     eaa:	1f 93       	push	r17
     eac:	cf 93       	push	r28
     eae:	df 93       	push	r29
     eb0:	cd b7       	in	r28, 0x3d	; 61
     eb2:	de b7       	in	r29, 0x3e	; 62
     eb4:	2d 97       	sbiw	r28, 0x0d	; 13
     eb6:	0f b6       	in	r0, 0x3f	; 63
     eb8:	f8 94       	cli
     eba:	de bf       	out	0x3e, r29	; 62
     ebc:	0f be       	out	0x3f, r0	; 63
     ebe:	cd bf       	out	0x3d, r28	; 61
     ec0:	3c 01       	movw	r6, r24
     ec2:	7d 87       	std	Y+13, r23	; 0x0d
     ec4:	6c 87       	std	Y+12, r22	; 0x0c
     ec6:	5a 01       	movw	r10, r20
     ec8:	fc 01       	movw	r30, r24
     eca:	17 82       	std	Z+7, r1	; 0x07
     ecc:	16 82       	std	Z+6, r1	; 0x06
     ece:	83 81       	ldd	r24, Z+3	; 0x03
     ed0:	81 ff       	sbrs	r24, 1
     ed2:	c8 c1       	rjmp	.+912    	; 0x1264 <vfprintf+0x3d8>
     ed4:	2e 01       	movw	r4, r28
     ed6:	08 94       	sec
     ed8:	41 1c       	adc	r4, r1
     eda:	51 1c       	adc	r5, r1
     edc:	f3 01       	movw	r30, r6
     ede:	93 81       	ldd	r25, Z+3	; 0x03
     ee0:	ec 85       	ldd	r30, Y+12	; 0x0c
     ee2:	fd 85       	ldd	r31, Y+13	; 0x0d
     ee4:	93 fd       	sbrc	r25, 3
     ee6:	85 91       	lpm	r24, Z+
     ee8:	93 ff       	sbrs	r25, 3
     eea:	81 91       	ld	r24, Z+
     eec:	fd 87       	std	Y+13, r31	; 0x0d
     eee:	ec 87       	std	Y+12, r30	; 0x0c
     ef0:	88 23       	and	r24, r24
     ef2:	09 f4       	brne	.+2      	; 0xef6 <vfprintf+0x6a>
     ef4:	b3 c1       	rjmp	.+870    	; 0x125c <vfprintf+0x3d0>
     ef6:	85 32       	cpi	r24, 0x25	; 37
     ef8:	41 f4       	brne	.+16     	; 0xf0a <vfprintf+0x7e>
     efa:	93 fd       	sbrc	r25, 3
     efc:	85 91       	lpm	r24, Z+
     efe:	93 ff       	sbrs	r25, 3
     f00:	81 91       	ld	r24, Z+
     f02:	fd 87       	std	Y+13, r31	; 0x0d
     f04:	ec 87       	std	Y+12, r30	; 0x0c
     f06:	85 32       	cpi	r24, 0x25	; 37
     f08:	29 f4       	brne	.+10     	; 0xf14 <vfprintf+0x88>
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	b3 01       	movw	r22, r6
     f0e:	0e 94 a3 09 	call	0x1346	; 0x1346 <fputc>
     f12:	e4 cf       	rjmp	.-56     	; 0xedc <vfprintf+0x50>
     f14:	ff 24       	eor	r15, r15
     f16:	ee 24       	eor	r14, r14
     f18:	10 e0       	ldi	r17, 0x00	; 0
     f1a:	10 32       	cpi	r17, 0x20	; 32
     f1c:	b0 f4       	brcc	.+44     	; 0xf4a <vfprintf+0xbe>
     f1e:	8b 32       	cpi	r24, 0x2B	; 43
     f20:	69 f0       	breq	.+26     	; 0xf3c <vfprintf+0xb0>
     f22:	8c 32       	cpi	r24, 0x2C	; 44
     f24:	28 f4       	brcc	.+10     	; 0xf30 <vfprintf+0xa4>
     f26:	80 32       	cpi	r24, 0x20	; 32
     f28:	51 f0       	breq	.+20     	; 0xf3e <vfprintf+0xb2>
     f2a:	83 32       	cpi	r24, 0x23	; 35
     f2c:	71 f4       	brne	.+28     	; 0xf4a <vfprintf+0xbe>
     f2e:	0b c0       	rjmp	.+22     	; 0xf46 <vfprintf+0xba>
     f30:	8d 32       	cpi	r24, 0x2D	; 45
     f32:	39 f0       	breq	.+14     	; 0xf42 <vfprintf+0xb6>
     f34:	80 33       	cpi	r24, 0x30	; 48
     f36:	49 f4       	brne	.+18     	; 0xf4a <vfprintf+0xbe>
     f38:	11 60       	ori	r17, 0x01	; 1
     f3a:	2c c0       	rjmp	.+88     	; 0xf94 <vfprintf+0x108>
     f3c:	12 60       	ori	r17, 0x02	; 2
     f3e:	14 60       	ori	r17, 0x04	; 4
     f40:	29 c0       	rjmp	.+82     	; 0xf94 <vfprintf+0x108>
     f42:	18 60       	ori	r17, 0x08	; 8
     f44:	27 c0       	rjmp	.+78     	; 0xf94 <vfprintf+0x108>
     f46:	10 61       	ori	r17, 0x10	; 16
     f48:	25 c0       	rjmp	.+74     	; 0xf94 <vfprintf+0x108>
     f4a:	17 fd       	sbrc	r17, 7
     f4c:	2e c0       	rjmp	.+92     	; 0xfaa <vfprintf+0x11e>
     f4e:	28 2f       	mov	r18, r24
     f50:	20 53       	subi	r18, 0x30	; 48
     f52:	2a 30       	cpi	r18, 0x0A	; 10
     f54:	98 f4       	brcc	.+38     	; 0xf7c <vfprintf+0xf0>
     f56:	16 ff       	sbrs	r17, 6
     f58:	08 c0       	rjmp	.+16     	; 0xf6a <vfprintf+0xde>
     f5a:	8f 2d       	mov	r24, r15
     f5c:	88 0f       	add	r24, r24
     f5e:	f8 2e       	mov	r15, r24
     f60:	ff 0c       	add	r15, r15
     f62:	ff 0c       	add	r15, r15
     f64:	f8 0e       	add	r15, r24
     f66:	f2 0e       	add	r15, r18
     f68:	15 c0       	rjmp	.+42     	; 0xf94 <vfprintf+0x108>
     f6a:	8e 2d       	mov	r24, r14
     f6c:	88 0f       	add	r24, r24
     f6e:	e8 2e       	mov	r14, r24
     f70:	ee 0c       	add	r14, r14
     f72:	ee 0c       	add	r14, r14
     f74:	e8 0e       	add	r14, r24
     f76:	e2 0e       	add	r14, r18
     f78:	10 62       	ori	r17, 0x20	; 32
     f7a:	0c c0       	rjmp	.+24     	; 0xf94 <vfprintf+0x108>
     f7c:	8e 32       	cpi	r24, 0x2E	; 46
     f7e:	21 f4       	brne	.+8      	; 0xf88 <vfprintf+0xfc>
     f80:	16 fd       	sbrc	r17, 6
     f82:	6c c1       	rjmp	.+728    	; 0x125c <vfprintf+0x3d0>
     f84:	10 64       	ori	r17, 0x40	; 64
     f86:	06 c0       	rjmp	.+12     	; 0xf94 <vfprintf+0x108>
     f88:	8c 36       	cpi	r24, 0x6C	; 108
     f8a:	11 f4       	brne	.+4      	; 0xf90 <vfprintf+0x104>
     f8c:	10 68       	ori	r17, 0x80	; 128
     f8e:	02 c0       	rjmp	.+4      	; 0xf94 <vfprintf+0x108>
     f90:	88 36       	cpi	r24, 0x68	; 104
     f92:	59 f4       	brne	.+22     	; 0xfaa <vfprintf+0x11e>
     f94:	ec 85       	ldd	r30, Y+12	; 0x0c
     f96:	fd 85       	ldd	r31, Y+13	; 0x0d
     f98:	93 fd       	sbrc	r25, 3
     f9a:	85 91       	lpm	r24, Z+
     f9c:	93 ff       	sbrs	r25, 3
     f9e:	81 91       	ld	r24, Z+
     fa0:	fd 87       	std	Y+13, r31	; 0x0d
     fa2:	ec 87       	std	Y+12, r30	; 0x0c
     fa4:	88 23       	and	r24, r24
     fa6:	09 f0       	breq	.+2      	; 0xfaa <vfprintf+0x11e>
     fa8:	b8 cf       	rjmp	.-144    	; 0xf1a <vfprintf+0x8e>
     faa:	98 2f       	mov	r25, r24
     fac:	95 54       	subi	r25, 0x45	; 69
     fae:	93 30       	cpi	r25, 0x03	; 3
     fb0:	18 f0       	brcs	.+6      	; 0xfb8 <vfprintf+0x12c>
     fb2:	90 52       	subi	r25, 0x20	; 32
     fb4:	93 30       	cpi	r25, 0x03	; 3
     fb6:	38 f4       	brcc	.+14     	; 0xfc6 <vfprintf+0x13a>
     fb8:	24 e0       	ldi	r18, 0x04	; 4
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	a2 0e       	add	r10, r18
     fbe:	b3 1e       	adc	r11, r19
     fc0:	3f e3       	ldi	r19, 0x3F	; 63
     fc2:	39 83       	std	Y+1, r19	; 0x01
     fc4:	0f c0       	rjmp	.+30     	; 0xfe4 <vfprintf+0x158>
     fc6:	83 36       	cpi	r24, 0x63	; 99
     fc8:	31 f0       	breq	.+12     	; 0xfd6 <vfprintf+0x14a>
     fca:	83 37       	cpi	r24, 0x73	; 115
     fcc:	81 f0       	breq	.+32     	; 0xfee <vfprintf+0x162>
     fce:	83 35       	cpi	r24, 0x53	; 83
     fd0:	09 f0       	breq	.+2      	; 0xfd4 <vfprintf+0x148>
     fd2:	5a c0       	rjmp	.+180    	; 0x1088 <vfprintf+0x1fc>
     fd4:	22 c0       	rjmp	.+68     	; 0x101a <vfprintf+0x18e>
     fd6:	f5 01       	movw	r30, r10
     fd8:	80 81       	ld	r24, Z
     fda:	89 83       	std	Y+1, r24	; 0x01
     fdc:	22 e0       	ldi	r18, 0x02	; 2
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	a2 0e       	add	r10, r18
     fe2:	b3 1e       	adc	r11, r19
     fe4:	21 e0       	ldi	r18, 0x01	; 1
     fe6:	c2 2e       	mov	r12, r18
     fe8:	d1 2c       	mov	r13, r1
     fea:	42 01       	movw	r8, r4
     fec:	14 c0       	rjmp	.+40     	; 0x1016 <vfprintf+0x18a>
     fee:	92 e0       	ldi	r25, 0x02	; 2
     ff0:	29 2e       	mov	r2, r25
     ff2:	31 2c       	mov	r3, r1
     ff4:	2a 0c       	add	r2, r10
     ff6:	3b 1c       	adc	r3, r11
     ff8:	f5 01       	movw	r30, r10
     ffa:	80 80       	ld	r8, Z
     ffc:	91 80       	ldd	r9, Z+1	; 0x01
     ffe:	16 ff       	sbrs	r17, 6
    1000:	03 c0       	rjmp	.+6      	; 0x1008 <vfprintf+0x17c>
    1002:	6f 2d       	mov	r22, r15
    1004:	70 e0       	ldi	r23, 0x00	; 0
    1006:	02 c0       	rjmp	.+4      	; 0x100c <vfprintf+0x180>
    1008:	6f ef       	ldi	r22, 0xFF	; 255
    100a:	7f ef       	ldi	r23, 0xFF	; 255
    100c:	c4 01       	movw	r24, r8
    100e:	0e 94 58 09 	call	0x12b0	; 0x12b0 <strnlen>
    1012:	6c 01       	movw	r12, r24
    1014:	51 01       	movw	r10, r2
    1016:	1f 77       	andi	r17, 0x7F	; 127
    1018:	15 c0       	rjmp	.+42     	; 0x1044 <vfprintf+0x1b8>
    101a:	82 e0       	ldi	r24, 0x02	; 2
    101c:	28 2e       	mov	r2, r24
    101e:	31 2c       	mov	r3, r1
    1020:	2a 0c       	add	r2, r10
    1022:	3b 1c       	adc	r3, r11
    1024:	f5 01       	movw	r30, r10
    1026:	80 80       	ld	r8, Z
    1028:	91 80       	ldd	r9, Z+1	; 0x01
    102a:	16 ff       	sbrs	r17, 6
    102c:	03 c0       	rjmp	.+6      	; 0x1034 <vfprintf+0x1a8>
    102e:	6f 2d       	mov	r22, r15
    1030:	70 e0       	ldi	r23, 0x00	; 0
    1032:	02 c0       	rjmp	.+4      	; 0x1038 <vfprintf+0x1ac>
    1034:	6f ef       	ldi	r22, 0xFF	; 255
    1036:	7f ef       	ldi	r23, 0xFF	; 255
    1038:	c4 01       	movw	r24, r8
    103a:	0e 94 4d 09 	call	0x129a	; 0x129a <strnlen_P>
    103e:	6c 01       	movw	r12, r24
    1040:	10 68       	ori	r17, 0x80	; 128
    1042:	51 01       	movw	r10, r2
    1044:	13 fd       	sbrc	r17, 3
    1046:	1c c0       	rjmp	.+56     	; 0x1080 <vfprintf+0x1f4>
    1048:	06 c0       	rjmp	.+12     	; 0x1056 <vfprintf+0x1ca>
    104a:	80 e2       	ldi	r24, 0x20	; 32
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	b3 01       	movw	r22, r6
    1050:	0e 94 a3 09 	call	0x1346	; 0x1346 <fputc>
    1054:	ea 94       	dec	r14
    1056:	8e 2d       	mov	r24, r14
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	c8 16       	cp	r12, r24
    105c:	d9 06       	cpc	r13, r25
    105e:	a8 f3       	brcs	.-22     	; 0x104a <vfprintf+0x1be>
    1060:	0f c0       	rjmp	.+30     	; 0x1080 <vfprintf+0x1f4>
    1062:	f4 01       	movw	r30, r8
    1064:	17 fd       	sbrc	r17, 7
    1066:	85 91       	lpm	r24, Z+
    1068:	17 ff       	sbrs	r17, 7
    106a:	81 91       	ld	r24, Z+
    106c:	4f 01       	movw	r8, r30
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	b3 01       	movw	r22, r6
    1072:	0e 94 a3 09 	call	0x1346	; 0x1346 <fputc>
    1076:	e1 10       	cpse	r14, r1
    1078:	ea 94       	dec	r14
    107a:	08 94       	sec
    107c:	c1 08       	sbc	r12, r1
    107e:	d1 08       	sbc	r13, r1
    1080:	c1 14       	cp	r12, r1
    1082:	d1 04       	cpc	r13, r1
    1084:	71 f7       	brne	.-36     	; 0x1062 <vfprintf+0x1d6>
    1086:	e7 c0       	rjmp	.+462    	; 0x1256 <vfprintf+0x3ca>
    1088:	84 36       	cpi	r24, 0x64	; 100
    108a:	11 f0       	breq	.+4      	; 0x1090 <vfprintf+0x204>
    108c:	89 36       	cpi	r24, 0x69	; 105
    108e:	51 f5       	brne	.+84     	; 0x10e4 <vfprintf+0x258>
    1090:	f5 01       	movw	r30, r10
    1092:	17 ff       	sbrs	r17, 7
    1094:	07 c0       	rjmp	.+14     	; 0x10a4 <vfprintf+0x218>
    1096:	80 81       	ld	r24, Z
    1098:	91 81       	ldd	r25, Z+1	; 0x01
    109a:	a2 81       	ldd	r26, Z+2	; 0x02
    109c:	b3 81       	ldd	r27, Z+3	; 0x03
    109e:	24 e0       	ldi	r18, 0x04	; 4
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	08 c0       	rjmp	.+16     	; 0x10b4 <vfprintf+0x228>
    10a4:	80 81       	ld	r24, Z
    10a6:	91 81       	ldd	r25, Z+1	; 0x01
    10a8:	aa 27       	eor	r26, r26
    10aa:	97 fd       	sbrc	r25, 7
    10ac:	a0 95       	com	r26
    10ae:	ba 2f       	mov	r27, r26
    10b0:	22 e0       	ldi	r18, 0x02	; 2
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	a2 0e       	add	r10, r18
    10b6:	b3 1e       	adc	r11, r19
    10b8:	01 2f       	mov	r16, r17
    10ba:	0f 76       	andi	r16, 0x6F	; 111
    10bc:	b7 ff       	sbrs	r27, 7
    10be:	08 c0       	rjmp	.+16     	; 0x10d0 <vfprintf+0x244>
    10c0:	b0 95       	com	r27
    10c2:	a0 95       	com	r26
    10c4:	90 95       	com	r25
    10c6:	81 95       	neg	r24
    10c8:	9f 4f       	sbci	r25, 0xFF	; 255
    10ca:	af 4f       	sbci	r26, 0xFF	; 255
    10cc:	bf 4f       	sbci	r27, 0xFF	; 255
    10ce:	00 68       	ori	r16, 0x80	; 128
    10d0:	bc 01       	movw	r22, r24
    10d2:	cd 01       	movw	r24, r26
    10d4:	a2 01       	movw	r20, r4
    10d6:	2a e0       	ldi	r18, 0x0A	; 10
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	0e 94 cf 09 	call	0x139e	; 0x139e <__ultoa_invert>
    10de:	d8 2e       	mov	r13, r24
    10e0:	d4 18       	sub	r13, r4
    10e2:	3f c0       	rjmp	.+126    	; 0x1162 <vfprintf+0x2d6>
    10e4:	85 37       	cpi	r24, 0x75	; 117
    10e6:	21 f4       	brne	.+8      	; 0x10f0 <vfprintf+0x264>
    10e8:	1f 7e       	andi	r17, 0xEF	; 239
    10ea:	2a e0       	ldi	r18, 0x0A	; 10
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	20 c0       	rjmp	.+64     	; 0x1130 <vfprintf+0x2a4>
    10f0:	19 7f       	andi	r17, 0xF9	; 249
    10f2:	8f 36       	cpi	r24, 0x6F	; 111
    10f4:	a9 f0       	breq	.+42     	; 0x1120 <vfprintf+0x294>
    10f6:	80 37       	cpi	r24, 0x70	; 112
    10f8:	20 f4       	brcc	.+8      	; 0x1102 <vfprintf+0x276>
    10fa:	88 35       	cpi	r24, 0x58	; 88
    10fc:	09 f0       	breq	.+2      	; 0x1100 <vfprintf+0x274>
    10fe:	ae c0       	rjmp	.+348    	; 0x125c <vfprintf+0x3d0>
    1100:	0b c0       	rjmp	.+22     	; 0x1118 <vfprintf+0x28c>
    1102:	80 37       	cpi	r24, 0x70	; 112
    1104:	21 f0       	breq	.+8      	; 0x110e <vfprintf+0x282>
    1106:	88 37       	cpi	r24, 0x78	; 120
    1108:	09 f0       	breq	.+2      	; 0x110c <vfprintf+0x280>
    110a:	a8 c0       	rjmp	.+336    	; 0x125c <vfprintf+0x3d0>
    110c:	01 c0       	rjmp	.+2      	; 0x1110 <vfprintf+0x284>
    110e:	10 61       	ori	r17, 0x10	; 16
    1110:	14 ff       	sbrs	r17, 4
    1112:	09 c0       	rjmp	.+18     	; 0x1126 <vfprintf+0x29a>
    1114:	14 60       	ori	r17, 0x04	; 4
    1116:	07 c0       	rjmp	.+14     	; 0x1126 <vfprintf+0x29a>
    1118:	14 ff       	sbrs	r17, 4
    111a:	08 c0       	rjmp	.+16     	; 0x112c <vfprintf+0x2a0>
    111c:	16 60       	ori	r17, 0x06	; 6
    111e:	06 c0       	rjmp	.+12     	; 0x112c <vfprintf+0x2a0>
    1120:	28 e0       	ldi	r18, 0x08	; 8
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	05 c0       	rjmp	.+10     	; 0x1130 <vfprintf+0x2a4>
    1126:	20 e1       	ldi	r18, 0x10	; 16
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	02 c0       	rjmp	.+4      	; 0x1130 <vfprintf+0x2a4>
    112c:	20 e1       	ldi	r18, 0x10	; 16
    112e:	32 e0       	ldi	r19, 0x02	; 2
    1130:	f5 01       	movw	r30, r10
    1132:	17 ff       	sbrs	r17, 7
    1134:	07 c0       	rjmp	.+14     	; 0x1144 <vfprintf+0x2b8>
    1136:	60 81       	ld	r22, Z
    1138:	71 81       	ldd	r23, Z+1	; 0x01
    113a:	82 81       	ldd	r24, Z+2	; 0x02
    113c:	93 81       	ldd	r25, Z+3	; 0x03
    113e:	44 e0       	ldi	r20, 0x04	; 4
    1140:	50 e0       	ldi	r21, 0x00	; 0
    1142:	06 c0       	rjmp	.+12     	; 0x1150 <vfprintf+0x2c4>
    1144:	60 81       	ld	r22, Z
    1146:	71 81       	ldd	r23, Z+1	; 0x01
    1148:	80 e0       	ldi	r24, 0x00	; 0
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	42 e0       	ldi	r20, 0x02	; 2
    114e:	50 e0       	ldi	r21, 0x00	; 0
    1150:	a4 0e       	add	r10, r20
    1152:	b5 1e       	adc	r11, r21
    1154:	a2 01       	movw	r20, r4
    1156:	0e 94 cf 09 	call	0x139e	; 0x139e <__ultoa_invert>
    115a:	d8 2e       	mov	r13, r24
    115c:	d4 18       	sub	r13, r4
    115e:	01 2f       	mov	r16, r17
    1160:	0f 77       	andi	r16, 0x7F	; 127
    1162:	06 ff       	sbrs	r16, 6
    1164:	09 c0       	rjmp	.+18     	; 0x1178 <vfprintf+0x2ec>
    1166:	0e 7f       	andi	r16, 0xFE	; 254
    1168:	df 14       	cp	r13, r15
    116a:	30 f4       	brcc	.+12     	; 0x1178 <vfprintf+0x2ec>
    116c:	04 ff       	sbrs	r16, 4
    116e:	06 c0       	rjmp	.+12     	; 0x117c <vfprintf+0x2f0>
    1170:	02 fd       	sbrc	r16, 2
    1172:	04 c0       	rjmp	.+8      	; 0x117c <vfprintf+0x2f0>
    1174:	0f 7e       	andi	r16, 0xEF	; 239
    1176:	02 c0       	rjmp	.+4      	; 0x117c <vfprintf+0x2f0>
    1178:	1d 2d       	mov	r17, r13
    117a:	01 c0       	rjmp	.+2      	; 0x117e <vfprintf+0x2f2>
    117c:	1f 2d       	mov	r17, r15
    117e:	80 2f       	mov	r24, r16
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	04 ff       	sbrs	r16, 4
    1184:	0c c0       	rjmp	.+24     	; 0x119e <vfprintf+0x312>
    1186:	fe 01       	movw	r30, r28
    1188:	ed 0d       	add	r30, r13
    118a:	f1 1d       	adc	r31, r1
    118c:	20 81       	ld	r18, Z
    118e:	20 33       	cpi	r18, 0x30	; 48
    1190:	11 f4       	brne	.+4      	; 0x1196 <vfprintf+0x30a>
    1192:	09 7e       	andi	r16, 0xE9	; 233
    1194:	09 c0       	rjmp	.+18     	; 0x11a8 <vfprintf+0x31c>
    1196:	02 ff       	sbrs	r16, 2
    1198:	06 c0       	rjmp	.+12     	; 0x11a6 <vfprintf+0x31a>
    119a:	1e 5f       	subi	r17, 0xFE	; 254
    119c:	05 c0       	rjmp	.+10     	; 0x11a8 <vfprintf+0x31c>
    119e:	86 78       	andi	r24, 0x86	; 134
    11a0:	90 70       	andi	r25, 0x00	; 0
    11a2:	00 97       	sbiw	r24, 0x00	; 0
    11a4:	09 f0       	breq	.+2      	; 0x11a8 <vfprintf+0x31c>
    11a6:	1f 5f       	subi	r17, 0xFF	; 255
    11a8:	80 2e       	mov	r8, r16
    11aa:	99 24       	eor	r9, r9
    11ac:	03 fd       	sbrc	r16, 3
    11ae:	12 c0       	rjmp	.+36     	; 0x11d4 <vfprintf+0x348>
    11b0:	00 ff       	sbrs	r16, 0
    11b2:	0d c0       	rjmp	.+26     	; 0x11ce <vfprintf+0x342>
    11b4:	fd 2c       	mov	r15, r13
    11b6:	1e 15       	cp	r17, r14
    11b8:	50 f4       	brcc	.+20     	; 0x11ce <vfprintf+0x342>
    11ba:	fe 0c       	add	r15, r14
    11bc:	f1 1a       	sub	r15, r17
    11be:	1e 2d       	mov	r17, r14
    11c0:	06 c0       	rjmp	.+12     	; 0x11ce <vfprintf+0x342>
    11c2:	80 e2       	ldi	r24, 0x20	; 32
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	b3 01       	movw	r22, r6
    11c8:	0e 94 a3 09 	call	0x1346	; 0x1346 <fputc>
    11cc:	1f 5f       	subi	r17, 0xFF	; 255
    11ce:	1e 15       	cp	r17, r14
    11d0:	c0 f3       	brcs	.-16     	; 0x11c2 <vfprintf+0x336>
    11d2:	04 c0       	rjmp	.+8      	; 0x11dc <vfprintf+0x350>
    11d4:	1e 15       	cp	r17, r14
    11d6:	10 f4       	brcc	.+4      	; 0x11dc <vfprintf+0x350>
    11d8:	e1 1a       	sub	r14, r17
    11da:	01 c0       	rjmp	.+2      	; 0x11de <vfprintf+0x352>
    11dc:	ee 24       	eor	r14, r14
    11de:	84 fe       	sbrs	r8, 4
    11e0:	0f c0       	rjmp	.+30     	; 0x1200 <vfprintf+0x374>
    11e2:	80 e3       	ldi	r24, 0x30	; 48
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	b3 01       	movw	r22, r6
    11e8:	0e 94 a3 09 	call	0x1346	; 0x1346 <fputc>
    11ec:	82 fe       	sbrs	r8, 2
    11ee:	1f c0       	rjmp	.+62     	; 0x122e <vfprintf+0x3a2>
    11f0:	81 fe       	sbrs	r8, 1
    11f2:	03 c0       	rjmp	.+6      	; 0x11fa <vfprintf+0x36e>
    11f4:	88 e5       	ldi	r24, 0x58	; 88
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	10 c0       	rjmp	.+32     	; 0x121a <vfprintf+0x38e>
    11fa:	88 e7       	ldi	r24, 0x78	; 120
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	0d c0       	rjmp	.+26     	; 0x121a <vfprintf+0x38e>
    1200:	c4 01       	movw	r24, r8
    1202:	86 78       	andi	r24, 0x86	; 134
    1204:	90 70       	andi	r25, 0x00	; 0
    1206:	00 97       	sbiw	r24, 0x00	; 0
    1208:	91 f0       	breq	.+36     	; 0x122e <vfprintf+0x3a2>
    120a:	81 fc       	sbrc	r8, 1
    120c:	02 c0       	rjmp	.+4      	; 0x1212 <vfprintf+0x386>
    120e:	80 e2       	ldi	r24, 0x20	; 32
    1210:	01 c0       	rjmp	.+2      	; 0x1214 <vfprintf+0x388>
    1212:	8b e2       	ldi	r24, 0x2B	; 43
    1214:	07 fd       	sbrc	r16, 7
    1216:	8d e2       	ldi	r24, 0x2D	; 45
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	b3 01       	movw	r22, r6
    121c:	0e 94 a3 09 	call	0x1346	; 0x1346 <fputc>
    1220:	06 c0       	rjmp	.+12     	; 0x122e <vfprintf+0x3a2>
    1222:	80 e3       	ldi	r24, 0x30	; 48
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	b3 01       	movw	r22, r6
    1228:	0e 94 a3 09 	call	0x1346	; 0x1346 <fputc>
    122c:	fa 94       	dec	r15
    122e:	df 14       	cp	r13, r15
    1230:	c0 f3       	brcs	.-16     	; 0x1222 <vfprintf+0x396>
    1232:	da 94       	dec	r13
    1234:	f2 01       	movw	r30, r4
    1236:	ed 0d       	add	r30, r13
    1238:	f1 1d       	adc	r31, r1
    123a:	80 81       	ld	r24, Z
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	b3 01       	movw	r22, r6
    1240:	0e 94 a3 09 	call	0x1346	; 0x1346 <fputc>
    1244:	dd 20       	and	r13, r13
    1246:	a9 f7       	brne	.-22     	; 0x1232 <vfprintf+0x3a6>
    1248:	06 c0       	rjmp	.+12     	; 0x1256 <vfprintf+0x3ca>
    124a:	80 e2       	ldi	r24, 0x20	; 32
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	b3 01       	movw	r22, r6
    1250:	0e 94 a3 09 	call	0x1346	; 0x1346 <fputc>
    1254:	ea 94       	dec	r14
    1256:	ee 20       	and	r14, r14
    1258:	c1 f7       	brne	.-16     	; 0x124a <vfprintf+0x3be>
    125a:	40 ce       	rjmp	.-896    	; 0xedc <vfprintf+0x50>
    125c:	f3 01       	movw	r30, r6
    125e:	86 81       	ldd	r24, Z+6	; 0x06
    1260:	97 81       	ldd	r25, Z+7	; 0x07
    1262:	02 c0       	rjmp	.+4      	; 0x1268 <vfprintf+0x3dc>
    1264:	8f ef       	ldi	r24, 0xFF	; 255
    1266:	9f ef       	ldi	r25, 0xFF	; 255
    1268:	2d 96       	adiw	r28, 0x0d	; 13
    126a:	0f b6       	in	r0, 0x3f	; 63
    126c:	f8 94       	cli
    126e:	de bf       	out	0x3e, r29	; 62
    1270:	0f be       	out	0x3f, r0	; 63
    1272:	cd bf       	out	0x3d, r28	; 61
    1274:	df 91       	pop	r29
    1276:	cf 91       	pop	r28
    1278:	1f 91       	pop	r17
    127a:	0f 91       	pop	r16
    127c:	ff 90       	pop	r15
    127e:	ef 90       	pop	r14
    1280:	df 90       	pop	r13
    1282:	cf 90       	pop	r12
    1284:	bf 90       	pop	r11
    1286:	af 90       	pop	r10
    1288:	9f 90       	pop	r9
    128a:	8f 90       	pop	r8
    128c:	7f 90       	pop	r7
    128e:	6f 90       	pop	r6
    1290:	5f 90       	pop	r5
    1292:	4f 90       	pop	r4
    1294:	3f 90       	pop	r3
    1296:	2f 90       	pop	r2
    1298:	08 95       	ret

0000129a <strnlen_P>:
    129a:	fc 01       	movw	r30, r24
    129c:	05 90       	lpm	r0, Z+
    129e:	61 50       	subi	r22, 0x01	; 1
    12a0:	70 40       	sbci	r23, 0x00	; 0
    12a2:	01 10       	cpse	r0, r1
    12a4:	d8 f7       	brcc	.-10     	; 0x129c <strnlen_P+0x2>
    12a6:	80 95       	com	r24
    12a8:	90 95       	com	r25
    12aa:	8e 0f       	add	r24, r30
    12ac:	9f 1f       	adc	r25, r31
    12ae:	08 95       	ret

000012b0 <strnlen>:
    12b0:	fc 01       	movw	r30, r24
    12b2:	61 50       	subi	r22, 0x01	; 1
    12b4:	70 40       	sbci	r23, 0x00	; 0
    12b6:	01 90       	ld	r0, Z+
    12b8:	01 10       	cpse	r0, r1
    12ba:	d8 f7       	brcc	.-10     	; 0x12b2 <strnlen+0x2>
    12bc:	80 95       	com	r24
    12be:	90 95       	com	r25
    12c0:	8e 0f       	add	r24, r30
    12c2:	9f 1f       	adc	r25, r31
    12c4:	08 95       	ret

000012c6 <fgetc>:
    12c6:	cf 93       	push	r28
    12c8:	df 93       	push	r29
    12ca:	ec 01       	movw	r28, r24
    12cc:	2b 81       	ldd	r18, Y+3	; 0x03
    12ce:	20 ff       	sbrs	r18, 0
    12d0:	35 c0       	rjmp	.+106    	; 0x133c <fgetc+0x76>
    12d2:	26 ff       	sbrs	r18, 6
    12d4:	09 c0       	rjmp	.+18     	; 0x12e8 <fgetc+0x22>
    12d6:	2f 7b       	andi	r18, 0xBF	; 191
    12d8:	2b 83       	std	Y+3, r18	; 0x03
    12da:	8e 81       	ldd	r24, Y+6	; 0x06
    12dc:	9f 81       	ldd	r25, Y+7	; 0x07
    12de:	01 96       	adiw	r24, 0x01	; 1
    12e0:	9f 83       	std	Y+7, r25	; 0x07
    12e2:	8e 83       	std	Y+6, r24	; 0x06
    12e4:	8a 81       	ldd	r24, Y+2	; 0x02
    12e6:	28 c0       	rjmp	.+80     	; 0x1338 <fgetc+0x72>
    12e8:	22 ff       	sbrs	r18, 2
    12ea:	0f c0       	rjmp	.+30     	; 0x130a <fgetc+0x44>
    12ec:	e8 81       	ld	r30, Y
    12ee:	f9 81       	ldd	r31, Y+1	; 0x01
    12f0:	80 81       	ld	r24, Z
    12f2:	99 27       	eor	r25, r25
    12f4:	87 fd       	sbrc	r24, 7
    12f6:	90 95       	com	r25
    12f8:	00 97       	sbiw	r24, 0x00	; 0
    12fa:	19 f4       	brne	.+6      	; 0x1302 <fgetc+0x3c>
    12fc:	20 62       	ori	r18, 0x20	; 32
    12fe:	2b 83       	std	Y+3, r18	; 0x03
    1300:	1d c0       	rjmp	.+58     	; 0x133c <fgetc+0x76>
    1302:	31 96       	adiw	r30, 0x01	; 1
    1304:	f9 83       	std	Y+1, r31	; 0x01
    1306:	e8 83       	st	Y, r30
    1308:	11 c0       	rjmp	.+34     	; 0x132c <fgetc+0x66>
    130a:	ea 85       	ldd	r30, Y+10	; 0x0a
    130c:	fb 85       	ldd	r31, Y+11	; 0x0b
    130e:	ce 01       	movw	r24, r28
    1310:	19 95       	eicall
    1312:	97 ff       	sbrs	r25, 7
    1314:	0b c0       	rjmp	.+22     	; 0x132c <fgetc+0x66>
    1316:	2b 81       	ldd	r18, Y+3	; 0x03
    1318:	3f ef       	ldi	r19, 0xFF	; 255
    131a:	8f 3f       	cpi	r24, 0xFF	; 255
    131c:	93 07       	cpc	r25, r19
    131e:	11 f4       	brne	.+4      	; 0x1324 <fgetc+0x5e>
    1320:	80 e1       	ldi	r24, 0x10	; 16
    1322:	01 c0       	rjmp	.+2      	; 0x1326 <fgetc+0x60>
    1324:	80 e2       	ldi	r24, 0x20	; 32
    1326:	82 2b       	or	r24, r18
    1328:	8b 83       	std	Y+3, r24	; 0x03
    132a:	08 c0       	rjmp	.+16     	; 0x133c <fgetc+0x76>
    132c:	2e 81       	ldd	r18, Y+6	; 0x06
    132e:	3f 81       	ldd	r19, Y+7	; 0x07
    1330:	2f 5f       	subi	r18, 0xFF	; 255
    1332:	3f 4f       	sbci	r19, 0xFF	; 255
    1334:	3f 83       	std	Y+7, r19	; 0x07
    1336:	2e 83       	std	Y+6, r18	; 0x06
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	02 c0       	rjmp	.+4      	; 0x1340 <fgetc+0x7a>
    133c:	8f ef       	ldi	r24, 0xFF	; 255
    133e:	9f ef       	ldi	r25, 0xFF	; 255
    1340:	df 91       	pop	r29
    1342:	cf 91       	pop	r28
    1344:	08 95       	ret

00001346 <fputc>:
    1346:	0f 93       	push	r16
    1348:	1f 93       	push	r17
    134a:	cf 93       	push	r28
    134c:	df 93       	push	r29
    134e:	8c 01       	movw	r16, r24
    1350:	eb 01       	movw	r28, r22
    1352:	8b 81       	ldd	r24, Y+3	; 0x03
    1354:	81 ff       	sbrs	r24, 1
    1356:	1b c0       	rjmp	.+54     	; 0x138e <fputc+0x48>
    1358:	82 ff       	sbrs	r24, 2
    135a:	0d c0       	rjmp	.+26     	; 0x1376 <fputc+0x30>
    135c:	2e 81       	ldd	r18, Y+6	; 0x06
    135e:	3f 81       	ldd	r19, Y+7	; 0x07
    1360:	8c 81       	ldd	r24, Y+4	; 0x04
    1362:	9d 81       	ldd	r25, Y+5	; 0x05
    1364:	28 17       	cp	r18, r24
    1366:	39 07       	cpc	r19, r25
    1368:	64 f4       	brge	.+24     	; 0x1382 <fputc+0x3c>
    136a:	e8 81       	ld	r30, Y
    136c:	f9 81       	ldd	r31, Y+1	; 0x01
    136e:	01 93       	st	Z+, r16
    1370:	f9 83       	std	Y+1, r31	; 0x01
    1372:	e8 83       	st	Y, r30
    1374:	06 c0       	rjmp	.+12     	; 0x1382 <fputc+0x3c>
    1376:	e8 85       	ldd	r30, Y+8	; 0x08
    1378:	f9 85       	ldd	r31, Y+9	; 0x09
    137a:	80 2f       	mov	r24, r16
    137c:	19 95       	eicall
    137e:	00 97       	sbiw	r24, 0x00	; 0
    1380:	31 f4       	brne	.+12     	; 0x138e <fputc+0x48>
    1382:	8e 81       	ldd	r24, Y+6	; 0x06
    1384:	9f 81       	ldd	r25, Y+7	; 0x07
    1386:	01 96       	adiw	r24, 0x01	; 1
    1388:	9f 83       	std	Y+7, r25	; 0x07
    138a:	8e 83       	std	Y+6, r24	; 0x06
    138c:	02 c0       	rjmp	.+4      	; 0x1392 <fputc+0x4c>
    138e:	0f ef       	ldi	r16, 0xFF	; 255
    1390:	1f ef       	ldi	r17, 0xFF	; 255
    1392:	c8 01       	movw	r24, r16
    1394:	df 91       	pop	r29
    1396:	cf 91       	pop	r28
    1398:	1f 91       	pop	r17
    139a:	0f 91       	pop	r16
    139c:	08 95       	ret

0000139e <__ultoa_invert>:
    139e:	fa 01       	movw	r30, r20
    13a0:	aa 27       	eor	r26, r26
    13a2:	28 30       	cpi	r18, 0x08	; 8
    13a4:	51 f1       	breq	.+84     	; 0x13fa <__ultoa_invert+0x5c>
    13a6:	20 31       	cpi	r18, 0x10	; 16
    13a8:	81 f1       	breq	.+96     	; 0x140a <__ultoa_invert+0x6c>
    13aa:	e8 94       	clt
    13ac:	6f 93       	push	r22
    13ae:	6e 7f       	andi	r22, 0xFE	; 254
    13b0:	6e 5f       	subi	r22, 0xFE	; 254
    13b2:	7f 4f       	sbci	r23, 0xFF	; 255
    13b4:	8f 4f       	sbci	r24, 0xFF	; 255
    13b6:	9f 4f       	sbci	r25, 0xFF	; 255
    13b8:	af 4f       	sbci	r26, 0xFF	; 255
    13ba:	b1 e0       	ldi	r27, 0x01	; 1
    13bc:	3e d0       	rcall	.+124    	; 0x143a <__ultoa_invert+0x9c>
    13be:	b4 e0       	ldi	r27, 0x04	; 4
    13c0:	3c d0       	rcall	.+120    	; 0x143a <__ultoa_invert+0x9c>
    13c2:	67 0f       	add	r22, r23
    13c4:	78 1f       	adc	r23, r24
    13c6:	89 1f       	adc	r24, r25
    13c8:	9a 1f       	adc	r25, r26
    13ca:	a1 1d       	adc	r26, r1
    13cc:	68 0f       	add	r22, r24
    13ce:	79 1f       	adc	r23, r25
    13d0:	8a 1f       	adc	r24, r26
    13d2:	91 1d       	adc	r25, r1
    13d4:	a1 1d       	adc	r26, r1
    13d6:	6a 0f       	add	r22, r26
    13d8:	71 1d       	adc	r23, r1
    13da:	81 1d       	adc	r24, r1
    13dc:	91 1d       	adc	r25, r1
    13de:	a1 1d       	adc	r26, r1
    13e0:	20 d0       	rcall	.+64     	; 0x1422 <__ultoa_invert+0x84>
    13e2:	09 f4       	brne	.+2      	; 0x13e6 <__ultoa_invert+0x48>
    13e4:	68 94       	set
    13e6:	3f 91       	pop	r19
    13e8:	2a e0       	ldi	r18, 0x0A	; 10
    13ea:	26 9f       	mul	r18, r22
    13ec:	11 24       	eor	r1, r1
    13ee:	30 19       	sub	r19, r0
    13f0:	30 5d       	subi	r19, 0xD0	; 208
    13f2:	31 93       	st	Z+, r19
    13f4:	de f6       	brtc	.-74     	; 0x13ac <__ultoa_invert+0xe>
    13f6:	cf 01       	movw	r24, r30
    13f8:	08 95       	ret
    13fa:	46 2f       	mov	r20, r22
    13fc:	47 70       	andi	r20, 0x07	; 7
    13fe:	40 5d       	subi	r20, 0xD0	; 208
    1400:	41 93       	st	Z+, r20
    1402:	b3 e0       	ldi	r27, 0x03	; 3
    1404:	0f d0       	rcall	.+30     	; 0x1424 <__ultoa_invert+0x86>
    1406:	c9 f7       	brne	.-14     	; 0x13fa <__ultoa_invert+0x5c>
    1408:	f6 cf       	rjmp	.-20     	; 0x13f6 <__ultoa_invert+0x58>
    140a:	46 2f       	mov	r20, r22
    140c:	4f 70       	andi	r20, 0x0F	; 15
    140e:	40 5d       	subi	r20, 0xD0	; 208
    1410:	4a 33       	cpi	r20, 0x3A	; 58
    1412:	18 f0       	brcs	.+6      	; 0x141a <__ultoa_invert+0x7c>
    1414:	49 5d       	subi	r20, 0xD9	; 217
    1416:	31 fd       	sbrc	r19, 1
    1418:	40 52       	subi	r20, 0x20	; 32
    141a:	41 93       	st	Z+, r20
    141c:	02 d0       	rcall	.+4      	; 0x1422 <__ultoa_invert+0x84>
    141e:	a9 f7       	brne	.-22     	; 0x140a <__ultoa_invert+0x6c>
    1420:	ea cf       	rjmp	.-44     	; 0x13f6 <__ultoa_invert+0x58>
    1422:	b4 e0       	ldi	r27, 0x04	; 4
    1424:	a6 95       	lsr	r26
    1426:	97 95       	ror	r25
    1428:	87 95       	ror	r24
    142a:	77 95       	ror	r23
    142c:	67 95       	ror	r22
    142e:	ba 95       	dec	r27
    1430:	c9 f7       	brne	.-14     	; 0x1424 <__ultoa_invert+0x86>
    1432:	00 97       	sbiw	r24, 0x00	; 0
    1434:	61 05       	cpc	r22, r1
    1436:	71 05       	cpc	r23, r1
    1438:	08 95       	ret
    143a:	9b 01       	movw	r18, r22
    143c:	ac 01       	movw	r20, r24
    143e:	0a 2e       	mov	r0, r26
    1440:	06 94       	lsr	r0
    1442:	57 95       	ror	r21
    1444:	47 95       	ror	r20
    1446:	37 95       	ror	r19
    1448:	27 95       	ror	r18
    144a:	ba 95       	dec	r27
    144c:	c9 f7       	brne	.-14     	; 0x1440 <__ultoa_invert+0xa2>
    144e:	62 0f       	add	r22, r18
    1450:	73 1f       	adc	r23, r19
    1452:	84 1f       	adc	r24, r20
    1454:	95 1f       	adc	r25, r21
    1456:	a0 1d       	adc	r26, r0
    1458:	08 95       	ret

0000145a <_exit>:
    145a:	f8 94       	cli

0000145c <__stop_program>:
    145c:	ff cf       	rjmp	.-2      	; 0x145c <__stop_program>
