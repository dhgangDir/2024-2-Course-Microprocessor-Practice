
Pjt12_ADC_TC1047.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000244  00800200  000022a2  00002336  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000022a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000142  00800444  00800444  0000257a  2**0
                  ALLOC
  3 .stab         0000117c  00000000  00000000  0000257c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000039d  00000000  00000000  000036f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000468  00000000  00000000  00003a98  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000420f  00000000  00000000  00003f00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002117  00000000  00000000  0000810f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000209c  00000000  00000000  0000a226  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b70  00000000  00000000  0000c2c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b97  00000000  00000000  0000ce34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000297e  00000000  00000000  0000d9cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00010349  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      3c:	0c 94 0d 06 	jmp	0xc1a	; 0xc1a <__vector_15>
      40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      5c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      60:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      64:	0c 94 f2 06 	jmp	0xde4	; 0xde4 <__vector_25>
      68:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      6c:	0c 94 c3 06 	jmp	0xd86	; 0xd86 <__vector_27>
      70:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      74:	0c 94 bf 07 	jmp	0xf7e	; 0xf7e <__vector_29>
      78:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      7c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      80:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      84:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      88:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      8c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      90:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      94:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      98:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      9c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      ac:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      bc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      cc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      dc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      e0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	14 e0       	ldi	r17, 0x04	; 4
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e2 ea       	ldi	r30, 0xA2	; 162
      fc:	f2 e2       	ldi	r31, 0x22	; 34
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a4 34       	cpi	r26, 0x44	; 68
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
     10e:	1b be       	out	0x3b, r1	; 59

00000110 <__do_clear_bss>:
     110:	15 e0       	ldi	r17, 0x05	; 5
     112:	a4 e4       	ldi	r26, 0x44	; 68
     114:	b4 e0       	ldi	r27, 0x04	; 4
     116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
     118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
     11a:	a6 38       	cpi	r26, 0x86	; 134
     11c:	b1 07       	cpc	r27, r17
     11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
     120:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <main>
     124:	0c 94 4f 11 	jmp	0x229e	; 0x229e <_exit>

00000128 <__bad_interrupt>:
     128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <app_list>:
#include <stdio.h>
#include <stdlib.h>
#include "linked_list.h"
#include "uart.h"

void app_list(char *ap) {
     12c:	cf 92       	push	r12
     12e:	df 92       	push	r13
     130:	ff 92       	push	r15
     132:	0f 93       	push	r16
     134:	1f 93       	push	r17
     136:	cf 93       	push	r28
     138:	df 93       	push	r29
     13a:	cd b7       	in	r28, 0x3d	; 61
     13c:	de b7       	in	r29, 0x3e	; 62
     13e:	28 97       	sbiw	r28, 0x08	; 8
     140:	0f b6       	in	r0, 0x3f	; 63
     142:	f8 94       	cli
     144:	de bf       	out	0x3e, r29	; 62
     146:	0f be       	out	0x3f, r0	; 63
     148:	cd bf       	out	0x3d, r28	; 61
	char buf[8], how = 'a';
	struct node *np;

	if (ap) how = *ap;
     14a:	00 97       	sbiw	r24, 0x00	; 0
     14c:	19 f0       	breq	.+6      	; 0x154 <app_list+0x28>
     14e:	fc 01       	movw	r30, r24
     150:	f0 80       	ld	r15, Z
     152:	02 c0       	rjmp	.+4      	; 0x158 <app_list+0x2c>
#include <stdlib.h>
#include "linked_list.h"
#include "uart.h"

void app_list(char *ap) {
	char buf[8], how = 'a';
     154:	91 e6       	ldi	r25, 0x61	; 97
     156:	f9 2e       	mov	r15, r25
	struct node *np;

	if (ap) how = *ap;
	while(1) {
		printf("> ");
     158:	80 e0       	ldi	r24, 0x00	; 0
     15a:	c8 2e       	mov	r12, r24
     15c:	82 e0       	ldi	r24, 0x02	; 2
     15e:	d8 2e       	mov	r13, r24
     160:	0f 92       	push	r0
     162:	0f 92       	push	r0
     164:	ed b7       	in	r30, 0x3d	; 61
     166:	fe b7       	in	r31, 0x3e	; 62
     168:	d2 82       	std	Z+2, r13	; 0x02
     16a:	c1 82       	std	Z+1, r12	; 0x01
     16c:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <printf>
		if (fgets(buf, 8, stdin) == NULL)
     170:	0f 90       	pop	r0
     172:	0f 90       	pop	r0
     174:	40 91 80 05 	lds	r20, 0x0580
     178:	50 91 81 05 	lds	r21, 0x0581
     17c:	ce 01       	movw	r24, r28
     17e:	01 96       	adiw	r24, 0x01	; 1
     180:	68 e0       	ldi	r22, 0x08	; 8
     182:	70 e0       	ldi	r23, 0x00	; 0
     184:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <fgets>
     188:	00 97       	sbiw	r24, 0x00	; 0
     18a:	e9 f0       	breq	.+58     	; 0x1c6 <app_list+0x9a>
			break;
		np = get_node();
     18c:	0e 94 c1 02 	call	0x582	; 0x582 <get_node>
     190:	8c 01       	movw	r16, r24
		np->data = atoi(buf);
     192:	ce 01       	movw	r24, r28
     194:	01 96       	adiw	r24, 0x01	; 1
     196:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <atoi>
     19a:	f8 01       	movw	r30, r16
     19c:	91 83       	std	Z+1, r25	; 0x01
     19e:	80 83       	st	Z, r24
		switch(how) {
     1a0:	f8 e6       	ldi	r31, 0x68	; 104
     1a2:	ff 16       	cp	r15, r31
     1a4:	21 f0       	breq	.+8      	; 0x1ae <app_list+0x82>
     1a6:	84 e7       	ldi	r24, 0x74	; 116
     1a8:	f8 16       	cp	r15, r24
     1aa:	49 f4       	brne	.+18     	; 0x1be <app_list+0x92>
     1ac:	04 c0       	rjmp	.+8      	; 0x1b6 <app_list+0x8a>
			case 'h' : insert_node_head(np); break;
     1ae:	c8 01       	movw	r24, r16
     1b0:	0e 94 c9 02 	call	0x592	; 0x592 <insert_node_head>
     1b4:	d5 cf       	rjmp	.-86     	; 0x160 <app_list+0x34>
			case 't' : insert_node_tail(np); break;
     1b6:	c8 01       	movw	r24, r16
     1b8:	0e 94 de 02 	call	0x5bc	; 0x5bc <insert_node_tail>
     1bc:	d1 cf       	rjmp	.-94     	; 0x160 <app_list+0x34>
			default  : insert_node_ascn(np);
     1be:	c8 01       	movw	r24, r16
     1c0:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <insert_node_ascn>
     1c4:	cd cf       	rjmp	.-102    	; 0x160 <app_list+0x34>
		}
	}
	tour_list();
     1c6:	0e 94 29 03 	call	0x652	; 0x652 <tour_list>
	free_list();
     1ca:	0e 94 56 03 	call	0x6ac	; 0x6ac <free_list>
}
     1ce:	28 96       	adiw	r28, 0x08	; 8
     1d0:	0f b6       	in	r0, 0x3f	; 63
     1d2:	f8 94       	cli
     1d4:	de bf       	out	0x3e, r29	; 62
     1d6:	0f be       	out	0x3f, r0	; 63
     1d8:	cd bf       	out	0x3d, r28	; 61
     1da:	df 91       	pop	r29
     1dc:	cf 91       	pop	r28
     1de:	1f 91       	pop	r17
     1e0:	0f 91       	pop	r16
     1e2:	ff 90       	pop	r15
     1e4:	df 90       	pop	r13
     1e6:	cf 90       	pop	r12
     1e8:	08 95       	ret

000001ea <is_prime>:
// app_prime.c
#include <stdio.h>
#include <stdlib.h>
#include "app_prime.h"

int is_prime(int n) {
     1ea:	cf 93       	push	r28
     1ec:	df 93       	push	r29
     1ee:	fc 01       	movw	r30, r24
    int i;
	for(i = 2; i <= n/2; i++){
     1f0:	62 e0       	ldi	r22, 0x02	; 2
     1f2:	70 e0       	ldi	r23, 0x00	; 0
     1f4:	0e 94 a9 0b 	call	0x1752	; 0x1752 <__divmodhi4>
     1f8:	eb 01       	movw	r28, r22
     1fa:	22 e0       	ldi	r18, 0x02	; 2
     1fc:	30 e0       	ldi	r19, 0x00	; 0
     1fe:	08 c0       	rjmp	.+16     	; 0x210 <is_prime+0x26>
		if((n % i) == 0) 
     200:	cf 01       	movw	r24, r30
     202:	b9 01       	movw	r22, r18
     204:	0e 94 a9 0b 	call	0x1752	; 0x1752 <__divmodhi4>
     208:	00 97       	sbiw	r24, 0x00	; 0
     20a:	41 f0       	breq	.+16     	; 0x21c <is_prime+0x32>
#include <stdlib.h>
#include "app_prime.h"

int is_prime(int n) {
    int i;
	for(i = 2; i <= n/2; i++){
     20c:	2f 5f       	subi	r18, 0xFF	; 255
     20e:	3f 4f       	sbci	r19, 0xFF	; 255
     210:	c2 17       	cp	r28, r18
     212:	d3 07       	cpc	r29, r19
     214:	ac f7       	brge	.-22     	; 0x200 <is_prime+0x16>
		if((n % i) == 0) 
			return(0);
	}
	return(1);
     216:	81 e0       	ldi	r24, 0x01	; 1
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	02 c0       	rjmp	.+4      	; 0x220 <is_prime+0x36>

int is_prime(int n) {
    int i;
	for(i = 2; i <= n/2; i++){
		if((n % i) == 0) 
			return(0);
     21c:	80 e0       	ldi	r24, 0x00	; 0
     21e:	90 e0       	ldi	r25, 0x00	; 0
	}
	return(1);
}
     220:	df 91       	pop	r29
     222:	cf 91       	pop	r28
     224:	08 95       	ret

00000226 <app_prime>:

void app_prime(char *ap) {
     226:	cf 92       	push	r12
     228:	df 92       	push	r13
     22a:	ef 92       	push	r14
     22c:	ff 92       	push	r15
     22e:	0f 93       	push	r16
     230:	1f 93       	push	r17
     232:	cf 93       	push	r28
     234:	df 93       	push	r29
    int t = 2000, count = 0, n;

	if(ap) t = atoi(ap);
     236:	00 97       	sbiw	r24, 0x00	; 0
     238:	21 f0       	breq	.+8      	; 0x242 <app_prime+0x1c>
     23a:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <atoi>
     23e:	7c 01       	movw	r14, r24
     240:	04 c0       	rjmp	.+8      	; 0x24a <app_prime+0x24>
	}
	return(1);
}

void app_prime(char *ap) {
    int t = 2000, count = 0, n;
     242:	90 ed       	ldi	r25, 0xD0	; 208
     244:	e9 2e       	mov	r14, r25
     246:	97 e0       	ldi	r25, 0x07	; 7
     248:	f9 2e       	mov	r15, r25

	if(ap) t = atoi(ap);

	for (n = 2; n <= t; n++){
     24a:	c2 e0       	ldi	r28, 0x02	; 2
     24c:	d0 e0       	ldi	r29, 0x00	; 0
	}
	return(1);
}

void app_prime(char *ap) {
    int t = 2000, count = 0, n;
     24e:	00 e0       	ldi	r16, 0x00	; 0
     250:	10 e0       	ldi	r17, 0x00	; 0
	if(ap) t = atoi(ap);

	for (n = 2; n <= t; n++){
		if(is_prime(n)) {
		    count++;
			printf("%d is a prime number!!!\n", n);
     252:	83 e0       	ldi	r24, 0x03	; 3
     254:	c8 2e       	mov	r12, r24
     256:	82 e0       	ldi	r24, 0x02	; 2
     258:	d8 2e       	mov	r13, r24
void app_prime(char *ap) {
    int t = 2000, count = 0, n;

	if(ap) t = atoi(ap);

	for (n = 2; n <= t; n++){
     25a:	16 c0       	rjmp	.+44     	; 0x288 <app_prime+0x62>
		if(is_prime(n)) {
     25c:	ce 01       	movw	r24, r28
     25e:	0e 94 f5 00 	call	0x1ea	; 0x1ea <is_prime>
     262:	00 97       	sbiw	r24, 0x00	; 0
     264:	81 f0       	breq	.+32     	; 0x286 <app_prime+0x60>
		    count++;
     266:	0f 5f       	subi	r16, 0xFF	; 255
     268:	1f 4f       	sbci	r17, 0xFF	; 255
			printf("%d is a prime number!!!\n", n);
     26a:	00 d0       	rcall	.+0      	; 0x26c <app_prime+0x46>
     26c:	0f 92       	push	r0
     26e:	ed b7       	in	r30, 0x3d	; 61
     270:	fe b7       	in	r31, 0x3e	; 62
     272:	d2 82       	std	Z+2, r13	; 0x02
     274:	c1 82       	std	Z+1, r12	; 0x01
     276:	d4 83       	std	Z+4, r29	; 0x04
     278:	c3 83       	std	Z+3, r28	; 0x03
     27a:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <printf>
     27e:	0f 90       	pop	r0
     280:	0f 90       	pop	r0
     282:	0f 90       	pop	r0
     284:	0f 90       	pop	r0
void app_prime(char *ap) {
    int t = 2000, count = 0, n;

	if(ap) t = atoi(ap);

	for (n = 2; n <= t; n++){
     286:	21 96       	adiw	r28, 0x01	; 1
     288:	ec 16       	cp	r14, r28
     28a:	fd 06       	cpc	r15, r29
     28c:	3c f7       	brge	.-50     	; 0x25c <app_prime+0x36>
		if(is_prime(n)) {
		    count++;
			printf("%d is a prime number!!!\n", n);
		}
	}
	printf("count=%d\n", count);
     28e:	00 d0       	rcall	.+0      	; 0x290 <app_prime+0x6a>
     290:	0f 92       	push	r0
     292:	8c e1       	ldi	r24, 0x1C	; 28
     294:	92 e0       	ldi	r25, 0x02	; 2
     296:	ed b7       	in	r30, 0x3d	; 61
     298:	fe b7       	in	r31, 0x3e	; 62
     29a:	92 83       	std	Z+2, r25	; 0x02
     29c:	81 83       	std	Z+1, r24	; 0x01
     29e:	14 83       	std	Z+4, r17	; 0x04
     2a0:	03 83       	std	Z+3, r16	; 0x03
     2a2:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <printf>
     2a6:	0f 90       	pop	r0
     2a8:	0f 90       	pop	r0
     2aa:	0f 90       	pop	r0
     2ac:	0f 90       	pop	r0
}
     2ae:	df 91       	pop	r29
     2b0:	cf 91       	pop	r28
     2b2:	1f 91       	pop	r17
     2b4:	0f 91       	pop	r16
     2b6:	ff 90       	pop	r15
     2b8:	ef 90       	pop	r14
     2ba:	df 90       	pop	r13
     2bc:	cf 90       	pop	r12
     2be:	08 95       	ret

000002c0 <task_prime>:

void task_prime(char *ap) {
     2c0:	cf 92       	push	r12
     2c2:	df 92       	push	r13
     2c4:	ef 92       	push	r14
     2c6:	ff 92       	push	r15
     2c8:	0f 93       	push	r16
     2ca:	1f 93       	push	r17
     2cc:	cf 93       	push	r28
     2ce:	df 93       	push	r29
	int n, t = 2000, count = 0;

	if (ap && *ap) t = atoi(ap);
     2d0:	00 97       	sbiw	r24, 0x00	; 0
     2d2:	41 f0       	breq	.+16     	; 0x2e4 <task_prime+0x24>
     2d4:	fc 01       	movw	r30, r24
     2d6:	20 81       	ld	r18, Z
     2d8:	22 23       	and	r18, r18
     2da:	21 f0       	breq	.+8      	; 0x2e4 <task_prime+0x24>
     2dc:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <atoi>
     2e0:	8c 01       	movw	r16, r24
     2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <task_prime+0x28>
	}
	printf("count=%d\n", count);
}

void task_prime(char *ap) {
	int n, t = 2000, count = 0;
     2e4:	00 ed       	ldi	r16, 0xD0	; 208
     2e6:	17 e0       	ldi	r17, 0x07	; 7
     2e8:	ee 24       	eor	r14, r14
     2ea:	ff 24       	eor	r15, r15

	if (ap && *ap) t = atoi(ap);
	for (n = 2; n <= t; n++){
     2ec:	c2 e0       	ldi	r28, 0x02	; 2
     2ee:	d0 e0       	ldi	r29, 0x00	; 0
		if(is_prime(n)) {
		    count++;
			printf("%d is a prime number!!!\n", n);
     2f0:	23 e0       	ldi	r18, 0x03	; 3
     2f2:	c2 2e       	mov	r12, r18
     2f4:	22 e0       	ldi	r18, 0x02	; 2
     2f6:	d2 2e       	mov	r13, r18

void task_prime(char *ap) {
	int n, t = 2000, count = 0;

	if (ap && *ap) t = atoi(ap);
	for (n = 2; n <= t; n++){
     2f8:	17 c0       	rjmp	.+46     	; 0x328 <task_prime+0x68>
		if(is_prime(n)) {
     2fa:	ce 01       	movw	r24, r28
     2fc:	0e 94 f5 00 	call	0x1ea	; 0x1ea <is_prime>
     300:	00 97       	sbiw	r24, 0x00	; 0
     302:	89 f0       	breq	.+34     	; 0x326 <task_prime+0x66>
		    count++;
     304:	08 94       	sec
     306:	e1 1c       	adc	r14, r1
     308:	f1 1c       	adc	r15, r1
			printf("%d is a prime number!!!\n", n);
     30a:	00 d0       	rcall	.+0      	; 0x30c <task_prime+0x4c>
     30c:	0f 92       	push	r0
     30e:	ed b7       	in	r30, 0x3d	; 61
     310:	fe b7       	in	r31, 0x3e	; 62
     312:	d2 82       	std	Z+2, r13	; 0x02
     314:	c1 82       	std	Z+1, r12	; 0x01
     316:	d4 83       	std	Z+4, r29	; 0x04
     318:	c3 83       	std	Z+3, r28	; 0x03
     31a:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <printf>
     31e:	0f 90       	pop	r0
     320:	0f 90       	pop	r0
     322:	0f 90       	pop	r0
     324:	0f 90       	pop	r0

void task_prime(char *ap) {
	int n, t = 2000, count = 0;

	if (ap && *ap) t = atoi(ap);
	for (n = 2; n <= t; n++){
     326:	21 96       	adiw	r28, 0x01	; 1
     328:	0c 17       	cp	r16, r28
     32a:	1d 07       	cpc	r17, r29
     32c:	34 f7       	brge	.-52     	; 0x2fa <task_prime+0x3a>
		if(is_prime(n)) {
		    count++;
			printf("%d is a prime number!!!\n", n);
		}
	}
	printf("count=%d\n", count);
     32e:	00 d0       	rcall	.+0      	; 0x330 <task_prime+0x70>
     330:	0f 92       	push	r0
     332:	8c e1       	ldi	r24, 0x1C	; 28
     334:	92 e0       	ldi	r25, 0x02	; 2
     336:	ed b7       	in	r30, 0x3d	; 61
     338:	fe b7       	in	r31, 0x3e	; 62
     33a:	92 83       	std	Z+2, r25	; 0x02
     33c:	81 83       	std	Z+1, r24	; 0x01
     33e:	f4 82       	std	Z+4, r15	; 0x04
     340:	e3 82       	std	Z+3, r14	; 0x03
     342:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <printf>
	printf("$ ");
     346:	0f 90       	pop	r0
     348:	0f 90       	pop	r0
     34a:	86 e2       	ldi	r24, 0x26	; 38
     34c:	92 e0       	ldi	r25, 0x02	; 2
     34e:	ed b7       	in	r30, 0x3d	; 61
     350:	fe b7       	in	r31, 0x3e	; 62
     352:	92 83       	std	Z+2, r25	; 0x02
     354:	81 83       	std	Z+1, r24	; 0x01
     356:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <printf>
     35a:	0f 90       	pop	r0
     35c:	0f 90       	pop	r0
}
     35e:	df 91       	pop	r29
     360:	cf 91       	pop	r28
     362:	1f 91       	pop	r17
     364:	0f 91       	pop	r16
     366:	ff 90       	pop	r15
     368:	ef 90       	pop	r14
     36a:	df 90       	pop	r13
     36c:	cf 90       	pop	r12
     36e:	08 95       	ret

00000370 <app_sum>:
#include "app_sum.h"

void app_sum(char *ap) {
	int t = 100, sum = 0;

	if (ap && *ap) t = atoi(ap);
     370:	00 97       	sbiw	r24, 0x00	; 0
     372:	41 f0       	breq	.+16     	; 0x384 <app_sum+0x14>
     374:	fc 01       	movw	r30, r24
     376:	20 81       	ld	r18, Z
     378:	22 23       	and	r18, r18
     37a:	21 f0       	breq	.+8      	; 0x384 <app_sum+0x14>
     37c:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <atoi>
     380:	9c 01       	movw	r18, r24
     382:	02 c0       	rjmp	.+4      	; 0x388 <app_sum+0x18>
#include <stdio.h>
#include <stdlib.h>
#include "app_sum.h"

void app_sum(char *ap) {
	int t = 100, sum = 0;
     384:	24 e6       	ldi	r18, 0x64	; 100
     386:	30 e0       	ldi	r19, 0x00	; 0

	if (ap && *ap) t = atoi(ap);
	sum = ((t + 1) * (t)) / 2;
	printf("sum=%d\n", sum);
     388:	00 d0       	rcall	.+0      	; 0x38a <app_sum+0x1a>
     38a:	0f 92       	push	r0
     38c:	89 e2       	ldi	r24, 0x29	; 41
     38e:	92 e0       	ldi	r25, 0x02	; 2
     390:	ed b7       	in	r30, 0x3d	; 61
     392:	fe b7       	in	r31, 0x3e	; 62
     394:	92 83       	std	Z+2, r25	; 0x02
     396:	81 83       	std	Z+1, r24	; 0x01

void app_sum(char *ap) {
	int t = 100, sum = 0;

	if (ap && *ap) t = atoi(ap);
	sum = ((t + 1) * (t)) / 2;
     398:	a9 01       	movw	r20, r18
     39a:	4f 5f       	subi	r20, 0xFF	; 255
     39c:	5f 4f       	sbci	r21, 0xFF	; 255
     39e:	42 9f       	mul	r20, r18
     3a0:	c0 01       	movw	r24, r0
     3a2:	43 9f       	mul	r20, r19
     3a4:	90 0d       	add	r25, r0
     3a6:	52 9f       	mul	r21, r18
     3a8:	90 0d       	add	r25, r0
     3aa:	11 24       	eor	r1, r1
     3ac:	62 e0       	ldi	r22, 0x02	; 2
     3ae:	70 e0       	ldi	r23, 0x00	; 0
     3b0:	0e 94 a9 0b 	call	0x1752	; 0x1752 <__divmodhi4>
	printf("sum=%d\n", sum);
     3b4:	74 83       	std	Z+4, r23	; 0x04
     3b6:	63 83       	std	Z+3, r22	; 0x03
     3b8:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <printf>
     3bc:	0f 90       	pop	r0
     3be:	0f 90       	pop	r0
     3c0:	0f 90       	pop	r0
     3c2:	0f 90       	pop	r0
}
     3c4:	08 95       	ret

000003c6 <q_init>:
#include "cir_queue.h"

char qi[QI_SIZE], qo[QO_SIZE];
int fi, ri, fo, ro;
void q_init(void) {
	fi = ri = fo = ro = 0;
     3c6:	10 92 94 04 	sts	0x0494, r1
     3ca:	10 92 93 04 	sts	0x0493, r1
     3ce:	10 92 92 04 	sts	0x0492, r1
     3d2:	10 92 91 04 	sts	0x0491, r1
     3d6:	10 92 96 04 	sts	0x0496, r1
     3da:	10 92 95 04 	sts	0x0495, r1
     3de:	10 92 50 04 	sts	0x0450, r1
     3e2:	10 92 4f 04 	sts	0x044F, r1
}
     3e6:	08 95       	ret

000003e8 <qi_insert>:
int qi_insert(char ch) {
     3e8:	48 2f       	mov	r20, r24
	if((ri + 1) % QI_SIZE == fi)
     3ea:	20 91 95 04 	lds	r18, 0x0495
     3ee:	30 91 96 04 	lds	r19, 0x0496
     3f2:	2f 5f       	subi	r18, 0xFF	; 255
     3f4:	3f 4f       	sbci	r19, 0xFF	; 255
     3f6:	c9 01       	movw	r24, r18
     3f8:	60 e4       	ldi	r22, 0x40	; 64
     3fa:	70 e0       	ldi	r23, 0x00	; 0
     3fc:	0e 94 a9 0b 	call	0x1752	; 0x1752 <__divmodhi4>
     400:	9c 01       	movw	r18, r24
     402:	80 91 4f 04 	lds	r24, 0x044F
     406:	90 91 50 04 	lds	r25, 0x0450
     40a:	28 17       	cp	r18, r24
     40c:	39 07       	cpc	r19, r25
     40e:	59 f0       	breq	.+22     	; 0x426 <qi_insert+0x3e>
		return (0);
	ri = (ri + 1) % QI_SIZE;
     410:	30 93 96 04 	sts	0x0496, r19
     414:	20 93 95 04 	sts	0x0495, r18
	qi[ri] = ch;
     418:	29 56       	subi	r18, 0x69	; 105
     41a:	3b 4f       	sbci	r19, 0xFB	; 251
     41c:	f9 01       	movw	r30, r18
     41e:	40 83       	st	Z, r20
	return(1);
     420:	81 e0       	ldi	r24, 0x01	; 1
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	08 95       	ret
void q_init(void) {
	fi = ri = fo = ro = 0;
}
int qi_insert(char ch) {
	if((ri + 1) % QI_SIZE == fi)
		return (0);
     426:	80 e0       	ldi	r24, 0x00	; 0
     428:	90 e0       	ldi	r25, 0x00	; 0
	ri = (ri + 1) % QI_SIZE;
	qi[ri] = ch;
	return(1);
}
     42a:	08 95       	ret

0000042c <qi_delete>:
int qi_delete(void) {
	if( ri == fi)
     42c:	80 91 4f 04 	lds	r24, 0x044F
     430:	90 91 50 04 	lds	r25, 0x0450
     434:	20 91 95 04 	lds	r18, 0x0495
     438:	30 91 96 04 	lds	r19, 0x0496
     43c:	28 17       	cp	r18, r24
     43e:	39 07       	cpc	r19, r25
     440:	79 f0       	breq	.+30     	; 0x460 <qi_delete+0x34>
		return(0);
    fi = (fi+1) % QI_SIZE;
     442:	01 96       	adiw	r24, 0x01	; 1
     444:	60 e4       	ldi	r22, 0x40	; 64
     446:	70 e0       	ldi	r23, 0x00	; 0
     448:	0e 94 a9 0b 	call	0x1752	; 0x1752 <__divmodhi4>
     44c:	90 93 50 04 	sts	0x0450, r25
     450:	80 93 4f 04 	sts	0x044F, r24
	return(qi[fi]);
     454:	89 56       	subi	r24, 0x69	; 105
     456:	9b 4f       	sbci	r25, 0xFB	; 251
     458:	fc 01       	movw	r30, r24
     45a:	80 81       	ld	r24, Z
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	08 95       	ret
	qi[ri] = ch;
	return(1);
}
int qi_delete(void) {
	if( ri == fi)
		return(0);
     460:	80 e0       	ldi	r24, 0x00	; 0
     462:	90 e0       	ldi	r25, 0x00	; 0
    fi = (fi+1) % QI_SIZE;
	return(qi[fi]);
}
     464:	08 95       	ret

00000466 <qo_insert>:
int qo_insert(char ch) {
     466:	48 2f       	mov	r20, r24
	if((ro + 1) % QO_SIZE == fo)
     468:	20 91 93 04 	lds	r18, 0x0493
     46c:	30 91 94 04 	lds	r19, 0x0494
     470:	2f 5f       	subi	r18, 0xFF	; 255
     472:	3f 4f       	sbci	r19, 0xFF	; 255
     474:	c9 01       	movw	r24, r18
     476:	60 e4       	ldi	r22, 0x40	; 64
     478:	70 e0       	ldi	r23, 0x00	; 0
     47a:	0e 94 a9 0b 	call	0x1752	; 0x1752 <__divmodhi4>
     47e:	9c 01       	movw	r18, r24
     480:	80 91 91 04 	lds	r24, 0x0491
     484:	90 91 92 04 	lds	r25, 0x0492
     488:	28 17       	cp	r18, r24
     48a:	39 07       	cpc	r19, r25
     48c:	59 f0       	breq	.+22     	; 0x4a4 <qo_insert+0x3e>
		return (0);
	ro = (ro + 1) % QO_SIZE;
     48e:	30 93 94 04 	sts	0x0494, r19
     492:	20 93 93 04 	sts	0x0493, r18
	qo[ro] = ch;
     496:	2f 5a       	subi	r18, 0xAF	; 175
     498:	3b 4f       	sbci	r19, 0xFB	; 251
     49a:	f9 01       	movw	r30, r18
     49c:	40 83       	st	Z, r20
	return(1);
     49e:	81 e0       	ldi	r24, 0x01	; 1
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	08 95       	ret
    fi = (fi+1) % QI_SIZE;
	return(qi[fi]);
}
int qo_insert(char ch) {
	if((ro + 1) % QO_SIZE == fo)
		return (0);
     4a4:	80 e0       	ldi	r24, 0x00	; 0
     4a6:	90 e0       	ldi	r25, 0x00	; 0
	ro = (ro + 1) % QO_SIZE;
	qo[ro] = ch;
	return(1);
}
     4a8:	08 95       	ret

000004aa <qo_delete>:
int qo_delete(void) {
	if( ro == fo)
     4aa:	80 91 91 04 	lds	r24, 0x0491
     4ae:	90 91 92 04 	lds	r25, 0x0492
     4b2:	20 91 93 04 	lds	r18, 0x0493
     4b6:	30 91 94 04 	lds	r19, 0x0494
     4ba:	28 17       	cp	r18, r24
     4bc:	39 07       	cpc	r19, r25
     4be:	79 f0       	breq	.+30     	; 0x4de <qo_delete+0x34>
		return(0);
    fo = (fo+1) % QO_SIZE;
     4c0:	01 96       	adiw	r24, 0x01	; 1
     4c2:	60 e4       	ldi	r22, 0x40	; 64
     4c4:	70 e0       	ldi	r23, 0x00	; 0
     4c6:	0e 94 a9 0b 	call	0x1752	; 0x1752 <__divmodhi4>
     4ca:	90 93 92 04 	sts	0x0492, r25
     4ce:	80 93 91 04 	sts	0x0491, r24
	return(qo[fo]);
     4d2:	8f 5a       	subi	r24, 0xAF	; 175
     4d4:	9b 4f       	sbci	r25, 0xFB	; 251
     4d6:	fc 01       	movw	r30, r24
     4d8:	80 81       	ld	r24, Z
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	08 95       	ret
	qo[ro] = ch;
	return(1);
}
int qo_delete(void) {
	if( ro == fo)
		return(0);
     4de:	80 e0       	ldi	r24, 0x00	; 0
     4e0:	90 e0       	ldi	r25, 0x00	; 0
    fo = (fo+1) % QO_SIZE;
	return(qo[fo]);
}
     4e2:	08 95       	ret

000004e4 <qi_peek>:

int qi_peek() {
	if (fi == ri) return 0;
     4e4:	80 91 4f 04 	lds	r24, 0x044F
     4e8:	90 91 50 04 	lds	r25, 0x0450
     4ec:	20 91 95 04 	lds	r18, 0x0495
     4f0:	30 91 96 04 	lds	r19, 0x0496
     4f4:	82 17       	cp	r24, r18
     4f6:	93 07       	cpc	r25, r19
     4f8:	59 f0       	breq	.+22     	; 0x510 <qi_peek+0x2c>
	else 
		return (qi[(fi + 1) % QI_SIZE]);
     4fa:	01 96       	adiw	r24, 0x01	; 1
     4fc:	60 e4       	ldi	r22, 0x40	; 64
     4fe:	70 e0       	ldi	r23, 0x00	; 0
     500:	0e 94 a9 0b 	call	0x1752	; 0x1752 <__divmodhi4>
     504:	89 56       	subi	r24, 0x69	; 105
     506:	9b 4f       	sbci	r25, 0xFB	; 251
     508:	fc 01       	movw	r30, r24
     50a:	80 81       	ld	r24, Z
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	08 95       	ret
    fo = (fo+1) % QO_SIZE;
	return(qo[fo]);
}

int qi_peek() {
	if (fi == ri) return 0;
     510:	80 e0       	ldi	r24, 0x00	; 0
     512:	90 e0       	ldi	r25, 0x00	; 0
	else 
		return (qi[(fi + 1) % QI_SIZE]);
}
     514:	08 95       	ret

00000516 <led_init>:
#include "led.h"

static uint8_t Leds;

void led_init(void) {
    DDRL = PORTL = 0xff;
     516:	8f ef       	ldi	r24, 0xFF	; 255
     518:	80 93 0b 01 	sts	0x010B, r24
     51c:	80 93 0a 01 	sts	0x010A, r24
} 
     520:	08 95       	ret

00000522 <led_on_all>:
void led_on_all(void) {
    Leds = PORTL = 0x00;
     522:	10 92 0b 01 	sts	0x010B, r1
     526:	10 92 44 04 	sts	0x0444, r1
}
     52a:	08 95       	ret

0000052c <led_off_all>:
void led_off_all(void) {
    Leds = PORTL = 0xff;
     52c:	8f ef       	ldi	r24, 0xFF	; 255
     52e:	80 93 0b 01 	sts	0x010B, r24
     532:	80 93 44 04 	sts	0x0444, r24
}
     536:	08 95       	ret

00000538 <led_on>:
void led_on(uint8_t led_no) {
    Leds &= ~(1 << led_no);
     538:	21 e0       	ldi	r18, 0x01	; 1
     53a:	30 e0       	ldi	r19, 0x00	; 0
     53c:	02 c0       	rjmp	.+4      	; 0x542 <led_on+0xa>
     53e:	22 0f       	add	r18, r18
     540:	33 1f       	adc	r19, r19
     542:	8a 95       	dec	r24
     544:	e2 f7       	brpl	.-8      	; 0x53e <led_on+0x6>
     546:	20 95       	com	r18
     548:	80 91 44 04 	lds	r24, 0x0444
     54c:	28 23       	and	r18, r24
     54e:	20 93 44 04 	sts	0x0444, r18
	PORTL = Leds;
     552:	20 93 0b 01 	sts	0x010B, r18
}
     556:	08 95       	ret

00000558 <led_off>:
void led_off(uint8_t led_no) {
	Leds |= (1 << led_no);
     558:	21 e0       	ldi	r18, 0x01	; 1
     55a:	30 e0       	ldi	r19, 0x00	; 0
     55c:	02 c0       	rjmp	.+4      	; 0x562 <led_off+0xa>
     55e:	22 0f       	add	r18, r18
     560:	33 1f       	adc	r19, r19
     562:	8a 95       	dec	r24
     564:	e2 f7       	brpl	.-8      	; 0x55e <led_off+0x6>
     566:	80 91 44 04 	lds	r24, 0x0444
     56a:	82 2b       	or	r24, r18
     56c:	80 93 44 04 	sts	0x0444, r24
	PORTL = Leds;
     570:	80 93 0b 01 	sts	0x010B, r24
}
     574:	08 95       	ret

00000576 <led_set>:
void led_set(uint8_t led_mask) {
    Leds = ~led_mask;
     576:	80 95       	com	r24
     578:	80 93 44 04 	sts	0x0444, r24
	PORTL = Leds;
     57c:	80 93 0b 01 	sts	0x010B, r24
}
     580:	08 95       	ret

00000582 <get_node>:
struct node *Head = NULL;

struct node *get_node() {
	struct node *cp;
	
	cp = (struct node *)malloc(sizeof(struct node));
     582:	84 e0       	ldi	r24, 0x04	; 4
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	0e 94 07 0c 	call	0x180e	; 0x180e <malloc>
	return cp;
}
     58a:	08 95       	ret

0000058c <free_node>:

void free_node(struct node *np) {
	free(np);
     58c:	0e 94 9d 0c 	call	0x193a	; 0x193a <free>
	np = NULL;
}
     590:	08 95       	ret

00000592 <insert_node_head>:

void insert_node_head(struct node *np) {
     592:	fc 01       	movw	r30, r24
	if(!Head) {
     594:	80 91 45 04 	lds	r24, 0x0445
     598:	90 91 46 04 	lds	r25, 0x0446
     59c:	00 97       	sbiw	r24, 0x00	; 0
     59e:	39 f4       	brne	.+14     	; 0x5ae <insert_node_head+0x1c>
		Head = np;
     5a0:	f0 93 46 04 	sts	0x0446, r31
     5a4:	e0 93 45 04 	sts	0x0445, r30
		np->link = NULL;
     5a8:	13 82       	std	Z+3, r1	; 0x03
     5aa:	12 82       	std	Z+2, r1	; 0x02
     5ac:	08 95       	ret
	} else {
		np->link = Head;
     5ae:	93 83       	std	Z+3, r25	; 0x03
     5b0:	82 83       	std	Z+2, r24	; 0x02
		Head = np;
     5b2:	f0 93 46 04 	sts	0x0446, r31
     5b6:	e0 93 45 04 	sts	0x0445, r30
     5ba:	08 95       	ret

000005bc <insert_node_tail>:
	}
}
void insert_node_tail(struct node *np){
	struct node *cp;
	if(!Head)
     5bc:	e0 91 45 04 	lds	r30, 0x0445
     5c0:	f0 91 46 04 	lds	r31, 0x0446
     5c4:	30 97       	sbiw	r30, 0x00	; 0
     5c6:	31 f4       	brne	.+12     	; 0x5d4 <insert_node_tail+0x18>
		Head = np;
     5c8:	90 93 46 04 	sts	0x0446, r25
     5cc:	80 93 45 04 	sts	0x0445, r24
     5d0:	08 95       	ret
	else {
		for (cp = Head; cp->link != NULL; cp = cp->link);
     5d2:	f9 01       	movw	r30, r18
     5d4:	22 81       	ldd	r18, Z+2	; 0x02
     5d6:	33 81       	ldd	r19, Z+3	; 0x03
     5d8:	21 15       	cp	r18, r1
     5da:	31 05       	cpc	r19, r1
     5dc:	d1 f7       	brne	.-12     	; 0x5d2 <insert_node_tail+0x16>
		cp->link = np;
     5de:	93 83       	std	Z+3, r25	; 0x03
     5e0:	82 83       	std	Z+2, r24	; 0x02
     5e2:	08 95       	ret

000005e4 <insert_node_ascn>:
	}
}
void insert_node_ascn(struct node *np) {
     5e4:	cf 93       	push	r28
     5e6:	df 93       	push	r29
     5e8:	fc 01       	movw	r30, r24
	struct node *cp, *pp;
	if(!Head) {
     5ea:	20 91 45 04 	lds	r18, 0x0445
     5ee:	30 91 46 04 	lds	r19, 0x0446
     5f2:	21 15       	cp	r18, r1
     5f4:	31 05       	cpc	r19, r1
     5f6:	31 f0       	breq	.+12     	; 0x604 <insert_node_ascn+0x20>
		Head = np;
		np->link = NULL;
	} else {
		for (cp = Head, pp = NULL; cp != NULL && cp->data < np->data;
     5f8:	40 81       	ld	r20, Z
     5fa:	51 81       	ldd	r21, Z+1	; 0x01
     5fc:	d9 01       	movw	r26, r18
     5fe:	c0 e0       	ldi	r28, 0x00	; 0
     600:	d0 e0       	ldi	r29, 0x00	; 0
     602:	0f c0       	rjmp	.+30     	; 0x622 <insert_node_ascn+0x3e>
	}
}
void insert_node_ascn(struct node *np) {
	struct node *cp, *pp;
	if(!Head) {
		Head = np;
     604:	90 93 46 04 	sts	0x0446, r25
     608:	80 93 45 04 	sts	0x0445, r24
		np->link = NULL;
     60c:	13 82       	std	Z+3, r1	; 0x03
     60e:	12 82       	std	Z+2, r1	; 0x02
     610:	1d c0       	rjmp	.+58     	; 0x64c <insert_node_ascn+0x68>
	} else {
		for (cp = Head, pp = NULL; cp != NULL && cp->data < np->data;
												pp = cp, cp = cp->link);
     612:	12 96       	adiw	r26, 0x02	; 2
     614:	8d 91       	ld	r24, X+
     616:	9c 91       	ld	r25, X
     618:	13 97       	sbiw	r26, 0x03	; 3
	struct node *cp, *pp;
	if(!Head) {
		Head = np;
		np->link = NULL;
	} else {
		for (cp = Head, pp = NULL; cp != NULL && cp->data < np->data;
     61a:	ed 01       	movw	r28, r26
     61c:	00 97       	sbiw	r24, 0x00	; 0
     61e:	39 f0       	breq	.+14     	; 0x62e <insert_node_ascn+0x4a>
												pp = cp, cp = cp->link);
     620:	dc 01       	movw	r26, r24
	struct node *cp, *pp;
	if(!Head) {
		Head = np;
		np->link = NULL;
	} else {
		for (cp = Head, pp = NULL; cp != NULL && cp->data < np->data;
     622:	8d 91       	ld	r24, X+
     624:	9c 91       	ld	r25, X
     626:	11 97       	sbiw	r26, 0x01	; 1
     628:	84 17       	cp	r24, r20
     62a:	95 07       	cpc	r25, r21
     62c:	94 f3       	brlt	.-28     	; 0x612 <insert_node_ascn+0x2e>
												pp = cp, cp = cp->link);
		
		if(pp == NULL) {
     62e:	20 97       	sbiw	r28, 0x00	; 0
     630:	39 f4       	brne	.+14     	; 0x640 <insert_node_ascn+0x5c>
			np->link = Head;
     632:	33 83       	std	Z+3, r19	; 0x03
     634:	22 83       	std	Z+2, r18	; 0x02
			Head = np;
     636:	f0 93 46 04 	sts	0x0446, r31
     63a:	e0 93 45 04 	sts	0x0445, r30
     63e:	06 c0       	rjmp	.+12     	; 0x64c <insert_node_ascn+0x68>
		} else {
			np->link = pp->link;
     640:	8a 81       	ldd	r24, Y+2	; 0x02
     642:	9b 81       	ldd	r25, Y+3	; 0x03
     644:	93 83       	std	Z+3, r25	; 0x03
     646:	82 83       	std	Z+2, r24	; 0x02
			pp->link = np;
     648:	fb 83       	std	Y+3, r31	; 0x03
     64a:	ea 83       	std	Y+2, r30	; 0x02
		}
	}
}
     64c:	df 91       	pop	r29
     64e:	cf 91       	pop	r28
     650:	08 95       	ret

00000652 <tour_list>:

void tour_list() {
     652:	0f 93       	push	r16
     654:	1f 93       	push	r17
     656:	cf 93       	push	r28
     658:	df 93       	push	r29
	struct node *cp;

	printf("\n");
     65a:	8a e0       	ldi	r24, 0x0A	; 10
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <putchar>
	for (cp = Head; cp !=NULL; cp = cp->link)
     662:	c0 91 45 04 	lds	r28, 0x0445
     666:	d0 91 46 04 	lds	r29, 0x0446
		printf("-->%d ", cp->data);
     66a:	01 e3       	ldi	r16, 0x31	; 49
     66c:	12 e0       	ldi	r17, 0x02	; 2

void tour_list() {
	struct node *cp;

	printf("\n");
	for (cp = Head; cp !=NULL; cp = cp->link)
     66e:	13 c0       	rjmp	.+38     	; 0x696 <tour_list+0x44>
		printf("-->%d ", cp->data);
     670:	00 d0       	rcall	.+0      	; 0x672 <tour_list+0x20>
     672:	0f 92       	push	r0
     674:	ed b7       	in	r30, 0x3d	; 61
     676:	fe b7       	in	r31, 0x3e	; 62
     678:	12 83       	std	Z+2, r17	; 0x02
     67a:	01 83       	std	Z+1, r16	; 0x01
     67c:	88 81       	ld	r24, Y
     67e:	99 81       	ldd	r25, Y+1	; 0x01
     680:	94 83       	std	Z+4, r25	; 0x04
     682:	83 83       	std	Z+3, r24	; 0x03
     684:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <printf>

void tour_list() {
	struct node *cp;

	printf("\n");
	for (cp = Head; cp !=NULL; cp = cp->link)
     688:	0a 80       	ldd	r0, Y+2	; 0x02
     68a:	db 81       	ldd	r29, Y+3	; 0x03
     68c:	c0 2d       	mov	r28, r0
     68e:	0f 90       	pop	r0
     690:	0f 90       	pop	r0
     692:	0f 90       	pop	r0
     694:	0f 90       	pop	r0
     696:	20 97       	sbiw	r28, 0x00	; 0
     698:	59 f7       	brne	.-42     	; 0x670 <tour_list+0x1e>
		printf("-->%d ", cp->data);
	printf("\n");
     69a:	8a e0       	ldi	r24, 0x0A	; 10
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <putchar>
}
     6a2:	df 91       	pop	r29
     6a4:	cf 91       	pop	r28
     6a6:	1f 91       	pop	r17
     6a8:	0f 91       	pop	r16
     6aa:	08 95       	ret

000006ac <free_list>:

void free_list() {
	struct node *cp;

	for( ; Head != NULL; ) {
     6ac:	09 c0       	rjmp	.+18     	; 0x6c0 <free_list+0x14>
		cp = Head;
		Head = cp->link;
     6ae:	fc 01       	movw	r30, r24
     6b0:	22 81       	ldd	r18, Z+2	; 0x02
     6b2:	33 81       	ldd	r19, Z+3	; 0x03
     6b4:	30 93 46 04 	sts	0x0446, r19
     6b8:	20 93 45 04 	sts	0x0445, r18
	cp = (struct node *)malloc(sizeof(struct node));
	return cp;
}

void free_node(struct node *np) {
	free(np);
     6bc:	0e 94 9d 0c 	call	0x193a	; 0x193a <free>
}

void free_list() {
	struct node *cp;

	for( ; Head != NULL; ) {
     6c0:	80 91 45 04 	lds	r24, 0x0445
     6c4:	90 91 46 04 	lds	r25, 0x0446
     6c8:	00 97       	sbiw	r24, 0x00	; 0
     6ca:	89 f7       	brne	.-30     	; 0x6ae <free_list+0x2>
		cp = Head;
		Head = cp->link;
		free_node(cp);
	}
}
     6cc:	08 95       	ret

000006ce <task_init>:
};

int Task_cnt = sizeof(Task_tab) / sizeof(struct task_tab);

void task_init() {
	Task_f = Task_r = 0;
     6ce:	10 92 d8 04 	sts	0x04D8, r1
     6d2:	10 92 d7 04 	sts	0x04D7, r1
     6d6:	10 92 7a 05 	sts	0x057A, r1
     6da:	10 92 79 05 	sts	0x0579, r1
}
     6de:	08 95       	ret

000006e0 <task_insert>:

int task_insert(struct task *tskp) {
     6e0:	cf 93       	push	r28
     6e2:	df 93       	push	r29
     6e4:	48 2f       	mov	r20, r24
     6e6:	e9 2f       	mov	r30, r25
	if ((Task_r + 1) % MAX_TASK == Task_f)
     6e8:	80 91 d7 04 	lds	r24, 0x04D7
     6ec:	90 91 d8 04 	lds	r25, 0x04D8
     6f0:	c0 91 79 05 	lds	r28, 0x0579
     6f4:	d0 91 7a 05 	lds	r29, 0x057A
     6f8:	01 96       	adiw	r24, 0x01	; 1
     6fa:	20 e1       	ldi	r18, 0x10	; 16
     6fc:	30 e0       	ldi	r19, 0x00	; 0
     6fe:	b9 01       	movw	r22, r18
     700:	0e 94 a9 0b 	call	0x1752	; 0x1752 <__divmodhi4>
     704:	8c 17       	cp	r24, r28
     706:	9d 07       	cpc	r25, r29
     708:	31 f1       	breq	.+76     	; 0x756 <task_insert+0x76>
		return (0);
	Task_r = (Task_r + 1) % MAX_TASK;
     70a:	80 91 d7 04 	lds	r24, 0x04D7
     70e:	90 91 d8 04 	lds	r25, 0x04D8
     712:	01 96       	adiw	r24, 0x01	; 1
     714:	b9 01       	movw	r22, r18
     716:	0e 94 a9 0b 	call	0x1752	; 0x1752 <__divmodhi4>
     71a:	90 93 d8 04 	sts	0x04D8, r25
     71e:	80 93 d7 04 	sts	0x04D7, r24
	Task_q[Task_r] = *tskp;
     722:	80 91 d7 04 	lds	r24, 0x04D7
     726:	90 91 d8 04 	lds	r25, 0x04D8
     72a:	dc 01       	movw	r26, r24
     72c:	aa 0f       	add	r26, r26
     72e:	bb 1f       	adc	r27, r27
     730:	63 e0       	ldi	r22, 0x03	; 3
     732:	88 0f       	add	r24, r24
     734:	99 1f       	adc	r25, r25
     736:	6a 95       	dec	r22
     738:	e1 f7       	brne	.-8      	; 0x732 <task_insert+0x52>
     73a:	a8 0f       	add	r26, r24
     73c:	b9 1f       	adc	r27, r25
     73e:	a7 52       	subi	r26, 0x27	; 39
     740:	bb 4f       	sbci	r27, 0xFB	; 251
     742:	c4 2f       	mov	r28, r20
     744:	de 2f       	mov	r29, r30
     746:	8a e0       	ldi	r24, 0x0A	; 10
     748:	09 90       	ld	r0, Y+
     74a:	0d 92       	st	X+, r0
     74c:	81 50       	subi	r24, 0x01	; 1
     74e:	e1 f7       	brne	.-8      	; 0x748 <task_insert+0x68>
	return (1);
     750:	81 e0       	ldi	r24, 0x01	; 1
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	02 c0       	rjmp	.+4      	; 0x75a <task_insert+0x7a>
	Task_f = Task_r = 0;
}

int task_insert(struct task *tskp) {
	if ((Task_r + 1) % MAX_TASK == Task_f)
		return (0);
     756:	80 e0       	ldi	r24, 0x00	; 0
     758:	90 e0       	ldi	r25, 0x00	; 0
	Task_r = (Task_r + 1) % MAX_TASK;
	Task_q[Task_r] = *tskp;
	return (1);
}
     75a:	df 91       	pop	r29
     75c:	cf 91       	pop	r28
     75e:	08 95       	ret

00000760 <task_delete>:

int task_delete(struct task *tskp) {
     760:	9c 01       	movw	r18, r24
	if (Task_r == Task_f)
     762:	40 91 d7 04 	lds	r20, 0x04D7
     766:	50 91 d8 04 	lds	r21, 0x04D8
     76a:	80 91 79 05 	lds	r24, 0x0579
     76e:	90 91 7a 05 	lds	r25, 0x057A
     772:	48 17       	cp	r20, r24
     774:	59 07       	cpc	r21, r25
     776:	31 f1       	breq	.+76     	; 0x7c4 <task_delete+0x64>
		return(0);
	Task_f = (Task_f + 1) % MAX_TASK;
     778:	80 91 79 05 	lds	r24, 0x0579
     77c:	90 91 7a 05 	lds	r25, 0x057A
     780:	01 96       	adiw	r24, 0x01	; 1
     782:	60 e1       	ldi	r22, 0x10	; 16
     784:	70 e0       	ldi	r23, 0x00	; 0
     786:	0e 94 a9 0b 	call	0x1752	; 0x1752 <__divmodhi4>
     78a:	90 93 7a 05 	sts	0x057A, r25
     78e:	80 93 79 05 	sts	0x0579, r24
	*tskp = Task_q[Task_f];
     792:	80 91 79 05 	lds	r24, 0x0579
     796:	90 91 7a 05 	lds	r25, 0x057A
     79a:	fc 01       	movw	r30, r24
     79c:	ee 0f       	add	r30, r30
     79e:	ff 1f       	adc	r31, r31
     7a0:	a3 e0       	ldi	r26, 0x03	; 3
     7a2:	88 0f       	add	r24, r24
     7a4:	99 1f       	adc	r25, r25
     7a6:	aa 95       	dec	r26
     7a8:	e1 f7       	brne	.-8      	; 0x7a2 <task_delete+0x42>
     7aa:	e8 0f       	add	r30, r24
     7ac:	f9 1f       	adc	r31, r25
     7ae:	d9 01       	movw	r26, r18
     7b0:	e7 52       	subi	r30, 0x27	; 39
     7b2:	fb 4f       	sbci	r31, 0xFB	; 251
     7b4:	8a e0       	ldi	r24, 0x0A	; 10
     7b6:	01 90       	ld	r0, Z+
     7b8:	0d 92       	st	X+, r0
     7ba:	81 50       	subi	r24, 0x01	; 1
     7bc:	e1 f7       	brne	.-8      	; 0x7b6 <task_delete+0x56>
	return (1);
     7be:	81 e0       	ldi	r24, 0x01	; 1
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	08 95       	ret
	return (1);
}

int task_delete(struct task *tskp) {
	if (Task_r == Task_f)
		return(0);
     7c4:	80 e0       	ldi	r24, 0x00	; 0
     7c6:	90 e0       	ldi	r25, 0x00	; 0
	Task_f = (Task_f + 1) % MAX_TASK;
	*tskp = Task_q[Task_f];
	return (1);
}
     7c8:	08 95       	ret

000007ca <what_task>:

struct task_tab *what_task(char *name) {
     7ca:	ef 92       	push	r14
     7cc:	ff 92       	push	r15
     7ce:	0f 93       	push	r16
     7d0:	1f 93       	push	r17
     7d2:	cf 93       	push	r28
     7d4:	df 93       	push	r29
     7d6:	7c 01       	movw	r14, r24
	int i;
	for (i = 0; i < Task_cnt; i++)
     7d8:	00 e0       	ldi	r16, 0x00	; 0
     7da:	10 e0       	ldi	r17, 0x00	; 0
     7dc:	17 c0       	rjmp	.+46     	; 0x80c <what_task+0x42>
		if(!strcmp(name, Task_tab[i].task_name))
     7de:	e8 01       	movw	r28, r16
     7e0:	cc 0f       	add	r28, r28
     7e2:	dd 1f       	adc	r29, r29
     7e4:	c8 01       	movw	r24, r16
     7e6:	25 e0       	ldi	r18, 0x05	; 5
     7e8:	88 0f       	add	r24, r24
     7ea:	99 1f       	adc	r25, r25
     7ec:	2a 95       	dec	r18
     7ee:	e1 f7       	brne	.-8      	; 0x7e8 <what_task+0x1e>
     7f0:	c8 0f       	add	r28, r24
     7f2:	d9 1f       	adc	r29, r25
     7f4:	c4 58       	subi	r28, 0x84	; 132
     7f6:	dd 4f       	sbci	r29, 0xFD	; 253
     7f8:	c7 01       	movw	r24, r14
     7fa:	be 01       	movw	r22, r28
     7fc:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <strcmp>
     800:	00 97       	sbiw	r24, 0x00	; 0
     802:	11 f4       	brne	.+4      	; 0x808 <what_task+0x3e>
			return (&Task_tab[i]);
     804:	ce 01       	movw	r24, r28
     806:	0b c0       	rjmp	.+22     	; 0x81e <what_task+0x54>
	return (1);
}

struct task_tab *what_task(char *name) {
	int i;
	for (i = 0; i < Task_cnt; i++)
     808:	0f 5f       	subi	r16, 0xFF	; 255
     80a:	1f 4f       	sbci	r17, 0xFF	; 255
     80c:	80 91 7a 02 	lds	r24, 0x027A
     810:	90 91 7b 02 	lds	r25, 0x027B
     814:	08 17       	cp	r16, r24
     816:	19 07       	cpc	r17, r25
     818:	14 f3       	brlt	.-60     	; 0x7de <what_task+0x14>
		if(!strcmp(name, Task_tab[i].task_name))
			return (&Task_tab[i]);
	return (NULL);
     81a:	80 e0       	ldi	r24, 0x00	; 0
     81c:	90 e0       	ldi	r25, 0x00	; 0
}
     81e:	df 91       	pop	r29
     820:	cf 91       	pop	r28
     822:	1f 91       	pop	r17
     824:	0f 91       	pop	r16
     826:	ff 90       	pop	r15
     828:	ef 90       	pop	r14
     82a:	08 95       	ret

0000082c <task_cmd>:

void task_cmd(char *arg) {
     82c:	af 92       	push	r10
     82e:	bf 92       	push	r11
     830:	cf 92       	push	r12
     832:	df 92       	push	r13
     834:	ef 92       	push	r14
     836:	ff 92       	push	r15
     838:	0f 93       	push	r16
     83a:	1f 93       	push	r17
     83c:	cf 93       	push	r28
     83e:	df 93       	push	r29
     840:	cd b7       	in	r28, 0x3d	; 61
     842:	de b7       	in	r29, 0x3e	; 62
     844:	ca 54       	subi	r28, 0x4A	; 74
     846:	d0 40       	sbci	r29, 0x00	; 0
     848:	0f b6       	in	r0, 0x3f	; 63
     84a:	f8 94       	cli
     84c:	de bf       	out	0x3e, r29	; 62
     84e:	0f be       	out	0x3f, r0	; 63
     850:	cd bf       	out	0x3d, r28	; 61
	char buf[64], *cp0, *cp1, *cp2, *cp3;
	struct task task;
	struct task_tab *ptt;
	int ms;

	if (!uart_peek()) return ;
     852:	0e 94 c0 06 	call	0xd80	; 0xd80 <uart_peek>
     856:	00 97       	sbiw	r24, 0x00	; 0
     858:	09 f4       	brne	.+2      	; 0x85c <task_cmd+0x30>
     85a:	91 c0       	rjmp	.+290    	; 0x97e <task_cmd+0x152>

	if (gets(buf) == NULL) {
     85c:	ce 01       	movw	r24, r28
     85e:	0b 96       	adiw	r24, 0x0b	; 11
     860:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <gets>
     864:	00 97       	sbiw	r24, 0x00	; 0
     866:	29 f4       	brne	.+10     	; 0x872 <task_cmd+0x46>
		printf("logout, good bye !!!\n");
     868:	8b e3       	ldi	r24, 0x3B	; 59
     86a:	92 e0       	ldi	r25, 0x02	; 2
     86c:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <puts>
     870:	ff cf       	rjmp	.-2      	; 0x870 <task_cmd+0x44>
		while(1);
	}

	cp0 = strtok(buf, " \t\n\r");
     872:	ce 01       	movw	r24, r28
     874:	0b 96       	adiw	r24, 0x0b	; 11
     876:	60 e5       	ldi	r22, 0x50	; 80
     878:	72 e0       	ldi	r23, 0x02	; 2
     87a:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <strtok>
     87e:	8c 01       	movw	r16, r24
	cp1 = strtok(NULL, " \t\n\r");
     880:	80 e0       	ldi	r24, 0x00	; 0
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	60 e5       	ldi	r22, 0x50	; 80
     886:	72 e0       	ldi	r23, 0x02	; 2
     888:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <strtok>
     88c:	7c 01       	movw	r14, r24
	cp2 = strtok(NULL, " \t\n\r");
     88e:	80 e0       	ldi	r24, 0x00	; 0
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	60 e5       	ldi	r22, 0x50	; 80
     894:	72 e0       	ldi	r23, 0x02	; 2
     896:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <strtok>
     89a:	6c 01       	movw	r12, r24
	cp3 = strtok(NULL, " \t\n\r");
     89c:	80 e0       	ldi	r24, 0x00	; 0
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	60 e5       	ldi	r22, 0x50	; 80
     8a2:	72 e0       	ldi	r23, 0x02	; 2
     8a4:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <strtok>
     8a8:	5c 01       	movw	r10, r24

	if (cp0 == NULL) {
     8aa:	01 15       	cp	r16, r1
     8ac:	11 05       	cpc	r17, r1
     8ae:	59 f4       	brne	.+22     	; 0x8c6 <task_cmd+0x9a>
		printf("$ "); return ;
     8b0:	0f 92       	push	r0
     8b2:	0f 92       	push	r0
     8b4:	85 e5       	ldi	r24, 0x55	; 85
     8b6:	92 e0       	ldi	r25, 0x02	; 2
     8b8:	ad b7       	in	r26, 0x3d	; 61
     8ba:	be b7       	in	r27, 0x3e	; 62
     8bc:	12 96       	adiw	r26, 0x02	; 2
     8be:	9c 93       	st	X, r25
     8c0:	8e 93       	st	-X, r24
     8c2:	11 97       	sbiw	r26, 0x01	; 1
     8c4:	58 c0       	rjmp	.+176    	; 0x976 <task_cmd+0x14a>
	}

	if (!strcmp(cp0, "timer")) {
     8c6:	c8 01       	movw	r24, r16
     8c8:	68 e5       	ldi	r22, 0x58	; 88
     8ca:	72 e0       	ldi	r23, 0x02	; 2
     8cc:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <strcmp>
     8d0:	00 97       	sbiw	r24, 0x00	; 0
     8d2:	91 f5       	brne	.+100    	; 0x938 <task_cmd+0x10c>
		if (!cp1 || !cp2) {
     8d4:	e1 14       	cp	r14, r1
     8d6:	f1 04       	cpc	r15, r1
     8d8:	19 f0       	breq	.+6      	; 0x8e0 <task_cmd+0xb4>
     8da:	c1 14       	cp	r12, r1
     8dc:	d1 04       	cpc	r13, r1
     8de:	29 f4       	brne	.+10     	; 0x8ea <task_cmd+0xbe>
			printf("!!!-222\n");
     8e0:	8e e5       	ldi	r24, 0x5E	; 94
     8e2:	92 e0       	ldi	r25, 0x02	; 2
     8e4:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <puts>
     8e8:	3e c0       	rjmp	.+124    	; 0x966 <task_cmd+0x13a>
			printf("$ ");
			return ;
		}
		ms = atoi(cp1) / 256;
     8ea:	c7 01       	movw	r24, r14
     8ec:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <atoi>
     8f0:	8c 01       	movw	r16, r24

		if (!(ptt = what_task(cp2))) {
     8f2:	c6 01       	movw	r24, r12
     8f4:	0e 94 e5 03 	call	0x7ca	; 0x7ca <what_task>
     8f8:	00 97       	sbiw	r24, 0x00	; 0
     8fa:	19 f1       	breq	.+70     	; 0x942 <task_cmd+0x116>
			printf("Unknown command...\n");
			return ;
		}

		task.fun = ptt->task_fun;
     8fc:	dc 01       	movw	r26, r24
     8fe:	90 96       	adiw	r26, 0x20	; 32
     900:	8d 91       	ld	r24, X+
     902:	9c 91       	ld	r25, X
     904:	91 97       	sbiw	r26, 0x21	; 33
     906:	9a 83       	std	Y+2, r25	; 0x02
     908:	89 83       	std	Y+1, r24	; 0x01
		if (cp3) strcpy(task.arg, cp3);
     90a:	ce 01       	movw	r24, r28
     90c:	03 96       	adiw	r24, 0x03	; 3
     90e:	a1 14       	cp	r10, r1
     910:	b1 04       	cpc	r11, r1
     912:	11 f0       	breq	.+4      	; 0x918 <task_cmd+0xec>
     914:	b5 01       	movw	r22, r10
     916:	02 c0       	rjmp	.+4      	; 0x91c <task_cmd+0xf0>
		else 	 strcpy(task.arg, "");
     918:	69 e7       	ldi	r22, 0x79	; 121
     91a:	72 e0       	ldi	r23, 0x02	; 2
     91c:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <strcpy>
		cli();
     920:	f8 94       	cli
		if (!cp1 || !cp2) {
			printf("!!!-222\n");
			printf("$ ");
			return ;
		}
		ms = atoi(cp1) / 256;
     922:	c8 01       	movw	r24, r16
     924:	60 e0       	ldi	r22, 0x00	; 0
     926:	71 e0       	ldi	r23, 0x01	; 1
     928:	0e 94 a9 0b 	call	0x1752	; 0x1752 <__divmodhi4>

		task.fun = ptt->task_fun;
		if (cp3) strcpy(task.arg, cp3);
		else 	 strcpy(task.arg, "");
		cli();
		insert_timer(&task,ms);
     92c:	ce 01       	movw	r24, r28
     92e:	01 96       	adiw	r24, 0x01	; 1
     930:	0e 94 08 05 	call	0xa10	; 0xa10 <insert_timer>
		sei();
     934:	78 94       	sei
     936:	17 c0       	rjmp	.+46     	; 0x966 <task_cmd+0x13a>
			cli();
			insert_timer(&task,ms);
			sei();
		*/
		} else {
			if (!(ptt = what_task(cp0))) {
     938:	c8 01       	movw	r24, r16
     93a:	0e 94 e5 03 	call	0x7ca	; 0x7ca <what_task>
     93e:	00 97       	sbiw	r24, 0x00	; 0
     940:	29 f4       	brne	.+10     	; 0x94c <task_cmd+0x120>
				printf("Unknown command...\n");
     942:	86 e6       	ldi	r24, 0x66	; 102
     944:	92 e0       	ldi	r25, 0x02	; 2
     946:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <puts>
				return ;
     94a:	19 c0       	rjmp	.+50     	; 0x97e <task_cmd+0x152>
     94c:	dc 01       	movw	r26, r24
     94e:	90 96       	adiw	r26, 0x20	; 32
     950:	ed 91       	ld	r30, X+
     952:	fc 91       	ld	r31, X
     954:	91 97       	sbiw	r26, 0x21	; 33
			}

			if (cp2)
     956:	c1 14       	cp	r12, r1
     958:	d1 04       	cpc	r13, r1
     95a:	11 f0       	breq	.+4      	; 0x960 <task_cmd+0x134>
				(*ptt->task_fun)(cp1);
     95c:	c7 01       	movw	r24, r14
     95e:	02 c0       	rjmp	.+4      	; 0x964 <task_cmd+0x138>
			else
				(*ptt->task_fun)("");
     960:	89 e7       	ldi	r24, 0x79	; 121
     962:	92 e0       	ldi	r25, 0x02	; 2
     964:	19 95       	eicall
		}
	printf("$ ");
     966:	0f 92       	push	r0
     968:	0f 92       	push	r0
     96a:	85 e5       	ldi	r24, 0x55	; 85
     96c:	92 e0       	ldi	r25, 0x02	; 2
     96e:	ed b7       	in	r30, 0x3d	; 61
     970:	fe b7       	in	r31, 0x3e	; 62
     972:	92 83       	std	Z+2, r25	; 0x02
     974:	81 83       	std	Z+1, r24	; 0x01
     976:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <printf>
     97a:	0f 90       	pop	r0
     97c:	0f 90       	pop	r0
}
     97e:	c6 5b       	subi	r28, 0xB6	; 182
     980:	df 4f       	sbci	r29, 0xFF	; 255
     982:	0f b6       	in	r0, 0x3f	; 63
     984:	f8 94       	cli
     986:	de bf       	out	0x3e, r29	; 62
     988:	0f be       	out	0x3f, r0	; 63
     98a:	cd bf       	out	0x3d, r28	; 61
     98c:	df 91       	pop	r29
     98e:	cf 91       	pop	r28
     990:	1f 91       	pop	r17
     992:	0f 91       	pop	r16
     994:	ff 90       	pop	r15
     996:	ef 90       	pop	r14
     998:	df 90       	pop	r13
     99a:	cf 90       	pop	r12
     99c:	bf 90       	pop	r11
     99e:	af 90       	pop	r10
     9a0:	08 95       	ret

000009a2 <timer_init>:

struct timer *Thead = NULL;


void timer_init() {
	TCNT2 = 0;
     9a2:	10 92 b2 00 	sts	0x00B2, r1
	sbi(ASSR, AS2);
     9a6:	e6 eb       	ldi	r30, 0xB6	; 182
     9a8:	f0 e0       	ldi	r31, 0x00	; 0
     9aa:	80 81       	ld	r24, Z
     9ac:	80 62       	ori	r24, 0x20	; 32
     9ae:	80 83       	st	Z, r24
	sbi(TIMSK2, TOIE2);
     9b0:	e0 e7       	ldi	r30, 0x70	; 112
     9b2:	f0 e0       	ldi	r31, 0x00	; 0
     9b4:	80 81       	ld	r24, Z
     9b6:	81 60       	ori	r24, 0x01	; 1
     9b8:	80 83       	st	Z, r24
	sbi(TCCR2B, CS20); sbi(TCCR2B, CS21);
     9ba:	e1 eb       	ldi	r30, 0xB1	; 177
     9bc:	f0 e0       	ldi	r31, 0x00	; 0
     9be:	80 81       	ld	r24, Z
     9c0:	81 60       	ori	r24, 0x01	; 1
     9c2:	80 83       	st	Z, r24
     9c4:	80 81       	ld	r24, Z
     9c6:	82 60       	ori	r24, 0x02	; 2
     9c8:	80 83       	st	Z, r24
}
     9ca:	08 95       	ret

000009cc <timer_expire>:

void timer_expire(void) {
     9cc:	cf 93       	push	r28
     9ce:	df 93       	push	r29
	struct timer *tp;

	for ( ; Thead != NULL && !Thead->time; ) {
     9d0:	0d c0       	rjmp	.+26     	; 0x9ec <timer_expire+0x20>
		tp = Thead, Thead = tp->link;
     9d2:	8c 85       	ldd	r24, Y+12	; 0x0c
     9d4:	9d 85       	ldd	r25, Y+13	; 0x0d
     9d6:	90 93 48 04 	sts	0x0448, r25
     9da:	80 93 47 04 	sts	0x0447, r24

		task_insert(&tp->task);
     9de:	ce 01       	movw	r24, r28
     9e0:	02 96       	adiw	r24, 0x02	; 2
     9e2:	0e 94 70 03 	call	0x6e0	; 0x6e0 <task_insert>
		free(tp);
     9e6:	ce 01       	movw	r24, r28
     9e8:	0e 94 9d 0c 	call	0x193a	; 0x193a <free>
}

void timer_expire(void) {
	struct timer *tp;

	for ( ; Thead != NULL && !Thead->time; ) {
     9ec:	c0 91 47 04 	lds	r28, 0x0447
     9f0:	d0 91 48 04 	lds	r29, 0x0448
     9f4:	20 97       	sbiw	r28, 0x00	; 0
     9f6:	21 f0       	breq	.+8      	; 0xa00 <timer_expire+0x34>
     9f8:	88 81       	ld	r24, Y
     9fa:	99 81       	ldd	r25, Y+1	; 0x01
     9fc:	00 97       	sbiw	r24, 0x00	; 0
     9fe:	49 f3       	breq	.-46     	; 0x9d2 <timer_expire+0x6>
		tp = Thead, Thead = tp->link;

		task_insert(&tp->task);
		free(tp);
	}
}
     a00:	df 91       	pop	r29
     a02:	cf 91       	pop	r28
     a04:	08 95       	ret

00000a06 <get_timer>:

struct timer *get_timer() {
	struct timer *tp;

	tp = (struct timer *) malloc(sizeof(*tp));
     a06:	8e e0       	ldi	r24, 0x0E	; 14
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	0e 94 07 0c 	call	0x180e	; 0x180e <malloc>
	return(tp);
}
     a0e:	08 95       	ret

00000a10 <insert_timer>:

void insert_timer(struct task *tskp, int ms) {
     a10:	ef 92       	push	r14
     a12:	ff 92       	push	r15
     a14:	0f 93       	push	r16
     a16:	1f 93       	push	r17
     a18:	cf 93       	push	r28
     a1a:	df 93       	push	r29
     a1c:	f8 2e       	mov	r15, r24
     a1e:	e9 2e       	mov	r14, r25
     a20:	8b 01       	movw	r16, r22
	int total;
	struct timer *tp, *cp, *pp;
	
	tp = get_timer();
     a22:	0e 94 03 05 	call	0xa06	; 0xa06 <get_timer>
     a26:	ec 01       	movw	r28, r24
	tp->task = *tskp;
     a28:	dc 01       	movw	r26, r24
     a2a:	12 96       	adiw	r26, 0x02	; 2
     a2c:	ef 2d       	mov	r30, r15
     a2e:	fe 2d       	mov	r31, r14
     a30:	8a e0       	ldi	r24, 0x0A	; 10
     a32:	01 90       	ld	r0, Z+
     a34:	0d 92       	st	X+, r0
     a36:	81 50       	subi	r24, 0x01	; 1
     a38:	e1 f7       	brne	.-8      	; 0xa32 <insert_timer+0x22>
	tp->time = ms;
     a3a:	19 83       	std	Y+1, r17	; 0x01
     a3c:	08 83       	st	Y, r16

	if (Thead == NULL) {
     a3e:	e0 91 47 04 	lds	r30, 0x0447
     a42:	f0 91 48 04 	lds	r31, 0x0448
     a46:	30 97       	sbiw	r30, 0x00	; 0
     a48:	29 f4       	brne	.+10     	; 0xa54 <insert_timer+0x44>
		Thead = tp, tp->link =NULL;
     a4a:	d0 93 48 04 	sts	0x0448, r29
     a4e:	c0 93 47 04 	sts	0x0447, r28
     a52:	2f c0       	rjmp	.+94     	; 0xab2 <insert_timer+0xa2>
	
	tp = get_timer();
	tp->task = *tskp;
	tp->time = ms;

	if (Thead == NULL) {
     a54:	40 e0       	ldi	r20, 0x00	; 0
     a56:	50 e0       	ldi	r21, 0x00	; 0
     a58:	20 e0       	ldi	r18, 0x00	; 0
     a5a:	30 e0       	ldi	r19, 0x00	; 0
     a5c:	01 c0       	rjmp	.+2      	; 0xa60 <insert_timer+0x50>
		Thead = tp, tp->link =NULL;
		return ;
	}

	pp = NULL, total = 0;
	for (cp = Thead; cp; cp = cp->link) {
     a5e:	fd 01       	movw	r30, r26
		total += cp->time;
     a60:	80 81       	ld	r24, Z
     a62:	91 81       	ldd	r25, Z+1	; 0x01
     a64:	28 0f       	add	r18, r24
     a66:	39 1f       	adc	r19, r25
		if (total >= ms) break;
     a68:	20 17       	cp	r18, r16
     a6a:	31 07       	cpc	r19, r17
     a6c:	34 f4       	brge	.+12     	; 0xa7a <insert_timer+0x6a>
		Thead = tp, tp->link =NULL;
		return ;
	}

	pp = NULL, total = 0;
	for (cp = Thead; cp; cp = cp->link) {
     a6e:	a4 85       	ldd	r26, Z+12	; 0x0c
     a70:	b5 85       	ldd	r27, Z+13	; 0x0d
     a72:	af 01       	movw	r20, r30
     a74:	10 97       	sbiw	r26, 0x00	; 0
     a76:	99 f7       	brne	.-26     	; 0xa5e <insert_timer+0x4e>
     a78:	01 c0       	rjmp	.+2      	; 0xa7c <insert_timer+0x6c>
		total += cp->time;
		if (total >= ms) break;
     a7a:	df 01       	movw	r26, r30
		pp = cp;
	}

	if (pp == NULL) {
     a7c:	41 15       	cp	r20, r1
     a7e:	51 05       	cpc	r21, r1
     a80:	79 f4       	brne	.+30     	; 0xaa0 <insert_timer+0x90>
		cp->time -= tp->time;
     a82:	8d 91       	ld	r24, X+
     a84:	9c 91       	ld	r25, X
     a86:	11 97       	sbiw	r26, 0x01	; 1
     a88:	80 1b       	sub	r24, r16
     a8a:	91 0b       	sbc	r25, r17
     a8c:	11 96       	adiw	r26, 0x01	; 1
     a8e:	9c 93       	st	X, r25
     a90:	8e 93       	st	-X, r24
		tp->link = cp, Thead = tp;
     a92:	bd 87       	std	Y+13, r27	; 0x0d
     a94:	ac 87       	std	Y+12, r26	; 0x0c
     a96:	d0 93 48 04 	sts	0x0448, r29
     a9a:	c0 93 47 04 	sts	0x0447, r28
     a9e:	24 c0       	rjmp	.+72     	; 0xae8 <insert_timer+0xd8>
	} else if (cp == NULL) {
     aa0:	10 97       	sbiw	r26, 0x00	; 0
     aa2:	51 f4       	brne	.+20     	; 0xab8 <insert_timer+0xa8>
		tp->time -= total;
     aa4:	02 1b       	sub	r16, r18
     aa6:	13 0b       	sbc	r17, r19
     aa8:	19 83       	std	Y+1, r17	; 0x01
     aaa:	08 83       	st	Y, r16
		pp->link = tp;
     aac:	fa 01       	movw	r30, r20
     aae:	d5 87       	std	Z+13, r29	; 0x0d
     ab0:	c4 87       	std	Z+12, r28	; 0x0c
		tp->link = NULL;
     ab2:	1d 86       	std	Y+13, r1	; 0x0d
     ab4:	1c 86       	std	Y+12, r1	; 0x0c
     ab6:	18 c0       	rjmp	.+48     	; 0xae8 <insert_timer+0xd8>
	} else {
		total -= cp->time;
     ab8:	8d 91       	ld	r24, X+
     aba:	9c 91       	ld	r25, X
     abc:	11 97       	sbiw	r26, 0x01	; 1
     abe:	b9 01       	movw	r22, r18
     ac0:	68 1b       	sub	r22, r24
     ac2:	79 0b       	sbc	r23, r25
		tp->time -= total;
     ac4:	98 01       	movw	r18, r16
     ac6:	26 1b       	sub	r18, r22
     ac8:	37 0b       	sbc	r19, r23
     aca:	39 83       	std	Y+1, r19	; 0x01
     acc:	28 83       	st	Y, r18
		cp->time -= tp->time;
     ace:	8d 91       	ld	r24, X+
     ad0:	9c 91       	ld	r25, X
     ad2:	11 97       	sbiw	r26, 0x01	; 1
     ad4:	82 1b       	sub	r24, r18
     ad6:	93 0b       	sbc	r25, r19
     ad8:	11 96       	adiw	r26, 0x01	; 1
     ada:	9c 93       	st	X, r25
     adc:	8e 93       	st	-X, r24
		pp->link = tp;
     ade:	fa 01       	movw	r30, r20
     ae0:	d5 87       	std	Z+13, r29	; 0x0d
     ae2:	c4 87       	std	Z+12, r28	; 0x0c
		tp->link = cp;
     ae4:	bd 87       	std	Y+13, r27	; 0x0d
     ae6:	ac 87       	std	Y+12, r26	; 0x0c
	}
}
     ae8:	df 91       	pop	r29
     aea:	cf 91       	pop	r28
     aec:	1f 91       	pop	r17
     aee:	0f 91       	pop	r16
     af0:	ff 90       	pop	r15
     af2:	ef 90       	pop	r14
     af4:	08 95       	ret

00000af6 <tour_timer>:

void tour_timer() {
     af6:	ef 92       	push	r14
     af8:	ff 92       	push	r15
     afa:	0f 93       	push	r16
     afc:	1f 93       	push	r17
     afe:	cf 93       	push	r28
     b00:	df 93       	push	r29
	struct timer *cp;
	int total = 0;

	printf("\n");
     b02:	8a e0       	ldi	r24, 0x0A	; 10
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <putchar>
	for (cp = Thead; cp != NULL; cp = cp->link) {
     b0a:	c0 91 47 04 	lds	r28, 0x0447
     b0e:	d0 91 48 04 	lds	r29, 0x0448
	}
}

void tour_timer() {
	struct timer *cp;
	int total = 0;
     b12:	00 e0       	ldi	r16, 0x00	; 0
     b14:	10 e0       	ldi	r17, 0x00	; 0

	printf("\n");
	for (cp = Thead; cp != NULL; cp = cp->link) {
		total += cp->time;
		printf("-->%d(%d) ", cp->time, total);
     b16:	82 ee       	ldi	r24, 0xE2	; 226
     b18:	e8 2e       	mov	r14, r24
     b1a:	82 e0       	ldi	r24, 0x02	; 2
     b1c:	f8 2e       	mov	r15, r24
void tour_timer() {
	struct timer *cp;
	int total = 0;

	printf("\n");
	for (cp = Thead; cp != NULL; cp = cp->link) {
     b1e:	20 c0       	rjmp	.+64     	; 0xb60 <tour_timer+0x6a>
		total += cp->time;
     b20:	88 81       	ld	r24, Y
     b22:	99 81       	ldd	r25, Y+1	; 0x01
     b24:	08 0f       	add	r16, r24
     b26:	19 1f       	adc	r17, r25
		printf("-->%d(%d) ", cp->time, total);
     b28:	00 d0       	rcall	.+0      	; 0xb2a <tour_timer+0x34>
     b2a:	00 d0       	rcall	.+0      	; 0xb2c <tour_timer+0x36>
     b2c:	ed b7       	in	r30, 0x3d	; 61
     b2e:	fe b7       	in	r31, 0x3e	; 62
     b30:	31 96       	adiw	r30, 0x01	; 1
     b32:	ad b7       	in	r26, 0x3d	; 61
     b34:	be b7       	in	r27, 0x3e	; 62
     b36:	12 96       	adiw	r26, 0x02	; 2
     b38:	fc 92       	st	X, r15
     b3a:	ee 92       	st	-X, r14
     b3c:	11 97       	sbiw	r26, 0x01	; 1
     b3e:	93 83       	std	Z+3, r25	; 0x03
     b40:	82 83       	std	Z+2, r24	; 0x02
     b42:	15 83       	std	Z+5, r17	; 0x05
     b44:	04 83       	std	Z+4, r16	; 0x04
     b46:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <printf>
void tour_timer() {
	struct timer *cp;
	int total = 0;

	printf("\n");
	for (cp = Thead; cp != NULL; cp = cp->link) {
     b4a:	0c 84       	ldd	r0, Y+12	; 0x0c
     b4c:	dd 85       	ldd	r29, Y+13	; 0x0d
     b4e:	c0 2d       	mov	r28, r0
     b50:	8d b7       	in	r24, 0x3d	; 61
     b52:	9e b7       	in	r25, 0x3e	; 62
     b54:	06 96       	adiw	r24, 0x06	; 6
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	f8 94       	cli
     b5a:	9e bf       	out	0x3e, r25	; 62
     b5c:	0f be       	out	0x3f, r0	; 63
     b5e:	8d bf       	out	0x3d, r24	; 61
     b60:	20 97       	sbiw	r28, 0x00	; 0
     b62:	f1 f6       	brne	.-68     	; 0xb20 <tour_timer+0x2a>
		total += cp->time;
		printf("-->%d(%d) ", cp->time, total);
	}
	printf("\n");
     b64:	8a e0       	ldi	r24, 0x0A	; 10
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <putchar>
}
     b6c:	df 91       	pop	r29
     b6e:	cf 91       	pop	r28
     b70:	1f 91       	pop	r17
     b72:	0f 91       	pop	r16
     b74:	ff 90       	pop	r15
     b76:	ef 90       	pop	r14
     b78:	08 95       	ret

00000b7a <free_timer>:

void free_timer() {
	struct timer *cp;

	for (  ; Thead != NULL;  ) {
     b7a:	09 c0       	rjmp	.+18     	; 0xb8e <free_timer+0x14>
		cp = Thead;
		Thead = cp->link;
     b7c:	fc 01       	movw	r30, r24
     b7e:	24 85       	ldd	r18, Z+12	; 0x0c
     b80:	35 85       	ldd	r19, Z+13	; 0x0d
     b82:	30 93 48 04 	sts	0x0448, r19
     b86:	20 93 47 04 	sts	0x0447, r18
		free(cp);
     b8a:	0e 94 9d 0c 	call	0x193a	; 0x193a <free>
}

void free_timer() {
	struct timer *cp;

	for (  ; Thead != NULL;  ) {
     b8e:	80 91 47 04 	lds	r24, 0x0447
     b92:	90 91 48 04 	lds	r25, 0x0448
     b96:	00 97       	sbiw	r24, 0x00	; 0
     b98:	89 f7       	brne	.-30     	; 0xb7c <free_timer+0x2>
		cp = Thead;
		Thead = cp->link;
		free(cp);
	}
}
     b9a:	08 95       	ret

00000b9c <app_timer>:

void app_timer(char *ap) {
     b9c:	0f 93       	push	r16
     b9e:	1f 93       	push	r17
     ba0:	cf 93       	push	r28
     ba2:	df 93       	push	r29
     ba4:	cd b7       	in	r28, 0x3d	; 61
     ba6:	de b7       	in	r29, 0x3e	; 62
     ba8:	62 97       	sbiw	r28, 0x12	; 18
     baa:	0f b6       	in	r0, 0x3f	; 63
     bac:	f8 94       	cli
     bae:	de bf       	out	0x3e, r29	; 62
     bb0:	0f be       	out	0x3f, r0	; 63
     bb2:	cd bf       	out	0x3d, r28	; 61
	char buf[8];
	int ms;
	struct task tsk;

	while(1) {
		printf(">> ");
     bb4:	0d ee       	ldi	r16, 0xED	; 237
     bb6:	12 e0       	ldi	r17, 0x02	; 2
     bb8:	0f 92       	push	r0
     bba:	0f 92       	push	r0
     bbc:	ed b7       	in	r30, 0x3d	; 61
     bbe:	fe b7       	in	r31, 0x3e	; 62
     bc0:	12 83       	std	Z+2, r17	; 0x02
     bc2:	01 83       	std	Z+1, r16	; 0x01
     bc4:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <printf>
		if (fgets(buf, 8, stdin) == NULL || (ms = atoi(buf)) == 0)
     bc8:	0f 90       	pop	r0
     bca:	0f 90       	pop	r0
     bcc:	40 91 80 05 	lds	r20, 0x0580
     bd0:	50 91 81 05 	lds	r21, 0x0581
     bd4:	ce 01       	movw	r24, r28
     bd6:	01 96       	adiw	r24, 0x01	; 1
     bd8:	68 e0       	ldi	r22, 0x08	; 8
     bda:	70 e0       	ldi	r23, 0x00	; 0
     bdc:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <fgets>
     be0:	00 97       	sbiw	r24, 0x00	; 0
     be2:	61 f0       	breq	.+24     	; 0xbfc <app_timer+0x60>
     be4:	ce 01       	movw	r24, r28
     be6:	01 96       	adiw	r24, 0x01	; 1
     be8:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <atoi>
     bec:	bc 01       	movw	r22, r24
     bee:	00 97       	sbiw	r24, 0x00	; 0
     bf0:	29 f0       	breq	.+10     	; 0xbfc <app_timer+0x60>
			break;
		
		insert_timer(&tsk, ms);
     bf2:	ce 01       	movw	r24, r28
     bf4:	09 96       	adiw	r24, 0x09	; 9
     bf6:	0e 94 08 05 	call	0xa10	; 0xa10 <insert_timer>
	}
     bfa:	de cf       	rjmp	.-68     	; 0xbb8 <app_timer+0x1c>
	tour_timer();
     bfc:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <tour_timer>
	free_timer();
     c00:	0e 94 bd 05 	call	0xb7a	; 0xb7a <free_timer>
}
     c04:	62 96       	adiw	r28, 0x12	; 18
     c06:	0f b6       	in	r0, 0x3f	; 63
     c08:	f8 94       	cli
     c0a:	de bf       	out	0x3e, r29	; 62
     c0c:	0f be       	out	0x3f, r0	; 63
     c0e:	cd bf       	out	0x3d, r28	; 61
     c10:	df 91       	pop	r29
     c12:	cf 91       	pop	r28
     c14:	1f 91       	pop	r17
     c16:	0f 91       	pop	r16
     c18:	08 95       	ret

00000c1a <__vector_15>:

ISR(TIMER2_OVF_vect) {
     c1a:	1f 92       	push	r1
     c1c:	0f 92       	push	r0
     c1e:	0f b6       	in	r0, 0x3f	; 63
     c20:	0f 92       	push	r0
     c22:	0b b6       	in	r0, 0x3b	; 59
     c24:	0f 92       	push	r0
     c26:	11 24       	eor	r1, r1
     c28:	2f 93       	push	r18
     c2a:	3f 93       	push	r19
     c2c:	4f 93       	push	r20
     c2e:	5f 93       	push	r21
     c30:	6f 93       	push	r22
     c32:	7f 93       	push	r23
     c34:	8f 93       	push	r24
     c36:	9f 93       	push	r25
     c38:	af 93       	push	r26
     c3a:	bf 93       	push	r27
     c3c:	ef 93       	push	r30
     c3e:	ff 93       	push	r31
	if (!Thead)
     c40:	e0 91 47 04 	lds	r30, 0x0447
     c44:	f0 91 48 04 	lds	r31, 0x0448
     c48:	30 97       	sbiw	r30, 0x00	; 0
     c4a:	49 f0       	breq	.+18     	; 0xc5e <__vector_15+0x44>
		return ;
	if (--Thead->time == 0)
     c4c:	80 81       	ld	r24, Z
     c4e:	91 81       	ldd	r25, Z+1	; 0x01
     c50:	01 97       	sbiw	r24, 0x01	; 1
     c52:	91 83       	std	Z+1, r25	; 0x01
     c54:	80 83       	st	Z, r24
     c56:	00 97       	sbiw	r24, 0x00	; 0
     c58:	11 f4       	brne	.+4      	; 0xc5e <__vector_15+0x44>
		timer_expire();
     c5a:	0e 94 e6 04 	call	0x9cc	; 0x9cc <timer_expire>
}
     c5e:	ff 91       	pop	r31
     c60:	ef 91       	pop	r30
     c62:	bf 91       	pop	r27
     c64:	af 91       	pop	r26
     c66:	9f 91       	pop	r25
     c68:	8f 91       	pop	r24
     c6a:	7f 91       	pop	r23
     c6c:	6f 91       	pop	r22
     c6e:	5f 91       	pop	r21
     c70:	4f 91       	pop	r20
     c72:	3f 91       	pop	r19
     c74:	2f 91       	pop	r18
     c76:	0f 90       	pop	r0
     c78:	0b be       	out	0x3b, r0	; 59
     c7a:	0f 90       	pop	r0
     c7c:	0f be       	out	0x3f, r0	; 63
     c7e:	0f 90       	pop	r0
     c80:	1f 90       	pop	r1
     c82:	18 95       	reti

00000c84 <uart_getchar>:

int uart_getchar(FILE *stream) {
	char ch;

	do {
		cli();
     c84:	f8 94       	cli
		ch = qi_delete();
     c86:	0e 94 16 02 	call	0x42c	; 0x42c <qi_delete>
		sei();
     c8a:	78 94       	sei
	} while (ch == 0);
     c8c:	88 23       	and	r24, r24
     c8e:	d1 f3       	breq	.-12     	; 0xc84 <uart_getchar>

	if (ch == EOT) return(-1);
     c90:	84 30       	cpi	r24, 0x04	; 4
     c92:	11 f0       	breq	.+4      	; 0xc98 <uart_getchar+0x14>
	else 		   return(ch);
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	08 95       	ret
		cli();
		ch = qi_delete();
		sei();
	} while (ch == 0);

	if (ch == EOT) return(-1);
     c98:	8f ef       	ldi	r24, 0xFF	; 255
     c9a:	9f ef       	ldi	r25, 0xFF	; 255
	else 		   return(ch);
}
     c9c:	08 95       	ret

00000c9e <uart_putchar>:
	sbi(UCSR0B, TXCIE0);
	sbi(UCSR0B, RXEN0);
	sbi(UCSR0B, RXCIE0);
}

int uart_putchar(char ch, FILE *stream){
     c9e:	cf 93       	push	r28
     ca0:	c8 2f       	mov	r28, r24
    if(ch == '\n') 
     ca2:	8a 30       	cpi	r24, 0x0A	; 10
     ca4:	19 f4       	brne	.+6      	; 0xcac <uart_putchar+0xe>
	    uart_putchar('\r', stream);
     ca6:	8d e0       	ldi	r24, 0x0D	; 13
     ca8:	0e 94 4f 06 	call	0xc9e	; 0xc9e <uart_putchar>

	cli();
     cac:	f8 94       	cli
	
	if(!uart_busy) {
     cae:	80 91 7b 05 	lds	r24, 0x057B
     cb2:	88 23       	and	r24, r24
     cb4:	59 f4       	brne	.+22     	; 0xccc <uart_putchar+0x2e>
	    UDR0 = ch;
     cb6:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy = 1;
     cba:	81 e0       	ldi	r24, 0x01	; 1
     cbc:	80 93 7b 05 	sts	0x057B, r24
     cc0:	0a c0       	rjmp	.+20     	; 0xcd6 <uart_putchar+0x38>
	} else {
		while(qo_insert(ch) == 0) {
		    sei();
     cc2:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     cc4:	86 ef       	ldi	r24, 0xF6	; 246
     cc6:	8a 95       	dec	r24
     cc8:	f1 f7       	brne	.-4      	; 0xcc6 <uart_putchar+0x28>
			_delay_us(100);
			cli();
     cca:	f8 94       	cli
	
	if(!uart_busy) {
	    UDR0 = ch;
		uart_busy = 1;
	} else {
		while(qo_insert(ch) == 0) {
     ccc:	8c 2f       	mov	r24, r28
     cce:	0e 94 33 02 	call	0x466	; 0x466 <qo_insert>
     cd2:	00 97       	sbiw	r24, 0x00	; 0
     cd4:	b1 f3       	breq	.-20     	; 0xcc2 <uart_putchar+0x24>
		    sei();
			_delay_us(100);
			cli();
		}
	}
	sei();
     cd6:	78 94       	sei
	return (1);
}
     cd8:	81 e0       	ldi	r24, 0x01	; 1
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	cf 91       	pop	r28
     cde:	08 95       	ret

00000ce0 <uart_init>:
char uart_busy;

static int echo_mode = 1;

void uart_init() {
	stdin = &Mystdin; stdout = &Mystdout;
     ce0:	82 ef       	ldi	r24, 0xF2	; 242
     ce2:	92 e0       	ldi	r25, 0x02	; 2
     ce4:	90 93 81 05 	sts	0x0581, r25
     ce8:	80 93 80 05 	sts	0x0580, r24
     cec:	80 e0       	ldi	r24, 0x00	; 0
     cee:	93 e0       	ldi	r25, 0x03	; 3
     cf0:	90 93 83 05 	sts	0x0583, r25
     cf4:	80 93 82 05 	sts	0x0582, r24
	uart_busy = 0;
     cf8:	10 92 7b 05 	sts	0x057B, r1
	q_init();
     cfc:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <q_init>
    UBRR0H = 0x00; UBRR0L = 0x07;
     d00:	10 92 c5 00 	sts	0x00C5, r1
     d04:	87 e0       	ldi	r24, 0x07	; 7
     d06:	80 93 c4 00 	sts	0x00C4, r24
	sbi(UCSR0A, U2X0);
     d0a:	e0 ec       	ldi	r30, 0xC0	; 192
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	80 81       	ld	r24, Z
     d10:	82 60       	ori	r24, 0x02	; 2
     d12:	80 83       	st	Z, r24
	sbi(UCSR0B, TXEN0);
     d14:	e1 ec       	ldi	r30, 0xC1	; 193
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	80 81       	ld	r24, Z
     d1a:	88 60       	ori	r24, 0x08	; 8
     d1c:	80 83       	st	Z, r24
	sbi(UCSR0B, TXCIE0);
     d1e:	80 81       	ld	r24, Z
     d20:	80 64       	ori	r24, 0x40	; 64
     d22:	80 83       	st	Z, r24
	sbi(UCSR0B, RXEN0);
     d24:	80 81       	ld	r24, Z
     d26:	80 61       	ori	r24, 0x10	; 16
     d28:	80 83       	st	Z, r24
	sbi(UCSR0B, RXCIE0);
     d2a:	80 81       	ld	r24, Z
     d2c:	80 68       	ori	r24, 0x80	; 128
     d2e:	80 83       	st	Z, r24
}
     d30:	08 95       	ret

00000d32 <uart_putchar_1>:
void uart_putstr(char *sp){
    for(; *sp; sp++)
	    uart_putchar(*sp);
}
*/
int uart_putchar_1(char ch, FILE *stream) {
     d32:	cf 93       	push	r28
     d34:	c8 2f       	mov	r28, r24
    if(ch == '\n')
     d36:	8a 30       	cpi	r24, 0x0A	; 10
     d38:	19 f4       	brne	.+6      	; 0xd40 <uart_putchar_1+0xe>
	    uart_putchar_1('\r', stream);
     d3a:	8d e0       	ldi	r24, 0x0D	; 13
     d3c:	0e 94 99 06 	call	0xd32	; 0xd32 <uart_putchar_1>
    //_delay_ms(10);
	while(1) {
	    if((UCSR0A & (1 << UDRE0)) != 0 )
     d40:	80 91 c0 00 	lds	r24, 0x00C0
     d44:	85 ff       	sbrs	r24, 5
     d46:	fc cf       	rjmp	.-8      	; 0xd40 <uart_putchar_1+0xe>
		    break;
	}
	UDR0 = ch;
     d48:	c0 93 c6 00 	sts	0x00C6, r28
	return (1);
}
     d4c:	81 e0       	ldi	r24, 0x01	; 1
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	cf 91       	pop	r28
     d52:	08 95       	ret

00000d54 <uart_echo>:

	if (ch == EOT) return(-1);
	else 		   return(ch);
}

void uart_echo(char ch) {
     d54:	cf 93       	push	r28
     d56:	c8 2f       	mov	r28, r24
	if(ch == '\n') uart_echo('\r');
     d58:	8a 30       	cpi	r24, 0x0A	; 10
     d5a:	19 f4       	brne	.+6      	; 0xd62 <uart_echo+0xe>
     d5c:	8d e0       	ldi	r24, 0x0D	; 13
     d5e:	0e 94 aa 06 	call	0xd54	; 0xd54 <uart_echo>
	if(!uart_busy) {
     d62:	80 91 7b 05 	lds	r24, 0x057B
     d66:	88 23       	and	r24, r24
     d68:	31 f4       	brne	.+12     	; 0xd76 <uart_echo+0x22>
		UDR0 = ch;
     d6a:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy = 1;
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	80 93 7b 05 	sts	0x057B, r24
     d74:	03 c0       	rjmp	.+6      	; 0xd7c <uart_echo+0x28>
	}
	else
		qo_insert(ch);
     d76:	8c 2f       	mov	r24, r28
     d78:	0e 94 33 02 	call	0x466	; 0x466 <qo_insert>
}
     d7c:	cf 91       	pop	r28
     d7e:	08 95       	ret

00000d80 <uart_peek>:

int uart_peek() {
	return (qi_peek());
     d80:	0e 94 72 02 	call	0x4e4	; 0x4e4 <qi_peek>
}
     d84:	08 95       	ret

00000d86 <__vector_27>:


ISR(USART0_TX_vect){
     d86:	1f 92       	push	r1
     d88:	0f 92       	push	r0
     d8a:	0f b6       	in	r0, 0x3f	; 63
     d8c:	0f 92       	push	r0
     d8e:	0b b6       	in	r0, 0x3b	; 59
     d90:	0f 92       	push	r0
     d92:	11 24       	eor	r1, r1
     d94:	2f 93       	push	r18
     d96:	3f 93       	push	r19
     d98:	4f 93       	push	r20
     d9a:	5f 93       	push	r21
     d9c:	6f 93       	push	r22
     d9e:	7f 93       	push	r23
     da0:	8f 93       	push	r24
     da2:	9f 93       	push	r25
     da4:	af 93       	push	r26
     da6:	bf 93       	push	r27
     da8:	ef 93       	push	r30
     daa:	ff 93       	push	r31
	char ch;

	if((ch = qo_delete()) == 0)
     dac:	0e 94 55 02 	call	0x4aa	; 0x4aa <qo_delete>
     db0:	88 23       	and	r24, r24
     db2:	19 f4       	brne	.+6      	; 0xdba <__vector_27+0x34>
		uart_busy = 0;
     db4:	10 92 7b 05 	sts	0x057B, r1
     db8:	02 c0       	rjmp	.+4      	; 0xdbe <__vector_27+0x38>
	else 
		UDR0 = ch;
     dba:	80 93 c6 00 	sts	0x00C6, r24
}
     dbe:	ff 91       	pop	r31
     dc0:	ef 91       	pop	r30
     dc2:	bf 91       	pop	r27
     dc4:	af 91       	pop	r26
     dc6:	9f 91       	pop	r25
     dc8:	8f 91       	pop	r24
     dca:	7f 91       	pop	r23
     dcc:	6f 91       	pop	r22
     dce:	5f 91       	pop	r21
     dd0:	4f 91       	pop	r20
     dd2:	3f 91       	pop	r19
     dd4:	2f 91       	pop	r18
     dd6:	0f 90       	pop	r0
     dd8:	0b be       	out	0x3b, r0	; 59
     dda:	0f 90       	pop	r0
     ddc:	0f be       	out	0x3f, r0	; 63
     dde:	0f 90       	pop	r0
     de0:	1f 90       	pop	r1
     de2:	18 95       	reti

00000de4 <__vector_25>:

ISR(USART0_RX_vect) {
     de4:	1f 92       	push	r1
     de6:	0f 92       	push	r0
     de8:	0f b6       	in	r0, 0x3f	; 63
     dea:	0f 92       	push	r0
     dec:	0b b6       	in	r0, 0x3b	; 59
     dee:	0f 92       	push	r0
     df0:	11 24       	eor	r1, r1
     df2:	1f 93       	push	r17
     df4:	2f 93       	push	r18
     df6:	3f 93       	push	r19
     df8:	4f 93       	push	r20
     dfa:	5f 93       	push	r21
     dfc:	6f 93       	push	r22
     dfe:	7f 93       	push	r23
     e00:	8f 93       	push	r24
     e02:	9f 93       	push	r25
     e04:	af 93       	push	r26
     e06:	bf 93       	push	r27
     e08:	ef 93       	push	r30
     e0a:	ff 93       	push	r31
     e0c:	cf 93       	push	r28
     e0e:	df 93       	push	r29
     e10:	cd b7       	in	r28, 0x3d	; 61
     e12:	de b7       	in	r29, 0x3e	; 62
     e14:	2a 97       	sbiw	r28, 0x0a	; 10
     e16:	de bf       	out	0x3e, r29	; 62
     e18:	cd bf       	out	0x3d, r28	; 61
	struct task task;
	char ch;
	ch = UDR0;
     e1a:	10 91 c6 00 	lds	r17, 0x00C6
	if (ch == ESC) {
     e1e:	1b 31       	cpi	r17, 0x1B	; 27
     e20:	61 f4       	brne	.+24     	; 0xe3a <__vector_25+0x56>
		echo_mode = (echo_mode + 1) & 0x01;
     e22:	80 91 0e 03 	lds	r24, 0x030E
     e26:	90 91 0f 03 	lds	r25, 0x030F
     e2a:	01 96       	adiw	r24, 0x01	; 1
     e2c:	81 70       	andi	r24, 0x01	; 1
     e2e:	90 70       	andi	r25, 0x00	; 0
     e30:	90 93 0f 03 	sts	0x030F, r25
     e34:	80 93 0e 03 	sts	0x030E, r24
		return ;
     e38:	24 c0       	rjmp	.+72     	; 0xe82 <__vector_25+0x9e>
	}

	if(ch != EOT) {
     e3a:	14 30       	cpi	r17, 0x04	; 4
     e3c:	69 f0       	breq	.+26     	; 0xe58 <__vector_25+0x74>
		if (ch == '\r')  ch = '\n';
     e3e:	1d 30       	cpi	r17, 0x0D	; 13
     e40:	09 f4       	brne	.+2      	; 0xe44 <__vector_25+0x60>
     e42:	1a e0       	ldi	r17, 0x0A	; 10
		if (echo_mode)	uart_echo(ch);
     e44:	20 91 0e 03 	lds	r18, 0x030E
     e48:	30 91 0f 03 	lds	r19, 0x030F
     e4c:	21 15       	cp	r18, r1
     e4e:	31 05       	cpc	r19, r1
     e50:	19 f0       	breq	.+6      	; 0xe58 <__vector_25+0x74>
     e52:	81 2f       	mov	r24, r17
     e54:	0e 94 aa 06 	call	0xd54	; 0xd54 <uart_echo>
	}
	qi_insert(ch);
     e58:	81 2f       	mov	r24, r17
     e5a:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <qi_insert>
	if (ch == EOT || ch == '\n') {
     e5e:	14 30       	cpi	r17, 0x04	; 4
     e60:	11 f0       	breq	.+4      	; 0xe66 <__vector_25+0x82>
     e62:	1a 30       	cpi	r17, 0x0A	; 10
     e64:	71 f4       	brne	.+28     	; 0xe82 <__vector_25+0x9e>
		task.fun = task_cmd;
     e66:	86 e1       	ldi	r24, 0x16	; 22
     e68:	94 e0       	ldi	r25, 0x04	; 4
     e6a:	9a 83       	std	Y+2, r25	; 0x02
     e6c:	89 83       	std	Y+1, r24	; 0x01
		strcpy(task.arg, "");
     e6e:	ce 01       	movw	r24, r28
     e70:	03 96       	adiw	r24, 0x03	; 3
     e72:	61 ef       	ldi	r22, 0xF1	; 241
     e74:	72 e0       	ldi	r23, 0x02	; 2
     e76:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <strcpy>
		task_insert(&task);
     e7a:	ce 01       	movw	r24, r28
     e7c:	01 96       	adiw	r24, 0x01	; 1
     e7e:	0e 94 70 03 	call	0x6e0	; 0x6e0 <task_insert>
	}
}
     e82:	2a 96       	adiw	r28, 0x0a	; 10
     e84:	de bf       	out	0x3e, r29	; 62
     e86:	cd bf       	out	0x3d, r28	; 61
     e88:	df 91       	pop	r29
     e8a:	cf 91       	pop	r28
     e8c:	ff 91       	pop	r31
     e8e:	ef 91       	pop	r30
     e90:	bf 91       	pop	r27
     e92:	af 91       	pop	r26
     e94:	9f 91       	pop	r25
     e96:	8f 91       	pop	r24
     e98:	7f 91       	pop	r23
     e9a:	6f 91       	pop	r22
     e9c:	5f 91       	pop	r21
     e9e:	4f 91       	pop	r20
     ea0:	3f 91       	pop	r19
     ea2:	2f 91       	pop	r18
     ea4:	1f 91       	pop	r17
     ea6:	0f 90       	pop	r0
     ea8:	0b be       	out	0x3b, r0	; 59
     eaa:	0f 90       	pop	r0
     eac:	0f be       	out	0x3f, r0	; 63
     eae:	0f 90       	pop	r0
     eb0:	1f 90       	pop	r1
     eb2:	18 95       	reti

00000eb4 <adc_init>:
#include <compat/deprecated.h>
#include <util/delay.h>
#include "adc_tc1047.h"

void adc_init() {
	cbi(DDRF, PF0);
     eb4:	80 98       	cbi	0x10, 0	; 16
	ADMUX = 0x80 | 0x00;
     eb6:	80 e8       	ldi	r24, 0x80	; 128
     eb8:	80 93 7c 00 	sts	0x007C, r24
}
     ebc:	08 95       	ret

00000ebe <adc_start>:

void adc_start() {
	sbi(ADCSRA, ADEN);
     ebe:	ea e7       	ldi	r30, 0x7A	; 122
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	80 68       	ori	r24, 0x80	; 128
     ec6:	80 83       	st	Z, r24
     ec8:	8d ed       	ldi	r24, 0xDD	; 221
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	01 97       	sbiw	r24, 0x01	; 1
     ece:	f1 f7       	brne	.-4      	; 0xecc <adc_start+0xe>
	_delay_us(120);
	sbi(ADCSRA, ADIE);
     ed0:	80 81       	ld	r24, Z
     ed2:	88 60       	ori	r24, 0x08	; 8
     ed4:	80 83       	st	Z, r24
	sbi(ADCSRA, ADSC);
     ed6:	80 81       	ld	r24, Z
     ed8:	80 64       	ori	r24, 0x40	; 64
     eda:	80 83       	st	Z, r24
}
     edc:	08 95       	ret

00000ede <task_tc1047>:

void task_tc1047(char *arg) {
	static int value;
	static int volatile in_adc = 0;

	if(!strcmp(arg, "")) {
     ede:	fc 01       	movw	r30, r24
     ee0:	20 81       	ld	r18, Z
     ee2:	22 23       	and	r18, r18
     ee4:	19 f5       	brne	.+70     	; 0xf2c <task_tc1047+0x4e>
		adc_start(); in_adc = 1; while(in_adc);
     ee6:	0e 94 5f 07 	call	0xebe	; 0xebe <adc_start>
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	90 93 4a 04 	sts	0x044A, r25
     ef2:	80 93 49 04 	sts	0x0449, r24
     ef6:	80 91 49 04 	lds	r24, 0x0449
     efa:	90 91 4a 04 	lds	r25, 0x044A
     efe:	00 97       	sbiw	r24, 0x00	; 0
     f00:	d1 f7       	brne	.-12     	; 0xef6 <task_tc1047+0x18>
		printf("Currrent temperture is %d degree.\n", value);
     f02:	00 d0       	rcall	.+0      	; 0xf04 <task_tc1047+0x26>
     f04:	0f 92       	push	r0
     f06:	80 e1       	ldi	r24, 0x10	; 16
     f08:	93 e0       	ldi	r25, 0x03	; 3
     f0a:	ed b7       	in	r30, 0x3d	; 61
     f0c:	fe b7       	in	r31, 0x3e	; 62
     f0e:	92 83       	std	Z+2, r25	; 0x02
     f10:	81 83       	std	Z+1, r24	; 0x01
     f12:	80 91 4b 04 	lds	r24, 0x044B
     f16:	90 91 4c 04 	lds	r25, 0x044C
     f1a:	94 83       	std	Z+4, r25	; 0x04
     f1c:	83 83       	std	Z+3, r24	; 0x03
     f1e:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <printf>
     f22:	0f 90       	pop	r0
     f24:	0f 90       	pop	r0
     f26:	0f 90       	pop	r0
     f28:	0f 90       	pop	r0
     f2a:	08 95       	ret
	} else {
		value = atoi(arg) * (1.1/1023) * 1000;
     f2c:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <atoi>
     f30:	9c 01       	movw	r18, r24
     f32:	b9 01       	movw	r22, r18
     f34:	88 27       	eor	r24, r24
     f36:	77 fd       	sbrc	r23, 7
     f38:	80 95       	com	r24
     f3a:	98 2f       	mov	r25, r24
     f3c:	0e 94 21 09 	call	0x1242	; 0x1242 <__floatsisf>
     f40:	29 e0       	ldi	r18, 0x09	; 9
     f42:	30 ef       	ldi	r19, 0xF0	; 240
     f44:	4c e8       	ldi	r20, 0x8C	; 140
     f46:	5a e3       	ldi	r21, 0x3A	; 58
     f48:	0e 94 20 08 	call	0x1040	; 0x1040 <__mulsf3>
     f4c:	20 e0       	ldi	r18, 0x00	; 0
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	4a e7       	ldi	r20, 0x7A	; 122
     f52:	54 e4       	ldi	r21, 0x44	; 68
     f54:	0e 94 20 08 	call	0x1040	; 0x1040 <__mulsf3>
     f58:	0e 94 98 09 	call	0x1330	; 0x1330 <__fixsfsi>
     f5c:	dc 01       	movw	r26, r24
     f5e:	cb 01       	movw	r24, r22
		value = (value - 500) / 10;
     f60:	84 5f       	subi	r24, 0xF4	; 244
     f62:	91 40       	sbci	r25, 0x01	; 1
     f64:	6a e0       	ldi	r22, 0x0A	; 10
     f66:	70 e0       	ldi	r23, 0x00	; 0
     f68:	0e 94 a9 0b 	call	0x1752	; 0x1752 <__divmodhi4>
     f6c:	70 93 4c 04 	sts	0x044C, r23
     f70:	60 93 4b 04 	sts	0x044B, r22
		in_adc = 0;
     f74:	10 92 4a 04 	sts	0x044A, r1
     f78:	10 92 49 04 	sts	0x0449, r1
     f7c:	08 95       	ret

00000f7e <__vector_29>:
	_delay_us(120);
	sbi(ADCSRA, ADIE);
	sbi(ADCSRA, ADSC);
}

ISR(ADC_vect) {
     f7e:	1f 92       	push	r1
     f80:	0f 92       	push	r0
     f82:	0f b6       	in	r0, 0x3f	; 63
     f84:	0f 92       	push	r0
     f86:	0b b6       	in	r0, 0x3b	; 59
     f88:	0f 92       	push	r0
     f8a:	11 24       	eor	r1, r1
     f8c:	0f 93       	push	r16
     f8e:	1f 93       	push	r17
     f90:	2f 93       	push	r18
     f92:	3f 93       	push	r19
     f94:	4f 93       	push	r20
     f96:	5f 93       	push	r21
     f98:	6f 93       	push	r22
     f9a:	7f 93       	push	r23
     f9c:	8f 93       	push	r24
     f9e:	9f 93       	push	r25
     fa0:	af 93       	push	r26
     fa2:	bf 93       	push	r27
     fa4:	ef 93       	push	r30
     fa6:	ff 93       	push	r31
     fa8:	cf 93       	push	r28
     faa:	df 93       	push	r29
     fac:	cd b7       	in	r28, 0x3d	; 61
     fae:	de b7       	in	r29, 0x3e	; 62
     fb0:	28 97       	sbiw	r28, 0x08	; 8
     fb2:	de bf       	out	0x3e, r29	; 62
     fb4:	cd bf       	out	0x3d, r28	; 61
	uint16_t data;
	char arg[8];

	data = ADCW & 0x03ff;
     fb6:	80 91 78 00 	lds	r24, 0x0078
     fba:	90 91 79 00 	lds	r25, 0x0079
	cbi(ADCSRA, ADEN);
     fbe:	ea e7       	ldi	r30, 0x7A	; 122
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	20 81       	ld	r18, Z
     fc4:	2f 77       	andi	r18, 0x7F	; 127
     fc6:	20 83       	st	Z, r18

	sprintf(arg, "%d", data);
     fc8:	00 d0       	rcall	.+0      	; 0xfca <__vector_29+0x4c>
     fca:	00 d0       	rcall	.+0      	; 0xfcc <__vector_29+0x4e>
     fcc:	ed b7       	in	r30, 0x3d	; 61
     fce:	fe b7       	in	r31, 0x3e	; 62
     fd0:	31 96       	adiw	r30, 0x01	; 1
     fd2:	8e 01       	movw	r16, r28
     fd4:	0f 5f       	subi	r16, 0xFF	; 255
     fd6:	1f 4f       	sbci	r17, 0xFF	; 255
     fd8:	ad b7       	in	r26, 0x3d	; 61
     fda:	be b7       	in	r27, 0x3e	; 62
     fdc:	12 96       	adiw	r26, 0x02	; 2
     fde:	1c 93       	st	X, r17
     fe0:	0e 93       	st	-X, r16
     fe2:	11 97       	sbiw	r26, 0x01	; 1
     fe4:	23 e3       	ldi	r18, 0x33	; 51
     fe6:	33 e0       	ldi	r19, 0x03	; 3
     fe8:	33 83       	std	Z+3, r19	; 0x03
     fea:	22 83       	std	Z+2, r18	; 0x02

ISR(ADC_vect) {
	uint16_t data;
	char arg[8];

	data = ADCW & 0x03ff;
     fec:	93 70       	andi	r25, 0x03	; 3
	cbi(ADCSRA, ADEN);

	sprintf(arg, "%d", data);
     fee:	95 83       	std	Z+5, r25	; 0x05
     ff0:	84 83       	std	Z+4, r24	; 0x04
     ff2:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <sprintf>
	task_tc1047(arg);
     ff6:	8d b7       	in	r24, 0x3d	; 61
     ff8:	9e b7       	in	r25, 0x3e	; 62
     ffa:	06 96       	adiw	r24, 0x06	; 6
     ffc:	0f b6       	in	r0, 0x3f	; 63
     ffe:	f8 94       	cli
    1000:	9e bf       	out	0x3e, r25	; 62
    1002:	0f be       	out	0x3f, r0	; 63
    1004:	8d bf       	out	0x3d, r24	; 61
    1006:	c8 01       	movw	r24, r16
    1008:	0e 94 6f 07 	call	0xede	; 0xede <task_tc1047>
}
    100c:	28 96       	adiw	r28, 0x08	; 8
    100e:	de bf       	out	0x3e, r29	; 62
    1010:	cd bf       	out	0x3d, r28	; 61
    1012:	df 91       	pop	r29
    1014:	cf 91       	pop	r28
    1016:	ff 91       	pop	r31
    1018:	ef 91       	pop	r30
    101a:	bf 91       	pop	r27
    101c:	af 91       	pop	r26
    101e:	9f 91       	pop	r25
    1020:	8f 91       	pop	r24
    1022:	7f 91       	pop	r23
    1024:	6f 91       	pop	r22
    1026:	5f 91       	pop	r21
    1028:	4f 91       	pop	r20
    102a:	3f 91       	pop	r19
    102c:	2f 91       	pop	r18
    102e:	1f 91       	pop	r17
    1030:	0f 91       	pop	r16
    1032:	0f 90       	pop	r0
    1034:	0b be       	out	0x3b, r0	; 59
    1036:	0f 90       	pop	r0
    1038:	0f be       	out	0x3f, r0	; 63
    103a:	0f 90       	pop	r0
    103c:	1f 90       	pop	r1
    103e:	18 95       	reti

00001040 <__mulsf3>:
    1040:	a0 e2       	ldi	r26, 0x20	; 32
    1042:	b0 e0       	ldi	r27, 0x00	; 0
    1044:	e6 e2       	ldi	r30, 0x26	; 38
    1046:	f8 e0       	ldi	r31, 0x08	; 8
    1048:	0c 94 d2 0b 	jmp	0x17a4	; 0x17a4 <__prologue_saves__+0x4>
    104c:	dc 01       	movw	r26, r24
    104e:	cb 01       	movw	r24, r22
    1050:	8d 83       	std	Y+5, r24	; 0x05
    1052:	9e 83       	std	Y+6, r25	; 0x06
    1054:	af 83       	std	Y+7, r26	; 0x07
    1056:	b8 87       	std	Y+8, r27	; 0x08
    1058:	29 83       	std	Y+1, r18	; 0x01
    105a:	3a 83       	std	Y+2, r19	; 0x02
    105c:	4b 83       	std	Y+3, r20	; 0x03
    105e:	5c 83       	std	Y+4, r21	; 0x04
    1060:	ce 01       	movw	r24, r28
    1062:	05 96       	adiw	r24, 0x05	; 5
    1064:	be 01       	movw	r22, r28
    1066:	67 5e       	subi	r22, 0xE7	; 231
    1068:	7f 4f       	sbci	r23, 0xFF	; 255
    106a:	0e 94 13 0b 	call	0x1626	; 0x1626 <__unpack_f>
    106e:	ce 01       	movw	r24, r28
    1070:	01 96       	adiw	r24, 0x01	; 1
    1072:	be 01       	movw	r22, r28
    1074:	6f 5e       	subi	r22, 0xEF	; 239
    1076:	7f 4f       	sbci	r23, 0xFF	; 255
    1078:	0e 94 13 0b 	call	0x1626	; 0x1626 <__unpack_f>
    107c:	99 8d       	ldd	r25, Y+25	; 0x19
    107e:	92 30       	cpi	r25, 0x02	; 2
    1080:	78 f0       	brcs	.+30     	; 0x10a0 <__mulsf3+0x60>
    1082:	89 89       	ldd	r24, Y+17	; 0x11
    1084:	82 30       	cpi	r24, 0x02	; 2
    1086:	c0 f0       	brcs	.+48     	; 0x10b8 <__mulsf3+0x78>
    1088:	94 30       	cpi	r25, 0x04	; 4
    108a:	19 f4       	brne	.+6      	; 0x1092 <__mulsf3+0x52>
    108c:	82 30       	cpi	r24, 0x02	; 2
    108e:	41 f4       	brne	.+16     	; 0x10a0 <__mulsf3+0x60>
    1090:	ca c0       	rjmp	.+404    	; 0x1226 <__mulsf3+0x1e6>
    1092:	84 30       	cpi	r24, 0x04	; 4
    1094:	19 f4       	brne	.+6      	; 0x109c <__mulsf3+0x5c>
    1096:	92 30       	cpi	r25, 0x02	; 2
    1098:	79 f4       	brne	.+30     	; 0x10b8 <__mulsf3+0x78>
    109a:	c5 c0       	rjmp	.+394    	; 0x1226 <__mulsf3+0x1e6>
    109c:	92 30       	cpi	r25, 0x02	; 2
    109e:	51 f4       	brne	.+20     	; 0x10b4 <__mulsf3+0x74>
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	2a 8d       	ldd	r18, Y+26	; 0x1a
    10a4:	9a 89       	ldd	r25, Y+18	; 0x12
    10a6:	29 17       	cp	r18, r25
    10a8:	09 f4       	brne	.+2      	; 0x10ac <__mulsf3+0x6c>
    10aa:	80 e0       	ldi	r24, 0x00	; 0
    10ac:	8a 8f       	std	Y+26, r24	; 0x1a
    10ae:	ce 01       	movw	r24, r28
    10b0:	49 96       	adiw	r24, 0x19	; 25
    10b2:	bb c0       	rjmp	.+374    	; 0x122a <__mulsf3+0x1ea>
    10b4:	82 30       	cpi	r24, 0x02	; 2
    10b6:	51 f4       	brne	.+20     	; 0x10cc <__mulsf3+0x8c>
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	2a 8d       	ldd	r18, Y+26	; 0x1a
    10bc:	9a 89       	ldd	r25, Y+18	; 0x12
    10be:	29 17       	cp	r18, r25
    10c0:	09 f4       	brne	.+2      	; 0x10c4 <__mulsf3+0x84>
    10c2:	80 e0       	ldi	r24, 0x00	; 0
    10c4:	8a 8b       	std	Y+18, r24	; 0x12
    10c6:	ce 01       	movw	r24, r28
    10c8:	41 96       	adiw	r24, 0x11	; 17
    10ca:	af c0       	rjmp	.+350    	; 0x122a <__mulsf3+0x1ea>
    10cc:	4d 8c       	ldd	r4, Y+29	; 0x1d
    10ce:	5e 8c       	ldd	r5, Y+30	; 0x1e
    10d0:	6f 8c       	ldd	r6, Y+31	; 0x1f
    10d2:	78 a0       	lds	r23, 0x88
    10d4:	0d 89       	ldd	r16, Y+21	; 0x15
    10d6:	1e 89       	ldd	r17, Y+22	; 0x16
    10d8:	2f 89       	ldd	r18, Y+23	; 0x17
    10da:	38 8d       	ldd	r19, Y+24	; 0x18
    10dc:	e0 e2       	ldi	r30, 0x20	; 32
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	40 e0       	ldi	r20, 0x00	; 0
    10e2:	50 e0       	ldi	r21, 0x00	; 0
    10e4:	ba 01       	movw	r22, r20
    10e6:	88 24       	eor	r8, r8
    10e8:	99 24       	eor	r9, r9
    10ea:	54 01       	movw	r10, r8
    10ec:	cc 24       	eor	r12, r12
    10ee:	dd 24       	eor	r13, r13
    10f0:	76 01       	movw	r14, r12
    10f2:	c2 01       	movw	r24, r4
    10f4:	81 70       	andi	r24, 0x01	; 1
    10f6:	90 70       	andi	r25, 0x00	; 0
    10f8:	00 97       	sbiw	r24, 0x00	; 0
    10fa:	d1 f0       	breq	.+52     	; 0x1130 <__mulsf3+0xf0>
    10fc:	c0 0e       	add	r12, r16
    10fe:	d1 1e       	adc	r13, r17
    1100:	e2 1e       	adc	r14, r18
    1102:	f3 1e       	adc	r15, r19
    1104:	db 01       	movw	r26, r22
    1106:	ca 01       	movw	r24, r20
    1108:	88 0d       	add	r24, r8
    110a:	99 1d       	adc	r25, r9
    110c:	aa 1d       	adc	r26, r10
    110e:	bb 1d       	adc	r27, r11
    1110:	41 e0       	ldi	r20, 0x01	; 1
    1112:	50 e0       	ldi	r21, 0x00	; 0
    1114:	60 e0       	ldi	r22, 0x00	; 0
    1116:	70 e0       	ldi	r23, 0x00	; 0
    1118:	c0 16       	cp	r12, r16
    111a:	d1 06       	cpc	r13, r17
    111c:	e2 06       	cpc	r14, r18
    111e:	f3 06       	cpc	r15, r19
    1120:	18 f0       	brcs	.+6      	; 0x1128 <__mulsf3+0xe8>
    1122:	40 e0       	ldi	r20, 0x00	; 0
    1124:	50 e0       	ldi	r21, 0x00	; 0
    1126:	ba 01       	movw	r22, r20
    1128:	48 0f       	add	r20, r24
    112a:	59 1f       	adc	r21, r25
    112c:	6a 1f       	adc	r22, r26
    112e:	7b 1f       	adc	r23, r27
    1130:	88 0c       	add	r8, r8
    1132:	99 1c       	adc	r9, r9
    1134:	aa 1c       	adc	r10, r10
    1136:	bb 1c       	adc	r11, r11
    1138:	37 ff       	sbrs	r19, 7
    113a:	08 c0       	rjmp	.+16     	; 0x114c <__mulsf3+0x10c>
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	a0 e0       	ldi	r26, 0x00	; 0
    1142:	b0 e0       	ldi	r27, 0x00	; 0
    1144:	88 2a       	or	r8, r24
    1146:	99 2a       	or	r9, r25
    1148:	aa 2a       	or	r10, r26
    114a:	bb 2a       	or	r11, r27
    114c:	00 0f       	add	r16, r16
    114e:	11 1f       	adc	r17, r17
    1150:	22 1f       	adc	r18, r18
    1152:	33 1f       	adc	r19, r19
    1154:	76 94       	lsr	r7
    1156:	67 94       	ror	r6
    1158:	57 94       	ror	r5
    115a:	47 94       	ror	r4
    115c:	31 97       	sbiw	r30, 0x01	; 1
    115e:	49 f6       	brne	.-110    	; 0x10f2 <__mulsf3+0xb2>
    1160:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1162:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1164:	2b 89       	ldd	r18, Y+19	; 0x13
    1166:	3c 89       	ldd	r19, Y+20	; 0x14
    1168:	82 0f       	add	r24, r18
    116a:	93 1f       	adc	r25, r19
    116c:	02 96       	adiw	r24, 0x02	; 2
    116e:	9c 87       	std	Y+12, r25	; 0x0c
    1170:	8b 87       	std	Y+11, r24	; 0x0b
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	2a 8d       	ldd	r18, Y+26	; 0x1a
    1176:	9a 89       	ldd	r25, Y+18	; 0x12
    1178:	29 17       	cp	r18, r25
    117a:	09 f4       	brne	.+2      	; 0x117e <__mulsf3+0x13e>
    117c:	80 e0       	ldi	r24, 0x00	; 0
    117e:	8a 87       	std	Y+10, r24	; 0x0a
    1180:	2b 85       	ldd	r18, Y+11	; 0x0b
    1182:	3c 85       	ldd	r19, Y+12	; 0x0c
    1184:	17 c0       	rjmp	.+46     	; 0x11b4 <__mulsf3+0x174>
    1186:	ca 01       	movw	r24, r20
    1188:	81 70       	andi	r24, 0x01	; 1
    118a:	90 70       	andi	r25, 0x00	; 0
    118c:	00 97       	sbiw	r24, 0x00	; 0
    118e:	61 f0       	breq	.+24     	; 0x11a8 <__mulsf3+0x168>
    1190:	f6 94       	lsr	r15
    1192:	e7 94       	ror	r14
    1194:	d7 94       	ror	r13
    1196:	c7 94       	ror	r12
    1198:	80 e0       	ldi	r24, 0x00	; 0
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	a0 e0       	ldi	r26, 0x00	; 0
    119e:	b0 e8       	ldi	r27, 0x80	; 128
    11a0:	c8 2a       	or	r12, r24
    11a2:	d9 2a       	or	r13, r25
    11a4:	ea 2a       	or	r14, r26
    11a6:	fb 2a       	or	r15, r27
    11a8:	76 95       	lsr	r23
    11aa:	67 95       	ror	r22
    11ac:	57 95       	ror	r21
    11ae:	47 95       	ror	r20
    11b0:	2f 5f       	subi	r18, 0xFF	; 255
    11b2:	3f 4f       	sbci	r19, 0xFF	; 255
    11b4:	77 fd       	sbrc	r23, 7
    11b6:	e7 cf       	rjmp	.-50     	; 0x1186 <__mulsf3+0x146>
    11b8:	c9 01       	movw	r24, r18
    11ba:	0b c0       	rjmp	.+22     	; 0x11d2 <__mulsf3+0x192>
    11bc:	44 0f       	add	r20, r20
    11be:	55 1f       	adc	r21, r21
    11c0:	66 1f       	adc	r22, r22
    11c2:	77 1f       	adc	r23, r23
    11c4:	f7 fc       	sbrc	r15, 7
    11c6:	41 60       	ori	r20, 0x01	; 1
    11c8:	cc 0c       	add	r12, r12
    11ca:	dd 1c       	adc	r13, r13
    11cc:	ee 1c       	adc	r14, r14
    11ce:	ff 1c       	adc	r15, r15
    11d0:	01 97       	sbiw	r24, 0x01	; 1
    11d2:	40 30       	cpi	r20, 0x00	; 0
    11d4:	a0 e0       	ldi	r26, 0x00	; 0
    11d6:	5a 07       	cpc	r21, r26
    11d8:	a0 e0       	ldi	r26, 0x00	; 0
    11da:	6a 07       	cpc	r22, r26
    11dc:	a0 e4       	ldi	r26, 0x40	; 64
    11de:	7a 07       	cpc	r23, r26
    11e0:	68 f3       	brcs	.-38     	; 0x11bc <__mulsf3+0x17c>
    11e2:	8b 87       	std	Y+11, r24	; 0x0b
    11e4:	9c 87       	std	Y+12, r25	; 0x0c
    11e6:	db 01       	movw	r26, r22
    11e8:	ca 01       	movw	r24, r20
    11ea:	8f 77       	andi	r24, 0x7F	; 127
    11ec:	90 70       	andi	r25, 0x00	; 0
    11ee:	a0 70       	andi	r26, 0x00	; 0
    11f0:	b0 70       	andi	r27, 0x00	; 0
    11f2:	80 34       	cpi	r24, 0x40	; 64
    11f4:	91 05       	cpc	r25, r1
    11f6:	a1 05       	cpc	r26, r1
    11f8:	b1 05       	cpc	r27, r1
    11fa:	61 f4       	brne	.+24     	; 0x1214 <__mulsf3+0x1d4>
    11fc:	47 fd       	sbrc	r20, 7
    11fe:	0a c0       	rjmp	.+20     	; 0x1214 <__mulsf3+0x1d4>
    1200:	c1 14       	cp	r12, r1
    1202:	d1 04       	cpc	r13, r1
    1204:	e1 04       	cpc	r14, r1
    1206:	f1 04       	cpc	r15, r1
    1208:	29 f0       	breq	.+10     	; 0x1214 <__mulsf3+0x1d4>
    120a:	40 5c       	subi	r20, 0xC0	; 192
    120c:	5f 4f       	sbci	r21, 0xFF	; 255
    120e:	6f 4f       	sbci	r22, 0xFF	; 255
    1210:	7f 4f       	sbci	r23, 0xFF	; 255
    1212:	40 78       	andi	r20, 0x80	; 128
    1214:	4d 87       	std	Y+13, r20	; 0x0d
    1216:	5e 87       	std	Y+14, r21	; 0x0e
    1218:	6f 87       	std	Y+15, r22	; 0x0f
    121a:	78 8b       	std	Y+16, r23	; 0x10
    121c:	83 e0       	ldi	r24, 0x03	; 3
    121e:	89 87       	std	Y+9, r24	; 0x09
    1220:	ce 01       	movw	r24, r28
    1222:	09 96       	adiw	r24, 0x09	; 9
    1224:	02 c0       	rjmp	.+4      	; 0x122a <__mulsf3+0x1ea>
    1226:	86 e3       	ldi	r24, 0x36	; 54
    1228:	93 e0       	ldi	r25, 0x03	; 3
    122a:	0e 94 3c 0a 	call	0x1478	; 0x1478 <__pack_f>
    122e:	46 2f       	mov	r20, r22
    1230:	57 2f       	mov	r21, r23
    1232:	68 2f       	mov	r22, r24
    1234:	79 2f       	mov	r23, r25
    1236:	cb 01       	movw	r24, r22
    1238:	ba 01       	movw	r22, r20
    123a:	a0 96       	adiw	r28, 0x20	; 32
    123c:	e0 e1       	ldi	r30, 0x10	; 16
    123e:	0c 94 ee 0b 	jmp	0x17dc	; 0x17dc <__epilogue_restores__+0x4>

00001242 <__floatsisf>:
    1242:	cf 92       	push	r12
    1244:	df 92       	push	r13
    1246:	ef 92       	push	r14
    1248:	ff 92       	push	r15
    124a:	cf 93       	push	r28
    124c:	df 93       	push	r29
    124e:	cd b7       	in	r28, 0x3d	; 61
    1250:	de b7       	in	r29, 0x3e	; 62
    1252:	28 97       	sbiw	r28, 0x08	; 8
    1254:	0f b6       	in	r0, 0x3f	; 63
    1256:	f8 94       	cli
    1258:	de bf       	out	0x3e, r29	; 62
    125a:	0f be       	out	0x3f, r0	; 63
    125c:	cd bf       	out	0x3d, r28	; 61
    125e:	6b 01       	movw	r12, r22
    1260:	7c 01       	movw	r14, r24
    1262:	83 e0       	ldi	r24, 0x03	; 3
    1264:	89 83       	std	Y+1, r24	; 0x01
    1266:	d7 01       	movw	r26, r14
    1268:	c6 01       	movw	r24, r12
    126a:	88 27       	eor	r24, r24
    126c:	b7 fd       	sbrc	r27, 7
    126e:	83 95       	inc	r24
    1270:	99 27       	eor	r25, r25
    1272:	aa 27       	eor	r26, r26
    1274:	bb 27       	eor	r27, r27
    1276:	28 2f       	mov	r18, r24
    1278:	8a 83       	std	Y+2, r24	; 0x02
    127a:	c1 14       	cp	r12, r1
    127c:	d1 04       	cpc	r13, r1
    127e:	e1 04       	cpc	r14, r1
    1280:	f1 04       	cpc	r15, r1
    1282:	19 f4       	brne	.+6      	; 0x128a <__floatsisf+0x48>
    1284:	82 e0       	ldi	r24, 0x02	; 2
    1286:	89 83       	std	Y+1, r24	; 0x01
    1288:	35 c0       	rjmp	.+106    	; 0x12f4 <__floatsisf+0xb2>
    128a:	8e e1       	ldi	r24, 0x1E	; 30
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	9c 83       	std	Y+4, r25	; 0x04
    1290:	8b 83       	std	Y+3, r24	; 0x03
    1292:	22 23       	and	r18, r18
    1294:	89 f0       	breq	.+34     	; 0x12b8 <__floatsisf+0x76>
    1296:	80 e0       	ldi	r24, 0x00	; 0
    1298:	c8 16       	cp	r12, r24
    129a:	80 e0       	ldi	r24, 0x00	; 0
    129c:	d8 06       	cpc	r13, r24
    129e:	80 e0       	ldi	r24, 0x00	; 0
    12a0:	e8 06       	cpc	r14, r24
    12a2:	80 e8       	ldi	r24, 0x80	; 128
    12a4:	f8 06       	cpc	r15, r24
    12a6:	59 f1       	breq	.+86     	; 0x12fe <__floatsisf+0xbc>
    12a8:	f0 94       	com	r15
    12aa:	e0 94       	com	r14
    12ac:	d0 94       	com	r13
    12ae:	c0 94       	com	r12
    12b0:	c1 1c       	adc	r12, r1
    12b2:	d1 1c       	adc	r13, r1
    12b4:	e1 1c       	adc	r14, r1
    12b6:	f1 1c       	adc	r15, r1
    12b8:	cd 82       	std	Y+5, r12	; 0x05
    12ba:	de 82       	std	Y+6, r13	; 0x06
    12bc:	ef 82       	std	Y+7, r14	; 0x07
    12be:	f8 86       	std	Y+8, r15	; 0x08
    12c0:	c7 01       	movw	r24, r14
    12c2:	b6 01       	movw	r22, r12
    12c4:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <__clzsi2>
    12c8:	01 97       	sbiw	r24, 0x01	; 1
    12ca:	18 16       	cp	r1, r24
    12cc:	19 06       	cpc	r1, r25
    12ce:	94 f4       	brge	.+36     	; 0x12f4 <__floatsisf+0xb2>
    12d0:	08 2e       	mov	r0, r24
    12d2:	04 c0       	rjmp	.+8      	; 0x12dc <__floatsisf+0x9a>
    12d4:	cc 0c       	add	r12, r12
    12d6:	dd 1c       	adc	r13, r13
    12d8:	ee 1c       	adc	r14, r14
    12da:	ff 1c       	adc	r15, r15
    12dc:	0a 94       	dec	r0
    12de:	d2 f7       	brpl	.-12     	; 0x12d4 <__floatsisf+0x92>
    12e0:	cd 82       	std	Y+5, r12	; 0x05
    12e2:	de 82       	std	Y+6, r13	; 0x06
    12e4:	ef 82       	std	Y+7, r14	; 0x07
    12e6:	f8 86       	std	Y+8, r15	; 0x08
    12e8:	2e e1       	ldi	r18, 0x1E	; 30
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	28 1b       	sub	r18, r24
    12ee:	39 0b       	sbc	r19, r25
    12f0:	3c 83       	std	Y+4, r19	; 0x04
    12f2:	2b 83       	std	Y+3, r18	; 0x03
    12f4:	ce 01       	movw	r24, r28
    12f6:	01 96       	adiw	r24, 0x01	; 1
    12f8:	0e 94 3c 0a 	call	0x1478	; 0x1478 <__pack_f>
    12fc:	04 c0       	rjmp	.+8      	; 0x1306 <__floatsisf+0xc4>
    12fe:	60 e0       	ldi	r22, 0x00	; 0
    1300:	70 e0       	ldi	r23, 0x00	; 0
    1302:	80 e0       	ldi	r24, 0x00	; 0
    1304:	9f ec       	ldi	r25, 0xCF	; 207
    1306:	38 2f       	mov	r19, r24
    1308:	29 2f       	mov	r18, r25
    130a:	86 2f       	mov	r24, r22
    130c:	97 2f       	mov	r25, r23
    130e:	a3 2f       	mov	r26, r19
    1310:	b2 2f       	mov	r27, r18
    1312:	bc 01       	movw	r22, r24
    1314:	cd 01       	movw	r24, r26
    1316:	28 96       	adiw	r28, 0x08	; 8
    1318:	0f b6       	in	r0, 0x3f	; 63
    131a:	f8 94       	cli
    131c:	de bf       	out	0x3e, r29	; 62
    131e:	0f be       	out	0x3f, r0	; 63
    1320:	cd bf       	out	0x3d, r28	; 61
    1322:	df 91       	pop	r29
    1324:	cf 91       	pop	r28
    1326:	ff 90       	pop	r15
    1328:	ef 90       	pop	r14
    132a:	df 90       	pop	r13
    132c:	cf 90       	pop	r12
    132e:	08 95       	ret

00001330 <__fixsfsi>:
    1330:	ac e0       	ldi	r26, 0x0C	; 12
    1332:	b0 e0       	ldi	r27, 0x00	; 0
    1334:	ee e9       	ldi	r30, 0x9E	; 158
    1336:	f9 e0       	ldi	r31, 0x09	; 9
    1338:	0c 94 de 0b 	jmp	0x17bc	; 0x17bc <__prologue_saves__+0x1c>
    133c:	dc 01       	movw	r26, r24
    133e:	cb 01       	movw	r24, r22
    1340:	89 83       	std	Y+1, r24	; 0x01
    1342:	9a 83       	std	Y+2, r25	; 0x02
    1344:	ab 83       	std	Y+3, r26	; 0x03
    1346:	bc 83       	std	Y+4, r27	; 0x04
    1348:	ce 01       	movw	r24, r28
    134a:	01 96       	adiw	r24, 0x01	; 1
    134c:	be 01       	movw	r22, r28
    134e:	6b 5f       	subi	r22, 0xFB	; 251
    1350:	7f 4f       	sbci	r23, 0xFF	; 255
    1352:	0e 94 13 0b 	call	0x1626	; 0x1626 <__unpack_f>
    1356:	8d 81       	ldd	r24, Y+5	; 0x05
    1358:	82 30       	cpi	r24, 0x02	; 2
    135a:	69 f1       	breq	.+90     	; 0x13b6 <__fixsfsi+0x86>
    135c:	82 30       	cpi	r24, 0x02	; 2
    135e:	58 f1       	brcs	.+86     	; 0x13b6 <__fixsfsi+0x86>
    1360:	84 30       	cpi	r24, 0x04	; 4
    1362:	39 f0       	breq	.+14     	; 0x1372 <__fixsfsi+0x42>
    1364:	2f 81       	ldd	r18, Y+7	; 0x07
    1366:	38 85       	ldd	r19, Y+8	; 0x08
    1368:	37 fd       	sbrc	r19, 7
    136a:	25 c0       	rjmp	.+74     	; 0x13b6 <__fixsfsi+0x86>
    136c:	2f 31       	cpi	r18, 0x1F	; 31
    136e:	31 05       	cpc	r19, r1
    1370:	44 f0       	brlt	.+16     	; 0x1382 <__fixsfsi+0x52>
    1372:	8e 81       	ldd	r24, Y+6	; 0x06
    1374:	88 23       	and	r24, r24
    1376:	19 f1       	breq	.+70     	; 0x13be <__fixsfsi+0x8e>
    1378:	00 e0       	ldi	r16, 0x00	; 0
    137a:	10 e0       	ldi	r17, 0x00	; 0
    137c:	20 e0       	ldi	r18, 0x00	; 0
    137e:	30 e8       	ldi	r19, 0x80	; 128
    1380:	22 c0       	rjmp	.+68     	; 0x13c6 <__fixsfsi+0x96>
    1382:	8e e1       	ldi	r24, 0x1E	; 30
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	82 1b       	sub	r24, r18
    1388:	93 0b       	sbc	r25, r19
    138a:	09 85       	ldd	r16, Y+9	; 0x09
    138c:	1a 85       	ldd	r17, Y+10	; 0x0a
    138e:	2b 85       	ldd	r18, Y+11	; 0x0b
    1390:	3c 85       	ldd	r19, Y+12	; 0x0c
    1392:	04 c0       	rjmp	.+8      	; 0x139c <__fixsfsi+0x6c>
    1394:	36 95       	lsr	r19
    1396:	27 95       	ror	r18
    1398:	17 95       	ror	r17
    139a:	07 95       	ror	r16
    139c:	8a 95       	dec	r24
    139e:	d2 f7       	brpl	.-12     	; 0x1394 <__fixsfsi+0x64>
    13a0:	8e 81       	ldd	r24, Y+6	; 0x06
    13a2:	88 23       	and	r24, r24
    13a4:	81 f0       	breq	.+32     	; 0x13c6 <__fixsfsi+0x96>
    13a6:	30 95       	com	r19
    13a8:	20 95       	com	r18
    13aa:	10 95       	com	r17
    13ac:	01 95       	neg	r16
    13ae:	1f 4f       	sbci	r17, 0xFF	; 255
    13b0:	2f 4f       	sbci	r18, 0xFF	; 255
    13b2:	3f 4f       	sbci	r19, 0xFF	; 255
    13b4:	08 c0       	rjmp	.+16     	; 0x13c6 <__fixsfsi+0x96>
    13b6:	00 e0       	ldi	r16, 0x00	; 0
    13b8:	10 e0       	ldi	r17, 0x00	; 0
    13ba:	98 01       	movw	r18, r16
    13bc:	04 c0       	rjmp	.+8      	; 0x13c6 <__fixsfsi+0x96>
    13be:	0f ef       	ldi	r16, 0xFF	; 255
    13c0:	1f ef       	ldi	r17, 0xFF	; 255
    13c2:	2f ef       	ldi	r18, 0xFF	; 255
    13c4:	3f e7       	ldi	r19, 0x7F	; 127
    13c6:	b8 01       	movw	r22, r16
    13c8:	c9 01       	movw	r24, r18
    13ca:	2c 96       	adiw	r28, 0x0c	; 12
    13cc:	e4 e0       	ldi	r30, 0x04	; 4
    13ce:	0c 94 fa 0b 	jmp	0x17f4	; 0x17f4 <__epilogue_restores__+0x1c>

000013d2 <__clzsi2>:
    13d2:	cf 92       	push	r12
    13d4:	df 92       	push	r13
    13d6:	ef 92       	push	r14
    13d8:	ff 92       	push	r15
    13da:	0f 93       	push	r16
    13dc:	1f 93       	push	r17
    13de:	8b 01       	movw	r16, r22
    13e0:	9c 01       	movw	r18, r24
    13e2:	00 30       	cpi	r16, 0x00	; 0
    13e4:	80 e0       	ldi	r24, 0x00	; 0
    13e6:	18 07       	cpc	r17, r24
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	28 07       	cpc	r18, r24
    13ec:	80 e0       	ldi	r24, 0x00	; 0
    13ee:	38 07       	cpc	r19, r24
    13f0:	50 f4       	brcc	.+20     	; 0x1406 <__clzsi2+0x34>
    13f2:	0f 3f       	cpi	r16, 0xFF	; 255
    13f4:	11 05       	cpc	r17, r1
    13f6:	21 05       	cpc	r18, r1
    13f8:	31 05       	cpc	r19, r1
    13fa:	09 f0       	breq	.+2      	; 0x13fe <__clzsi2+0x2c>
    13fc:	88 f4       	brcc	.+34     	; 0x1420 <__clzsi2+0x4e>
    13fe:	80 e0       	ldi	r24, 0x00	; 0
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	dc 01       	movw	r26, r24
    1404:	16 c0       	rjmp	.+44     	; 0x1432 <__clzsi2+0x60>
    1406:	00 30       	cpi	r16, 0x00	; 0
    1408:	e0 e0       	ldi	r30, 0x00	; 0
    140a:	1e 07       	cpc	r17, r30
    140c:	e0 e0       	ldi	r30, 0x00	; 0
    140e:	2e 07       	cpc	r18, r30
    1410:	e1 e0       	ldi	r30, 0x01	; 1
    1412:	3e 07       	cpc	r19, r30
    1414:	50 f4       	brcc	.+20     	; 0x142a <__clzsi2+0x58>
    1416:	80 e1       	ldi	r24, 0x10	; 16
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	a0 e0       	ldi	r26, 0x00	; 0
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	09 c0       	rjmp	.+18     	; 0x1432 <__clzsi2+0x60>
    1420:	88 e0       	ldi	r24, 0x08	; 8
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	a0 e0       	ldi	r26, 0x00	; 0
    1426:	b0 e0       	ldi	r27, 0x00	; 0
    1428:	04 c0       	rjmp	.+8      	; 0x1432 <__clzsi2+0x60>
    142a:	88 e1       	ldi	r24, 0x18	; 24
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	a0 e0       	ldi	r26, 0x00	; 0
    1430:	b0 e0       	ldi	r27, 0x00	; 0
    1432:	40 e2       	ldi	r20, 0x20	; 32
    1434:	50 e0       	ldi	r21, 0x00	; 0
    1436:	60 e0       	ldi	r22, 0x00	; 0
    1438:	70 e0       	ldi	r23, 0x00	; 0
    143a:	48 1b       	sub	r20, r24
    143c:	59 0b       	sbc	r21, r25
    143e:	6a 0b       	sbc	r22, r26
    1440:	7b 0b       	sbc	r23, r27
    1442:	68 01       	movw	r12, r16
    1444:	79 01       	movw	r14, r18
    1446:	04 c0       	rjmp	.+8      	; 0x1450 <__clzsi2+0x7e>
    1448:	f6 94       	lsr	r15
    144a:	e7 94       	ror	r14
    144c:	d7 94       	ror	r13
    144e:	c7 94       	ror	r12
    1450:	8a 95       	dec	r24
    1452:	d2 f7       	brpl	.-12     	; 0x1448 <__clzsi2+0x76>
    1454:	d7 01       	movw	r26, r14
    1456:	c6 01       	movw	r24, r12
    1458:	82 5c       	subi	r24, 0xC2	; 194
    145a:	9c 4f       	sbci	r25, 0xFC	; 252
    145c:	fc 01       	movw	r30, r24
    145e:	80 81       	ld	r24, Z
    1460:	48 1b       	sub	r20, r24
    1462:	51 09       	sbc	r21, r1
    1464:	61 09       	sbc	r22, r1
    1466:	71 09       	sbc	r23, r1
    1468:	ca 01       	movw	r24, r20
    146a:	1f 91       	pop	r17
    146c:	0f 91       	pop	r16
    146e:	ff 90       	pop	r15
    1470:	ef 90       	pop	r14
    1472:	df 90       	pop	r13
    1474:	cf 90       	pop	r12
    1476:	08 95       	ret

00001478 <__pack_f>:
    1478:	cf 92       	push	r12
    147a:	df 92       	push	r13
    147c:	ef 92       	push	r14
    147e:	ff 92       	push	r15
    1480:	0f 93       	push	r16
    1482:	1f 93       	push	r17
    1484:	dc 01       	movw	r26, r24
    1486:	14 96       	adiw	r26, 0x04	; 4
    1488:	4d 91       	ld	r20, X+
    148a:	5d 91       	ld	r21, X+
    148c:	6d 91       	ld	r22, X+
    148e:	7c 91       	ld	r23, X
    1490:	17 97       	sbiw	r26, 0x07	; 7
    1492:	11 96       	adiw	r26, 0x01	; 1
    1494:	ec 91       	ld	r30, X
    1496:	11 97       	sbiw	r26, 0x01	; 1
    1498:	8c 91       	ld	r24, X
    149a:	82 30       	cpi	r24, 0x02	; 2
    149c:	20 f4       	brcc	.+8      	; 0x14a6 <__pack_f+0x2e>
    149e:	60 61       	ori	r22, 0x10	; 16
    14a0:	8f ef       	ldi	r24, 0xFF	; 255
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	a5 c0       	rjmp	.+330    	; 0x15f0 <__pack_f+0x178>
    14a6:	84 30       	cpi	r24, 0x04	; 4
    14a8:	09 f4       	brne	.+2      	; 0x14ac <__pack_f+0x34>
    14aa:	9d c0       	rjmp	.+314    	; 0x15e6 <__pack_f+0x16e>
    14ac:	82 30       	cpi	r24, 0x02	; 2
    14ae:	09 f4       	brne	.+2      	; 0x14b2 <__pack_f+0x3a>
    14b0:	94 c0       	rjmp	.+296    	; 0x15da <__pack_f+0x162>
    14b2:	41 15       	cp	r20, r1
    14b4:	51 05       	cpc	r21, r1
    14b6:	61 05       	cpc	r22, r1
    14b8:	71 05       	cpc	r23, r1
    14ba:	09 f4       	brne	.+2      	; 0x14be <__pack_f+0x46>
    14bc:	91 c0       	rjmp	.+290    	; 0x15e0 <__pack_f+0x168>
    14be:	12 96       	adiw	r26, 0x02	; 2
    14c0:	8d 91       	ld	r24, X+
    14c2:	9c 91       	ld	r25, X
    14c4:	13 97       	sbiw	r26, 0x03	; 3
    14c6:	2f ef       	ldi	r18, 0xFF	; 255
    14c8:	82 38       	cpi	r24, 0x82	; 130
    14ca:	92 07       	cpc	r25, r18
    14cc:	0c f0       	brlt	.+2      	; 0x14d0 <__pack_f+0x58>
    14ce:	59 c0       	rjmp	.+178    	; 0x1582 <__pack_f+0x10a>
    14d0:	22 e8       	ldi	r18, 0x82	; 130
    14d2:	3f ef       	ldi	r19, 0xFF	; 255
    14d4:	28 1b       	sub	r18, r24
    14d6:	39 0b       	sbc	r19, r25
    14d8:	2a 31       	cpi	r18, 0x1A	; 26
    14da:	31 05       	cpc	r19, r1
    14dc:	64 f5       	brge	.+88     	; 0x1536 <__pack_f+0xbe>
    14de:	6a 01       	movw	r12, r20
    14e0:	7b 01       	movw	r14, r22
    14e2:	02 2e       	mov	r0, r18
    14e4:	04 c0       	rjmp	.+8      	; 0x14ee <__pack_f+0x76>
    14e6:	f6 94       	lsr	r15
    14e8:	e7 94       	ror	r14
    14ea:	d7 94       	ror	r13
    14ec:	c7 94       	ror	r12
    14ee:	0a 94       	dec	r0
    14f0:	d2 f7       	brpl	.-12     	; 0x14e6 <__pack_f+0x6e>
    14f2:	81 e0       	ldi	r24, 0x01	; 1
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	a0 e0       	ldi	r26, 0x00	; 0
    14f8:	b0 e0       	ldi	r27, 0x00	; 0
    14fa:	04 c0       	rjmp	.+8      	; 0x1504 <__pack_f+0x8c>
    14fc:	88 0f       	add	r24, r24
    14fe:	99 1f       	adc	r25, r25
    1500:	aa 1f       	adc	r26, r26
    1502:	bb 1f       	adc	r27, r27
    1504:	2a 95       	dec	r18
    1506:	d2 f7       	brpl	.-12     	; 0x14fc <__pack_f+0x84>
    1508:	01 97       	sbiw	r24, 0x01	; 1
    150a:	a1 09       	sbc	r26, r1
    150c:	b1 09       	sbc	r27, r1
    150e:	84 23       	and	r24, r20
    1510:	95 23       	and	r25, r21
    1512:	a6 23       	and	r26, r22
    1514:	b7 23       	and	r27, r23
    1516:	41 e0       	ldi	r20, 0x01	; 1
    1518:	50 e0       	ldi	r21, 0x00	; 0
    151a:	60 e0       	ldi	r22, 0x00	; 0
    151c:	70 e0       	ldi	r23, 0x00	; 0
    151e:	00 97       	sbiw	r24, 0x00	; 0
    1520:	a1 05       	cpc	r26, r1
    1522:	b1 05       	cpc	r27, r1
    1524:	19 f4       	brne	.+6      	; 0x152c <__pack_f+0xb4>
    1526:	40 e0       	ldi	r20, 0x00	; 0
    1528:	50 e0       	ldi	r21, 0x00	; 0
    152a:	ba 01       	movw	r22, r20
    152c:	4c 29       	or	r20, r12
    152e:	5d 29       	or	r21, r13
    1530:	6e 29       	or	r22, r14
    1532:	7f 29       	or	r23, r15
    1534:	03 c0       	rjmp	.+6      	; 0x153c <__pack_f+0xc4>
    1536:	40 e0       	ldi	r20, 0x00	; 0
    1538:	50 e0       	ldi	r21, 0x00	; 0
    153a:	ba 01       	movw	r22, r20
    153c:	db 01       	movw	r26, r22
    153e:	ca 01       	movw	r24, r20
    1540:	8f 77       	andi	r24, 0x7F	; 127
    1542:	90 70       	andi	r25, 0x00	; 0
    1544:	a0 70       	andi	r26, 0x00	; 0
    1546:	b0 70       	andi	r27, 0x00	; 0
    1548:	80 34       	cpi	r24, 0x40	; 64
    154a:	91 05       	cpc	r25, r1
    154c:	a1 05       	cpc	r26, r1
    154e:	b1 05       	cpc	r27, r1
    1550:	39 f4       	brne	.+14     	; 0x1560 <__pack_f+0xe8>
    1552:	47 ff       	sbrs	r20, 7
    1554:	09 c0       	rjmp	.+18     	; 0x1568 <__pack_f+0xf0>
    1556:	40 5c       	subi	r20, 0xC0	; 192
    1558:	5f 4f       	sbci	r21, 0xFF	; 255
    155a:	6f 4f       	sbci	r22, 0xFF	; 255
    155c:	7f 4f       	sbci	r23, 0xFF	; 255
    155e:	04 c0       	rjmp	.+8      	; 0x1568 <__pack_f+0xf0>
    1560:	41 5c       	subi	r20, 0xC1	; 193
    1562:	5f 4f       	sbci	r21, 0xFF	; 255
    1564:	6f 4f       	sbci	r22, 0xFF	; 255
    1566:	7f 4f       	sbci	r23, 0xFF	; 255
    1568:	81 e0       	ldi	r24, 0x01	; 1
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	40 30       	cpi	r20, 0x00	; 0
    156e:	20 e0       	ldi	r18, 0x00	; 0
    1570:	52 07       	cpc	r21, r18
    1572:	20 e0       	ldi	r18, 0x00	; 0
    1574:	62 07       	cpc	r22, r18
    1576:	20 e4       	ldi	r18, 0x40	; 64
    1578:	72 07       	cpc	r23, r18
    157a:	38 f5       	brcc	.+78     	; 0x15ca <__pack_f+0x152>
    157c:	80 e0       	ldi	r24, 0x00	; 0
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	24 c0       	rjmp	.+72     	; 0x15ca <__pack_f+0x152>
    1582:	80 38       	cpi	r24, 0x80	; 128
    1584:	91 05       	cpc	r25, r1
    1586:	7c f5       	brge	.+94     	; 0x15e6 <__pack_f+0x16e>
    1588:	8a 01       	movw	r16, r20
    158a:	9b 01       	movw	r18, r22
    158c:	0f 77       	andi	r16, 0x7F	; 127
    158e:	10 70       	andi	r17, 0x00	; 0
    1590:	20 70       	andi	r18, 0x00	; 0
    1592:	30 70       	andi	r19, 0x00	; 0
    1594:	00 34       	cpi	r16, 0x40	; 64
    1596:	11 05       	cpc	r17, r1
    1598:	21 05       	cpc	r18, r1
    159a:	31 05       	cpc	r19, r1
    159c:	39 f4       	brne	.+14     	; 0x15ac <__pack_f+0x134>
    159e:	47 ff       	sbrs	r20, 7
    15a0:	09 c0       	rjmp	.+18     	; 0x15b4 <__pack_f+0x13c>
    15a2:	40 5c       	subi	r20, 0xC0	; 192
    15a4:	5f 4f       	sbci	r21, 0xFF	; 255
    15a6:	6f 4f       	sbci	r22, 0xFF	; 255
    15a8:	7f 4f       	sbci	r23, 0xFF	; 255
    15aa:	04 c0       	rjmp	.+8      	; 0x15b4 <__pack_f+0x13c>
    15ac:	41 5c       	subi	r20, 0xC1	; 193
    15ae:	5f 4f       	sbci	r21, 0xFF	; 255
    15b0:	6f 4f       	sbci	r22, 0xFF	; 255
    15b2:	7f 4f       	sbci	r23, 0xFF	; 255
    15b4:	77 fd       	sbrc	r23, 7
    15b6:	03 c0       	rjmp	.+6      	; 0x15be <__pack_f+0x146>
    15b8:	81 58       	subi	r24, 0x81	; 129
    15ba:	9f 4f       	sbci	r25, 0xFF	; 255
    15bc:	06 c0       	rjmp	.+12     	; 0x15ca <__pack_f+0x152>
    15be:	76 95       	lsr	r23
    15c0:	67 95       	ror	r22
    15c2:	57 95       	ror	r21
    15c4:	47 95       	ror	r20
    15c6:	80 58       	subi	r24, 0x80	; 128
    15c8:	9f 4f       	sbci	r25, 0xFF	; 255
    15ca:	97 e0       	ldi	r25, 0x07	; 7
    15cc:	76 95       	lsr	r23
    15ce:	67 95       	ror	r22
    15d0:	57 95       	ror	r21
    15d2:	47 95       	ror	r20
    15d4:	9a 95       	dec	r25
    15d6:	d1 f7       	brne	.-12     	; 0x15cc <__pack_f+0x154>
    15d8:	0b c0       	rjmp	.+22     	; 0x15f0 <__pack_f+0x178>
    15da:	80 e0       	ldi	r24, 0x00	; 0
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	05 c0       	rjmp	.+10     	; 0x15ea <__pack_f+0x172>
    15e0:	80 e0       	ldi	r24, 0x00	; 0
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	05 c0       	rjmp	.+10     	; 0x15f0 <__pack_f+0x178>
    15e6:	8f ef       	ldi	r24, 0xFF	; 255
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	40 e0       	ldi	r20, 0x00	; 0
    15ec:	50 e0       	ldi	r21, 0x00	; 0
    15ee:	ba 01       	movw	r22, r20
    15f0:	98 2f       	mov	r25, r24
    15f2:	97 95       	ror	r25
    15f4:	99 27       	eor	r25, r25
    15f6:	97 95       	ror	r25
    15f8:	a6 2f       	mov	r26, r22
    15fa:	af 77       	andi	r26, 0x7F	; 127
    15fc:	e7 95       	ror	r30
    15fe:	ee 27       	eor	r30, r30
    1600:	e7 95       	ror	r30
    1602:	86 95       	lsr	r24
    1604:	3a 2f       	mov	r19, r26
    1606:	39 2b       	or	r19, r25
    1608:	28 2f       	mov	r18, r24
    160a:	2e 2b       	or	r18, r30
    160c:	84 2f       	mov	r24, r20
    160e:	95 2f       	mov	r25, r21
    1610:	a3 2f       	mov	r26, r19
    1612:	b2 2f       	mov	r27, r18
    1614:	bc 01       	movw	r22, r24
    1616:	cd 01       	movw	r24, r26
    1618:	1f 91       	pop	r17
    161a:	0f 91       	pop	r16
    161c:	ff 90       	pop	r15
    161e:	ef 90       	pop	r14
    1620:	df 90       	pop	r13
    1622:	cf 90       	pop	r12
    1624:	08 95       	ret

00001626 <__unpack_f>:
    1626:	dc 01       	movw	r26, r24
    1628:	fb 01       	movw	r30, r22
    162a:	4c 91       	ld	r20, X
    162c:	11 96       	adiw	r26, 0x01	; 1
    162e:	5c 91       	ld	r21, X
    1630:	11 97       	sbiw	r26, 0x01	; 1
    1632:	12 96       	adiw	r26, 0x02	; 2
    1634:	8c 91       	ld	r24, X
    1636:	12 97       	sbiw	r26, 0x02	; 2
    1638:	68 2f       	mov	r22, r24
    163a:	6f 77       	andi	r22, 0x7F	; 127
    163c:	70 e0       	ldi	r23, 0x00	; 0
    163e:	98 2f       	mov	r25, r24
    1640:	99 1f       	adc	r25, r25
    1642:	99 27       	eor	r25, r25
    1644:	99 1f       	adc	r25, r25
    1646:	13 96       	adiw	r26, 0x03	; 3
    1648:	2c 91       	ld	r18, X
    164a:	13 97       	sbiw	r26, 0x03	; 3
    164c:	82 2f       	mov	r24, r18
    164e:	88 0f       	add	r24, r24
    1650:	89 2b       	or	r24, r25
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	22 1f       	adc	r18, r18
    1656:	22 27       	eor	r18, r18
    1658:	22 1f       	adc	r18, r18
    165a:	21 83       	std	Z+1, r18	; 0x01
    165c:	00 97       	sbiw	r24, 0x00	; 0
    165e:	39 f5       	brne	.+78     	; 0x16ae <__unpack_f+0x88>
    1660:	41 15       	cp	r20, r1
    1662:	51 05       	cpc	r21, r1
    1664:	61 05       	cpc	r22, r1
    1666:	71 05       	cpc	r23, r1
    1668:	11 f4       	brne	.+4      	; 0x166e <__unpack_f+0x48>
    166a:	82 e0       	ldi	r24, 0x02	; 2
    166c:	29 c0       	rjmp	.+82     	; 0x16c0 <__unpack_f+0x9a>
    166e:	82 e8       	ldi	r24, 0x82	; 130
    1670:	9f ef       	ldi	r25, 0xFF	; 255
    1672:	93 83       	std	Z+3, r25	; 0x03
    1674:	82 83       	std	Z+2, r24	; 0x02
    1676:	27 e0       	ldi	r18, 0x07	; 7
    1678:	44 0f       	add	r20, r20
    167a:	55 1f       	adc	r21, r21
    167c:	66 1f       	adc	r22, r22
    167e:	77 1f       	adc	r23, r23
    1680:	2a 95       	dec	r18
    1682:	d1 f7       	brne	.-12     	; 0x1678 <__unpack_f+0x52>
    1684:	83 e0       	ldi	r24, 0x03	; 3
    1686:	80 83       	st	Z, r24
    1688:	09 c0       	rjmp	.+18     	; 0x169c <__unpack_f+0x76>
    168a:	44 0f       	add	r20, r20
    168c:	55 1f       	adc	r21, r21
    168e:	66 1f       	adc	r22, r22
    1690:	77 1f       	adc	r23, r23
    1692:	82 81       	ldd	r24, Z+2	; 0x02
    1694:	93 81       	ldd	r25, Z+3	; 0x03
    1696:	01 97       	sbiw	r24, 0x01	; 1
    1698:	93 83       	std	Z+3, r25	; 0x03
    169a:	82 83       	std	Z+2, r24	; 0x02
    169c:	40 30       	cpi	r20, 0x00	; 0
    169e:	80 e0       	ldi	r24, 0x00	; 0
    16a0:	58 07       	cpc	r21, r24
    16a2:	80 e0       	ldi	r24, 0x00	; 0
    16a4:	68 07       	cpc	r22, r24
    16a6:	80 e4       	ldi	r24, 0x40	; 64
    16a8:	78 07       	cpc	r23, r24
    16aa:	78 f3       	brcs	.-34     	; 0x168a <__unpack_f+0x64>
    16ac:	20 c0       	rjmp	.+64     	; 0x16ee <__unpack_f+0xc8>
    16ae:	8f 3f       	cpi	r24, 0xFF	; 255
    16b0:	91 05       	cpc	r25, r1
    16b2:	79 f4       	brne	.+30     	; 0x16d2 <__unpack_f+0xac>
    16b4:	41 15       	cp	r20, r1
    16b6:	51 05       	cpc	r21, r1
    16b8:	61 05       	cpc	r22, r1
    16ba:	71 05       	cpc	r23, r1
    16bc:	19 f4       	brne	.+6      	; 0x16c4 <__unpack_f+0x9e>
    16be:	84 e0       	ldi	r24, 0x04	; 4
    16c0:	80 83       	st	Z, r24
    16c2:	08 95       	ret
    16c4:	64 ff       	sbrs	r22, 4
    16c6:	03 c0       	rjmp	.+6      	; 0x16ce <__unpack_f+0xa8>
    16c8:	81 e0       	ldi	r24, 0x01	; 1
    16ca:	80 83       	st	Z, r24
    16cc:	10 c0       	rjmp	.+32     	; 0x16ee <__unpack_f+0xc8>
    16ce:	10 82       	st	Z, r1
    16d0:	0e c0       	rjmp	.+28     	; 0x16ee <__unpack_f+0xc8>
    16d2:	8f 57       	subi	r24, 0x7F	; 127
    16d4:	90 40       	sbci	r25, 0x00	; 0
    16d6:	93 83       	std	Z+3, r25	; 0x03
    16d8:	82 83       	std	Z+2, r24	; 0x02
    16da:	83 e0       	ldi	r24, 0x03	; 3
    16dc:	80 83       	st	Z, r24
    16de:	87 e0       	ldi	r24, 0x07	; 7
    16e0:	44 0f       	add	r20, r20
    16e2:	55 1f       	adc	r21, r21
    16e4:	66 1f       	adc	r22, r22
    16e6:	77 1f       	adc	r23, r23
    16e8:	8a 95       	dec	r24
    16ea:	d1 f7       	brne	.-12     	; 0x16e0 <__unpack_f+0xba>
    16ec:	70 64       	ori	r23, 0x40	; 64
    16ee:	44 83       	std	Z+4, r20	; 0x04
    16f0:	55 83       	std	Z+5, r21	; 0x05
    16f2:	66 83       	std	Z+6, r22	; 0x06
    16f4:	77 83       	std	Z+7, r23	; 0x07
    16f6:	08 95       	ret

000016f8 <main>:
#include "timer_linked_list.h"
#include "task.h"
#include "adc_tc1047.h"

int main()
{
    16f8:	cf 93       	push	r28
    16fa:	df 93       	push	r29
    16fc:	cd b7       	in	r28, 0x3d	; 61
    16fe:	de b7       	in	r29, 0x3e	; 62
    1700:	2a 97       	sbiw	r28, 0x0a	; 10
    1702:	0f b6       	in	r0, 0x3f	; 63
    1704:	f8 94       	cli
    1706:	de bf       	out	0x3e, r29	; 62
    1708:	0f be       	out	0x3f, r0	; 63
    170a:	cd bf       	out	0x3d, r28	; 61
	int tag;	
	struct task task;

	sei();
    170c:	78 94       	sei
	uart_init();
    170e:	0e 94 70 06 	call	0xce0	; 0xce0 <uart_init>
	task_init();
    1712:	0e 94 67 03 	call	0x6ce	; 0x6ce <task_init>
	timer_init();
    1716:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <timer_init>
	adc_init();
    171a:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <adc_init>
	printf("$ ");
    171e:	0f 92       	push	r0
    1720:	0f 92       	push	r0
    1722:	88 e3       	ldi	r24, 0x38	; 56
    1724:	92 e0       	ldi	r25, 0x02	; 2
    1726:	ed b7       	in	r30, 0x3d	; 61
    1728:	fe b7       	in	r31, 0x3e	; 62
    172a:	92 83       	std	Z+2, r25	; 0x02
    172c:	81 83       	std	Z+1, r24	; 0x01
    172e:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <printf>
    1732:	0f 90       	pop	r0
    1734:	0f 90       	pop	r0

	while(1) {
		cli();
    1736:	f8 94       	cli
		tag = task_delete(&task);
    1738:	ce 01       	movw	r24, r28
    173a:	01 96       	adiw	r24, 0x01	; 1
    173c:	0e 94 b0 03 	call	0x760	; 0x760 <task_delete>
		sei();
    1740:	78 94       	sei
		if (tag)
    1742:	00 97       	sbiw	r24, 0x00	; 0
    1744:	c1 f3       	breq	.-16     	; 0x1736 <main+0x3e>
			(*(task.fun))(task.arg);
    1746:	e9 81       	ldd	r30, Y+1	; 0x01
    1748:	fa 81       	ldd	r31, Y+2	; 0x02
    174a:	ce 01       	movw	r24, r28
    174c:	03 96       	adiw	r24, 0x03	; 3
    174e:	19 95       	eicall
    1750:	f2 cf       	rjmp	.-28     	; 0x1736 <main+0x3e>

00001752 <__divmodhi4>:
    1752:	97 fb       	bst	r25, 7
    1754:	09 2e       	mov	r0, r25
    1756:	07 26       	eor	r0, r23
    1758:	0a d0       	rcall	.+20     	; 0x176e <__divmodhi4_neg1>
    175a:	77 fd       	sbrc	r23, 7
    175c:	04 d0       	rcall	.+8      	; 0x1766 <__divmodhi4_neg2>
    175e:	0c d0       	rcall	.+24     	; 0x1778 <__udivmodhi4>
    1760:	06 d0       	rcall	.+12     	; 0x176e <__divmodhi4_neg1>
    1762:	00 20       	and	r0, r0
    1764:	1a f4       	brpl	.+6      	; 0x176c <__divmodhi4_exit>

00001766 <__divmodhi4_neg2>:
    1766:	70 95       	com	r23
    1768:	61 95       	neg	r22
    176a:	7f 4f       	sbci	r23, 0xFF	; 255

0000176c <__divmodhi4_exit>:
    176c:	08 95       	ret

0000176e <__divmodhi4_neg1>:
    176e:	f6 f7       	brtc	.-4      	; 0x176c <__divmodhi4_exit>
    1770:	90 95       	com	r25
    1772:	81 95       	neg	r24
    1774:	9f 4f       	sbci	r25, 0xFF	; 255
    1776:	08 95       	ret

00001778 <__udivmodhi4>:
    1778:	aa 1b       	sub	r26, r26
    177a:	bb 1b       	sub	r27, r27
    177c:	51 e1       	ldi	r21, 0x11	; 17
    177e:	07 c0       	rjmp	.+14     	; 0x178e <__udivmodhi4_ep>

00001780 <__udivmodhi4_loop>:
    1780:	aa 1f       	adc	r26, r26
    1782:	bb 1f       	adc	r27, r27
    1784:	a6 17       	cp	r26, r22
    1786:	b7 07       	cpc	r27, r23
    1788:	10 f0       	brcs	.+4      	; 0x178e <__udivmodhi4_ep>
    178a:	a6 1b       	sub	r26, r22
    178c:	b7 0b       	sbc	r27, r23

0000178e <__udivmodhi4_ep>:
    178e:	88 1f       	adc	r24, r24
    1790:	99 1f       	adc	r25, r25
    1792:	5a 95       	dec	r21
    1794:	a9 f7       	brne	.-22     	; 0x1780 <__udivmodhi4_loop>
    1796:	80 95       	com	r24
    1798:	90 95       	com	r25
    179a:	bc 01       	movw	r22, r24
    179c:	cd 01       	movw	r24, r26
    179e:	08 95       	ret

000017a0 <__prologue_saves__>:
    17a0:	2f 92       	push	r2
    17a2:	3f 92       	push	r3
    17a4:	4f 92       	push	r4
    17a6:	5f 92       	push	r5
    17a8:	6f 92       	push	r6
    17aa:	7f 92       	push	r7
    17ac:	8f 92       	push	r8
    17ae:	9f 92       	push	r9
    17b0:	af 92       	push	r10
    17b2:	bf 92       	push	r11
    17b4:	cf 92       	push	r12
    17b6:	df 92       	push	r13
    17b8:	ef 92       	push	r14
    17ba:	ff 92       	push	r15
    17bc:	0f 93       	push	r16
    17be:	1f 93       	push	r17
    17c0:	cf 93       	push	r28
    17c2:	df 93       	push	r29
    17c4:	cd b7       	in	r28, 0x3d	; 61
    17c6:	de b7       	in	r29, 0x3e	; 62
    17c8:	ca 1b       	sub	r28, r26
    17ca:	db 0b       	sbc	r29, r27
    17cc:	0f b6       	in	r0, 0x3f	; 63
    17ce:	f8 94       	cli
    17d0:	de bf       	out	0x3e, r29	; 62
    17d2:	0f be       	out	0x3f, r0	; 63
    17d4:	cd bf       	out	0x3d, r28	; 61
    17d6:	19 94       	eijmp

000017d8 <__epilogue_restores__>:
    17d8:	2a 88       	ldd	r2, Y+18	; 0x12
    17da:	39 88       	ldd	r3, Y+17	; 0x11
    17dc:	48 88       	ldd	r4, Y+16	; 0x10
    17de:	5f 84       	ldd	r5, Y+15	; 0x0f
    17e0:	6e 84       	ldd	r6, Y+14	; 0x0e
    17e2:	7d 84       	ldd	r7, Y+13	; 0x0d
    17e4:	8c 84       	ldd	r8, Y+12	; 0x0c
    17e6:	9b 84       	ldd	r9, Y+11	; 0x0b
    17e8:	aa 84       	ldd	r10, Y+10	; 0x0a
    17ea:	b9 84       	ldd	r11, Y+9	; 0x09
    17ec:	c8 84       	ldd	r12, Y+8	; 0x08
    17ee:	df 80       	ldd	r13, Y+7	; 0x07
    17f0:	ee 80       	ldd	r14, Y+6	; 0x06
    17f2:	fd 80       	ldd	r15, Y+5	; 0x05
    17f4:	0c 81       	ldd	r16, Y+4	; 0x04
    17f6:	1b 81       	ldd	r17, Y+3	; 0x03
    17f8:	aa 81       	ldd	r26, Y+2	; 0x02
    17fa:	b9 81       	ldd	r27, Y+1	; 0x01
    17fc:	ce 0f       	add	r28, r30
    17fe:	d1 1d       	adc	r29, r1
    1800:	0f b6       	in	r0, 0x3f	; 63
    1802:	f8 94       	cli
    1804:	de bf       	out	0x3e, r29	; 62
    1806:	0f be       	out	0x3f, r0	; 63
    1808:	cd bf       	out	0x3d, r28	; 61
    180a:	ed 01       	movw	r28, r26
    180c:	08 95       	ret

0000180e <malloc>:
    180e:	cf 93       	push	r28
    1810:	df 93       	push	r29
    1812:	ac 01       	movw	r20, r24
    1814:	82 30       	cpi	r24, 0x02	; 2
    1816:	91 05       	cpc	r25, r1
    1818:	10 f4       	brcc	.+4      	; 0x181e <malloc+0x10>
    181a:	42 e0       	ldi	r20, 0x02	; 2
    181c:	50 e0       	ldi	r21, 0x00	; 0
    181e:	e0 91 7e 05 	lds	r30, 0x057E
    1822:	f0 91 7f 05 	lds	r31, 0x057F
    1826:	20 e0       	ldi	r18, 0x00	; 0
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	a0 e0       	ldi	r26, 0x00	; 0
    182c:	b0 e0       	ldi	r27, 0x00	; 0
    182e:	24 c0       	rjmp	.+72     	; 0x1878 <malloc+0x6a>
    1830:	80 81       	ld	r24, Z
    1832:	91 81       	ldd	r25, Z+1	; 0x01
    1834:	84 17       	cp	r24, r20
    1836:	95 07       	cpc	r25, r21
    1838:	d0 f0       	brcs	.+52     	; 0x186e <malloc+0x60>
    183a:	84 17       	cp	r24, r20
    183c:	95 07       	cpc	r25, r21
    183e:	71 f4       	brne	.+28     	; 0x185c <malloc+0x4e>
    1840:	82 81       	ldd	r24, Z+2	; 0x02
    1842:	93 81       	ldd	r25, Z+3	; 0x03
    1844:	10 97       	sbiw	r26, 0x00	; 0
    1846:	29 f0       	breq	.+10     	; 0x1852 <malloc+0x44>
    1848:	13 96       	adiw	r26, 0x03	; 3
    184a:	9c 93       	st	X, r25
    184c:	8e 93       	st	-X, r24
    184e:	12 97       	sbiw	r26, 0x02	; 2
    1850:	2c c0       	rjmp	.+88     	; 0x18aa <malloc+0x9c>
    1852:	90 93 7f 05 	sts	0x057F, r25
    1856:	80 93 7e 05 	sts	0x057E, r24
    185a:	27 c0       	rjmp	.+78     	; 0x18aa <malloc+0x9c>
    185c:	21 15       	cp	r18, r1
    185e:	31 05       	cpc	r19, r1
    1860:	19 f0       	breq	.+6      	; 0x1868 <malloc+0x5a>
    1862:	82 17       	cp	r24, r18
    1864:	93 07       	cpc	r25, r19
    1866:	18 f4       	brcc	.+6      	; 0x186e <malloc+0x60>
    1868:	9c 01       	movw	r18, r24
    186a:	bd 01       	movw	r22, r26
    186c:	ef 01       	movw	r28, r30
    186e:	92 81       	ldd	r25, Z+2	; 0x02
    1870:	83 81       	ldd	r24, Z+3	; 0x03
    1872:	df 01       	movw	r26, r30
    1874:	e9 2f       	mov	r30, r25
    1876:	f8 2f       	mov	r31, r24
    1878:	30 97       	sbiw	r30, 0x00	; 0
    187a:	d1 f6       	brne	.-76     	; 0x1830 <malloc+0x22>
    187c:	21 15       	cp	r18, r1
    187e:	31 05       	cpc	r19, r1
    1880:	f9 f0       	breq	.+62     	; 0x18c0 <malloc+0xb2>
    1882:	c9 01       	movw	r24, r18
    1884:	84 1b       	sub	r24, r20
    1886:	95 0b       	sbc	r25, r21
    1888:	84 30       	cpi	r24, 0x04	; 4
    188a:	91 05       	cpc	r25, r1
    188c:	80 f4       	brcc	.+32     	; 0x18ae <malloc+0xa0>
    188e:	8a 81       	ldd	r24, Y+2	; 0x02
    1890:	9b 81       	ldd	r25, Y+3	; 0x03
    1892:	61 15       	cp	r22, r1
    1894:	71 05       	cpc	r23, r1
    1896:	21 f0       	breq	.+8      	; 0x18a0 <malloc+0x92>
    1898:	fb 01       	movw	r30, r22
    189a:	93 83       	std	Z+3, r25	; 0x03
    189c:	82 83       	std	Z+2, r24	; 0x02
    189e:	04 c0       	rjmp	.+8      	; 0x18a8 <malloc+0x9a>
    18a0:	90 93 7f 05 	sts	0x057F, r25
    18a4:	80 93 7e 05 	sts	0x057E, r24
    18a8:	fe 01       	movw	r30, r28
    18aa:	32 96       	adiw	r30, 0x02	; 2
    18ac:	42 c0       	rjmp	.+132    	; 0x1932 <malloc+0x124>
    18ae:	fe 01       	movw	r30, r28
    18b0:	e8 0f       	add	r30, r24
    18b2:	f9 1f       	adc	r31, r25
    18b4:	41 93       	st	Z+, r20
    18b6:	51 93       	st	Z+, r21
    18b8:	02 97       	sbiw	r24, 0x02	; 2
    18ba:	99 83       	std	Y+1, r25	; 0x01
    18bc:	88 83       	st	Y, r24
    18be:	39 c0       	rjmp	.+114    	; 0x1932 <malloc+0x124>
    18c0:	80 91 7c 05 	lds	r24, 0x057C
    18c4:	90 91 7d 05 	lds	r25, 0x057D
    18c8:	00 97       	sbiw	r24, 0x00	; 0
    18ca:	41 f4       	brne	.+16     	; 0x18dc <malloc+0xce>
    18cc:	80 91 40 04 	lds	r24, 0x0440
    18d0:	90 91 41 04 	lds	r25, 0x0441
    18d4:	90 93 7d 05 	sts	0x057D, r25
    18d8:	80 93 7c 05 	sts	0x057C, r24
    18dc:	20 91 3e 04 	lds	r18, 0x043E
    18e0:	30 91 3f 04 	lds	r19, 0x043F
    18e4:	21 15       	cp	r18, r1
    18e6:	31 05       	cpc	r19, r1
    18e8:	41 f4       	brne	.+16     	; 0x18fa <malloc+0xec>
    18ea:	2d b7       	in	r18, 0x3d	; 61
    18ec:	3e b7       	in	r19, 0x3e	; 62
    18ee:	80 91 42 04 	lds	r24, 0x0442
    18f2:	90 91 43 04 	lds	r25, 0x0443
    18f6:	28 1b       	sub	r18, r24
    18f8:	39 0b       	sbc	r19, r25
    18fa:	e0 91 7c 05 	lds	r30, 0x057C
    18fe:	f0 91 7d 05 	lds	r31, 0x057D
    1902:	e2 17       	cp	r30, r18
    1904:	f3 07       	cpc	r31, r19
    1906:	98 f4       	brcc	.+38     	; 0x192e <malloc+0x120>
    1908:	2e 1b       	sub	r18, r30
    190a:	3f 0b       	sbc	r19, r31
    190c:	24 17       	cp	r18, r20
    190e:	35 07       	cpc	r19, r21
    1910:	70 f0       	brcs	.+28     	; 0x192e <malloc+0x120>
    1912:	ca 01       	movw	r24, r20
    1914:	02 96       	adiw	r24, 0x02	; 2
    1916:	28 17       	cp	r18, r24
    1918:	39 07       	cpc	r19, r25
    191a:	48 f0       	brcs	.+18     	; 0x192e <malloc+0x120>
    191c:	8e 0f       	add	r24, r30
    191e:	9f 1f       	adc	r25, r31
    1920:	90 93 7d 05 	sts	0x057D, r25
    1924:	80 93 7c 05 	sts	0x057C, r24
    1928:	41 93       	st	Z+, r20
    192a:	51 93       	st	Z+, r21
    192c:	02 c0       	rjmp	.+4      	; 0x1932 <malloc+0x124>
    192e:	e0 e0       	ldi	r30, 0x00	; 0
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	cf 01       	movw	r24, r30
    1934:	df 91       	pop	r29
    1936:	cf 91       	pop	r28
    1938:	08 95       	ret

0000193a <free>:
    193a:	0f 93       	push	r16
    193c:	1f 93       	push	r17
    193e:	cf 93       	push	r28
    1940:	df 93       	push	r29
    1942:	9c 01       	movw	r18, r24
    1944:	00 97       	sbiw	r24, 0x00	; 0
    1946:	09 f4       	brne	.+2      	; 0x194a <free+0x10>
    1948:	8c c0       	rjmp	.+280    	; 0x1a62 <free+0x128>
    194a:	dc 01       	movw	r26, r24
    194c:	12 97       	sbiw	r26, 0x02	; 2
    194e:	13 96       	adiw	r26, 0x03	; 3
    1950:	1c 92       	st	X, r1
    1952:	1e 92       	st	-X, r1
    1954:	12 97       	sbiw	r26, 0x02	; 2
    1956:	60 91 7e 05 	lds	r22, 0x057E
    195a:	70 91 7f 05 	lds	r23, 0x057F
    195e:	61 15       	cp	r22, r1
    1960:	71 05       	cpc	r23, r1
    1962:	89 f4       	brne	.+34     	; 0x1986 <free+0x4c>
    1964:	8d 91       	ld	r24, X+
    1966:	9c 91       	ld	r25, X
    1968:	11 97       	sbiw	r26, 0x01	; 1
    196a:	82 0f       	add	r24, r18
    196c:	93 1f       	adc	r25, r19
    196e:	20 91 7c 05 	lds	r18, 0x057C
    1972:	30 91 7d 05 	lds	r19, 0x057D
    1976:	28 17       	cp	r18, r24
    1978:	39 07       	cpc	r19, r25
    197a:	69 f5       	brne	.+90     	; 0x19d6 <free+0x9c>
    197c:	b0 93 7d 05 	sts	0x057D, r27
    1980:	a0 93 7c 05 	sts	0x057C, r26
    1984:	6e c0       	rjmp	.+220    	; 0x1a62 <free+0x128>
    1986:	fb 01       	movw	r30, r22
    1988:	40 e0       	ldi	r20, 0x00	; 0
    198a:	50 e0       	ldi	r21, 0x00	; 0
    198c:	01 c0       	rjmp	.+2      	; 0x1990 <free+0x56>
    198e:	fc 01       	movw	r30, r24
    1990:	ea 17       	cp	r30, r26
    1992:	fb 07       	cpc	r31, r27
    1994:	30 f4       	brcc	.+12     	; 0x19a2 <free+0x68>
    1996:	82 81       	ldd	r24, Z+2	; 0x02
    1998:	93 81       	ldd	r25, Z+3	; 0x03
    199a:	af 01       	movw	r20, r30
    199c:	00 97       	sbiw	r24, 0x00	; 0
    199e:	b9 f7       	brne	.-18     	; 0x198e <free+0x54>
    19a0:	1f c0       	rjmp	.+62     	; 0x19e0 <free+0xa6>
    19a2:	e9 01       	movw	r28, r18
    19a4:	22 97       	sbiw	r28, 0x02	; 2
    19a6:	fb 83       	std	Y+3, r31	; 0x03
    19a8:	ea 83       	std	Y+2, r30	; 0x02
    19aa:	08 81       	ld	r16, Y
    19ac:	19 81       	ldd	r17, Y+1	; 0x01
    19ae:	c9 01       	movw	r24, r18
    19b0:	80 0f       	add	r24, r16
    19b2:	91 1f       	adc	r25, r17
    19b4:	8e 17       	cp	r24, r30
    19b6:	9f 07       	cpc	r25, r31
    19b8:	59 f4       	brne	.+22     	; 0x19d0 <free+0x96>
    19ba:	80 81       	ld	r24, Z
    19bc:	91 81       	ldd	r25, Z+1	; 0x01
    19be:	80 0f       	add	r24, r16
    19c0:	91 1f       	adc	r25, r17
    19c2:	02 96       	adiw	r24, 0x02	; 2
    19c4:	99 83       	std	Y+1, r25	; 0x01
    19c6:	88 83       	st	Y, r24
    19c8:	82 81       	ldd	r24, Z+2	; 0x02
    19ca:	93 81       	ldd	r25, Z+3	; 0x03
    19cc:	9b 83       	std	Y+3, r25	; 0x03
    19ce:	8a 83       	std	Y+2, r24	; 0x02
    19d0:	41 15       	cp	r20, r1
    19d2:	51 05       	cpc	r21, r1
    19d4:	29 f4       	brne	.+10     	; 0x19e0 <free+0xa6>
    19d6:	b0 93 7f 05 	sts	0x057F, r27
    19da:	a0 93 7e 05 	sts	0x057E, r26
    19de:	41 c0       	rjmp	.+130    	; 0x1a62 <free+0x128>
    19e0:	fa 01       	movw	r30, r20
    19e2:	b3 83       	std	Z+3, r27	; 0x03
    19e4:	a2 83       	std	Z+2, r26	; 0x02
    19e6:	c1 91       	ld	r28, Z+
    19e8:	d1 91       	ld	r29, Z+
    19ea:	ec 0f       	add	r30, r28
    19ec:	fd 1f       	adc	r31, r29
    19ee:	ae 17       	cp	r26, r30
    19f0:	bf 07       	cpc	r27, r31
    19f2:	81 f4       	brne	.+32     	; 0x1a14 <free+0xda>
    19f4:	f9 01       	movw	r30, r18
    19f6:	92 91       	ld	r25, -Z
    19f8:	82 91       	ld	r24, -Z
    19fa:	8c 0f       	add	r24, r28
    19fc:	9d 1f       	adc	r25, r29
    19fe:	02 96       	adiw	r24, 0x02	; 2
    1a00:	da 01       	movw	r26, r20
    1a02:	11 96       	adiw	r26, 0x01	; 1
    1a04:	9c 93       	st	X, r25
    1a06:	8e 93       	st	-X, r24
    1a08:	82 81       	ldd	r24, Z+2	; 0x02
    1a0a:	93 81       	ldd	r25, Z+3	; 0x03
    1a0c:	13 96       	adiw	r26, 0x03	; 3
    1a0e:	9c 93       	st	X, r25
    1a10:	8e 93       	st	-X, r24
    1a12:	12 97       	sbiw	r26, 0x02	; 2
    1a14:	e0 e0       	ldi	r30, 0x00	; 0
    1a16:	f0 e0       	ldi	r31, 0x00	; 0
    1a18:	02 c0       	rjmp	.+4      	; 0x1a1e <free+0xe4>
    1a1a:	fb 01       	movw	r30, r22
    1a1c:	bc 01       	movw	r22, r24
    1a1e:	db 01       	movw	r26, r22
    1a20:	12 96       	adiw	r26, 0x02	; 2
    1a22:	8d 91       	ld	r24, X+
    1a24:	9c 91       	ld	r25, X
    1a26:	13 97       	sbiw	r26, 0x03	; 3
    1a28:	00 97       	sbiw	r24, 0x00	; 0
    1a2a:	b9 f7       	brne	.-18     	; 0x1a1a <free+0xe0>
    1a2c:	cb 01       	movw	r24, r22
    1a2e:	02 96       	adiw	r24, 0x02	; 2
    1a30:	2d 91       	ld	r18, X+
    1a32:	3c 91       	ld	r19, X
    1a34:	11 97       	sbiw	r26, 0x01	; 1
    1a36:	82 0f       	add	r24, r18
    1a38:	93 1f       	adc	r25, r19
    1a3a:	20 91 7c 05 	lds	r18, 0x057C
    1a3e:	30 91 7d 05 	lds	r19, 0x057D
    1a42:	28 17       	cp	r18, r24
    1a44:	39 07       	cpc	r19, r25
    1a46:	69 f4       	brne	.+26     	; 0x1a62 <free+0x128>
    1a48:	30 97       	sbiw	r30, 0x00	; 0
    1a4a:	29 f4       	brne	.+10     	; 0x1a56 <free+0x11c>
    1a4c:	10 92 7f 05 	sts	0x057F, r1
    1a50:	10 92 7e 05 	sts	0x057E, r1
    1a54:	02 c0       	rjmp	.+4      	; 0x1a5a <free+0x120>
    1a56:	13 82       	std	Z+3, r1	; 0x03
    1a58:	12 82       	std	Z+2, r1	; 0x02
    1a5a:	70 93 7d 05 	sts	0x057D, r23
    1a5e:	60 93 7c 05 	sts	0x057C, r22
    1a62:	df 91       	pop	r29
    1a64:	cf 91       	pop	r28
    1a66:	1f 91       	pop	r17
    1a68:	0f 91       	pop	r16
    1a6a:	08 95       	ret

00001a6c <atoi>:
    1a6c:	fc 01       	movw	r30, r24
    1a6e:	88 27       	eor	r24, r24
    1a70:	99 27       	eor	r25, r25
    1a72:	e8 94       	clt
    1a74:	21 91       	ld	r18, Z+
    1a76:	20 32       	cpi	r18, 0x20	; 32
    1a78:	e9 f3       	breq	.-6      	; 0x1a74 <atoi+0x8>
    1a7a:	29 30       	cpi	r18, 0x09	; 9
    1a7c:	10 f0       	brcs	.+4      	; 0x1a82 <atoi+0x16>
    1a7e:	2e 30       	cpi	r18, 0x0E	; 14
    1a80:	c8 f3       	brcs	.-14     	; 0x1a74 <atoi+0x8>
    1a82:	2b 32       	cpi	r18, 0x2B	; 43
    1a84:	41 f0       	breq	.+16     	; 0x1a96 <atoi+0x2a>
    1a86:	2d 32       	cpi	r18, 0x2D	; 45
    1a88:	39 f4       	brne	.+14     	; 0x1a98 <atoi+0x2c>
    1a8a:	68 94       	set
    1a8c:	04 c0       	rjmp	.+8      	; 0x1a96 <atoi+0x2a>
    1a8e:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <__mulhi_const_10>
    1a92:	82 0f       	add	r24, r18
    1a94:	91 1d       	adc	r25, r1
    1a96:	21 91       	ld	r18, Z+
    1a98:	20 53       	subi	r18, 0x30	; 48
    1a9a:	2a 30       	cpi	r18, 0x0A	; 10
    1a9c:	c0 f3       	brcs	.-16     	; 0x1a8e <atoi+0x22>
    1a9e:	1e f4       	brtc	.+6      	; 0x1aa6 <atoi+0x3a>
    1aa0:	90 95       	com	r25
    1aa2:	81 95       	neg	r24
    1aa4:	9f 4f       	sbci	r25, 0xFF	; 255
    1aa6:	08 95       	ret

00001aa8 <strtok>:
    1aa8:	4d e4       	ldi	r20, 0x4D	; 77
    1aaa:	54 e0       	ldi	r21, 0x04	; 4
    1aac:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <strtok_r>
    1ab0:	08 95       	ret

00001ab2 <strcmp>:
    1ab2:	fb 01       	movw	r30, r22
    1ab4:	dc 01       	movw	r26, r24
    1ab6:	8d 91       	ld	r24, X+
    1ab8:	01 90       	ld	r0, Z+
    1aba:	80 19       	sub	r24, r0
    1abc:	01 10       	cpse	r0, r1
    1abe:	d9 f3       	breq	.-10     	; 0x1ab6 <strcmp+0x4>
    1ac0:	99 0b       	sbc	r25, r25
    1ac2:	08 95       	ret

00001ac4 <strcpy>:
    1ac4:	fb 01       	movw	r30, r22
    1ac6:	dc 01       	movw	r26, r24
    1ac8:	01 90       	ld	r0, Z+
    1aca:	0d 92       	st	X+, r0
    1acc:	00 20       	and	r0, r0
    1ace:	e1 f7       	brne	.-8      	; 0x1ac8 <strcpy+0x4>
    1ad0:	08 95       	ret

00001ad2 <strtok_r>:
    1ad2:	fa 01       	movw	r30, r20
    1ad4:	a1 91       	ld	r26, Z+
    1ad6:	b0 81       	ld	r27, Z
    1ad8:	00 97       	sbiw	r24, 0x00	; 0
    1ada:	19 f4       	brne	.+6      	; 0x1ae2 <strtok_r+0x10>
    1adc:	10 97       	sbiw	r26, 0x00	; 0
    1ade:	e1 f0       	breq	.+56     	; 0x1b18 <strtok_r+0x46>
    1ae0:	cd 01       	movw	r24, r26
    1ae2:	dc 01       	movw	r26, r24
    1ae4:	cd 01       	movw	r24, r26
    1ae6:	0d 90       	ld	r0, X+
    1ae8:	00 20       	and	r0, r0
    1aea:	11 f4       	brne	.+4      	; 0x1af0 <strtok_r+0x1e>
    1aec:	c0 01       	movw	r24, r0
    1aee:	13 c0       	rjmp	.+38     	; 0x1b16 <strtok_r+0x44>
    1af0:	fb 01       	movw	r30, r22
    1af2:	21 91       	ld	r18, Z+
    1af4:	22 23       	and	r18, r18
    1af6:	19 f0       	breq	.+6      	; 0x1afe <strtok_r+0x2c>
    1af8:	20 15       	cp	r18, r0
    1afa:	d9 f7       	brne	.-10     	; 0x1af2 <strtok_r+0x20>
    1afc:	f3 cf       	rjmp	.-26     	; 0x1ae4 <strtok_r+0x12>
    1afe:	fb 01       	movw	r30, r22
    1b00:	21 91       	ld	r18, Z+
    1b02:	20 15       	cp	r18, r0
    1b04:	19 f4       	brne	.+6      	; 0x1b0c <strtok_r+0x3a>
    1b06:	1e 92       	st	-X, r1
    1b08:	11 96       	adiw	r26, 0x01	; 1
    1b0a:	06 c0       	rjmp	.+12     	; 0x1b18 <strtok_r+0x46>
    1b0c:	22 23       	and	r18, r18
    1b0e:	c1 f7       	brne	.-16     	; 0x1b00 <strtok_r+0x2e>
    1b10:	0d 90       	ld	r0, X+
    1b12:	00 20       	and	r0, r0
    1b14:	a1 f7       	brne	.-24     	; 0x1afe <strtok_r+0x2c>
    1b16:	d0 01       	movw	r26, r0
    1b18:	fa 01       	movw	r30, r20
    1b1a:	a1 93       	st	Z+, r26
    1b1c:	b0 83       	st	Z, r27
    1b1e:	08 95       	ret

00001b20 <__mulhi_const_10>:
    1b20:	7a e0       	ldi	r23, 0x0A	; 10
    1b22:	97 9f       	mul	r25, r23
    1b24:	90 2d       	mov	r25, r0
    1b26:	87 9f       	mul	r24, r23
    1b28:	80 2d       	mov	r24, r0
    1b2a:	91 0d       	add	r25, r1
    1b2c:	11 24       	eor	r1, r1
    1b2e:	08 95       	ret

00001b30 <fgets>:
    1b30:	cf 92       	push	r12
    1b32:	df 92       	push	r13
    1b34:	ef 92       	push	r14
    1b36:	ff 92       	push	r15
    1b38:	0f 93       	push	r16
    1b3a:	1f 93       	push	r17
    1b3c:	cf 93       	push	r28
    1b3e:	df 93       	push	r29
    1b40:	8c 01       	movw	r16, r24
    1b42:	6a 01       	movw	r12, r20
    1b44:	fa 01       	movw	r30, r20
    1b46:	83 81       	ldd	r24, Z+3	; 0x03
    1b48:	80 ff       	sbrs	r24, 0
    1b4a:	1a c0       	rjmp	.+52     	; 0x1b80 <fgets+0x50>
    1b4c:	16 16       	cp	r1, r22
    1b4e:	17 06       	cpc	r1, r23
    1b50:	bc f4       	brge	.+46     	; 0x1b80 <fgets+0x50>
    1b52:	7b 01       	movw	r14, r22
    1b54:	e8 01       	movw	r28, r16
    1b56:	0e c0       	rjmp	.+28     	; 0x1b74 <fgets+0x44>
    1b58:	c6 01       	movw	r24, r12
    1b5a:	0e 94 85 10 	call	0x210a	; 0x210a <fgetc>
    1b5e:	ff ef       	ldi	r31, 0xFF	; 255
    1b60:	8f 3f       	cpi	r24, 0xFF	; 255
    1b62:	9f 07       	cpc	r25, r31
    1b64:	69 f0       	breq	.+26     	; 0x1b80 <fgets+0x50>
    1b66:	89 93       	st	Y+, r24
    1b68:	08 94       	sec
    1b6a:	e1 08       	sbc	r14, r1
    1b6c:	f1 08       	sbc	r15, r1
    1b6e:	8a 30       	cpi	r24, 0x0A	; 10
    1b70:	91 05       	cpc	r25, r1
    1b72:	21 f0       	breq	.+8      	; 0x1b7c <fgets+0x4c>
    1b74:	21 e0       	ldi	r18, 0x01	; 1
    1b76:	e2 16       	cp	r14, r18
    1b78:	f1 04       	cpc	r15, r1
    1b7a:	71 f7       	brne	.-36     	; 0x1b58 <fgets+0x28>
    1b7c:	18 82       	st	Y, r1
    1b7e:	02 c0       	rjmp	.+4      	; 0x1b84 <fgets+0x54>
    1b80:	00 e0       	ldi	r16, 0x00	; 0
    1b82:	10 e0       	ldi	r17, 0x00	; 0
    1b84:	c8 01       	movw	r24, r16
    1b86:	df 91       	pop	r29
    1b88:	cf 91       	pop	r28
    1b8a:	1f 91       	pop	r17
    1b8c:	0f 91       	pop	r16
    1b8e:	ff 90       	pop	r15
    1b90:	ef 90       	pop	r14
    1b92:	df 90       	pop	r13
    1b94:	cf 90       	pop	r12
    1b96:	08 95       	ret

00001b98 <gets>:
    1b98:	0f 93       	push	r16
    1b9a:	1f 93       	push	r17
    1b9c:	cf 93       	push	r28
    1b9e:	df 93       	push	r29
    1ba0:	8c 01       	movw	r16, r24
    1ba2:	e0 91 80 05 	lds	r30, 0x0580
    1ba6:	f0 91 81 05 	lds	r31, 0x0581
    1baa:	83 81       	ldd	r24, Z+3	; 0x03
    1bac:	80 ff       	sbrs	r24, 0
    1bae:	12 c0       	rjmp	.+36     	; 0x1bd4 <gets+0x3c>
    1bb0:	e8 01       	movw	r28, r16
    1bb2:	80 91 80 05 	lds	r24, 0x0580
    1bb6:	90 91 81 05 	lds	r25, 0x0581
    1bba:	0e 94 85 10 	call	0x210a	; 0x210a <fgetc>
    1bbe:	2f ef       	ldi	r18, 0xFF	; 255
    1bc0:	8f 3f       	cpi	r24, 0xFF	; 255
    1bc2:	92 07       	cpc	r25, r18
    1bc4:	39 f0       	breq	.+14     	; 0x1bd4 <gets+0x3c>
    1bc6:	89 93       	st	Y+, r24
    1bc8:	8a 30       	cpi	r24, 0x0A	; 10
    1bca:	91 05       	cpc	r25, r1
    1bcc:	91 f7       	brne	.-28     	; 0x1bb2 <gets+0x1a>
    1bce:	21 97       	sbiw	r28, 0x01	; 1
    1bd0:	18 82       	st	Y, r1
    1bd2:	02 c0       	rjmp	.+4      	; 0x1bd8 <gets+0x40>
    1bd4:	00 e0       	ldi	r16, 0x00	; 0
    1bd6:	10 e0       	ldi	r17, 0x00	; 0
    1bd8:	c8 01       	movw	r24, r16
    1bda:	df 91       	pop	r29
    1bdc:	cf 91       	pop	r28
    1bde:	1f 91       	pop	r17
    1be0:	0f 91       	pop	r16
    1be2:	08 95       	ret

00001be4 <printf>:
    1be4:	cf 93       	push	r28
    1be6:	df 93       	push	r29
    1be8:	cd b7       	in	r28, 0x3d	; 61
    1bea:	de b7       	in	r29, 0x3e	; 62
    1bec:	fe 01       	movw	r30, r28
    1bee:	36 96       	adiw	r30, 0x06	; 6
    1bf0:	61 91       	ld	r22, Z+
    1bf2:	71 91       	ld	r23, Z+
    1bf4:	80 91 82 05 	lds	r24, 0x0582
    1bf8:	90 91 83 05 	lds	r25, 0x0583
    1bfc:	af 01       	movw	r20, r30
    1bfe:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <vfprintf>
    1c02:	df 91       	pop	r29
    1c04:	cf 91       	pop	r28
    1c06:	08 95       	ret

00001c08 <putchar>:
    1c08:	60 91 82 05 	lds	r22, 0x0582
    1c0c:	70 91 83 05 	lds	r23, 0x0583
    1c10:	0e 94 c5 10 	call	0x218a	; 0x218a <fputc>
    1c14:	08 95       	ret

00001c16 <puts>:
    1c16:	0f 93       	push	r16
    1c18:	1f 93       	push	r17
    1c1a:	cf 93       	push	r28
    1c1c:	df 93       	push	r29
    1c1e:	8c 01       	movw	r16, r24
    1c20:	e0 91 82 05 	lds	r30, 0x0582
    1c24:	f0 91 83 05 	lds	r31, 0x0583
    1c28:	83 81       	ldd	r24, Z+3	; 0x03
    1c2a:	81 ff       	sbrs	r24, 1
    1c2c:	1a c0       	rjmp	.+52     	; 0x1c62 <puts+0x4c>
    1c2e:	c0 e0       	ldi	r28, 0x00	; 0
    1c30:	d0 e0       	ldi	r29, 0x00	; 0
    1c32:	05 c0       	rjmp	.+10     	; 0x1c3e <puts+0x28>
    1c34:	19 95       	eicall
    1c36:	00 97       	sbiw	r24, 0x00	; 0
    1c38:	11 f0       	breq	.+4      	; 0x1c3e <puts+0x28>
    1c3a:	cf ef       	ldi	r28, 0xFF	; 255
    1c3c:	df ef       	ldi	r29, 0xFF	; 255
    1c3e:	f8 01       	movw	r30, r16
    1c40:	81 91       	ld	r24, Z+
    1c42:	8f 01       	movw	r16, r30
    1c44:	60 91 82 05 	lds	r22, 0x0582
    1c48:	70 91 83 05 	lds	r23, 0x0583
    1c4c:	db 01       	movw	r26, r22
    1c4e:	18 96       	adiw	r26, 0x08	; 8
    1c50:	ed 91       	ld	r30, X+
    1c52:	fc 91       	ld	r31, X
    1c54:	19 97       	sbiw	r26, 0x09	; 9
    1c56:	88 23       	and	r24, r24
    1c58:	69 f7       	brne	.-38     	; 0x1c34 <puts+0x1e>
    1c5a:	8a e0       	ldi	r24, 0x0A	; 10
    1c5c:	19 95       	eicall
    1c5e:	00 97       	sbiw	r24, 0x00	; 0
    1c60:	11 f0       	breq	.+4      	; 0x1c66 <puts+0x50>
    1c62:	cf ef       	ldi	r28, 0xFF	; 255
    1c64:	df ef       	ldi	r29, 0xFF	; 255
    1c66:	ce 01       	movw	r24, r28
    1c68:	df 91       	pop	r29
    1c6a:	cf 91       	pop	r28
    1c6c:	1f 91       	pop	r17
    1c6e:	0f 91       	pop	r16
    1c70:	08 95       	ret

00001c72 <sprintf>:
    1c72:	0f 93       	push	r16
    1c74:	1f 93       	push	r17
    1c76:	cf 93       	push	r28
    1c78:	df 93       	push	r29
    1c7a:	cd b7       	in	r28, 0x3d	; 61
    1c7c:	de b7       	in	r29, 0x3e	; 62
    1c7e:	2e 97       	sbiw	r28, 0x0e	; 14
    1c80:	0f b6       	in	r0, 0x3f	; 63
    1c82:	f8 94       	cli
    1c84:	de bf       	out	0x3e, r29	; 62
    1c86:	0f be       	out	0x3f, r0	; 63
    1c88:	cd bf       	out	0x3d, r28	; 61
    1c8a:	0e 89       	ldd	r16, Y+22	; 0x16
    1c8c:	1f 89       	ldd	r17, Y+23	; 0x17
    1c8e:	86 e0       	ldi	r24, 0x06	; 6
    1c90:	8c 83       	std	Y+4, r24	; 0x04
    1c92:	1a 83       	std	Y+2, r17	; 0x02
    1c94:	09 83       	std	Y+1, r16	; 0x01
    1c96:	8f ef       	ldi	r24, 0xFF	; 255
    1c98:	9f e7       	ldi	r25, 0x7F	; 127
    1c9a:	9e 83       	std	Y+6, r25	; 0x06
    1c9c:	8d 83       	std	Y+5, r24	; 0x05
    1c9e:	ae 01       	movw	r20, r28
    1ca0:	46 5e       	subi	r20, 0xE6	; 230
    1ca2:	5f 4f       	sbci	r21, 0xFF	; 255
    1ca4:	ce 01       	movw	r24, r28
    1ca6:	01 96       	adiw	r24, 0x01	; 1
    1ca8:	68 8d       	ldd	r22, Y+24	; 0x18
    1caa:	79 8d       	ldd	r23, Y+25	; 0x19
    1cac:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <vfprintf>
    1cb0:	ef 81       	ldd	r30, Y+7	; 0x07
    1cb2:	f8 85       	ldd	r31, Y+8	; 0x08
    1cb4:	e0 0f       	add	r30, r16
    1cb6:	f1 1f       	adc	r31, r17
    1cb8:	10 82       	st	Z, r1
    1cba:	2e 96       	adiw	r28, 0x0e	; 14
    1cbc:	0f b6       	in	r0, 0x3f	; 63
    1cbe:	f8 94       	cli
    1cc0:	de bf       	out	0x3e, r29	; 62
    1cc2:	0f be       	out	0x3f, r0	; 63
    1cc4:	cd bf       	out	0x3d, r28	; 61
    1cc6:	df 91       	pop	r29
    1cc8:	cf 91       	pop	r28
    1cca:	1f 91       	pop	r17
    1ccc:	0f 91       	pop	r16
    1cce:	08 95       	ret

00001cd0 <vfprintf>:
    1cd0:	2f 92       	push	r2
    1cd2:	3f 92       	push	r3
    1cd4:	4f 92       	push	r4
    1cd6:	5f 92       	push	r5
    1cd8:	6f 92       	push	r6
    1cda:	7f 92       	push	r7
    1cdc:	8f 92       	push	r8
    1cde:	9f 92       	push	r9
    1ce0:	af 92       	push	r10
    1ce2:	bf 92       	push	r11
    1ce4:	cf 92       	push	r12
    1ce6:	df 92       	push	r13
    1ce8:	ef 92       	push	r14
    1cea:	ff 92       	push	r15
    1cec:	0f 93       	push	r16
    1cee:	1f 93       	push	r17
    1cf0:	cf 93       	push	r28
    1cf2:	df 93       	push	r29
    1cf4:	cd b7       	in	r28, 0x3d	; 61
    1cf6:	de b7       	in	r29, 0x3e	; 62
    1cf8:	2d 97       	sbiw	r28, 0x0d	; 13
    1cfa:	0f b6       	in	r0, 0x3f	; 63
    1cfc:	f8 94       	cli
    1cfe:	de bf       	out	0x3e, r29	; 62
    1d00:	0f be       	out	0x3f, r0	; 63
    1d02:	cd bf       	out	0x3d, r28	; 61
    1d04:	3c 01       	movw	r6, r24
    1d06:	7d 87       	std	Y+13, r23	; 0x0d
    1d08:	6c 87       	std	Y+12, r22	; 0x0c
    1d0a:	5a 01       	movw	r10, r20
    1d0c:	fc 01       	movw	r30, r24
    1d0e:	17 82       	std	Z+7, r1	; 0x07
    1d10:	16 82       	std	Z+6, r1	; 0x06
    1d12:	83 81       	ldd	r24, Z+3	; 0x03
    1d14:	81 ff       	sbrs	r24, 1
    1d16:	c8 c1       	rjmp	.+912    	; 0x20a8 <vfprintf+0x3d8>
    1d18:	2e 01       	movw	r4, r28
    1d1a:	08 94       	sec
    1d1c:	41 1c       	adc	r4, r1
    1d1e:	51 1c       	adc	r5, r1
    1d20:	f3 01       	movw	r30, r6
    1d22:	93 81       	ldd	r25, Z+3	; 0x03
    1d24:	ec 85       	ldd	r30, Y+12	; 0x0c
    1d26:	fd 85       	ldd	r31, Y+13	; 0x0d
    1d28:	93 fd       	sbrc	r25, 3
    1d2a:	85 91       	lpm	r24, Z+
    1d2c:	93 ff       	sbrs	r25, 3
    1d2e:	81 91       	ld	r24, Z+
    1d30:	fd 87       	std	Y+13, r31	; 0x0d
    1d32:	ec 87       	std	Y+12, r30	; 0x0c
    1d34:	88 23       	and	r24, r24
    1d36:	09 f4       	brne	.+2      	; 0x1d3a <vfprintf+0x6a>
    1d38:	b3 c1       	rjmp	.+870    	; 0x20a0 <vfprintf+0x3d0>
    1d3a:	85 32       	cpi	r24, 0x25	; 37
    1d3c:	41 f4       	brne	.+16     	; 0x1d4e <vfprintf+0x7e>
    1d3e:	93 fd       	sbrc	r25, 3
    1d40:	85 91       	lpm	r24, Z+
    1d42:	93 ff       	sbrs	r25, 3
    1d44:	81 91       	ld	r24, Z+
    1d46:	fd 87       	std	Y+13, r31	; 0x0d
    1d48:	ec 87       	std	Y+12, r30	; 0x0c
    1d4a:	85 32       	cpi	r24, 0x25	; 37
    1d4c:	29 f4       	brne	.+10     	; 0x1d58 <vfprintf+0x88>
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	b3 01       	movw	r22, r6
    1d52:	0e 94 c5 10 	call	0x218a	; 0x218a <fputc>
    1d56:	e4 cf       	rjmp	.-56     	; 0x1d20 <vfprintf+0x50>
    1d58:	ff 24       	eor	r15, r15
    1d5a:	ee 24       	eor	r14, r14
    1d5c:	10 e0       	ldi	r17, 0x00	; 0
    1d5e:	10 32       	cpi	r17, 0x20	; 32
    1d60:	b0 f4       	brcc	.+44     	; 0x1d8e <vfprintf+0xbe>
    1d62:	8b 32       	cpi	r24, 0x2B	; 43
    1d64:	69 f0       	breq	.+26     	; 0x1d80 <vfprintf+0xb0>
    1d66:	8c 32       	cpi	r24, 0x2C	; 44
    1d68:	28 f4       	brcc	.+10     	; 0x1d74 <vfprintf+0xa4>
    1d6a:	80 32       	cpi	r24, 0x20	; 32
    1d6c:	51 f0       	breq	.+20     	; 0x1d82 <vfprintf+0xb2>
    1d6e:	83 32       	cpi	r24, 0x23	; 35
    1d70:	71 f4       	brne	.+28     	; 0x1d8e <vfprintf+0xbe>
    1d72:	0b c0       	rjmp	.+22     	; 0x1d8a <vfprintf+0xba>
    1d74:	8d 32       	cpi	r24, 0x2D	; 45
    1d76:	39 f0       	breq	.+14     	; 0x1d86 <vfprintf+0xb6>
    1d78:	80 33       	cpi	r24, 0x30	; 48
    1d7a:	49 f4       	brne	.+18     	; 0x1d8e <vfprintf+0xbe>
    1d7c:	11 60       	ori	r17, 0x01	; 1
    1d7e:	2c c0       	rjmp	.+88     	; 0x1dd8 <vfprintf+0x108>
    1d80:	12 60       	ori	r17, 0x02	; 2
    1d82:	14 60       	ori	r17, 0x04	; 4
    1d84:	29 c0       	rjmp	.+82     	; 0x1dd8 <vfprintf+0x108>
    1d86:	18 60       	ori	r17, 0x08	; 8
    1d88:	27 c0       	rjmp	.+78     	; 0x1dd8 <vfprintf+0x108>
    1d8a:	10 61       	ori	r17, 0x10	; 16
    1d8c:	25 c0       	rjmp	.+74     	; 0x1dd8 <vfprintf+0x108>
    1d8e:	17 fd       	sbrc	r17, 7
    1d90:	2e c0       	rjmp	.+92     	; 0x1dee <vfprintf+0x11e>
    1d92:	28 2f       	mov	r18, r24
    1d94:	20 53       	subi	r18, 0x30	; 48
    1d96:	2a 30       	cpi	r18, 0x0A	; 10
    1d98:	98 f4       	brcc	.+38     	; 0x1dc0 <vfprintf+0xf0>
    1d9a:	16 ff       	sbrs	r17, 6
    1d9c:	08 c0       	rjmp	.+16     	; 0x1dae <vfprintf+0xde>
    1d9e:	8f 2d       	mov	r24, r15
    1da0:	88 0f       	add	r24, r24
    1da2:	f8 2e       	mov	r15, r24
    1da4:	ff 0c       	add	r15, r15
    1da6:	ff 0c       	add	r15, r15
    1da8:	f8 0e       	add	r15, r24
    1daa:	f2 0e       	add	r15, r18
    1dac:	15 c0       	rjmp	.+42     	; 0x1dd8 <vfprintf+0x108>
    1dae:	8e 2d       	mov	r24, r14
    1db0:	88 0f       	add	r24, r24
    1db2:	e8 2e       	mov	r14, r24
    1db4:	ee 0c       	add	r14, r14
    1db6:	ee 0c       	add	r14, r14
    1db8:	e8 0e       	add	r14, r24
    1dba:	e2 0e       	add	r14, r18
    1dbc:	10 62       	ori	r17, 0x20	; 32
    1dbe:	0c c0       	rjmp	.+24     	; 0x1dd8 <vfprintf+0x108>
    1dc0:	8e 32       	cpi	r24, 0x2E	; 46
    1dc2:	21 f4       	brne	.+8      	; 0x1dcc <vfprintf+0xfc>
    1dc4:	16 fd       	sbrc	r17, 6
    1dc6:	6c c1       	rjmp	.+728    	; 0x20a0 <vfprintf+0x3d0>
    1dc8:	10 64       	ori	r17, 0x40	; 64
    1dca:	06 c0       	rjmp	.+12     	; 0x1dd8 <vfprintf+0x108>
    1dcc:	8c 36       	cpi	r24, 0x6C	; 108
    1dce:	11 f4       	brne	.+4      	; 0x1dd4 <vfprintf+0x104>
    1dd0:	10 68       	ori	r17, 0x80	; 128
    1dd2:	02 c0       	rjmp	.+4      	; 0x1dd8 <vfprintf+0x108>
    1dd4:	88 36       	cpi	r24, 0x68	; 104
    1dd6:	59 f4       	brne	.+22     	; 0x1dee <vfprintf+0x11e>
    1dd8:	ec 85       	ldd	r30, Y+12	; 0x0c
    1dda:	fd 85       	ldd	r31, Y+13	; 0x0d
    1ddc:	93 fd       	sbrc	r25, 3
    1dde:	85 91       	lpm	r24, Z+
    1de0:	93 ff       	sbrs	r25, 3
    1de2:	81 91       	ld	r24, Z+
    1de4:	fd 87       	std	Y+13, r31	; 0x0d
    1de6:	ec 87       	std	Y+12, r30	; 0x0c
    1de8:	88 23       	and	r24, r24
    1dea:	09 f0       	breq	.+2      	; 0x1dee <vfprintf+0x11e>
    1dec:	b8 cf       	rjmp	.-144    	; 0x1d5e <vfprintf+0x8e>
    1dee:	98 2f       	mov	r25, r24
    1df0:	95 54       	subi	r25, 0x45	; 69
    1df2:	93 30       	cpi	r25, 0x03	; 3
    1df4:	18 f0       	brcs	.+6      	; 0x1dfc <vfprintf+0x12c>
    1df6:	90 52       	subi	r25, 0x20	; 32
    1df8:	93 30       	cpi	r25, 0x03	; 3
    1dfa:	38 f4       	brcc	.+14     	; 0x1e0a <vfprintf+0x13a>
    1dfc:	24 e0       	ldi	r18, 0x04	; 4
    1dfe:	30 e0       	ldi	r19, 0x00	; 0
    1e00:	a2 0e       	add	r10, r18
    1e02:	b3 1e       	adc	r11, r19
    1e04:	3f e3       	ldi	r19, 0x3F	; 63
    1e06:	39 83       	std	Y+1, r19	; 0x01
    1e08:	0f c0       	rjmp	.+30     	; 0x1e28 <vfprintf+0x158>
    1e0a:	83 36       	cpi	r24, 0x63	; 99
    1e0c:	31 f0       	breq	.+12     	; 0x1e1a <vfprintf+0x14a>
    1e0e:	83 37       	cpi	r24, 0x73	; 115
    1e10:	81 f0       	breq	.+32     	; 0x1e32 <vfprintf+0x162>
    1e12:	83 35       	cpi	r24, 0x53	; 83
    1e14:	09 f0       	breq	.+2      	; 0x1e18 <vfprintf+0x148>
    1e16:	5a c0       	rjmp	.+180    	; 0x1ecc <vfprintf+0x1fc>
    1e18:	22 c0       	rjmp	.+68     	; 0x1e5e <vfprintf+0x18e>
    1e1a:	f5 01       	movw	r30, r10
    1e1c:	80 81       	ld	r24, Z
    1e1e:	89 83       	std	Y+1, r24	; 0x01
    1e20:	22 e0       	ldi	r18, 0x02	; 2
    1e22:	30 e0       	ldi	r19, 0x00	; 0
    1e24:	a2 0e       	add	r10, r18
    1e26:	b3 1e       	adc	r11, r19
    1e28:	21 e0       	ldi	r18, 0x01	; 1
    1e2a:	c2 2e       	mov	r12, r18
    1e2c:	d1 2c       	mov	r13, r1
    1e2e:	42 01       	movw	r8, r4
    1e30:	14 c0       	rjmp	.+40     	; 0x1e5a <vfprintf+0x18a>
    1e32:	92 e0       	ldi	r25, 0x02	; 2
    1e34:	29 2e       	mov	r2, r25
    1e36:	31 2c       	mov	r3, r1
    1e38:	2a 0c       	add	r2, r10
    1e3a:	3b 1c       	adc	r3, r11
    1e3c:	f5 01       	movw	r30, r10
    1e3e:	80 80       	ld	r8, Z
    1e40:	91 80       	ldd	r9, Z+1	; 0x01
    1e42:	16 ff       	sbrs	r17, 6
    1e44:	03 c0       	rjmp	.+6      	; 0x1e4c <vfprintf+0x17c>
    1e46:	6f 2d       	mov	r22, r15
    1e48:	70 e0       	ldi	r23, 0x00	; 0
    1e4a:	02 c0       	rjmp	.+4      	; 0x1e50 <vfprintf+0x180>
    1e4c:	6f ef       	ldi	r22, 0xFF	; 255
    1e4e:	7f ef       	ldi	r23, 0xFF	; 255
    1e50:	c4 01       	movw	r24, r8
    1e52:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <strnlen>
    1e56:	6c 01       	movw	r12, r24
    1e58:	51 01       	movw	r10, r2
    1e5a:	1f 77       	andi	r17, 0x7F	; 127
    1e5c:	15 c0       	rjmp	.+42     	; 0x1e88 <vfprintf+0x1b8>
    1e5e:	82 e0       	ldi	r24, 0x02	; 2
    1e60:	28 2e       	mov	r2, r24
    1e62:	31 2c       	mov	r3, r1
    1e64:	2a 0c       	add	r2, r10
    1e66:	3b 1c       	adc	r3, r11
    1e68:	f5 01       	movw	r30, r10
    1e6a:	80 80       	ld	r8, Z
    1e6c:	91 80       	ldd	r9, Z+1	; 0x01
    1e6e:	16 ff       	sbrs	r17, 6
    1e70:	03 c0       	rjmp	.+6      	; 0x1e78 <vfprintf+0x1a8>
    1e72:	6f 2d       	mov	r22, r15
    1e74:	70 e0       	ldi	r23, 0x00	; 0
    1e76:	02 c0       	rjmp	.+4      	; 0x1e7c <vfprintf+0x1ac>
    1e78:	6f ef       	ldi	r22, 0xFF	; 255
    1e7a:	7f ef       	ldi	r23, 0xFF	; 255
    1e7c:	c4 01       	movw	r24, r8
    1e7e:	0e 94 6f 10 	call	0x20de	; 0x20de <strnlen_P>
    1e82:	6c 01       	movw	r12, r24
    1e84:	10 68       	ori	r17, 0x80	; 128
    1e86:	51 01       	movw	r10, r2
    1e88:	13 fd       	sbrc	r17, 3
    1e8a:	1c c0       	rjmp	.+56     	; 0x1ec4 <vfprintf+0x1f4>
    1e8c:	06 c0       	rjmp	.+12     	; 0x1e9a <vfprintf+0x1ca>
    1e8e:	80 e2       	ldi	r24, 0x20	; 32
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	b3 01       	movw	r22, r6
    1e94:	0e 94 c5 10 	call	0x218a	; 0x218a <fputc>
    1e98:	ea 94       	dec	r14
    1e9a:	8e 2d       	mov	r24, r14
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	c8 16       	cp	r12, r24
    1ea0:	d9 06       	cpc	r13, r25
    1ea2:	a8 f3       	brcs	.-22     	; 0x1e8e <vfprintf+0x1be>
    1ea4:	0f c0       	rjmp	.+30     	; 0x1ec4 <vfprintf+0x1f4>
    1ea6:	f4 01       	movw	r30, r8
    1ea8:	17 fd       	sbrc	r17, 7
    1eaa:	85 91       	lpm	r24, Z+
    1eac:	17 ff       	sbrs	r17, 7
    1eae:	81 91       	ld	r24, Z+
    1eb0:	4f 01       	movw	r8, r30
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	b3 01       	movw	r22, r6
    1eb6:	0e 94 c5 10 	call	0x218a	; 0x218a <fputc>
    1eba:	e1 10       	cpse	r14, r1
    1ebc:	ea 94       	dec	r14
    1ebe:	08 94       	sec
    1ec0:	c1 08       	sbc	r12, r1
    1ec2:	d1 08       	sbc	r13, r1
    1ec4:	c1 14       	cp	r12, r1
    1ec6:	d1 04       	cpc	r13, r1
    1ec8:	71 f7       	brne	.-36     	; 0x1ea6 <vfprintf+0x1d6>
    1eca:	e7 c0       	rjmp	.+462    	; 0x209a <vfprintf+0x3ca>
    1ecc:	84 36       	cpi	r24, 0x64	; 100
    1ece:	11 f0       	breq	.+4      	; 0x1ed4 <vfprintf+0x204>
    1ed0:	89 36       	cpi	r24, 0x69	; 105
    1ed2:	51 f5       	brne	.+84     	; 0x1f28 <vfprintf+0x258>
    1ed4:	f5 01       	movw	r30, r10
    1ed6:	17 ff       	sbrs	r17, 7
    1ed8:	07 c0       	rjmp	.+14     	; 0x1ee8 <vfprintf+0x218>
    1eda:	80 81       	ld	r24, Z
    1edc:	91 81       	ldd	r25, Z+1	; 0x01
    1ede:	a2 81       	ldd	r26, Z+2	; 0x02
    1ee0:	b3 81       	ldd	r27, Z+3	; 0x03
    1ee2:	24 e0       	ldi	r18, 0x04	; 4
    1ee4:	30 e0       	ldi	r19, 0x00	; 0
    1ee6:	08 c0       	rjmp	.+16     	; 0x1ef8 <vfprintf+0x228>
    1ee8:	80 81       	ld	r24, Z
    1eea:	91 81       	ldd	r25, Z+1	; 0x01
    1eec:	aa 27       	eor	r26, r26
    1eee:	97 fd       	sbrc	r25, 7
    1ef0:	a0 95       	com	r26
    1ef2:	ba 2f       	mov	r27, r26
    1ef4:	22 e0       	ldi	r18, 0x02	; 2
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	a2 0e       	add	r10, r18
    1efa:	b3 1e       	adc	r11, r19
    1efc:	01 2f       	mov	r16, r17
    1efe:	0f 76       	andi	r16, 0x6F	; 111
    1f00:	b7 ff       	sbrs	r27, 7
    1f02:	08 c0       	rjmp	.+16     	; 0x1f14 <vfprintf+0x244>
    1f04:	b0 95       	com	r27
    1f06:	a0 95       	com	r26
    1f08:	90 95       	com	r25
    1f0a:	81 95       	neg	r24
    1f0c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f0e:	af 4f       	sbci	r26, 0xFF	; 255
    1f10:	bf 4f       	sbci	r27, 0xFF	; 255
    1f12:	00 68       	ori	r16, 0x80	; 128
    1f14:	bc 01       	movw	r22, r24
    1f16:	cd 01       	movw	r24, r26
    1f18:	a2 01       	movw	r20, r4
    1f1a:	2a e0       	ldi	r18, 0x0A	; 10
    1f1c:	30 e0       	ldi	r19, 0x00	; 0
    1f1e:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <__ultoa_invert>
    1f22:	d8 2e       	mov	r13, r24
    1f24:	d4 18       	sub	r13, r4
    1f26:	3f c0       	rjmp	.+126    	; 0x1fa6 <vfprintf+0x2d6>
    1f28:	85 37       	cpi	r24, 0x75	; 117
    1f2a:	21 f4       	brne	.+8      	; 0x1f34 <vfprintf+0x264>
    1f2c:	1f 7e       	andi	r17, 0xEF	; 239
    1f2e:	2a e0       	ldi	r18, 0x0A	; 10
    1f30:	30 e0       	ldi	r19, 0x00	; 0
    1f32:	20 c0       	rjmp	.+64     	; 0x1f74 <vfprintf+0x2a4>
    1f34:	19 7f       	andi	r17, 0xF9	; 249
    1f36:	8f 36       	cpi	r24, 0x6F	; 111
    1f38:	a9 f0       	breq	.+42     	; 0x1f64 <vfprintf+0x294>
    1f3a:	80 37       	cpi	r24, 0x70	; 112
    1f3c:	20 f4       	brcc	.+8      	; 0x1f46 <vfprintf+0x276>
    1f3e:	88 35       	cpi	r24, 0x58	; 88
    1f40:	09 f0       	breq	.+2      	; 0x1f44 <vfprintf+0x274>
    1f42:	ae c0       	rjmp	.+348    	; 0x20a0 <vfprintf+0x3d0>
    1f44:	0b c0       	rjmp	.+22     	; 0x1f5c <vfprintf+0x28c>
    1f46:	80 37       	cpi	r24, 0x70	; 112
    1f48:	21 f0       	breq	.+8      	; 0x1f52 <vfprintf+0x282>
    1f4a:	88 37       	cpi	r24, 0x78	; 120
    1f4c:	09 f0       	breq	.+2      	; 0x1f50 <vfprintf+0x280>
    1f4e:	a8 c0       	rjmp	.+336    	; 0x20a0 <vfprintf+0x3d0>
    1f50:	01 c0       	rjmp	.+2      	; 0x1f54 <vfprintf+0x284>
    1f52:	10 61       	ori	r17, 0x10	; 16
    1f54:	14 ff       	sbrs	r17, 4
    1f56:	09 c0       	rjmp	.+18     	; 0x1f6a <vfprintf+0x29a>
    1f58:	14 60       	ori	r17, 0x04	; 4
    1f5a:	07 c0       	rjmp	.+14     	; 0x1f6a <vfprintf+0x29a>
    1f5c:	14 ff       	sbrs	r17, 4
    1f5e:	08 c0       	rjmp	.+16     	; 0x1f70 <vfprintf+0x2a0>
    1f60:	16 60       	ori	r17, 0x06	; 6
    1f62:	06 c0       	rjmp	.+12     	; 0x1f70 <vfprintf+0x2a0>
    1f64:	28 e0       	ldi	r18, 0x08	; 8
    1f66:	30 e0       	ldi	r19, 0x00	; 0
    1f68:	05 c0       	rjmp	.+10     	; 0x1f74 <vfprintf+0x2a4>
    1f6a:	20 e1       	ldi	r18, 0x10	; 16
    1f6c:	30 e0       	ldi	r19, 0x00	; 0
    1f6e:	02 c0       	rjmp	.+4      	; 0x1f74 <vfprintf+0x2a4>
    1f70:	20 e1       	ldi	r18, 0x10	; 16
    1f72:	32 e0       	ldi	r19, 0x02	; 2
    1f74:	f5 01       	movw	r30, r10
    1f76:	17 ff       	sbrs	r17, 7
    1f78:	07 c0       	rjmp	.+14     	; 0x1f88 <vfprintf+0x2b8>
    1f7a:	60 81       	ld	r22, Z
    1f7c:	71 81       	ldd	r23, Z+1	; 0x01
    1f7e:	82 81       	ldd	r24, Z+2	; 0x02
    1f80:	93 81       	ldd	r25, Z+3	; 0x03
    1f82:	44 e0       	ldi	r20, 0x04	; 4
    1f84:	50 e0       	ldi	r21, 0x00	; 0
    1f86:	06 c0       	rjmp	.+12     	; 0x1f94 <vfprintf+0x2c4>
    1f88:	60 81       	ld	r22, Z
    1f8a:	71 81       	ldd	r23, Z+1	; 0x01
    1f8c:	80 e0       	ldi	r24, 0x00	; 0
    1f8e:	90 e0       	ldi	r25, 0x00	; 0
    1f90:	42 e0       	ldi	r20, 0x02	; 2
    1f92:	50 e0       	ldi	r21, 0x00	; 0
    1f94:	a4 0e       	add	r10, r20
    1f96:	b5 1e       	adc	r11, r21
    1f98:	a2 01       	movw	r20, r4
    1f9a:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <__ultoa_invert>
    1f9e:	d8 2e       	mov	r13, r24
    1fa0:	d4 18       	sub	r13, r4
    1fa2:	01 2f       	mov	r16, r17
    1fa4:	0f 77       	andi	r16, 0x7F	; 127
    1fa6:	06 ff       	sbrs	r16, 6
    1fa8:	09 c0       	rjmp	.+18     	; 0x1fbc <vfprintf+0x2ec>
    1faa:	0e 7f       	andi	r16, 0xFE	; 254
    1fac:	df 14       	cp	r13, r15
    1fae:	30 f4       	brcc	.+12     	; 0x1fbc <vfprintf+0x2ec>
    1fb0:	04 ff       	sbrs	r16, 4
    1fb2:	06 c0       	rjmp	.+12     	; 0x1fc0 <vfprintf+0x2f0>
    1fb4:	02 fd       	sbrc	r16, 2
    1fb6:	04 c0       	rjmp	.+8      	; 0x1fc0 <vfprintf+0x2f0>
    1fb8:	0f 7e       	andi	r16, 0xEF	; 239
    1fba:	02 c0       	rjmp	.+4      	; 0x1fc0 <vfprintf+0x2f0>
    1fbc:	1d 2d       	mov	r17, r13
    1fbe:	01 c0       	rjmp	.+2      	; 0x1fc2 <vfprintf+0x2f2>
    1fc0:	1f 2d       	mov	r17, r15
    1fc2:	80 2f       	mov	r24, r16
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	04 ff       	sbrs	r16, 4
    1fc8:	0c c0       	rjmp	.+24     	; 0x1fe2 <vfprintf+0x312>
    1fca:	fe 01       	movw	r30, r28
    1fcc:	ed 0d       	add	r30, r13
    1fce:	f1 1d       	adc	r31, r1
    1fd0:	20 81       	ld	r18, Z
    1fd2:	20 33       	cpi	r18, 0x30	; 48
    1fd4:	11 f4       	brne	.+4      	; 0x1fda <vfprintf+0x30a>
    1fd6:	09 7e       	andi	r16, 0xE9	; 233
    1fd8:	09 c0       	rjmp	.+18     	; 0x1fec <vfprintf+0x31c>
    1fda:	02 ff       	sbrs	r16, 2
    1fdc:	06 c0       	rjmp	.+12     	; 0x1fea <vfprintf+0x31a>
    1fde:	1e 5f       	subi	r17, 0xFE	; 254
    1fe0:	05 c0       	rjmp	.+10     	; 0x1fec <vfprintf+0x31c>
    1fe2:	86 78       	andi	r24, 0x86	; 134
    1fe4:	90 70       	andi	r25, 0x00	; 0
    1fe6:	00 97       	sbiw	r24, 0x00	; 0
    1fe8:	09 f0       	breq	.+2      	; 0x1fec <vfprintf+0x31c>
    1fea:	1f 5f       	subi	r17, 0xFF	; 255
    1fec:	80 2e       	mov	r8, r16
    1fee:	99 24       	eor	r9, r9
    1ff0:	03 fd       	sbrc	r16, 3
    1ff2:	12 c0       	rjmp	.+36     	; 0x2018 <vfprintf+0x348>
    1ff4:	00 ff       	sbrs	r16, 0
    1ff6:	0d c0       	rjmp	.+26     	; 0x2012 <vfprintf+0x342>
    1ff8:	fd 2c       	mov	r15, r13
    1ffa:	1e 15       	cp	r17, r14
    1ffc:	50 f4       	brcc	.+20     	; 0x2012 <vfprintf+0x342>
    1ffe:	fe 0c       	add	r15, r14
    2000:	f1 1a       	sub	r15, r17
    2002:	1e 2d       	mov	r17, r14
    2004:	06 c0       	rjmp	.+12     	; 0x2012 <vfprintf+0x342>
    2006:	80 e2       	ldi	r24, 0x20	; 32
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	b3 01       	movw	r22, r6
    200c:	0e 94 c5 10 	call	0x218a	; 0x218a <fputc>
    2010:	1f 5f       	subi	r17, 0xFF	; 255
    2012:	1e 15       	cp	r17, r14
    2014:	c0 f3       	brcs	.-16     	; 0x2006 <vfprintf+0x336>
    2016:	04 c0       	rjmp	.+8      	; 0x2020 <vfprintf+0x350>
    2018:	1e 15       	cp	r17, r14
    201a:	10 f4       	brcc	.+4      	; 0x2020 <vfprintf+0x350>
    201c:	e1 1a       	sub	r14, r17
    201e:	01 c0       	rjmp	.+2      	; 0x2022 <vfprintf+0x352>
    2020:	ee 24       	eor	r14, r14
    2022:	84 fe       	sbrs	r8, 4
    2024:	0f c0       	rjmp	.+30     	; 0x2044 <vfprintf+0x374>
    2026:	80 e3       	ldi	r24, 0x30	; 48
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	b3 01       	movw	r22, r6
    202c:	0e 94 c5 10 	call	0x218a	; 0x218a <fputc>
    2030:	82 fe       	sbrs	r8, 2
    2032:	1f c0       	rjmp	.+62     	; 0x2072 <vfprintf+0x3a2>
    2034:	81 fe       	sbrs	r8, 1
    2036:	03 c0       	rjmp	.+6      	; 0x203e <vfprintf+0x36e>
    2038:	88 e5       	ldi	r24, 0x58	; 88
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	10 c0       	rjmp	.+32     	; 0x205e <vfprintf+0x38e>
    203e:	88 e7       	ldi	r24, 0x78	; 120
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	0d c0       	rjmp	.+26     	; 0x205e <vfprintf+0x38e>
    2044:	c4 01       	movw	r24, r8
    2046:	86 78       	andi	r24, 0x86	; 134
    2048:	90 70       	andi	r25, 0x00	; 0
    204a:	00 97       	sbiw	r24, 0x00	; 0
    204c:	91 f0       	breq	.+36     	; 0x2072 <vfprintf+0x3a2>
    204e:	81 fc       	sbrc	r8, 1
    2050:	02 c0       	rjmp	.+4      	; 0x2056 <vfprintf+0x386>
    2052:	80 e2       	ldi	r24, 0x20	; 32
    2054:	01 c0       	rjmp	.+2      	; 0x2058 <vfprintf+0x388>
    2056:	8b e2       	ldi	r24, 0x2B	; 43
    2058:	07 fd       	sbrc	r16, 7
    205a:	8d e2       	ldi	r24, 0x2D	; 45
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	b3 01       	movw	r22, r6
    2060:	0e 94 c5 10 	call	0x218a	; 0x218a <fputc>
    2064:	06 c0       	rjmp	.+12     	; 0x2072 <vfprintf+0x3a2>
    2066:	80 e3       	ldi	r24, 0x30	; 48
    2068:	90 e0       	ldi	r25, 0x00	; 0
    206a:	b3 01       	movw	r22, r6
    206c:	0e 94 c5 10 	call	0x218a	; 0x218a <fputc>
    2070:	fa 94       	dec	r15
    2072:	df 14       	cp	r13, r15
    2074:	c0 f3       	brcs	.-16     	; 0x2066 <vfprintf+0x396>
    2076:	da 94       	dec	r13
    2078:	f2 01       	movw	r30, r4
    207a:	ed 0d       	add	r30, r13
    207c:	f1 1d       	adc	r31, r1
    207e:	80 81       	ld	r24, Z
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	b3 01       	movw	r22, r6
    2084:	0e 94 c5 10 	call	0x218a	; 0x218a <fputc>
    2088:	dd 20       	and	r13, r13
    208a:	a9 f7       	brne	.-22     	; 0x2076 <vfprintf+0x3a6>
    208c:	06 c0       	rjmp	.+12     	; 0x209a <vfprintf+0x3ca>
    208e:	80 e2       	ldi	r24, 0x20	; 32
    2090:	90 e0       	ldi	r25, 0x00	; 0
    2092:	b3 01       	movw	r22, r6
    2094:	0e 94 c5 10 	call	0x218a	; 0x218a <fputc>
    2098:	ea 94       	dec	r14
    209a:	ee 20       	and	r14, r14
    209c:	c1 f7       	brne	.-16     	; 0x208e <vfprintf+0x3be>
    209e:	40 ce       	rjmp	.-896    	; 0x1d20 <vfprintf+0x50>
    20a0:	f3 01       	movw	r30, r6
    20a2:	86 81       	ldd	r24, Z+6	; 0x06
    20a4:	97 81       	ldd	r25, Z+7	; 0x07
    20a6:	02 c0       	rjmp	.+4      	; 0x20ac <vfprintf+0x3dc>
    20a8:	8f ef       	ldi	r24, 0xFF	; 255
    20aa:	9f ef       	ldi	r25, 0xFF	; 255
    20ac:	2d 96       	adiw	r28, 0x0d	; 13
    20ae:	0f b6       	in	r0, 0x3f	; 63
    20b0:	f8 94       	cli
    20b2:	de bf       	out	0x3e, r29	; 62
    20b4:	0f be       	out	0x3f, r0	; 63
    20b6:	cd bf       	out	0x3d, r28	; 61
    20b8:	df 91       	pop	r29
    20ba:	cf 91       	pop	r28
    20bc:	1f 91       	pop	r17
    20be:	0f 91       	pop	r16
    20c0:	ff 90       	pop	r15
    20c2:	ef 90       	pop	r14
    20c4:	df 90       	pop	r13
    20c6:	cf 90       	pop	r12
    20c8:	bf 90       	pop	r11
    20ca:	af 90       	pop	r10
    20cc:	9f 90       	pop	r9
    20ce:	8f 90       	pop	r8
    20d0:	7f 90       	pop	r7
    20d2:	6f 90       	pop	r6
    20d4:	5f 90       	pop	r5
    20d6:	4f 90       	pop	r4
    20d8:	3f 90       	pop	r3
    20da:	2f 90       	pop	r2
    20dc:	08 95       	ret

000020de <strnlen_P>:
    20de:	fc 01       	movw	r30, r24
    20e0:	05 90       	lpm	r0, Z+
    20e2:	61 50       	subi	r22, 0x01	; 1
    20e4:	70 40       	sbci	r23, 0x00	; 0
    20e6:	01 10       	cpse	r0, r1
    20e8:	d8 f7       	brcc	.-10     	; 0x20e0 <strnlen_P+0x2>
    20ea:	80 95       	com	r24
    20ec:	90 95       	com	r25
    20ee:	8e 0f       	add	r24, r30
    20f0:	9f 1f       	adc	r25, r31
    20f2:	08 95       	ret

000020f4 <strnlen>:
    20f4:	fc 01       	movw	r30, r24
    20f6:	61 50       	subi	r22, 0x01	; 1
    20f8:	70 40       	sbci	r23, 0x00	; 0
    20fa:	01 90       	ld	r0, Z+
    20fc:	01 10       	cpse	r0, r1
    20fe:	d8 f7       	brcc	.-10     	; 0x20f6 <strnlen+0x2>
    2100:	80 95       	com	r24
    2102:	90 95       	com	r25
    2104:	8e 0f       	add	r24, r30
    2106:	9f 1f       	adc	r25, r31
    2108:	08 95       	ret

0000210a <fgetc>:
    210a:	cf 93       	push	r28
    210c:	df 93       	push	r29
    210e:	ec 01       	movw	r28, r24
    2110:	2b 81       	ldd	r18, Y+3	; 0x03
    2112:	20 ff       	sbrs	r18, 0
    2114:	35 c0       	rjmp	.+106    	; 0x2180 <fgetc+0x76>
    2116:	26 ff       	sbrs	r18, 6
    2118:	09 c0       	rjmp	.+18     	; 0x212c <fgetc+0x22>
    211a:	2f 7b       	andi	r18, 0xBF	; 191
    211c:	2b 83       	std	Y+3, r18	; 0x03
    211e:	8e 81       	ldd	r24, Y+6	; 0x06
    2120:	9f 81       	ldd	r25, Y+7	; 0x07
    2122:	01 96       	adiw	r24, 0x01	; 1
    2124:	9f 83       	std	Y+7, r25	; 0x07
    2126:	8e 83       	std	Y+6, r24	; 0x06
    2128:	8a 81       	ldd	r24, Y+2	; 0x02
    212a:	28 c0       	rjmp	.+80     	; 0x217c <fgetc+0x72>
    212c:	22 ff       	sbrs	r18, 2
    212e:	0f c0       	rjmp	.+30     	; 0x214e <fgetc+0x44>
    2130:	e8 81       	ld	r30, Y
    2132:	f9 81       	ldd	r31, Y+1	; 0x01
    2134:	80 81       	ld	r24, Z
    2136:	99 27       	eor	r25, r25
    2138:	87 fd       	sbrc	r24, 7
    213a:	90 95       	com	r25
    213c:	00 97       	sbiw	r24, 0x00	; 0
    213e:	19 f4       	brne	.+6      	; 0x2146 <fgetc+0x3c>
    2140:	20 62       	ori	r18, 0x20	; 32
    2142:	2b 83       	std	Y+3, r18	; 0x03
    2144:	1d c0       	rjmp	.+58     	; 0x2180 <fgetc+0x76>
    2146:	31 96       	adiw	r30, 0x01	; 1
    2148:	f9 83       	std	Y+1, r31	; 0x01
    214a:	e8 83       	st	Y, r30
    214c:	11 c0       	rjmp	.+34     	; 0x2170 <fgetc+0x66>
    214e:	ea 85       	ldd	r30, Y+10	; 0x0a
    2150:	fb 85       	ldd	r31, Y+11	; 0x0b
    2152:	ce 01       	movw	r24, r28
    2154:	19 95       	eicall
    2156:	97 ff       	sbrs	r25, 7
    2158:	0b c0       	rjmp	.+22     	; 0x2170 <fgetc+0x66>
    215a:	2b 81       	ldd	r18, Y+3	; 0x03
    215c:	3f ef       	ldi	r19, 0xFF	; 255
    215e:	8f 3f       	cpi	r24, 0xFF	; 255
    2160:	93 07       	cpc	r25, r19
    2162:	11 f4       	brne	.+4      	; 0x2168 <fgetc+0x5e>
    2164:	80 e1       	ldi	r24, 0x10	; 16
    2166:	01 c0       	rjmp	.+2      	; 0x216a <fgetc+0x60>
    2168:	80 e2       	ldi	r24, 0x20	; 32
    216a:	82 2b       	or	r24, r18
    216c:	8b 83       	std	Y+3, r24	; 0x03
    216e:	08 c0       	rjmp	.+16     	; 0x2180 <fgetc+0x76>
    2170:	2e 81       	ldd	r18, Y+6	; 0x06
    2172:	3f 81       	ldd	r19, Y+7	; 0x07
    2174:	2f 5f       	subi	r18, 0xFF	; 255
    2176:	3f 4f       	sbci	r19, 0xFF	; 255
    2178:	3f 83       	std	Y+7, r19	; 0x07
    217a:	2e 83       	std	Y+6, r18	; 0x06
    217c:	90 e0       	ldi	r25, 0x00	; 0
    217e:	02 c0       	rjmp	.+4      	; 0x2184 <fgetc+0x7a>
    2180:	8f ef       	ldi	r24, 0xFF	; 255
    2182:	9f ef       	ldi	r25, 0xFF	; 255
    2184:	df 91       	pop	r29
    2186:	cf 91       	pop	r28
    2188:	08 95       	ret

0000218a <fputc>:
    218a:	0f 93       	push	r16
    218c:	1f 93       	push	r17
    218e:	cf 93       	push	r28
    2190:	df 93       	push	r29
    2192:	8c 01       	movw	r16, r24
    2194:	eb 01       	movw	r28, r22
    2196:	8b 81       	ldd	r24, Y+3	; 0x03
    2198:	81 ff       	sbrs	r24, 1
    219a:	1b c0       	rjmp	.+54     	; 0x21d2 <fputc+0x48>
    219c:	82 ff       	sbrs	r24, 2
    219e:	0d c0       	rjmp	.+26     	; 0x21ba <fputc+0x30>
    21a0:	2e 81       	ldd	r18, Y+6	; 0x06
    21a2:	3f 81       	ldd	r19, Y+7	; 0x07
    21a4:	8c 81       	ldd	r24, Y+4	; 0x04
    21a6:	9d 81       	ldd	r25, Y+5	; 0x05
    21a8:	28 17       	cp	r18, r24
    21aa:	39 07       	cpc	r19, r25
    21ac:	64 f4       	brge	.+24     	; 0x21c6 <fputc+0x3c>
    21ae:	e8 81       	ld	r30, Y
    21b0:	f9 81       	ldd	r31, Y+1	; 0x01
    21b2:	01 93       	st	Z+, r16
    21b4:	f9 83       	std	Y+1, r31	; 0x01
    21b6:	e8 83       	st	Y, r30
    21b8:	06 c0       	rjmp	.+12     	; 0x21c6 <fputc+0x3c>
    21ba:	e8 85       	ldd	r30, Y+8	; 0x08
    21bc:	f9 85       	ldd	r31, Y+9	; 0x09
    21be:	80 2f       	mov	r24, r16
    21c0:	19 95       	eicall
    21c2:	00 97       	sbiw	r24, 0x00	; 0
    21c4:	31 f4       	brne	.+12     	; 0x21d2 <fputc+0x48>
    21c6:	8e 81       	ldd	r24, Y+6	; 0x06
    21c8:	9f 81       	ldd	r25, Y+7	; 0x07
    21ca:	01 96       	adiw	r24, 0x01	; 1
    21cc:	9f 83       	std	Y+7, r25	; 0x07
    21ce:	8e 83       	std	Y+6, r24	; 0x06
    21d0:	02 c0       	rjmp	.+4      	; 0x21d6 <fputc+0x4c>
    21d2:	0f ef       	ldi	r16, 0xFF	; 255
    21d4:	1f ef       	ldi	r17, 0xFF	; 255
    21d6:	c8 01       	movw	r24, r16
    21d8:	df 91       	pop	r29
    21da:	cf 91       	pop	r28
    21dc:	1f 91       	pop	r17
    21de:	0f 91       	pop	r16
    21e0:	08 95       	ret

000021e2 <__ultoa_invert>:
    21e2:	fa 01       	movw	r30, r20
    21e4:	aa 27       	eor	r26, r26
    21e6:	28 30       	cpi	r18, 0x08	; 8
    21e8:	51 f1       	breq	.+84     	; 0x223e <__stack+0x3f>
    21ea:	20 31       	cpi	r18, 0x10	; 16
    21ec:	81 f1       	breq	.+96     	; 0x224e <__stack+0x4f>
    21ee:	e8 94       	clt
    21f0:	6f 93       	push	r22
    21f2:	6e 7f       	andi	r22, 0xFE	; 254
    21f4:	6e 5f       	subi	r22, 0xFE	; 254
    21f6:	7f 4f       	sbci	r23, 0xFF	; 255
    21f8:	8f 4f       	sbci	r24, 0xFF	; 255
    21fa:	9f 4f       	sbci	r25, 0xFF	; 255
    21fc:	af 4f       	sbci	r26, 0xFF	; 255
    21fe:	b1 e0       	ldi	r27, 0x01	; 1
    2200:	3e d0       	rcall	.+124    	; 0x227e <__stack+0x7f>
    2202:	b4 e0       	ldi	r27, 0x04	; 4
    2204:	3c d0       	rcall	.+120    	; 0x227e <__stack+0x7f>
    2206:	67 0f       	add	r22, r23
    2208:	78 1f       	adc	r23, r24
    220a:	89 1f       	adc	r24, r25
    220c:	9a 1f       	adc	r25, r26
    220e:	a1 1d       	adc	r26, r1
    2210:	68 0f       	add	r22, r24
    2212:	79 1f       	adc	r23, r25
    2214:	8a 1f       	adc	r24, r26
    2216:	91 1d       	adc	r25, r1
    2218:	a1 1d       	adc	r26, r1
    221a:	6a 0f       	add	r22, r26
    221c:	71 1d       	adc	r23, r1
    221e:	81 1d       	adc	r24, r1
    2220:	91 1d       	adc	r25, r1
    2222:	a1 1d       	adc	r26, r1
    2224:	20 d0       	rcall	.+64     	; 0x2266 <__stack+0x67>
    2226:	09 f4       	brne	.+2      	; 0x222a <__stack+0x2b>
    2228:	68 94       	set
    222a:	3f 91       	pop	r19
    222c:	2a e0       	ldi	r18, 0x0A	; 10
    222e:	26 9f       	mul	r18, r22
    2230:	11 24       	eor	r1, r1
    2232:	30 19       	sub	r19, r0
    2234:	30 5d       	subi	r19, 0xD0	; 208
    2236:	31 93       	st	Z+, r19
    2238:	de f6       	brtc	.-74     	; 0x21f0 <__ultoa_invert+0xe>
    223a:	cf 01       	movw	r24, r30
    223c:	08 95       	ret
    223e:	46 2f       	mov	r20, r22
    2240:	47 70       	andi	r20, 0x07	; 7
    2242:	40 5d       	subi	r20, 0xD0	; 208
    2244:	41 93       	st	Z+, r20
    2246:	b3 e0       	ldi	r27, 0x03	; 3
    2248:	0f d0       	rcall	.+30     	; 0x2268 <__stack+0x69>
    224a:	c9 f7       	brne	.-14     	; 0x223e <__stack+0x3f>
    224c:	f6 cf       	rjmp	.-20     	; 0x223a <__stack+0x3b>
    224e:	46 2f       	mov	r20, r22
    2250:	4f 70       	andi	r20, 0x0F	; 15
    2252:	40 5d       	subi	r20, 0xD0	; 208
    2254:	4a 33       	cpi	r20, 0x3A	; 58
    2256:	18 f0       	brcs	.+6      	; 0x225e <__stack+0x5f>
    2258:	49 5d       	subi	r20, 0xD9	; 217
    225a:	31 fd       	sbrc	r19, 1
    225c:	40 52       	subi	r20, 0x20	; 32
    225e:	41 93       	st	Z+, r20
    2260:	02 d0       	rcall	.+4      	; 0x2266 <__stack+0x67>
    2262:	a9 f7       	brne	.-22     	; 0x224e <__stack+0x4f>
    2264:	ea cf       	rjmp	.-44     	; 0x223a <__stack+0x3b>
    2266:	b4 e0       	ldi	r27, 0x04	; 4
    2268:	a6 95       	lsr	r26
    226a:	97 95       	ror	r25
    226c:	87 95       	ror	r24
    226e:	77 95       	ror	r23
    2270:	67 95       	ror	r22
    2272:	ba 95       	dec	r27
    2274:	c9 f7       	brne	.-14     	; 0x2268 <__stack+0x69>
    2276:	00 97       	sbiw	r24, 0x00	; 0
    2278:	61 05       	cpc	r22, r1
    227a:	71 05       	cpc	r23, r1
    227c:	08 95       	ret
    227e:	9b 01       	movw	r18, r22
    2280:	ac 01       	movw	r20, r24
    2282:	0a 2e       	mov	r0, r26
    2284:	06 94       	lsr	r0
    2286:	57 95       	ror	r21
    2288:	47 95       	ror	r20
    228a:	37 95       	ror	r19
    228c:	27 95       	ror	r18
    228e:	ba 95       	dec	r27
    2290:	c9 f7       	brne	.-14     	; 0x2284 <__stack+0x85>
    2292:	62 0f       	add	r22, r18
    2294:	73 1f       	adc	r23, r19
    2296:	84 1f       	adc	r24, r20
    2298:	95 1f       	adc	r25, r21
    229a:	a0 1d       	adc	r26, r0
    229c:	08 95       	ret

0000229e <_exit>:
    229e:	f8 94       	cli

000022a0 <__stop_program>:
    22a0:	ff cf       	rjmp	.-2      	; 0x22a0 <__stop_program>
