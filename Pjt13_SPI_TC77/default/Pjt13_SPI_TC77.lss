
Pjt13_SPI_TC77.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002c4  00800200  00002a2e  00002ac2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002a2e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000145  008004c4  008004c4  00002d86  2**0
                  ALLOC
  3 .stab         0000117c  00000000  00000000  00002d88  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000039d  00000000  00000000  00003f04  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000528  00000000  00000000  000042a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005000  00000000  00000000  000047d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000286a  00000000  00000000  000097d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002566  00000000  00000000  0000c03a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000db0  00000000  00000000  0000e5a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c75  00000000  00000000  0000f350  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000030de  00000000  00000000  0000ffc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  000130a3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      3c:	0c 94 d3 06 	jmp	0xda6	; 0xda6 <__vector_15>
      40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      5c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      60:	0c 94 94 08 	jmp	0x1128	; 0x1128 <__vector_24>
      64:	0c 94 b8 07 	jmp	0xf70	; 0xf70 <__vector_25>
      68:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      6c:	0c 94 89 07 	jmp	0xf12	; 0xf12 <__vector_27>
      70:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      74:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__vector_29>
      78:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      7c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      80:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      84:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      88:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      8c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      90:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      94:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      98:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      9c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      ac:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      bc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      cc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      dc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      e0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	14 e0       	ldi	r17, 0x04	; 4
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ee e2       	ldi	r30, 0x2E	; 46
      fc:	fa e2       	ldi	r31, 0x2A	; 42
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a4 3c       	cpi	r26, 0xC4	; 196
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
     10e:	1b be       	out	0x3b, r1	; 59

00000110 <__do_clear_bss>:
     110:	16 e0       	ldi	r17, 0x06	; 6
     112:	a4 ec       	ldi	r26, 0xC4	; 196
     114:	b4 e0       	ldi	r27, 0x04	; 4
     116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
     118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
     11a:	a9 30       	cpi	r26, 0x09	; 9
     11c:	b1 07       	cpc	r27, r17
     11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
     120:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <main>
     124:	0c 94 15 15 	jmp	0x2a2a	; 0x2a2a <_exit>

00000128 <__bad_interrupt>:
     128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <adc_init>:
#include <compat/deprecated.h>
#include <util/delay.h>
#include "adc_tc1047.h"

void adc_init() {
	cbi(DDRF, PF0);
     12c:	80 98       	cbi	0x10, 0	; 16
	ADMUX = 0x80 | 0x00;
     12e:	80 e8       	ldi	r24, 0x80	; 128
     130:	80 93 7c 00 	sts	0x007C, r24
}
     134:	08 95       	ret

00000136 <adc_start>:

void adc_start() {
	sbi(ADCSRA, ADEN);
     136:	ea e7       	ldi	r30, 0x7A	; 122
     138:	f0 e0       	ldi	r31, 0x00	; 0
     13a:	80 81       	ld	r24, Z
     13c:	80 68       	ori	r24, 0x80	; 128
     13e:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     140:	8d ed       	ldi	r24, 0xDD	; 221
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	01 97       	sbiw	r24, 0x01	; 1
     146:	f1 f7       	brne	.-4      	; 0x144 <adc_start+0xe>
	_delay_us(120);
	sbi(ADCSRA, ADIE);
     148:	80 81       	ld	r24, Z
     14a:	88 60       	ori	r24, 0x08	; 8
     14c:	80 83       	st	Z, r24
	sbi(ADCSRA, ADSC);
     14e:	80 81       	ld	r24, Z
     150:	80 64       	ori	r24, 0x40	; 64
     152:	80 83       	st	Z, r24
}
     154:	08 95       	ret

00000156 <task_tc1047>:

void task_tc1047(char *arg) {
	static int value;
	static int volatile in_adc = 0;

	if(!strcmp(arg, "")) {
     156:	fc 01       	movw	r30, r24
     158:	20 81       	ld	r18, Z
     15a:	22 23       	and	r18, r18
     15c:	19 f5       	brne	.+70     	; 0x1a4 <task_tc1047+0x4e>
		adc_start(); in_adc = 1; while(in_adc);
     15e:	0e 94 9b 00 	call	0x136	; 0x136 <adc_start>
     162:	81 e0       	ldi	r24, 0x01	; 1
     164:	90 e0       	ldi	r25, 0x00	; 0
     166:	90 93 c5 04 	sts	0x04C5, r25
     16a:	80 93 c4 04 	sts	0x04C4, r24
     16e:	80 91 c4 04 	lds	r24, 0x04C4
     172:	90 91 c5 04 	lds	r25, 0x04C5
     176:	00 97       	sbiw	r24, 0x00	; 0
     178:	d1 f7       	brne	.-12     	; 0x16e <task_tc1047+0x18>
		printf("Currrent temperture is %d degree.\n", value);
     17a:	00 d0       	rcall	.+0      	; 0x17c <task_tc1047+0x26>
     17c:	0f 92       	push	r0
     17e:	80 e0       	ldi	r24, 0x00	; 0
     180:	92 e0       	ldi	r25, 0x02	; 2
     182:	ed b7       	in	r30, 0x3d	; 61
     184:	fe b7       	in	r31, 0x3e	; 62
     186:	92 83       	std	Z+2, r25	; 0x02
     188:	81 83       	std	Z+1, r24	; 0x01
     18a:	80 91 c6 04 	lds	r24, 0x04C6
     18e:	90 91 c7 04 	lds	r25, 0x04C7
     192:	94 83       	std	Z+4, r25	; 0x04
     194:	83 83       	std	Z+3, r24	; 0x03
     196:	0e 94 b8 11 	call	0x2370	; 0x2370 <printf>
     19a:	0f 90       	pop	r0
     19c:	0f 90       	pop	r0
     19e:	0f 90       	pop	r0
     1a0:	0f 90       	pop	r0
     1a2:	08 95       	ret
	} else {
		value = atoi(arg) * (1.1/1023) * 1000;
     1a4:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <atoi>
     1a8:	9c 01       	movw	r18, r24
     1aa:	b9 01       	movw	r22, r18
     1ac:	88 27       	eor	r24, r24
     1ae:	77 fd       	sbrc	r23, 7
     1b0:	80 95       	com	r24
     1b2:	98 2f       	mov	r25, r24
     1b4:	0e 94 0b 0c 	call	0x1816	; 0x1816 <__floatsisf>
     1b8:	29 e0       	ldi	r18, 0x09	; 9
     1ba:	30 ef       	ldi	r19, 0xF0	; 240
     1bc:	4c e8       	ldi	r20, 0x8C	; 140
     1be:	5a e3       	ldi	r21, 0x3A	; 58
     1c0:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <__mulsf3>
     1c4:	20 e0       	ldi	r18, 0x00	; 0
     1c6:	30 e0       	ldi	r19, 0x00	; 0
     1c8:	4a e7       	ldi	r20, 0x7A	; 122
     1ca:	54 e4       	ldi	r21, 0x44	; 68
     1cc:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <__mulsf3>
     1d0:	0e 94 82 0c 	call	0x1904	; 0x1904 <__fixsfsi>
     1d4:	dc 01       	movw	r26, r24
     1d6:	cb 01       	movw	r24, r22
		value = (value - 500) / 10;
     1d8:	84 5f       	subi	r24, 0xF4	; 244
     1da:	91 40       	sbci	r25, 0x01	; 1
     1dc:	6a e0       	ldi	r22, 0x0A	; 10
     1de:	70 e0       	ldi	r23, 0x00	; 0
     1e0:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <__divmodhi4>
     1e4:	70 93 c7 04 	sts	0x04C7, r23
     1e8:	60 93 c6 04 	sts	0x04C6, r22
		in_adc = 0;
     1ec:	10 92 c5 04 	sts	0x04C5, r1
     1f0:	10 92 c4 04 	sts	0x04C4, r1
     1f4:	08 95       	ret

000001f6 <__vector_29>:
	_delay_us(120);
	sbi(ADCSRA, ADIE);
	sbi(ADCSRA, ADSC);
}

ISR(ADC_vect) {
     1f6:	1f 92       	push	r1
     1f8:	0f 92       	push	r0
     1fa:	0f b6       	in	r0, 0x3f	; 63
     1fc:	0f 92       	push	r0
     1fe:	0b b6       	in	r0, 0x3b	; 59
     200:	0f 92       	push	r0
     202:	11 24       	eor	r1, r1
     204:	0f 93       	push	r16
     206:	1f 93       	push	r17
     208:	2f 93       	push	r18
     20a:	3f 93       	push	r19
     20c:	4f 93       	push	r20
     20e:	5f 93       	push	r21
     210:	6f 93       	push	r22
     212:	7f 93       	push	r23
     214:	8f 93       	push	r24
     216:	9f 93       	push	r25
     218:	af 93       	push	r26
     21a:	bf 93       	push	r27
     21c:	ef 93       	push	r30
     21e:	ff 93       	push	r31
     220:	cf 93       	push	r28
     222:	df 93       	push	r29
     224:	cd b7       	in	r28, 0x3d	; 61
     226:	de b7       	in	r29, 0x3e	; 62
     228:	28 97       	sbiw	r28, 0x08	; 8
     22a:	de bf       	out	0x3e, r29	; 62
     22c:	cd bf       	out	0x3d, r28	; 61
	uint16_t data;
	char arg[8];

	data = ADCW & 0x03ff;
     22e:	80 91 78 00 	lds	r24, 0x0078
     232:	90 91 79 00 	lds	r25, 0x0079
	cbi(ADCSRA, ADEN);
     236:	ea e7       	ldi	r30, 0x7A	; 122
     238:	f0 e0       	ldi	r31, 0x00	; 0
     23a:	20 81       	ld	r18, Z
     23c:	2f 77       	andi	r18, 0x7F	; 127
     23e:	20 83       	st	Z, r18

	sprintf(arg, "%d", data);
     240:	00 d0       	rcall	.+0      	; 0x242 <__vector_29+0x4c>
     242:	00 d0       	rcall	.+0      	; 0x244 <__vector_29+0x4e>
     244:	ed b7       	in	r30, 0x3d	; 61
     246:	fe b7       	in	r31, 0x3e	; 62
     248:	31 96       	adiw	r30, 0x01	; 1
     24a:	8e 01       	movw	r16, r28
     24c:	0f 5f       	subi	r16, 0xFF	; 255
     24e:	1f 4f       	sbci	r17, 0xFF	; 255
     250:	ad b7       	in	r26, 0x3d	; 61
     252:	be b7       	in	r27, 0x3e	; 62
     254:	12 96       	adiw	r26, 0x02	; 2
     256:	1c 93       	st	X, r17
     258:	0e 93       	st	-X, r16
     25a:	11 97       	sbiw	r26, 0x01	; 1
     25c:	23 e2       	ldi	r18, 0x23	; 35
     25e:	32 e0       	ldi	r19, 0x02	; 2
     260:	33 83       	std	Z+3, r19	; 0x03
     262:	22 83       	std	Z+2, r18	; 0x02

ISR(ADC_vect) {
	uint16_t data;
	char arg[8];

	data = ADCW & 0x03ff;
     264:	93 70       	andi	r25, 0x03	; 3
	cbi(ADCSRA, ADEN);

	sprintf(arg, "%d", data);
     266:	95 83       	std	Z+5, r25	; 0x05
     268:	84 83       	std	Z+4, r24	; 0x04
     26a:	0e 94 ff 11 	call	0x23fe	; 0x23fe <sprintf>
	task_tc1047(arg);
     26e:	8d b7       	in	r24, 0x3d	; 61
     270:	9e b7       	in	r25, 0x3e	; 62
     272:	06 96       	adiw	r24, 0x06	; 6
     274:	0f b6       	in	r0, 0x3f	; 63
     276:	f8 94       	cli
     278:	9e bf       	out	0x3e, r25	; 62
     27a:	0f be       	out	0x3f, r0	; 63
     27c:	8d bf       	out	0x3d, r24	; 61
     27e:	c8 01       	movw	r24, r16
     280:	0e 94 ab 00 	call	0x156	; 0x156 <task_tc1047>
}
     284:	28 96       	adiw	r28, 0x08	; 8
     286:	de bf       	out	0x3e, r29	; 62
     288:	cd bf       	out	0x3d, r28	; 61
     28a:	df 91       	pop	r29
     28c:	cf 91       	pop	r28
     28e:	ff 91       	pop	r31
     290:	ef 91       	pop	r30
     292:	bf 91       	pop	r27
     294:	af 91       	pop	r26
     296:	9f 91       	pop	r25
     298:	8f 91       	pop	r24
     29a:	7f 91       	pop	r23
     29c:	6f 91       	pop	r22
     29e:	5f 91       	pop	r21
     2a0:	4f 91       	pop	r20
     2a2:	3f 91       	pop	r19
     2a4:	2f 91       	pop	r18
     2a6:	1f 91       	pop	r17
     2a8:	0f 91       	pop	r16
     2aa:	0f 90       	pop	r0
     2ac:	0b be       	out	0x3b, r0	; 59
     2ae:	0f 90       	pop	r0
     2b0:	0f be       	out	0x3f, r0	; 63
     2b2:	0f 90       	pop	r0
     2b4:	1f 90       	pop	r1
     2b6:	18 95       	reti

000002b8 <app_list>:
#include <stdio.h>
#include <stdlib.h>
#include "linked_list.h"
#include "uart.h"

void app_list(char *ap) {
     2b8:	cf 92       	push	r12
     2ba:	df 92       	push	r13
     2bc:	ff 92       	push	r15
     2be:	0f 93       	push	r16
     2c0:	1f 93       	push	r17
     2c2:	cf 93       	push	r28
     2c4:	df 93       	push	r29
     2c6:	cd b7       	in	r28, 0x3d	; 61
     2c8:	de b7       	in	r29, 0x3e	; 62
     2ca:	28 97       	sbiw	r28, 0x08	; 8
     2cc:	0f b6       	in	r0, 0x3f	; 63
     2ce:	f8 94       	cli
     2d0:	de bf       	out	0x3e, r29	; 62
     2d2:	0f be       	out	0x3f, r0	; 63
     2d4:	cd bf       	out	0x3d, r28	; 61
	char buf[8], how = 'a';
	struct node *np;

	if (ap) how = *ap;
     2d6:	00 97       	sbiw	r24, 0x00	; 0
     2d8:	19 f0       	breq	.+6      	; 0x2e0 <app_list+0x28>
     2da:	fc 01       	movw	r30, r24
     2dc:	f0 80       	ld	r15, Z
     2de:	02 c0       	rjmp	.+4      	; 0x2e4 <app_list+0x2c>
#include <stdlib.h>
#include "linked_list.h"
#include "uart.h"

void app_list(char *ap) {
	char buf[8], how = 'a';
     2e0:	91 e6       	ldi	r25, 0x61	; 97
     2e2:	f9 2e       	mov	r15, r25
	struct node *np;

	if (ap) how = *ap;
	while(1) {
		printf("> ");
     2e4:	86 e2       	ldi	r24, 0x26	; 38
     2e6:	c8 2e       	mov	r12, r24
     2e8:	82 e0       	ldi	r24, 0x02	; 2
     2ea:	d8 2e       	mov	r13, r24
     2ec:	0f 92       	push	r0
     2ee:	0f 92       	push	r0
     2f0:	ed b7       	in	r30, 0x3d	; 61
     2f2:	fe b7       	in	r31, 0x3e	; 62
     2f4:	d2 82       	std	Z+2, r13	; 0x02
     2f6:	c1 82       	std	Z+1, r12	; 0x01
     2f8:	0e 94 b8 11 	call	0x2370	; 0x2370 <printf>
		if (fgets(buf, 8, stdin) == NULL)
     2fc:	0f 90       	pop	r0
     2fe:	0f 90       	pop	r0
     300:	40 91 03 06 	lds	r20, 0x0603
     304:	50 91 04 06 	lds	r21, 0x0604
     308:	ce 01       	movw	r24, r28
     30a:	01 96       	adiw	r24, 0x01	; 1
     30c:	68 e0       	ldi	r22, 0x08	; 8
     30e:	70 e0       	ldi	r23, 0x00	; 0
     310:	0e 94 5e 11 	call	0x22bc	; 0x22bc <fgets>
     314:	00 97       	sbiw	r24, 0x00	; 0
     316:	e9 f0       	breq	.+58     	; 0x352 <app_list+0x9a>
			break;
		np = get_node();
     318:	0e 94 87 03 	call	0x70e	; 0x70e <get_node>
     31c:	8c 01       	movw	r16, r24
		np->data = atoi(buf);
     31e:	ce 01       	movw	r24, r28
     320:	01 96       	adiw	r24, 0x01	; 1
     322:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <atoi>
     326:	f8 01       	movw	r30, r16
     328:	91 83       	std	Z+1, r25	; 0x01
     32a:	80 83       	st	Z, r24
		switch(how) {
     32c:	f8 e6       	ldi	r31, 0x68	; 104
     32e:	ff 16       	cp	r15, r31
     330:	21 f0       	breq	.+8      	; 0x33a <app_list+0x82>
     332:	84 e7       	ldi	r24, 0x74	; 116
     334:	f8 16       	cp	r15, r24
     336:	49 f4       	brne	.+18     	; 0x34a <app_list+0x92>
     338:	04 c0       	rjmp	.+8      	; 0x342 <app_list+0x8a>
			case 'h' : insert_node_head(np); break;
     33a:	c8 01       	movw	r24, r16
     33c:	0e 94 8f 03 	call	0x71e	; 0x71e <insert_node_head>
     340:	d5 cf       	rjmp	.-86     	; 0x2ec <app_list+0x34>
			case 't' : insert_node_tail(np); break;
     342:	c8 01       	movw	r24, r16
     344:	0e 94 a4 03 	call	0x748	; 0x748 <insert_node_tail>
     348:	d1 cf       	rjmp	.-94     	; 0x2ec <app_list+0x34>
			default  : insert_node_ascn(np);
     34a:	c8 01       	movw	r24, r16
     34c:	0e 94 b8 03 	call	0x770	; 0x770 <insert_node_ascn>
     350:	cd cf       	rjmp	.-102    	; 0x2ec <app_list+0x34>
		}
	}
	tour_list();
     352:	0e 94 ef 03 	call	0x7de	; 0x7de <tour_list>
	free_list();
     356:	0e 94 1c 04 	call	0x838	; 0x838 <free_list>
}
     35a:	28 96       	adiw	r28, 0x08	; 8
     35c:	0f b6       	in	r0, 0x3f	; 63
     35e:	f8 94       	cli
     360:	de bf       	out	0x3e, r29	; 62
     362:	0f be       	out	0x3f, r0	; 63
     364:	cd bf       	out	0x3d, r28	; 61
     366:	df 91       	pop	r29
     368:	cf 91       	pop	r28
     36a:	1f 91       	pop	r17
     36c:	0f 91       	pop	r16
     36e:	ff 90       	pop	r15
     370:	df 90       	pop	r13
     372:	cf 90       	pop	r12
     374:	08 95       	ret

00000376 <is_prime>:
// app_prime.c
#include <stdio.h>
#include <stdlib.h>
#include "app_prime.h"

int is_prime(int n) {
     376:	cf 93       	push	r28
     378:	df 93       	push	r29
     37a:	fc 01       	movw	r30, r24
    int i;
	for(i = 2; i <= n/2; i++){
     37c:	62 e0       	ldi	r22, 0x02	; 2
     37e:	70 e0       	ldi	r23, 0x00	; 0
     380:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <__divmodhi4>
     384:	eb 01       	movw	r28, r22
     386:	22 e0       	ldi	r18, 0x02	; 2
     388:	30 e0       	ldi	r19, 0x00	; 0
     38a:	08 c0       	rjmp	.+16     	; 0x39c <is_prime+0x26>
		if((n % i) == 0) 
     38c:	cf 01       	movw	r24, r30
     38e:	b9 01       	movw	r22, r18
     390:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <__divmodhi4>
     394:	00 97       	sbiw	r24, 0x00	; 0
     396:	41 f0       	breq	.+16     	; 0x3a8 <is_prime+0x32>
#include <stdlib.h>
#include "app_prime.h"

int is_prime(int n) {
    int i;
	for(i = 2; i <= n/2; i++){
     398:	2f 5f       	subi	r18, 0xFF	; 255
     39a:	3f 4f       	sbci	r19, 0xFF	; 255
     39c:	c2 17       	cp	r28, r18
     39e:	d3 07       	cpc	r29, r19
     3a0:	ac f7       	brge	.-22     	; 0x38c <is_prime+0x16>
		if((n % i) == 0) 
			return(0);
	}
	return(1);
     3a2:	81 e0       	ldi	r24, 0x01	; 1
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	02 c0       	rjmp	.+4      	; 0x3ac <is_prime+0x36>

int is_prime(int n) {
    int i;
	for(i = 2; i <= n/2; i++){
		if((n % i) == 0) 
			return(0);
     3a8:	80 e0       	ldi	r24, 0x00	; 0
     3aa:	90 e0       	ldi	r25, 0x00	; 0
	}
	return(1);
}
     3ac:	df 91       	pop	r29
     3ae:	cf 91       	pop	r28
     3b0:	08 95       	ret

000003b2 <app_prime>:

void app_prime(char *ap) {
     3b2:	cf 92       	push	r12
     3b4:	df 92       	push	r13
     3b6:	ef 92       	push	r14
     3b8:	ff 92       	push	r15
     3ba:	0f 93       	push	r16
     3bc:	1f 93       	push	r17
     3be:	cf 93       	push	r28
     3c0:	df 93       	push	r29
    int t = 2000, count = 0, n;

	if(ap) t = atoi(ap);
     3c2:	00 97       	sbiw	r24, 0x00	; 0
     3c4:	21 f0       	breq	.+8      	; 0x3ce <app_prime+0x1c>
     3c6:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <atoi>
     3ca:	7c 01       	movw	r14, r24
     3cc:	04 c0       	rjmp	.+8      	; 0x3d6 <app_prime+0x24>
	}
	return(1);
}

void app_prime(char *ap) {
    int t = 2000, count = 0, n;
     3ce:	90 ed       	ldi	r25, 0xD0	; 208
     3d0:	e9 2e       	mov	r14, r25
     3d2:	97 e0       	ldi	r25, 0x07	; 7
     3d4:	f9 2e       	mov	r15, r25

	if(ap) t = atoi(ap);

	for (n = 2; n <= t; n++){
     3d6:	c2 e0       	ldi	r28, 0x02	; 2
     3d8:	d0 e0       	ldi	r29, 0x00	; 0
	}
	return(1);
}

void app_prime(char *ap) {
    int t = 2000, count = 0, n;
     3da:	00 e0       	ldi	r16, 0x00	; 0
     3dc:	10 e0       	ldi	r17, 0x00	; 0
	if(ap) t = atoi(ap);

	for (n = 2; n <= t; n++){
		if(is_prime(n)) {
		    count++;
			printf("%d is a prime number!!!\n", n);
     3de:	89 e2       	ldi	r24, 0x29	; 41
     3e0:	c8 2e       	mov	r12, r24
     3e2:	82 e0       	ldi	r24, 0x02	; 2
     3e4:	d8 2e       	mov	r13, r24
void app_prime(char *ap) {
    int t = 2000, count = 0, n;

	if(ap) t = atoi(ap);

	for (n = 2; n <= t; n++){
     3e6:	16 c0       	rjmp	.+44     	; 0x414 <app_prime+0x62>
		if(is_prime(n)) {
     3e8:	ce 01       	movw	r24, r28
     3ea:	0e 94 bb 01 	call	0x376	; 0x376 <is_prime>
     3ee:	00 97       	sbiw	r24, 0x00	; 0
     3f0:	81 f0       	breq	.+32     	; 0x412 <app_prime+0x60>
		    count++;
     3f2:	0f 5f       	subi	r16, 0xFF	; 255
     3f4:	1f 4f       	sbci	r17, 0xFF	; 255
			printf("%d is a prime number!!!\n", n);
     3f6:	00 d0       	rcall	.+0      	; 0x3f8 <app_prime+0x46>
     3f8:	0f 92       	push	r0
     3fa:	ed b7       	in	r30, 0x3d	; 61
     3fc:	fe b7       	in	r31, 0x3e	; 62
     3fe:	d2 82       	std	Z+2, r13	; 0x02
     400:	c1 82       	std	Z+1, r12	; 0x01
     402:	d4 83       	std	Z+4, r29	; 0x04
     404:	c3 83       	std	Z+3, r28	; 0x03
     406:	0e 94 b8 11 	call	0x2370	; 0x2370 <printf>
     40a:	0f 90       	pop	r0
     40c:	0f 90       	pop	r0
     40e:	0f 90       	pop	r0
     410:	0f 90       	pop	r0
void app_prime(char *ap) {
    int t = 2000, count = 0, n;

	if(ap) t = atoi(ap);

	for (n = 2; n <= t; n++){
     412:	21 96       	adiw	r28, 0x01	; 1
     414:	ec 16       	cp	r14, r28
     416:	fd 06       	cpc	r15, r29
     418:	3c f7       	brge	.-50     	; 0x3e8 <app_prime+0x36>
		if(is_prime(n)) {
		    count++;
			printf("%d is a prime number!!!\n", n);
		}
	}
	printf("count=%d\n", count);
     41a:	00 d0       	rcall	.+0      	; 0x41c <app_prime+0x6a>
     41c:	0f 92       	push	r0
     41e:	82 e4       	ldi	r24, 0x42	; 66
     420:	92 e0       	ldi	r25, 0x02	; 2
     422:	ed b7       	in	r30, 0x3d	; 61
     424:	fe b7       	in	r31, 0x3e	; 62
     426:	92 83       	std	Z+2, r25	; 0x02
     428:	81 83       	std	Z+1, r24	; 0x01
     42a:	14 83       	std	Z+4, r17	; 0x04
     42c:	03 83       	std	Z+3, r16	; 0x03
     42e:	0e 94 b8 11 	call	0x2370	; 0x2370 <printf>
     432:	0f 90       	pop	r0
     434:	0f 90       	pop	r0
     436:	0f 90       	pop	r0
     438:	0f 90       	pop	r0
}
     43a:	df 91       	pop	r29
     43c:	cf 91       	pop	r28
     43e:	1f 91       	pop	r17
     440:	0f 91       	pop	r16
     442:	ff 90       	pop	r15
     444:	ef 90       	pop	r14
     446:	df 90       	pop	r13
     448:	cf 90       	pop	r12
     44a:	08 95       	ret

0000044c <task_prime>:

void task_prime(char *ap) {
     44c:	cf 92       	push	r12
     44e:	df 92       	push	r13
     450:	ef 92       	push	r14
     452:	ff 92       	push	r15
     454:	0f 93       	push	r16
     456:	1f 93       	push	r17
     458:	cf 93       	push	r28
     45a:	df 93       	push	r29
	int n, t = 2000, count = 0;

	if (ap && *ap) t = atoi(ap);
     45c:	00 97       	sbiw	r24, 0x00	; 0
     45e:	41 f0       	breq	.+16     	; 0x470 <task_prime+0x24>
     460:	fc 01       	movw	r30, r24
     462:	20 81       	ld	r18, Z
     464:	22 23       	and	r18, r18
     466:	21 f0       	breq	.+8      	; 0x470 <task_prime+0x24>
     468:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <atoi>
     46c:	8c 01       	movw	r16, r24
     46e:	02 c0       	rjmp	.+4      	; 0x474 <task_prime+0x28>
	}
	printf("count=%d\n", count);
}

void task_prime(char *ap) {
	int n, t = 2000, count = 0;
     470:	00 ed       	ldi	r16, 0xD0	; 208
     472:	17 e0       	ldi	r17, 0x07	; 7
     474:	ee 24       	eor	r14, r14
     476:	ff 24       	eor	r15, r15

	if (ap && *ap) t = atoi(ap);
	for (n = 2; n <= t; n++){
     478:	c2 e0       	ldi	r28, 0x02	; 2
     47a:	d0 e0       	ldi	r29, 0x00	; 0
		if(is_prime(n)) {
		    count++;
			printf("%d is a prime number!!!\n", n);
     47c:	29 e2       	ldi	r18, 0x29	; 41
     47e:	c2 2e       	mov	r12, r18
     480:	22 e0       	ldi	r18, 0x02	; 2
     482:	d2 2e       	mov	r13, r18

void task_prime(char *ap) {
	int n, t = 2000, count = 0;

	if (ap && *ap) t = atoi(ap);
	for (n = 2; n <= t; n++){
     484:	17 c0       	rjmp	.+46     	; 0x4b4 <task_prime+0x68>
		if(is_prime(n)) {
     486:	ce 01       	movw	r24, r28
     488:	0e 94 bb 01 	call	0x376	; 0x376 <is_prime>
     48c:	00 97       	sbiw	r24, 0x00	; 0
     48e:	89 f0       	breq	.+34     	; 0x4b2 <task_prime+0x66>
		    count++;
     490:	08 94       	sec
     492:	e1 1c       	adc	r14, r1
     494:	f1 1c       	adc	r15, r1
			printf("%d is a prime number!!!\n", n);
     496:	00 d0       	rcall	.+0      	; 0x498 <task_prime+0x4c>
     498:	0f 92       	push	r0
     49a:	ed b7       	in	r30, 0x3d	; 61
     49c:	fe b7       	in	r31, 0x3e	; 62
     49e:	d2 82       	std	Z+2, r13	; 0x02
     4a0:	c1 82       	std	Z+1, r12	; 0x01
     4a2:	d4 83       	std	Z+4, r29	; 0x04
     4a4:	c3 83       	std	Z+3, r28	; 0x03
     4a6:	0e 94 b8 11 	call	0x2370	; 0x2370 <printf>
     4aa:	0f 90       	pop	r0
     4ac:	0f 90       	pop	r0
     4ae:	0f 90       	pop	r0
     4b0:	0f 90       	pop	r0

void task_prime(char *ap) {
	int n, t = 2000, count = 0;

	if (ap && *ap) t = atoi(ap);
	for (n = 2; n <= t; n++){
     4b2:	21 96       	adiw	r28, 0x01	; 1
     4b4:	0c 17       	cp	r16, r28
     4b6:	1d 07       	cpc	r17, r29
     4b8:	34 f7       	brge	.-52     	; 0x486 <task_prime+0x3a>
		if(is_prime(n)) {
		    count++;
			printf("%d is a prime number!!!\n", n);
		}
	}
	printf("count=%d\n", count);
     4ba:	00 d0       	rcall	.+0      	; 0x4bc <task_prime+0x70>
     4bc:	0f 92       	push	r0
     4be:	82 e4       	ldi	r24, 0x42	; 66
     4c0:	92 e0       	ldi	r25, 0x02	; 2
     4c2:	ed b7       	in	r30, 0x3d	; 61
     4c4:	fe b7       	in	r31, 0x3e	; 62
     4c6:	92 83       	std	Z+2, r25	; 0x02
     4c8:	81 83       	std	Z+1, r24	; 0x01
     4ca:	f4 82       	std	Z+4, r15	; 0x04
     4cc:	e3 82       	std	Z+3, r14	; 0x03
     4ce:	0e 94 b8 11 	call	0x2370	; 0x2370 <printf>
	printf("$ ");
     4d2:	0f 90       	pop	r0
     4d4:	0f 90       	pop	r0
     4d6:	8c e4       	ldi	r24, 0x4C	; 76
     4d8:	92 e0       	ldi	r25, 0x02	; 2
     4da:	ed b7       	in	r30, 0x3d	; 61
     4dc:	fe b7       	in	r31, 0x3e	; 62
     4de:	92 83       	std	Z+2, r25	; 0x02
     4e0:	81 83       	std	Z+1, r24	; 0x01
     4e2:	0e 94 b8 11 	call	0x2370	; 0x2370 <printf>
     4e6:	0f 90       	pop	r0
     4e8:	0f 90       	pop	r0
}
     4ea:	df 91       	pop	r29
     4ec:	cf 91       	pop	r28
     4ee:	1f 91       	pop	r17
     4f0:	0f 91       	pop	r16
     4f2:	ff 90       	pop	r15
     4f4:	ef 90       	pop	r14
     4f6:	df 90       	pop	r13
     4f8:	cf 90       	pop	r12
     4fa:	08 95       	ret

000004fc <app_sum>:
#include "app_sum.h"

void app_sum(char *ap) {
	int t = 100, sum = 0;

	if (ap && *ap) t = atoi(ap);
     4fc:	00 97       	sbiw	r24, 0x00	; 0
     4fe:	41 f0       	breq	.+16     	; 0x510 <app_sum+0x14>
     500:	fc 01       	movw	r30, r24
     502:	20 81       	ld	r18, Z
     504:	22 23       	and	r18, r18
     506:	21 f0       	breq	.+8      	; 0x510 <app_sum+0x14>
     508:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <atoi>
     50c:	9c 01       	movw	r18, r24
     50e:	02 c0       	rjmp	.+4      	; 0x514 <app_sum+0x18>
#include <stdio.h>
#include <stdlib.h>
#include "app_sum.h"

void app_sum(char *ap) {
	int t = 100, sum = 0;
     510:	24 e6       	ldi	r18, 0x64	; 100
     512:	30 e0       	ldi	r19, 0x00	; 0

	if (ap && *ap) t = atoi(ap);
	sum = ((t + 1) * (t)) / 2;
	printf("sum=%d\n", sum);
     514:	00 d0       	rcall	.+0      	; 0x516 <app_sum+0x1a>
     516:	0f 92       	push	r0
     518:	8f e4       	ldi	r24, 0x4F	; 79
     51a:	92 e0       	ldi	r25, 0x02	; 2
     51c:	ed b7       	in	r30, 0x3d	; 61
     51e:	fe b7       	in	r31, 0x3e	; 62
     520:	92 83       	std	Z+2, r25	; 0x02
     522:	81 83       	std	Z+1, r24	; 0x01

void app_sum(char *ap) {
	int t = 100, sum = 0;

	if (ap && *ap) t = atoi(ap);
	sum = ((t + 1) * (t)) / 2;
     524:	a9 01       	movw	r20, r18
     526:	4f 5f       	subi	r20, 0xFF	; 255
     528:	5f 4f       	sbci	r21, 0xFF	; 255
     52a:	42 9f       	mul	r20, r18
     52c:	c0 01       	movw	r24, r0
     52e:	43 9f       	mul	r20, r19
     530:	90 0d       	add	r25, r0
     532:	52 9f       	mul	r21, r18
     534:	90 0d       	add	r25, r0
     536:	11 24       	eor	r1, r1
     538:	62 e0       	ldi	r22, 0x02	; 2
     53a:	70 e0       	ldi	r23, 0x00	; 0
     53c:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <__divmodhi4>
	printf("sum=%d\n", sum);
     540:	74 83       	std	Z+4, r23	; 0x04
     542:	63 83       	std	Z+3, r22	; 0x03
     544:	0e 94 b8 11 	call	0x2370	; 0x2370 <printf>
     548:	0f 90       	pop	r0
     54a:	0f 90       	pop	r0
     54c:	0f 90       	pop	r0
     54e:	0f 90       	pop	r0
}
     550:	08 95       	ret

00000552 <q_init>:
#include "cir_queue.h"

char qi[QI_SIZE], qo[QO_SIZE];
int fi, ri, fo, ro;
void q_init(void) {
	fi = ri = fo = ro = 0;
     552:	10 92 17 05 	sts	0x0517, r1
     556:	10 92 16 05 	sts	0x0516, r1
     55a:	10 92 15 05 	sts	0x0515, r1
     55e:	10 92 14 05 	sts	0x0514, r1
     562:	10 92 19 05 	sts	0x0519, r1
     566:	10 92 18 05 	sts	0x0518, r1
     56a:	10 92 d3 04 	sts	0x04D3, r1
     56e:	10 92 d2 04 	sts	0x04D2, r1
}
     572:	08 95       	ret

00000574 <qi_insert>:
int qi_insert(char ch) {
     574:	48 2f       	mov	r20, r24
	if((ri + 1) % QI_SIZE == fi)
     576:	20 91 18 05 	lds	r18, 0x0518
     57a:	30 91 19 05 	lds	r19, 0x0519
     57e:	2f 5f       	subi	r18, 0xFF	; 255
     580:	3f 4f       	sbci	r19, 0xFF	; 255
     582:	c9 01       	movw	r24, r18
     584:	60 e4       	ldi	r22, 0x40	; 64
     586:	70 e0       	ldi	r23, 0x00	; 0
     588:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <__divmodhi4>
     58c:	9c 01       	movw	r18, r24
     58e:	80 91 d2 04 	lds	r24, 0x04D2
     592:	90 91 d3 04 	lds	r25, 0x04D3
     596:	28 17       	cp	r18, r24
     598:	39 07       	cpc	r19, r25
     59a:	59 f0       	breq	.+22     	; 0x5b2 <qi_insert+0x3e>
		return (0);
	ri = (ri + 1) % QI_SIZE;
     59c:	30 93 19 05 	sts	0x0519, r19
     5a0:	20 93 18 05 	sts	0x0518, r18
	qi[ri] = ch;
     5a4:	26 5e       	subi	r18, 0xE6	; 230
     5a6:	3a 4f       	sbci	r19, 0xFA	; 250
     5a8:	f9 01       	movw	r30, r18
     5aa:	40 83       	st	Z, r20
	return(1);
     5ac:	81 e0       	ldi	r24, 0x01	; 1
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	08 95       	ret
void q_init(void) {
	fi = ri = fo = ro = 0;
}
int qi_insert(char ch) {
	if((ri + 1) % QI_SIZE == fi)
		return (0);
     5b2:	80 e0       	ldi	r24, 0x00	; 0
     5b4:	90 e0       	ldi	r25, 0x00	; 0
	ri = (ri + 1) % QI_SIZE;
	qi[ri] = ch;
	return(1);
}
     5b6:	08 95       	ret

000005b8 <qi_delete>:
int qi_delete(void) {
	if( ri == fi)
     5b8:	80 91 d2 04 	lds	r24, 0x04D2
     5bc:	90 91 d3 04 	lds	r25, 0x04D3
     5c0:	20 91 18 05 	lds	r18, 0x0518
     5c4:	30 91 19 05 	lds	r19, 0x0519
     5c8:	28 17       	cp	r18, r24
     5ca:	39 07       	cpc	r19, r25
     5cc:	79 f0       	breq	.+30     	; 0x5ec <qi_delete+0x34>
		return(0);
    fi = (fi+1) % QI_SIZE;
     5ce:	01 96       	adiw	r24, 0x01	; 1
     5d0:	60 e4       	ldi	r22, 0x40	; 64
     5d2:	70 e0       	ldi	r23, 0x00	; 0
     5d4:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <__divmodhi4>
     5d8:	90 93 d3 04 	sts	0x04D3, r25
     5dc:	80 93 d2 04 	sts	0x04D2, r24
	return(qi[fi]);
     5e0:	86 5e       	subi	r24, 0xE6	; 230
     5e2:	9a 4f       	sbci	r25, 0xFA	; 250
     5e4:	fc 01       	movw	r30, r24
     5e6:	80 81       	ld	r24, Z
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	08 95       	ret
	qi[ri] = ch;
	return(1);
}
int qi_delete(void) {
	if( ri == fi)
		return(0);
     5ec:	80 e0       	ldi	r24, 0x00	; 0
     5ee:	90 e0       	ldi	r25, 0x00	; 0
    fi = (fi+1) % QI_SIZE;
	return(qi[fi]);
}
     5f0:	08 95       	ret

000005f2 <qo_insert>:
int qo_insert(char ch) {
     5f2:	48 2f       	mov	r20, r24
	if((ro + 1) % QO_SIZE == fo)
     5f4:	20 91 16 05 	lds	r18, 0x0516
     5f8:	30 91 17 05 	lds	r19, 0x0517
     5fc:	2f 5f       	subi	r18, 0xFF	; 255
     5fe:	3f 4f       	sbci	r19, 0xFF	; 255
     600:	c9 01       	movw	r24, r18
     602:	60 e4       	ldi	r22, 0x40	; 64
     604:	70 e0       	ldi	r23, 0x00	; 0
     606:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <__divmodhi4>
     60a:	9c 01       	movw	r18, r24
     60c:	80 91 14 05 	lds	r24, 0x0514
     610:	90 91 15 05 	lds	r25, 0x0515
     614:	28 17       	cp	r18, r24
     616:	39 07       	cpc	r19, r25
     618:	59 f0       	breq	.+22     	; 0x630 <qo_insert+0x3e>
		return (0);
	ro = (ro + 1) % QO_SIZE;
     61a:	30 93 17 05 	sts	0x0517, r19
     61e:	20 93 16 05 	sts	0x0516, r18
	qo[ro] = ch;
     622:	2c 52       	subi	r18, 0x2C	; 44
     624:	3b 4f       	sbci	r19, 0xFB	; 251
     626:	f9 01       	movw	r30, r18
     628:	40 83       	st	Z, r20
	return(1);
     62a:	81 e0       	ldi	r24, 0x01	; 1
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	08 95       	ret
    fi = (fi+1) % QI_SIZE;
	return(qi[fi]);
}
int qo_insert(char ch) {
	if((ro + 1) % QO_SIZE == fo)
		return (0);
     630:	80 e0       	ldi	r24, 0x00	; 0
     632:	90 e0       	ldi	r25, 0x00	; 0
	ro = (ro + 1) % QO_SIZE;
	qo[ro] = ch;
	return(1);
}
     634:	08 95       	ret

00000636 <qo_delete>:
int qo_delete(void) {
	if( ro == fo)
     636:	80 91 14 05 	lds	r24, 0x0514
     63a:	90 91 15 05 	lds	r25, 0x0515
     63e:	20 91 16 05 	lds	r18, 0x0516
     642:	30 91 17 05 	lds	r19, 0x0517
     646:	28 17       	cp	r18, r24
     648:	39 07       	cpc	r19, r25
     64a:	79 f0       	breq	.+30     	; 0x66a <qo_delete+0x34>
		return(0);
    fo = (fo+1) % QO_SIZE;
     64c:	01 96       	adiw	r24, 0x01	; 1
     64e:	60 e4       	ldi	r22, 0x40	; 64
     650:	70 e0       	ldi	r23, 0x00	; 0
     652:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <__divmodhi4>
     656:	90 93 15 05 	sts	0x0515, r25
     65a:	80 93 14 05 	sts	0x0514, r24
	return(qo[fo]);
     65e:	8c 52       	subi	r24, 0x2C	; 44
     660:	9b 4f       	sbci	r25, 0xFB	; 251
     662:	fc 01       	movw	r30, r24
     664:	80 81       	ld	r24, Z
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	08 95       	ret
	qo[ro] = ch;
	return(1);
}
int qo_delete(void) {
	if( ro == fo)
		return(0);
     66a:	80 e0       	ldi	r24, 0x00	; 0
     66c:	90 e0       	ldi	r25, 0x00	; 0
    fo = (fo+1) % QO_SIZE;
	return(qo[fo]);
}
     66e:	08 95       	ret

00000670 <qi_peek>:

int qi_peek() {
	if (fi == ri) return 0;
     670:	80 91 d2 04 	lds	r24, 0x04D2
     674:	90 91 d3 04 	lds	r25, 0x04D3
     678:	20 91 18 05 	lds	r18, 0x0518
     67c:	30 91 19 05 	lds	r19, 0x0519
     680:	82 17       	cp	r24, r18
     682:	93 07       	cpc	r25, r19
     684:	59 f0       	breq	.+22     	; 0x69c <qi_peek+0x2c>
	else 
		return (qi[(fi + 1) % QI_SIZE]);
     686:	01 96       	adiw	r24, 0x01	; 1
     688:	60 e4       	ldi	r22, 0x40	; 64
     68a:	70 e0       	ldi	r23, 0x00	; 0
     68c:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <__divmodhi4>
     690:	86 5e       	subi	r24, 0xE6	; 230
     692:	9a 4f       	sbci	r25, 0xFA	; 250
     694:	fc 01       	movw	r30, r24
     696:	80 81       	ld	r24, Z
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	08 95       	ret
    fo = (fo+1) % QO_SIZE;
	return(qo[fo]);
}

int qi_peek() {
	if (fi == ri) return 0;
     69c:	80 e0       	ldi	r24, 0x00	; 0
     69e:	90 e0       	ldi	r25, 0x00	; 0
	else 
		return (qi[(fi + 1) % QI_SIZE]);
}
     6a0:	08 95       	ret

000006a2 <led_init>:
#include "led.h"

static uint8_t Leds;

void led_init(void) {
    DDRL = PORTL = 0xff;
     6a2:	8f ef       	ldi	r24, 0xFF	; 255
     6a4:	80 93 0b 01 	sts	0x010B, r24
     6a8:	80 93 0a 01 	sts	0x010A, r24
} 
     6ac:	08 95       	ret

000006ae <led_on_all>:
void led_on_all(void) {
    Leds = PORTL = 0x00;
     6ae:	10 92 0b 01 	sts	0x010B, r1
     6b2:	10 92 c8 04 	sts	0x04C8, r1
}
     6b6:	08 95       	ret

000006b8 <led_off_all>:
void led_off_all(void) {
    Leds = PORTL = 0xff;
     6b8:	8f ef       	ldi	r24, 0xFF	; 255
     6ba:	80 93 0b 01 	sts	0x010B, r24
     6be:	80 93 c8 04 	sts	0x04C8, r24
}
     6c2:	08 95       	ret

000006c4 <led_on>:
void led_on(uint8_t led_no) {
    Leds &= ~(1 << led_no);
     6c4:	21 e0       	ldi	r18, 0x01	; 1
     6c6:	30 e0       	ldi	r19, 0x00	; 0
     6c8:	02 c0       	rjmp	.+4      	; 0x6ce <led_on+0xa>
     6ca:	22 0f       	add	r18, r18
     6cc:	33 1f       	adc	r19, r19
     6ce:	8a 95       	dec	r24
     6d0:	e2 f7       	brpl	.-8      	; 0x6ca <led_on+0x6>
     6d2:	20 95       	com	r18
     6d4:	80 91 c8 04 	lds	r24, 0x04C8
     6d8:	28 23       	and	r18, r24
     6da:	20 93 c8 04 	sts	0x04C8, r18
	PORTL = Leds;
     6de:	20 93 0b 01 	sts	0x010B, r18
}
     6e2:	08 95       	ret

000006e4 <led_off>:
void led_off(uint8_t led_no) {
	Leds |= (1 << led_no);
     6e4:	21 e0       	ldi	r18, 0x01	; 1
     6e6:	30 e0       	ldi	r19, 0x00	; 0
     6e8:	02 c0       	rjmp	.+4      	; 0x6ee <led_off+0xa>
     6ea:	22 0f       	add	r18, r18
     6ec:	33 1f       	adc	r19, r19
     6ee:	8a 95       	dec	r24
     6f0:	e2 f7       	brpl	.-8      	; 0x6ea <led_off+0x6>
     6f2:	80 91 c8 04 	lds	r24, 0x04C8
     6f6:	82 2b       	or	r24, r18
     6f8:	80 93 c8 04 	sts	0x04C8, r24
	PORTL = Leds;
     6fc:	80 93 0b 01 	sts	0x010B, r24
}
     700:	08 95       	ret

00000702 <led_set>:
void led_set(uint8_t led_mask) {
    Leds = ~led_mask;
     702:	80 95       	com	r24
     704:	80 93 c8 04 	sts	0x04C8, r24
	PORTL = Leds;
     708:	80 93 0b 01 	sts	0x010B, r24
}
     70c:	08 95       	ret

0000070e <get_node>:
struct node *Head = NULL;

struct node *get_node() {
	struct node *cp;
	
	cp = (struct node *)malloc(sizeof(struct node));
     70e:	84 e0       	ldi	r24, 0x04	; 4
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <malloc>
	return cp;
}
     716:	08 95       	ret

00000718 <free_node>:

void free_node(struct node *np) {
	free(np);
     718:	0e 94 63 10 	call	0x20c6	; 0x20c6 <free>
	np = NULL;
}
     71c:	08 95       	ret

0000071e <insert_node_head>:

void insert_node_head(struct node *np) {
     71e:	fc 01       	movw	r30, r24
	if(!Head) {
     720:	80 91 c9 04 	lds	r24, 0x04C9
     724:	90 91 ca 04 	lds	r25, 0x04CA
     728:	00 97       	sbiw	r24, 0x00	; 0
     72a:	39 f4       	brne	.+14     	; 0x73a <insert_node_head+0x1c>
		Head = np;
     72c:	f0 93 ca 04 	sts	0x04CA, r31
     730:	e0 93 c9 04 	sts	0x04C9, r30
		np->link = NULL;
     734:	13 82       	std	Z+3, r1	; 0x03
     736:	12 82       	std	Z+2, r1	; 0x02
     738:	08 95       	ret
	} else {
		np->link = Head;
     73a:	93 83       	std	Z+3, r25	; 0x03
     73c:	82 83       	std	Z+2, r24	; 0x02
		Head = np;
     73e:	f0 93 ca 04 	sts	0x04CA, r31
     742:	e0 93 c9 04 	sts	0x04C9, r30
     746:	08 95       	ret

00000748 <insert_node_tail>:
	}
}
void insert_node_tail(struct node *np){
	struct node *cp;
	if(!Head)
     748:	e0 91 c9 04 	lds	r30, 0x04C9
     74c:	f0 91 ca 04 	lds	r31, 0x04CA
     750:	30 97       	sbiw	r30, 0x00	; 0
     752:	31 f4       	brne	.+12     	; 0x760 <insert_node_tail+0x18>
		Head = np;
     754:	90 93 ca 04 	sts	0x04CA, r25
     758:	80 93 c9 04 	sts	0x04C9, r24
     75c:	08 95       	ret
	else {
		for (cp = Head; cp->link != NULL; cp = cp->link);
     75e:	f9 01       	movw	r30, r18
     760:	22 81       	ldd	r18, Z+2	; 0x02
     762:	33 81       	ldd	r19, Z+3	; 0x03
     764:	21 15       	cp	r18, r1
     766:	31 05       	cpc	r19, r1
     768:	d1 f7       	brne	.-12     	; 0x75e <insert_node_tail+0x16>
		cp->link = np;
     76a:	93 83       	std	Z+3, r25	; 0x03
     76c:	82 83       	std	Z+2, r24	; 0x02
     76e:	08 95       	ret

00000770 <insert_node_ascn>:
	}
}
void insert_node_ascn(struct node *np) {
     770:	cf 93       	push	r28
     772:	df 93       	push	r29
     774:	fc 01       	movw	r30, r24
	struct node *cp, *pp;
	if(!Head) {
     776:	20 91 c9 04 	lds	r18, 0x04C9
     77a:	30 91 ca 04 	lds	r19, 0x04CA
     77e:	21 15       	cp	r18, r1
     780:	31 05       	cpc	r19, r1
     782:	31 f0       	breq	.+12     	; 0x790 <insert_node_ascn+0x20>
		Head = np;
		np->link = NULL;
	} else {
		for (cp = Head, pp = NULL; cp != NULL && cp->data < np->data;
     784:	40 81       	ld	r20, Z
     786:	51 81       	ldd	r21, Z+1	; 0x01
     788:	d9 01       	movw	r26, r18
     78a:	c0 e0       	ldi	r28, 0x00	; 0
     78c:	d0 e0       	ldi	r29, 0x00	; 0
     78e:	0f c0       	rjmp	.+30     	; 0x7ae <insert_node_ascn+0x3e>
	}
}
void insert_node_ascn(struct node *np) {
	struct node *cp, *pp;
	if(!Head) {
		Head = np;
     790:	90 93 ca 04 	sts	0x04CA, r25
     794:	80 93 c9 04 	sts	0x04C9, r24
		np->link = NULL;
     798:	13 82       	std	Z+3, r1	; 0x03
     79a:	12 82       	std	Z+2, r1	; 0x02
     79c:	1d c0       	rjmp	.+58     	; 0x7d8 <insert_node_ascn+0x68>
	} else {
		for (cp = Head, pp = NULL; cp != NULL && cp->data < np->data;
												pp = cp, cp = cp->link);
     79e:	12 96       	adiw	r26, 0x02	; 2
     7a0:	8d 91       	ld	r24, X+
     7a2:	9c 91       	ld	r25, X
     7a4:	13 97       	sbiw	r26, 0x03	; 3
	struct node *cp, *pp;
	if(!Head) {
		Head = np;
		np->link = NULL;
	} else {
		for (cp = Head, pp = NULL; cp != NULL && cp->data < np->data;
     7a6:	ed 01       	movw	r28, r26
     7a8:	00 97       	sbiw	r24, 0x00	; 0
     7aa:	39 f0       	breq	.+14     	; 0x7ba <insert_node_ascn+0x4a>
												pp = cp, cp = cp->link);
     7ac:	dc 01       	movw	r26, r24
	struct node *cp, *pp;
	if(!Head) {
		Head = np;
		np->link = NULL;
	} else {
		for (cp = Head, pp = NULL; cp != NULL && cp->data < np->data;
     7ae:	8d 91       	ld	r24, X+
     7b0:	9c 91       	ld	r25, X
     7b2:	11 97       	sbiw	r26, 0x01	; 1
     7b4:	84 17       	cp	r24, r20
     7b6:	95 07       	cpc	r25, r21
     7b8:	94 f3       	brlt	.-28     	; 0x79e <insert_node_ascn+0x2e>
												pp = cp, cp = cp->link);
		
		if(pp == NULL) {
     7ba:	20 97       	sbiw	r28, 0x00	; 0
     7bc:	39 f4       	brne	.+14     	; 0x7cc <insert_node_ascn+0x5c>
			np->link = Head;
     7be:	33 83       	std	Z+3, r19	; 0x03
     7c0:	22 83       	std	Z+2, r18	; 0x02
			Head = np;
     7c2:	f0 93 ca 04 	sts	0x04CA, r31
     7c6:	e0 93 c9 04 	sts	0x04C9, r30
     7ca:	06 c0       	rjmp	.+12     	; 0x7d8 <insert_node_ascn+0x68>
		} else {
			np->link = pp->link;
     7cc:	8a 81       	ldd	r24, Y+2	; 0x02
     7ce:	9b 81       	ldd	r25, Y+3	; 0x03
     7d0:	93 83       	std	Z+3, r25	; 0x03
     7d2:	82 83       	std	Z+2, r24	; 0x02
			pp->link = np;
     7d4:	fb 83       	std	Y+3, r31	; 0x03
     7d6:	ea 83       	std	Y+2, r30	; 0x02
		}
	}
}
     7d8:	df 91       	pop	r29
     7da:	cf 91       	pop	r28
     7dc:	08 95       	ret

000007de <tour_list>:

void tour_list() {
     7de:	0f 93       	push	r16
     7e0:	1f 93       	push	r17
     7e2:	cf 93       	push	r28
     7e4:	df 93       	push	r29
	struct node *cp;

	printf("\n");
     7e6:	8a e0       	ldi	r24, 0x0A	; 10
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	0e 94 ca 11 	call	0x2394	; 0x2394 <putchar>
	for (cp = Head; cp !=NULL; cp = cp->link)
     7ee:	c0 91 c9 04 	lds	r28, 0x04C9
     7f2:	d0 91 ca 04 	lds	r29, 0x04CA
		printf("-->%d ", cp->data);
     7f6:	07 e5       	ldi	r16, 0x57	; 87
     7f8:	12 e0       	ldi	r17, 0x02	; 2

void tour_list() {
	struct node *cp;

	printf("\n");
	for (cp = Head; cp !=NULL; cp = cp->link)
     7fa:	13 c0       	rjmp	.+38     	; 0x822 <tour_list+0x44>
		printf("-->%d ", cp->data);
     7fc:	00 d0       	rcall	.+0      	; 0x7fe <tour_list+0x20>
     7fe:	0f 92       	push	r0
     800:	ed b7       	in	r30, 0x3d	; 61
     802:	fe b7       	in	r31, 0x3e	; 62
     804:	12 83       	std	Z+2, r17	; 0x02
     806:	01 83       	std	Z+1, r16	; 0x01
     808:	88 81       	ld	r24, Y
     80a:	99 81       	ldd	r25, Y+1	; 0x01
     80c:	94 83       	std	Z+4, r25	; 0x04
     80e:	83 83       	std	Z+3, r24	; 0x03
     810:	0e 94 b8 11 	call	0x2370	; 0x2370 <printf>

void tour_list() {
	struct node *cp;

	printf("\n");
	for (cp = Head; cp !=NULL; cp = cp->link)
     814:	0a 80       	ldd	r0, Y+2	; 0x02
     816:	db 81       	ldd	r29, Y+3	; 0x03
     818:	c0 2d       	mov	r28, r0
     81a:	0f 90       	pop	r0
     81c:	0f 90       	pop	r0
     81e:	0f 90       	pop	r0
     820:	0f 90       	pop	r0
     822:	20 97       	sbiw	r28, 0x00	; 0
     824:	59 f7       	brne	.-42     	; 0x7fc <tour_list+0x1e>
		printf("-->%d ", cp->data);
	printf("\n");
     826:	8a e0       	ldi	r24, 0x0A	; 10
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	0e 94 ca 11 	call	0x2394	; 0x2394 <putchar>
}
     82e:	df 91       	pop	r29
     830:	cf 91       	pop	r28
     832:	1f 91       	pop	r17
     834:	0f 91       	pop	r16
     836:	08 95       	ret

00000838 <free_list>:

void free_list() {
	struct node *cp;

	for( ; Head != NULL; ) {
     838:	09 c0       	rjmp	.+18     	; 0x84c <free_list+0x14>
		cp = Head;
		Head = cp->link;
     83a:	fc 01       	movw	r30, r24
     83c:	22 81       	ldd	r18, Z+2	; 0x02
     83e:	33 81       	ldd	r19, Z+3	; 0x03
     840:	30 93 ca 04 	sts	0x04CA, r19
     844:	20 93 c9 04 	sts	0x04C9, r18
	cp = (struct node *)malloc(sizeof(struct node));
	return cp;
}

void free_node(struct node *np) {
	free(np);
     848:	0e 94 63 10 	call	0x20c6	; 0x20c6 <free>
}

void free_list() {
	struct node *cp;

	for( ; Head != NULL; ) {
     84c:	80 91 c9 04 	lds	r24, 0x04C9
     850:	90 91 ca 04 	lds	r25, 0x04CA
     854:	00 97       	sbiw	r24, 0x00	; 0
     856:	89 f7       	brne	.-30     	; 0x83a <free_list+0x2>
		cp = Head;
		Head = cp->link;
		free_node(cp);
	}
}
     858:	08 95       	ret

0000085a <task_init>:
};

int Task_cnt = sizeof(Task_tab) / sizeof(struct task_tab);

void task_init() {
	Task_f = Task_r = 0;
     85a:	10 92 5b 05 	sts	0x055B, r1
     85e:	10 92 5a 05 	sts	0x055A, r1
     862:	10 92 fd 05 	sts	0x05FD, r1
     866:	10 92 fc 05 	sts	0x05FC, r1
}
     86a:	08 95       	ret

0000086c <task_insert>:

int task_insert(struct task *tskp) {
     86c:	cf 93       	push	r28
     86e:	df 93       	push	r29
     870:	48 2f       	mov	r20, r24
     872:	e9 2f       	mov	r30, r25
	if ((Task_r + 1) % MAX_TASK == Task_f)
     874:	80 91 5a 05 	lds	r24, 0x055A
     878:	90 91 5b 05 	lds	r25, 0x055B
     87c:	c0 91 fc 05 	lds	r28, 0x05FC
     880:	d0 91 fd 05 	lds	r29, 0x05FD
     884:	01 96       	adiw	r24, 0x01	; 1
     886:	20 e1       	ldi	r18, 0x10	; 16
     888:	30 e0       	ldi	r19, 0x00	; 0
     88a:	b9 01       	movw	r22, r18
     88c:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <__divmodhi4>
     890:	8c 17       	cp	r24, r28
     892:	9d 07       	cpc	r25, r29
     894:	31 f1       	breq	.+76     	; 0x8e2 <task_insert+0x76>
		return (0);
	Task_r = (Task_r + 1) % MAX_TASK;
     896:	80 91 5a 05 	lds	r24, 0x055A
     89a:	90 91 5b 05 	lds	r25, 0x055B
     89e:	01 96       	adiw	r24, 0x01	; 1
     8a0:	b9 01       	movw	r22, r18
     8a2:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <__divmodhi4>
     8a6:	90 93 5b 05 	sts	0x055B, r25
     8aa:	80 93 5a 05 	sts	0x055A, r24
	Task_q[Task_r] = *tskp;
     8ae:	80 91 5a 05 	lds	r24, 0x055A
     8b2:	90 91 5b 05 	lds	r25, 0x055B
     8b6:	dc 01       	movw	r26, r24
     8b8:	aa 0f       	add	r26, r26
     8ba:	bb 1f       	adc	r27, r27
     8bc:	63 e0       	ldi	r22, 0x03	; 3
     8be:	88 0f       	add	r24, r24
     8c0:	99 1f       	adc	r25, r25
     8c2:	6a 95       	dec	r22
     8c4:	e1 f7       	brne	.-8      	; 0x8be <task_insert+0x52>
     8c6:	a8 0f       	add	r26, r24
     8c8:	b9 1f       	adc	r27, r25
     8ca:	a4 5a       	subi	r26, 0xA4	; 164
     8cc:	ba 4f       	sbci	r27, 0xFA	; 250
     8ce:	c4 2f       	mov	r28, r20
     8d0:	de 2f       	mov	r29, r30
     8d2:	8a e0       	ldi	r24, 0x0A	; 10
     8d4:	09 90       	ld	r0, Y+
     8d6:	0d 92       	st	X+, r0
     8d8:	81 50       	subi	r24, 0x01	; 1
     8da:	e1 f7       	brne	.-8      	; 0x8d4 <task_insert+0x68>
	return (1);
     8dc:	81 e0       	ldi	r24, 0x01	; 1
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	02 c0       	rjmp	.+4      	; 0x8e6 <task_insert+0x7a>
	Task_f = Task_r = 0;
}

int task_insert(struct task *tskp) {
	if ((Task_r + 1) % MAX_TASK == Task_f)
		return (0);
     8e2:	80 e0       	ldi	r24, 0x00	; 0
     8e4:	90 e0       	ldi	r25, 0x00	; 0
	Task_r = (Task_r + 1) % MAX_TASK;
	Task_q[Task_r] = *tskp;
	return (1);
}
     8e6:	df 91       	pop	r29
     8e8:	cf 91       	pop	r28
     8ea:	08 95       	ret

000008ec <task_delete>:

int task_delete(struct task *tskp) {
     8ec:	9c 01       	movw	r18, r24
	if (Task_r == Task_f)
     8ee:	40 91 5a 05 	lds	r20, 0x055A
     8f2:	50 91 5b 05 	lds	r21, 0x055B
     8f6:	80 91 fc 05 	lds	r24, 0x05FC
     8fa:	90 91 fd 05 	lds	r25, 0x05FD
     8fe:	48 17       	cp	r20, r24
     900:	59 07       	cpc	r21, r25
     902:	31 f1       	breq	.+76     	; 0x950 <task_delete+0x64>
		return(0);
	Task_f = (Task_f + 1) % MAX_TASK;
     904:	80 91 fc 05 	lds	r24, 0x05FC
     908:	90 91 fd 05 	lds	r25, 0x05FD
     90c:	01 96       	adiw	r24, 0x01	; 1
     90e:	60 e1       	ldi	r22, 0x10	; 16
     910:	70 e0       	ldi	r23, 0x00	; 0
     912:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <__divmodhi4>
     916:	90 93 fd 05 	sts	0x05FD, r25
     91a:	80 93 fc 05 	sts	0x05FC, r24
	*tskp = Task_q[Task_f];
     91e:	80 91 fc 05 	lds	r24, 0x05FC
     922:	90 91 fd 05 	lds	r25, 0x05FD
     926:	fc 01       	movw	r30, r24
     928:	ee 0f       	add	r30, r30
     92a:	ff 1f       	adc	r31, r31
     92c:	a3 e0       	ldi	r26, 0x03	; 3
     92e:	88 0f       	add	r24, r24
     930:	99 1f       	adc	r25, r25
     932:	aa 95       	dec	r26
     934:	e1 f7       	brne	.-8      	; 0x92e <task_delete+0x42>
     936:	e8 0f       	add	r30, r24
     938:	f9 1f       	adc	r31, r25
     93a:	d9 01       	movw	r26, r18
     93c:	e4 5a       	subi	r30, 0xA4	; 164
     93e:	fa 4f       	sbci	r31, 0xFA	; 250
     940:	8a e0       	ldi	r24, 0x0A	; 10
     942:	01 90       	ld	r0, Z+
     944:	0d 92       	st	X+, r0
     946:	81 50       	subi	r24, 0x01	; 1
     948:	e1 f7       	brne	.-8      	; 0x942 <task_delete+0x56>
	return (1);
     94a:	81 e0       	ldi	r24, 0x01	; 1
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	08 95       	ret
	return (1);
}

int task_delete(struct task *tskp) {
	if (Task_r == Task_f)
		return(0);
     950:	80 e0       	ldi	r24, 0x00	; 0
     952:	90 e0       	ldi	r25, 0x00	; 0
	Task_f = (Task_f + 1) % MAX_TASK;
	*tskp = Task_q[Task_f];
	return (1);
}
     954:	08 95       	ret

00000956 <what_task>:

struct task_tab *what_task(char *name) {
     956:	ef 92       	push	r14
     958:	ff 92       	push	r15
     95a:	0f 93       	push	r16
     95c:	1f 93       	push	r17
     95e:	cf 93       	push	r28
     960:	df 93       	push	r29
     962:	7c 01       	movw	r14, r24
	int i;
	for (i = 0; i < Task_cnt; i++)
     964:	00 e0       	ldi	r16, 0x00	; 0
     966:	10 e0       	ldi	r17, 0x00	; 0
     968:	17 c0       	rjmp	.+46     	; 0x998 <what_task+0x42>
		if(!strcmp(name, Task_tab[i].task_name))
     96a:	e8 01       	movw	r28, r16
     96c:	cc 0f       	add	r28, r28
     96e:	dd 1f       	adc	r29, r29
     970:	c8 01       	movw	r24, r16
     972:	25 e0       	ldi	r18, 0x05	; 5
     974:	88 0f       	add	r24, r24
     976:	99 1f       	adc	r25, r25
     978:	2a 95       	dec	r18
     97a:	e1 f7       	brne	.-8      	; 0x974 <what_task+0x1e>
     97c:	c8 0f       	add	r28, r24
     97e:	d9 1f       	adc	r29, r25
     980:	ce 55       	subi	r28, 0x5E	; 94
     982:	dd 4f       	sbci	r29, 0xFD	; 253
     984:	c7 01       	movw	r24, r14
     986:	be 01       	movw	r22, r28
     988:	0e 94 1f 11 	call	0x223e	; 0x223e <strcmp>
     98c:	00 97       	sbiw	r24, 0x00	; 0
     98e:	11 f4       	brne	.+4      	; 0x994 <what_task+0x3e>
			return (&Task_tab[i]);
     990:	ce 01       	movw	r24, r28
     992:	0b c0       	rjmp	.+22     	; 0x9aa <what_task+0x54>
	return (1);
}

struct task_tab *what_task(char *name) {
	int i;
	for (i = 0; i < Task_cnt; i++)
     994:	0f 5f       	subi	r16, 0xFF	; 255
     996:	1f 4f       	sbci	r17, 0xFF	; 255
     998:	80 91 a0 02 	lds	r24, 0x02A0
     99c:	90 91 a1 02 	lds	r25, 0x02A1
     9a0:	08 17       	cp	r16, r24
     9a2:	19 07       	cpc	r17, r25
     9a4:	14 f3       	brlt	.-60     	; 0x96a <what_task+0x14>
		if(!strcmp(name, Task_tab[i].task_name))
			return (&Task_tab[i]);
	return (NULL);
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
}
     9aa:	df 91       	pop	r29
     9ac:	cf 91       	pop	r28
     9ae:	1f 91       	pop	r17
     9b0:	0f 91       	pop	r16
     9b2:	ff 90       	pop	r15
     9b4:	ef 90       	pop	r14
     9b6:	08 95       	ret

000009b8 <task_cmd>:

void task_cmd(char *arg) {
     9b8:	af 92       	push	r10
     9ba:	bf 92       	push	r11
     9bc:	cf 92       	push	r12
     9be:	df 92       	push	r13
     9c0:	ef 92       	push	r14
     9c2:	ff 92       	push	r15
     9c4:	0f 93       	push	r16
     9c6:	1f 93       	push	r17
     9c8:	cf 93       	push	r28
     9ca:	df 93       	push	r29
     9cc:	cd b7       	in	r28, 0x3d	; 61
     9ce:	de b7       	in	r29, 0x3e	; 62
     9d0:	ca 54       	subi	r28, 0x4A	; 74
     9d2:	d0 40       	sbci	r29, 0x00	; 0
     9d4:	0f b6       	in	r0, 0x3f	; 63
     9d6:	f8 94       	cli
     9d8:	de bf       	out	0x3e, r29	; 62
     9da:	0f be       	out	0x3f, r0	; 63
     9dc:	cd bf       	out	0x3d, r28	; 61
	char buf[64], *cp0, *cp1, *cp2, *cp3;
	struct task task;
	struct task_tab *ptt;
	int ms;

	if (!uart_peek()) return ;
     9de:	0e 94 86 07 	call	0xf0c	; 0xf0c <uart_peek>
     9e2:	00 97       	sbiw	r24, 0x00	; 0
     9e4:	09 f4       	brne	.+2      	; 0x9e8 <task_cmd+0x30>
     9e6:	91 c0       	rjmp	.+290    	; 0xb0a <task_cmd+0x152>

	if (gets(buf) == NULL) {
     9e8:	ce 01       	movw	r24, r28
     9ea:	0b 96       	adiw	r24, 0x0b	; 11
     9ec:	0e 94 92 11 	call	0x2324	; 0x2324 <gets>
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	29 f4       	brne	.+10     	; 0x9fe <task_cmd+0x46>
		printf("logout, good bye !!!\n");
     9f4:	81 e6       	ldi	r24, 0x61	; 97
     9f6:	92 e0       	ldi	r25, 0x02	; 2
     9f8:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <puts>
     9fc:	ff cf       	rjmp	.-2      	; 0x9fc <task_cmd+0x44>
		while(1);
	}

	cp0 = strtok(buf, " \t\n\r");
     9fe:	ce 01       	movw	r24, r28
     a00:	0b 96       	adiw	r24, 0x0b	; 11
     a02:	66 e7       	ldi	r22, 0x76	; 118
     a04:	72 e0       	ldi	r23, 0x02	; 2
     a06:	0e 94 1a 11 	call	0x2234	; 0x2234 <strtok>
     a0a:	8c 01       	movw	r16, r24
	cp1 = strtok(NULL, " \t\n\r");
     a0c:	80 e0       	ldi	r24, 0x00	; 0
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	66 e7       	ldi	r22, 0x76	; 118
     a12:	72 e0       	ldi	r23, 0x02	; 2
     a14:	0e 94 1a 11 	call	0x2234	; 0x2234 <strtok>
     a18:	7c 01       	movw	r14, r24
	cp2 = strtok(NULL, " \t\n\r");
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	66 e7       	ldi	r22, 0x76	; 118
     a20:	72 e0       	ldi	r23, 0x02	; 2
     a22:	0e 94 1a 11 	call	0x2234	; 0x2234 <strtok>
     a26:	6c 01       	movw	r12, r24
	cp3 = strtok(NULL, " \t\n\r");
     a28:	80 e0       	ldi	r24, 0x00	; 0
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	66 e7       	ldi	r22, 0x76	; 118
     a2e:	72 e0       	ldi	r23, 0x02	; 2
     a30:	0e 94 1a 11 	call	0x2234	; 0x2234 <strtok>
     a34:	5c 01       	movw	r10, r24

	if (cp0 == NULL) {
     a36:	01 15       	cp	r16, r1
     a38:	11 05       	cpc	r17, r1
     a3a:	59 f4       	brne	.+22     	; 0xa52 <task_cmd+0x9a>
		printf("$ "); return ;
     a3c:	0f 92       	push	r0
     a3e:	0f 92       	push	r0
     a40:	8b e7       	ldi	r24, 0x7B	; 123
     a42:	92 e0       	ldi	r25, 0x02	; 2
     a44:	ad b7       	in	r26, 0x3d	; 61
     a46:	be b7       	in	r27, 0x3e	; 62
     a48:	12 96       	adiw	r26, 0x02	; 2
     a4a:	9c 93       	st	X, r25
     a4c:	8e 93       	st	-X, r24
     a4e:	11 97       	sbiw	r26, 0x01	; 1
     a50:	58 c0       	rjmp	.+176    	; 0xb02 <task_cmd+0x14a>
	}

	if (!strcmp(cp0, "timer")) {
     a52:	c8 01       	movw	r24, r16
     a54:	6e e7       	ldi	r22, 0x7E	; 126
     a56:	72 e0       	ldi	r23, 0x02	; 2
     a58:	0e 94 1f 11 	call	0x223e	; 0x223e <strcmp>
     a5c:	00 97       	sbiw	r24, 0x00	; 0
     a5e:	91 f5       	brne	.+100    	; 0xac4 <task_cmd+0x10c>
		if (!cp1 || !cp2) {
     a60:	e1 14       	cp	r14, r1
     a62:	f1 04       	cpc	r15, r1
     a64:	19 f0       	breq	.+6      	; 0xa6c <task_cmd+0xb4>
     a66:	c1 14       	cp	r12, r1
     a68:	d1 04       	cpc	r13, r1
     a6a:	29 f4       	brne	.+10     	; 0xa76 <task_cmd+0xbe>
			printf("!!!-222\n");
     a6c:	84 e8       	ldi	r24, 0x84	; 132
     a6e:	92 e0       	ldi	r25, 0x02	; 2
     a70:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <puts>
     a74:	3e c0       	rjmp	.+124    	; 0xaf2 <task_cmd+0x13a>
			printf("$ ");
			return ;
		}
		ms = atoi(cp1) / 256;
     a76:	c7 01       	movw	r24, r14
     a78:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <atoi>
     a7c:	8c 01       	movw	r16, r24

		if (!(ptt = what_task(cp2))) {
     a7e:	c6 01       	movw	r24, r12
     a80:	0e 94 ab 04 	call	0x956	; 0x956 <what_task>
     a84:	00 97       	sbiw	r24, 0x00	; 0
     a86:	19 f1       	breq	.+70     	; 0xace <task_cmd+0x116>
			printf("Unknown command...\n");
			return ;
		}

		task.fun = ptt->task_fun;
     a88:	dc 01       	movw	r26, r24
     a8a:	90 96       	adiw	r26, 0x20	; 32
     a8c:	8d 91       	ld	r24, X+
     a8e:	9c 91       	ld	r25, X
     a90:	91 97       	sbiw	r26, 0x21	; 33
     a92:	9a 83       	std	Y+2, r25	; 0x02
     a94:	89 83       	std	Y+1, r24	; 0x01
		if (cp3) strcpy(task.arg, cp3);
     a96:	ce 01       	movw	r24, r28
     a98:	03 96       	adiw	r24, 0x03	; 3
     a9a:	a1 14       	cp	r10, r1
     a9c:	b1 04       	cpc	r11, r1
     a9e:	11 f0       	breq	.+4      	; 0xaa4 <task_cmd+0xec>
     aa0:	b5 01       	movw	r22, r10
     aa2:	02 c0       	rjmp	.+4      	; 0xaa8 <task_cmd+0xf0>
		else 	 strcpy(task.arg, "");
     aa4:	6f e9       	ldi	r22, 0x9F	; 159
     aa6:	72 e0       	ldi	r23, 0x02	; 2
     aa8:	0e 94 28 11 	call	0x2250	; 0x2250 <strcpy>
		cli();
     aac:	f8 94       	cli
		if (!cp1 || !cp2) {
			printf("!!!-222\n");
			printf("$ ");
			return ;
		}
		ms = atoi(cp1) / 256;
     aae:	c8 01       	movw	r24, r16
     ab0:	60 e0       	ldi	r22, 0x00	; 0
     ab2:	71 e0       	ldi	r23, 0x01	; 1
     ab4:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <__divmodhi4>

		task.fun = ptt->task_fun;
		if (cp3) strcpy(task.arg, cp3);
		else 	 strcpy(task.arg, "");
		cli();
		insert_timer(&task,ms);
     ab8:	ce 01       	movw	r24, r28
     aba:	01 96       	adiw	r24, 0x01	; 1
     abc:	0e 94 ce 05 	call	0xb9c	; 0xb9c <insert_timer>
		sei();
     ac0:	78 94       	sei
     ac2:	17 c0       	rjmp	.+46     	; 0xaf2 <task_cmd+0x13a>
			cli();
			insert_timer(&task,ms);
			sei();
		*/
		} else {
			if (!(ptt = what_task(cp0))) {
     ac4:	c8 01       	movw	r24, r16
     ac6:	0e 94 ab 04 	call	0x956	; 0x956 <what_task>
     aca:	00 97       	sbiw	r24, 0x00	; 0
     acc:	29 f4       	brne	.+10     	; 0xad8 <task_cmd+0x120>
				printf("Unknown command...\n");
     ace:	8c e8       	ldi	r24, 0x8C	; 140
     ad0:	92 e0       	ldi	r25, 0x02	; 2
     ad2:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <puts>
				return ;
     ad6:	19 c0       	rjmp	.+50     	; 0xb0a <task_cmd+0x152>
     ad8:	dc 01       	movw	r26, r24
     ada:	90 96       	adiw	r26, 0x20	; 32
     adc:	ed 91       	ld	r30, X+
     ade:	fc 91       	ld	r31, X
     ae0:	91 97       	sbiw	r26, 0x21	; 33
			}

			if (cp2)
     ae2:	c1 14       	cp	r12, r1
     ae4:	d1 04       	cpc	r13, r1
     ae6:	11 f0       	breq	.+4      	; 0xaec <task_cmd+0x134>
				(*ptt->task_fun)(cp1);
     ae8:	c7 01       	movw	r24, r14
     aea:	02 c0       	rjmp	.+4      	; 0xaf0 <task_cmd+0x138>
			else
				(*ptt->task_fun)("");
     aec:	8f e9       	ldi	r24, 0x9F	; 159
     aee:	92 e0       	ldi	r25, 0x02	; 2
     af0:	19 95       	eicall
		}
	printf("$ ");
     af2:	0f 92       	push	r0
     af4:	0f 92       	push	r0
     af6:	8b e7       	ldi	r24, 0x7B	; 123
     af8:	92 e0       	ldi	r25, 0x02	; 2
     afa:	ed b7       	in	r30, 0x3d	; 61
     afc:	fe b7       	in	r31, 0x3e	; 62
     afe:	92 83       	std	Z+2, r25	; 0x02
     b00:	81 83       	std	Z+1, r24	; 0x01
     b02:	0e 94 b8 11 	call	0x2370	; 0x2370 <printf>
     b06:	0f 90       	pop	r0
     b08:	0f 90       	pop	r0
}
     b0a:	c6 5b       	subi	r28, 0xB6	; 182
     b0c:	df 4f       	sbci	r29, 0xFF	; 255
     b0e:	0f b6       	in	r0, 0x3f	; 63
     b10:	f8 94       	cli
     b12:	de bf       	out	0x3e, r29	; 62
     b14:	0f be       	out	0x3f, r0	; 63
     b16:	cd bf       	out	0x3d, r28	; 61
     b18:	df 91       	pop	r29
     b1a:	cf 91       	pop	r28
     b1c:	1f 91       	pop	r17
     b1e:	0f 91       	pop	r16
     b20:	ff 90       	pop	r15
     b22:	ef 90       	pop	r14
     b24:	df 90       	pop	r13
     b26:	cf 90       	pop	r12
     b28:	bf 90       	pop	r11
     b2a:	af 90       	pop	r10
     b2c:	08 95       	ret

00000b2e <timer_init>:

struct timer *Thead = NULL;


void timer_init() {
	TCNT2 = 0;
     b2e:	10 92 b2 00 	sts	0x00B2, r1
	sbi(ASSR, AS2);
     b32:	e6 eb       	ldi	r30, 0xB6	; 182
     b34:	f0 e0       	ldi	r31, 0x00	; 0
     b36:	80 81       	ld	r24, Z
     b38:	80 62       	ori	r24, 0x20	; 32
     b3a:	80 83       	st	Z, r24
	sbi(TIMSK2, TOIE2);
     b3c:	e0 e7       	ldi	r30, 0x70	; 112
     b3e:	f0 e0       	ldi	r31, 0x00	; 0
     b40:	80 81       	ld	r24, Z
     b42:	81 60       	ori	r24, 0x01	; 1
     b44:	80 83       	st	Z, r24
	sbi(TCCR2B, CS20); sbi(TCCR2B, CS21);
     b46:	e1 eb       	ldi	r30, 0xB1	; 177
     b48:	f0 e0       	ldi	r31, 0x00	; 0
     b4a:	80 81       	ld	r24, Z
     b4c:	81 60       	ori	r24, 0x01	; 1
     b4e:	80 83       	st	Z, r24
     b50:	80 81       	ld	r24, Z
     b52:	82 60       	ori	r24, 0x02	; 2
     b54:	80 83       	st	Z, r24
}
     b56:	08 95       	ret

00000b58 <timer_expire>:

void timer_expire(void) {
     b58:	cf 93       	push	r28
     b5a:	df 93       	push	r29
	struct timer *tp;

	for ( ; Thead != NULL && !Thead->time; ) {
     b5c:	0d c0       	rjmp	.+26     	; 0xb78 <timer_expire+0x20>
		tp = Thead, Thead = tp->link;
     b5e:	8c 85       	ldd	r24, Y+12	; 0x0c
     b60:	9d 85       	ldd	r25, Y+13	; 0x0d
     b62:	90 93 cc 04 	sts	0x04CC, r25
     b66:	80 93 cb 04 	sts	0x04CB, r24

		task_insert(&tp->task);
     b6a:	ce 01       	movw	r24, r28
     b6c:	02 96       	adiw	r24, 0x02	; 2
     b6e:	0e 94 36 04 	call	0x86c	; 0x86c <task_insert>
		free(tp);
     b72:	ce 01       	movw	r24, r28
     b74:	0e 94 63 10 	call	0x20c6	; 0x20c6 <free>
}

void timer_expire(void) {
	struct timer *tp;

	for ( ; Thead != NULL && !Thead->time; ) {
     b78:	c0 91 cb 04 	lds	r28, 0x04CB
     b7c:	d0 91 cc 04 	lds	r29, 0x04CC
     b80:	20 97       	sbiw	r28, 0x00	; 0
     b82:	21 f0       	breq	.+8      	; 0xb8c <timer_expire+0x34>
     b84:	88 81       	ld	r24, Y
     b86:	99 81       	ldd	r25, Y+1	; 0x01
     b88:	00 97       	sbiw	r24, 0x00	; 0
     b8a:	49 f3       	breq	.-46     	; 0xb5e <timer_expire+0x6>
		tp = Thead, Thead = tp->link;

		task_insert(&tp->task);
		free(tp);
	}
}
     b8c:	df 91       	pop	r29
     b8e:	cf 91       	pop	r28
     b90:	08 95       	ret

00000b92 <get_timer>:

struct timer *get_timer() {
	struct timer *tp;

	tp = (struct timer *) malloc(sizeof(*tp));
     b92:	8e e0       	ldi	r24, 0x0E	; 14
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <malloc>
	return(tp);
}
     b9a:	08 95       	ret

00000b9c <insert_timer>:

void insert_timer(struct task *tskp, int ms) {
     b9c:	ef 92       	push	r14
     b9e:	ff 92       	push	r15
     ba0:	0f 93       	push	r16
     ba2:	1f 93       	push	r17
     ba4:	cf 93       	push	r28
     ba6:	df 93       	push	r29
     ba8:	f8 2e       	mov	r15, r24
     baa:	e9 2e       	mov	r14, r25
     bac:	8b 01       	movw	r16, r22
	int total;
	struct timer *tp, *cp, *pp;
	
	tp = get_timer();
     bae:	0e 94 c9 05 	call	0xb92	; 0xb92 <get_timer>
     bb2:	ec 01       	movw	r28, r24
	tp->task = *tskp;
     bb4:	dc 01       	movw	r26, r24
     bb6:	12 96       	adiw	r26, 0x02	; 2
     bb8:	ef 2d       	mov	r30, r15
     bba:	fe 2d       	mov	r31, r14
     bbc:	8a e0       	ldi	r24, 0x0A	; 10
     bbe:	01 90       	ld	r0, Z+
     bc0:	0d 92       	st	X+, r0
     bc2:	81 50       	subi	r24, 0x01	; 1
     bc4:	e1 f7       	brne	.-8      	; 0xbbe <insert_timer+0x22>
	tp->time = ms;
     bc6:	19 83       	std	Y+1, r17	; 0x01
     bc8:	08 83       	st	Y, r16

	if (Thead == NULL) {
     bca:	e0 91 cb 04 	lds	r30, 0x04CB
     bce:	f0 91 cc 04 	lds	r31, 0x04CC
     bd2:	30 97       	sbiw	r30, 0x00	; 0
     bd4:	29 f4       	brne	.+10     	; 0xbe0 <insert_timer+0x44>
		Thead = tp, tp->link =NULL;
     bd6:	d0 93 cc 04 	sts	0x04CC, r29
     bda:	c0 93 cb 04 	sts	0x04CB, r28
     bde:	2f c0       	rjmp	.+94     	; 0xc3e <insert_timer+0xa2>
	
	tp = get_timer();
	tp->task = *tskp;
	tp->time = ms;

	if (Thead == NULL) {
     be0:	40 e0       	ldi	r20, 0x00	; 0
     be2:	50 e0       	ldi	r21, 0x00	; 0
     be4:	20 e0       	ldi	r18, 0x00	; 0
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	01 c0       	rjmp	.+2      	; 0xbec <insert_timer+0x50>
		Thead = tp, tp->link =NULL;
		return ;
	}

	pp = NULL, total = 0;
	for (cp = Thead; cp; cp = cp->link) {
     bea:	fd 01       	movw	r30, r26
		total += cp->time;
     bec:	80 81       	ld	r24, Z
     bee:	91 81       	ldd	r25, Z+1	; 0x01
     bf0:	28 0f       	add	r18, r24
     bf2:	39 1f       	adc	r19, r25
		if (total >= ms) break;
     bf4:	20 17       	cp	r18, r16
     bf6:	31 07       	cpc	r19, r17
     bf8:	34 f4       	brge	.+12     	; 0xc06 <insert_timer+0x6a>
		Thead = tp, tp->link =NULL;
		return ;
	}

	pp = NULL, total = 0;
	for (cp = Thead; cp; cp = cp->link) {
     bfa:	a4 85       	ldd	r26, Z+12	; 0x0c
     bfc:	b5 85       	ldd	r27, Z+13	; 0x0d
     bfe:	af 01       	movw	r20, r30
     c00:	10 97       	sbiw	r26, 0x00	; 0
     c02:	99 f7       	brne	.-26     	; 0xbea <insert_timer+0x4e>
     c04:	01 c0       	rjmp	.+2      	; 0xc08 <insert_timer+0x6c>
		total += cp->time;
		if (total >= ms) break;
     c06:	df 01       	movw	r26, r30
		pp = cp;
	}

	if (pp == NULL) {
     c08:	41 15       	cp	r20, r1
     c0a:	51 05       	cpc	r21, r1
     c0c:	79 f4       	brne	.+30     	; 0xc2c <insert_timer+0x90>
		cp->time -= tp->time;
     c0e:	8d 91       	ld	r24, X+
     c10:	9c 91       	ld	r25, X
     c12:	11 97       	sbiw	r26, 0x01	; 1
     c14:	80 1b       	sub	r24, r16
     c16:	91 0b       	sbc	r25, r17
     c18:	11 96       	adiw	r26, 0x01	; 1
     c1a:	9c 93       	st	X, r25
     c1c:	8e 93       	st	-X, r24
		tp->link = cp, Thead = tp;
     c1e:	bd 87       	std	Y+13, r27	; 0x0d
     c20:	ac 87       	std	Y+12, r26	; 0x0c
     c22:	d0 93 cc 04 	sts	0x04CC, r29
     c26:	c0 93 cb 04 	sts	0x04CB, r28
     c2a:	24 c0       	rjmp	.+72     	; 0xc74 <insert_timer+0xd8>
	} else if (cp == NULL) {
     c2c:	10 97       	sbiw	r26, 0x00	; 0
     c2e:	51 f4       	brne	.+20     	; 0xc44 <insert_timer+0xa8>
		tp->time -= total;
     c30:	02 1b       	sub	r16, r18
     c32:	13 0b       	sbc	r17, r19
     c34:	19 83       	std	Y+1, r17	; 0x01
     c36:	08 83       	st	Y, r16
		pp->link = tp;
     c38:	fa 01       	movw	r30, r20
     c3a:	d5 87       	std	Z+13, r29	; 0x0d
     c3c:	c4 87       	std	Z+12, r28	; 0x0c
		tp->link = NULL;
     c3e:	1d 86       	std	Y+13, r1	; 0x0d
     c40:	1c 86       	std	Y+12, r1	; 0x0c
     c42:	18 c0       	rjmp	.+48     	; 0xc74 <insert_timer+0xd8>
	} else {
		total -= cp->time;
     c44:	8d 91       	ld	r24, X+
     c46:	9c 91       	ld	r25, X
     c48:	11 97       	sbiw	r26, 0x01	; 1
     c4a:	b9 01       	movw	r22, r18
     c4c:	68 1b       	sub	r22, r24
     c4e:	79 0b       	sbc	r23, r25
		tp->time -= total;
     c50:	98 01       	movw	r18, r16
     c52:	26 1b       	sub	r18, r22
     c54:	37 0b       	sbc	r19, r23
     c56:	39 83       	std	Y+1, r19	; 0x01
     c58:	28 83       	st	Y, r18
		cp->time -= tp->time;
     c5a:	8d 91       	ld	r24, X+
     c5c:	9c 91       	ld	r25, X
     c5e:	11 97       	sbiw	r26, 0x01	; 1
     c60:	82 1b       	sub	r24, r18
     c62:	93 0b       	sbc	r25, r19
     c64:	11 96       	adiw	r26, 0x01	; 1
     c66:	9c 93       	st	X, r25
     c68:	8e 93       	st	-X, r24
		pp->link = tp;
     c6a:	fa 01       	movw	r30, r20
     c6c:	d5 87       	std	Z+13, r29	; 0x0d
     c6e:	c4 87       	std	Z+12, r28	; 0x0c
		tp->link = cp;
     c70:	bd 87       	std	Y+13, r27	; 0x0d
     c72:	ac 87       	std	Y+12, r26	; 0x0c
	}
}
     c74:	df 91       	pop	r29
     c76:	cf 91       	pop	r28
     c78:	1f 91       	pop	r17
     c7a:	0f 91       	pop	r16
     c7c:	ff 90       	pop	r15
     c7e:	ef 90       	pop	r14
     c80:	08 95       	ret

00000c82 <tour_timer>:

void tour_timer() {
     c82:	ef 92       	push	r14
     c84:	ff 92       	push	r15
     c86:	0f 93       	push	r16
     c88:	1f 93       	push	r17
     c8a:	cf 93       	push	r28
     c8c:	df 93       	push	r29
	struct timer *cp;
	int total = 0;

	printf("\n");
     c8e:	8a e0       	ldi	r24, 0x0A	; 10
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	0e 94 ca 11 	call	0x2394	; 0x2394 <putchar>
	for (cp = Thead; cp != NULL; cp = cp->link) {
     c96:	c0 91 cb 04 	lds	r28, 0x04CB
     c9a:	d0 91 cc 04 	lds	r29, 0x04CC
	}
}

void tour_timer() {
	struct timer *cp;
	int total = 0;
     c9e:	00 e0       	ldi	r16, 0x00	; 0
     ca0:	10 e0       	ldi	r17, 0x00	; 0

	printf("\n");
	for (cp = Thead; cp != NULL; cp = cp->link) {
		total += cp->time;
		printf("-->%d(%d) ", cp->time, total);
     ca2:	8a e2       	ldi	r24, 0x2A	; 42
     ca4:	e8 2e       	mov	r14, r24
     ca6:	83 e0       	ldi	r24, 0x03	; 3
     ca8:	f8 2e       	mov	r15, r24
void tour_timer() {
	struct timer *cp;
	int total = 0;

	printf("\n");
	for (cp = Thead; cp != NULL; cp = cp->link) {
     caa:	20 c0       	rjmp	.+64     	; 0xcec <tour_timer+0x6a>
		total += cp->time;
     cac:	88 81       	ld	r24, Y
     cae:	99 81       	ldd	r25, Y+1	; 0x01
     cb0:	08 0f       	add	r16, r24
     cb2:	19 1f       	adc	r17, r25
		printf("-->%d(%d) ", cp->time, total);
     cb4:	00 d0       	rcall	.+0      	; 0xcb6 <tour_timer+0x34>
     cb6:	00 d0       	rcall	.+0      	; 0xcb8 <tour_timer+0x36>
     cb8:	ed b7       	in	r30, 0x3d	; 61
     cba:	fe b7       	in	r31, 0x3e	; 62
     cbc:	31 96       	adiw	r30, 0x01	; 1
     cbe:	ad b7       	in	r26, 0x3d	; 61
     cc0:	be b7       	in	r27, 0x3e	; 62
     cc2:	12 96       	adiw	r26, 0x02	; 2
     cc4:	fc 92       	st	X, r15
     cc6:	ee 92       	st	-X, r14
     cc8:	11 97       	sbiw	r26, 0x01	; 1
     cca:	93 83       	std	Z+3, r25	; 0x03
     ccc:	82 83       	std	Z+2, r24	; 0x02
     cce:	15 83       	std	Z+5, r17	; 0x05
     cd0:	04 83       	std	Z+4, r16	; 0x04
     cd2:	0e 94 b8 11 	call	0x2370	; 0x2370 <printf>
void tour_timer() {
	struct timer *cp;
	int total = 0;

	printf("\n");
	for (cp = Thead; cp != NULL; cp = cp->link) {
     cd6:	0c 84       	ldd	r0, Y+12	; 0x0c
     cd8:	dd 85       	ldd	r29, Y+13	; 0x0d
     cda:	c0 2d       	mov	r28, r0
     cdc:	8d b7       	in	r24, 0x3d	; 61
     cde:	9e b7       	in	r25, 0x3e	; 62
     ce0:	06 96       	adiw	r24, 0x06	; 6
     ce2:	0f b6       	in	r0, 0x3f	; 63
     ce4:	f8 94       	cli
     ce6:	9e bf       	out	0x3e, r25	; 62
     ce8:	0f be       	out	0x3f, r0	; 63
     cea:	8d bf       	out	0x3d, r24	; 61
     cec:	20 97       	sbiw	r28, 0x00	; 0
     cee:	f1 f6       	brne	.-68     	; 0xcac <tour_timer+0x2a>
		total += cp->time;
		printf("-->%d(%d) ", cp->time, total);
	}
	printf("\n");
     cf0:	8a e0       	ldi	r24, 0x0A	; 10
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	0e 94 ca 11 	call	0x2394	; 0x2394 <putchar>
}
     cf8:	df 91       	pop	r29
     cfa:	cf 91       	pop	r28
     cfc:	1f 91       	pop	r17
     cfe:	0f 91       	pop	r16
     d00:	ff 90       	pop	r15
     d02:	ef 90       	pop	r14
     d04:	08 95       	ret

00000d06 <free_timer>:

void free_timer() {
	struct timer *cp;

	for (  ; Thead != NULL;  ) {
     d06:	09 c0       	rjmp	.+18     	; 0xd1a <free_timer+0x14>
		cp = Thead;
		Thead = cp->link;
     d08:	fc 01       	movw	r30, r24
     d0a:	24 85       	ldd	r18, Z+12	; 0x0c
     d0c:	35 85       	ldd	r19, Z+13	; 0x0d
     d0e:	30 93 cc 04 	sts	0x04CC, r19
     d12:	20 93 cb 04 	sts	0x04CB, r18
		free(cp);
     d16:	0e 94 63 10 	call	0x20c6	; 0x20c6 <free>
}

void free_timer() {
	struct timer *cp;

	for (  ; Thead != NULL;  ) {
     d1a:	80 91 cb 04 	lds	r24, 0x04CB
     d1e:	90 91 cc 04 	lds	r25, 0x04CC
     d22:	00 97       	sbiw	r24, 0x00	; 0
     d24:	89 f7       	brne	.-30     	; 0xd08 <free_timer+0x2>
		cp = Thead;
		Thead = cp->link;
		free(cp);
	}
}
     d26:	08 95       	ret

00000d28 <app_timer>:

void app_timer(char *ap) {
     d28:	0f 93       	push	r16
     d2a:	1f 93       	push	r17
     d2c:	cf 93       	push	r28
     d2e:	df 93       	push	r29
     d30:	cd b7       	in	r28, 0x3d	; 61
     d32:	de b7       	in	r29, 0x3e	; 62
     d34:	62 97       	sbiw	r28, 0x12	; 18
     d36:	0f b6       	in	r0, 0x3f	; 63
     d38:	f8 94       	cli
     d3a:	de bf       	out	0x3e, r29	; 62
     d3c:	0f be       	out	0x3f, r0	; 63
     d3e:	cd bf       	out	0x3d, r28	; 61
	char buf[8];
	int ms;
	struct task tsk;

	while(1) {
		printf(">> ");
     d40:	05 e3       	ldi	r16, 0x35	; 53
     d42:	13 e0       	ldi	r17, 0x03	; 3
     d44:	0f 92       	push	r0
     d46:	0f 92       	push	r0
     d48:	ed b7       	in	r30, 0x3d	; 61
     d4a:	fe b7       	in	r31, 0x3e	; 62
     d4c:	12 83       	std	Z+2, r17	; 0x02
     d4e:	01 83       	std	Z+1, r16	; 0x01
     d50:	0e 94 b8 11 	call	0x2370	; 0x2370 <printf>
		if (fgets(buf, 8, stdin) == NULL || (ms = atoi(buf)) == 0)
     d54:	0f 90       	pop	r0
     d56:	0f 90       	pop	r0
     d58:	40 91 03 06 	lds	r20, 0x0603
     d5c:	50 91 04 06 	lds	r21, 0x0604
     d60:	ce 01       	movw	r24, r28
     d62:	01 96       	adiw	r24, 0x01	; 1
     d64:	68 e0       	ldi	r22, 0x08	; 8
     d66:	70 e0       	ldi	r23, 0x00	; 0
     d68:	0e 94 5e 11 	call	0x22bc	; 0x22bc <fgets>
     d6c:	00 97       	sbiw	r24, 0x00	; 0
     d6e:	61 f0       	breq	.+24     	; 0xd88 <app_timer+0x60>
     d70:	ce 01       	movw	r24, r28
     d72:	01 96       	adiw	r24, 0x01	; 1
     d74:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <atoi>
     d78:	bc 01       	movw	r22, r24
     d7a:	00 97       	sbiw	r24, 0x00	; 0
     d7c:	29 f0       	breq	.+10     	; 0xd88 <app_timer+0x60>
			break;
		
		insert_timer(&tsk, ms);
     d7e:	ce 01       	movw	r24, r28
     d80:	09 96       	adiw	r24, 0x09	; 9
     d82:	0e 94 ce 05 	call	0xb9c	; 0xb9c <insert_timer>
	}
     d86:	de cf       	rjmp	.-68     	; 0xd44 <app_timer+0x1c>
	tour_timer();
     d88:	0e 94 41 06 	call	0xc82	; 0xc82 <tour_timer>
	free_timer();
     d8c:	0e 94 83 06 	call	0xd06	; 0xd06 <free_timer>
}
     d90:	62 96       	adiw	r28, 0x12	; 18
     d92:	0f b6       	in	r0, 0x3f	; 63
     d94:	f8 94       	cli
     d96:	de bf       	out	0x3e, r29	; 62
     d98:	0f be       	out	0x3f, r0	; 63
     d9a:	cd bf       	out	0x3d, r28	; 61
     d9c:	df 91       	pop	r29
     d9e:	cf 91       	pop	r28
     da0:	1f 91       	pop	r17
     da2:	0f 91       	pop	r16
     da4:	08 95       	ret

00000da6 <__vector_15>:

ISR(TIMER2_OVF_vect) {
     da6:	1f 92       	push	r1
     da8:	0f 92       	push	r0
     daa:	0f b6       	in	r0, 0x3f	; 63
     dac:	0f 92       	push	r0
     dae:	0b b6       	in	r0, 0x3b	; 59
     db0:	0f 92       	push	r0
     db2:	11 24       	eor	r1, r1
     db4:	2f 93       	push	r18
     db6:	3f 93       	push	r19
     db8:	4f 93       	push	r20
     dba:	5f 93       	push	r21
     dbc:	6f 93       	push	r22
     dbe:	7f 93       	push	r23
     dc0:	8f 93       	push	r24
     dc2:	9f 93       	push	r25
     dc4:	af 93       	push	r26
     dc6:	bf 93       	push	r27
     dc8:	ef 93       	push	r30
     dca:	ff 93       	push	r31
	if (!Thead)
     dcc:	e0 91 cb 04 	lds	r30, 0x04CB
     dd0:	f0 91 cc 04 	lds	r31, 0x04CC
     dd4:	30 97       	sbiw	r30, 0x00	; 0
     dd6:	49 f0       	breq	.+18     	; 0xdea <__vector_15+0x44>
		return ;
	if (--Thead->time == 0)
     dd8:	80 81       	ld	r24, Z
     dda:	91 81       	ldd	r25, Z+1	; 0x01
     ddc:	01 97       	sbiw	r24, 0x01	; 1
     dde:	91 83       	std	Z+1, r25	; 0x01
     de0:	80 83       	st	Z, r24
     de2:	00 97       	sbiw	r24, 0x00	; 0
     de4:	11 f4       	brne	.+4      	; 0xdea <__vector_15+0x44>
		timer_expire();
     de6:	0e 94 ac 05 	call	0xb58	; 0xb58 <timer_expire>
}
     dea:	ff 91       	pop	r31
     dec:	ef 91       	pop	r30
     dee:	bf 91       	pop	r27
     df0:	af 91       	pop	r26
     df2:	9f 91       	pop	r25
     df4:	8f 91       	pop	r24
     df6:	7f 91       	pop	r23
     df8:	6f 91       	pop	r22
     dfa:	5f 91       	pop	r21
     dfc:	4f 91       	pop	r20
     dfe:	3f 91       	pop	r19
     e00:	2f 91       	pop	r18
     e02:	0f 90       	pop	r0
     e04:	0b be       	out	0x3b, r0	; 59
     e06:	0f 90       	pop	r0
     e08:	0f be       	out	0x3f, r0	; 63
     e0a:	0f 90       	pop	r0
     e0c:	1f 90       	pop	r1
     e0e:	18 95       	reti

00000e10 <uart_getchar>:

int uart_getchar(FILE *stream) {
	char ch;

	do {
		cli();
     e10:	f8 94       	cli
		ch = qi_delete();
     e12:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <qi_delete>
		sei();
     e16:	78 94       	sei
	} while (ch == 0);
     e18:	88 23       	and	r24, r24
     e1a:	d1 f3       	breq	.-12     	; 0xe10 <uart_getchar>

	if (ch == EOT) return(-1);
     e1c:	84 30       	cpi	r24, 0x04	; 4
     e1e:	11 f0       	breq	.+4      	; 0xe24 <uart_getchar+0x14>
	else 		   return(ch);
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	08 95       	ret
		cli();
		ch = qi_delete();
		sei();
	} while (ch == 0);

	if (ch == EOT) return(-1);
     e24:	8f ef       	ldi	r24, 0xFF	; 255
     e26:	9f ef       	ldi	r25, 0xFF	; 255
	else 		   return(ch);
}
     e28:	08 95       	ret

00000e2a <uart_putchar>:
	sbi(UCSR0B, TXCIE0);
	sbi(UCSR0B, RXEN0);
	sbi(UCSR0B, RXCIE0);
}

int uart_putchar(char ch, FILE *stream){
     e2a:	cf 93       	push	r28
     e2c:	c8 2f       	mov	r28, r24
    if(ch == '\n') 
     e2e:	8a 30       	cpi	r24, 0x0A	; 10
     e30:	19 f4       	brne	.+6      	; 0xe38 <uart_putchar+0xe>
	    uart_putchar('\r', stream);
     e32:	8d e0       	ldi	r24, 0x0D	; 13
     e34:	0e 94 15 07 	call	0xe2a	; 0xe2a <uart_putchar>

	cli();
     e38:	f8 94       	cli
	
	if(!uart_busy) {
     e3a:	80 91 fe 05 	lds	r24, 0x05FE
     e3e:	88 23       	and	r24, r24
     e40:	59 f4       	brne	.+22     	; 0xe58 <uart_putchar+0x2e>
	    UDR0 = ch;
     e42:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy = 1;
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	80 93 fe 05 	sts	0x05FE, r24
     e4c:	0a c0       	rjmp	.+20     	; 0xe62 <uart_putchar+0x38>
	} else {
		while(qo_insert(ch) == 0) {
		    sei();
     e4e:	78 94       	sei
     e50:	86 ef       	ldi	r24, 0xF6	; 246
     e52:	8a 95       	dec	r24
     e54:	f1 f7       	brne	.-4      	; 0xe52 <uart_putchar+0x28>
			_delay_us(100);
			cli();
     e56:	f8 94       	cli
	
	if(!uart_busy) {
	    UDR0 = ch;
		uart_busy = 1;
	} else {
		while(qo_insert(ch) == 0) {
     e58:	8c 2f       	mov	r24, r28
     e5a:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <qo_insert>
     e5e:	00 97       	sbiw	r24, 0x00	; 0
     e60:	b1 f3       	breq	.-20     	; 0xe4e <uart_putchar+0x24>
		    sei();
			_delay_us(100);
			cli();
		}
	}
	sei();
     e62:	78 94       	sei
	return (1);
}
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	cf 91       	pop	r28
     e6a:	08 95       	ret

00000e6c <uart_init>:
char uart_busy;

static int echo_mode = 1;

void uart_init() {
	stdin = &Mystdin; stdout = &Mystdout;
     e6c:	8a e3       	ldi	r24, 0x3A	; 58
     e6e:	93 e0       	ldi	r25, 0x03	; 3
     e70:	90 93 04 06 	sts	0x0604, r25
     e74:	80 93 03 06 	sts	0x0603, r24
     e78:	88 e4       	ldi	r24, 0x48	; 72
     e7a:	93 e0       	ldi	r25, 0x03	; 3
     e7c:	90 93 06 06 	sts	0x0606, r25
     e80:	80 93 05 06 	sts	0x0605, r24
	uart_busy = 0;
     e84:	10 92 fe 05 	sts	0x05FE, r1
	q_init();
     e88:	0e 94 a9 02 	call	0x552	; 0x552 <q_init>
    UBRR0H = 0x00; UBRR0L = 0x07;
     e8c:	10 92 c5 00 	sts	0x00C5, r1
     e90:	87 e0       	ldi	r24, 0x07	; 7
     e92:	80 93 c4 00 	sts	0x00C4, r24
	sbi(UCSR0A, U2X0);
     e96:	e0 ec       	ldi	r30, 0xC0	; 192
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	82 60       	ori	r24, 0x02	; 2
     e9e:	80 83       	st	Z, r24
	sbi(UCSR0B, TXEN0);
     ea0:	e1 ec       	ldi	r30, 0xC1	; 193
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	88 60       	ori	r24, 0x08	; 8
     ea8:	80 83       	st	Z, r24
	sbi(UCSR0B, TXCIE0);
     eaa:	80 81       	ld	r24, Z
     eac:	80 64       	ori	r24, 0x40	; 64
     eae:	80 83       	st	Z, r24
	sbi(UCSR0B, RXEN0);
     eb0:	80 81       	ld	r24, Z
     eb2:	80 61       	ori	r24, 0x10	; 16
     eb4:	80 83       	st	Z, r24
	sbi(UCSR0B, RXCIE0);
     eb6:	80 81       	ld	r24, Z
     eb8:	80 68       	ori	r24, 0x80	; 128
     eba:	80 83       	st	Z, r24
}
     ebc:	08 95       	ret

00000ebe <uart_putchar_1>:
void uart_putstr(char *sp){
    for(; *sp; sp++)
	    uart_putchar(*sp);
}
*/
int uart_putchar_1(char ch, FILE *stream) {
     ebe:	cf 93       	push	r28
     ec0:	c8 2f       	mov	r28, r24
    if(ch == '\n')
     ec2:	8a 30       	cpi	r24, 0x0A	; 10
     ec4:	19 f4       	brne	.+6      	; 0xecc <uart_putchar_1+0xe>
	    uart_putchar_1('\r', stream);
     ec6:	8d e0       	ldi	r24, 0x0D	; 13
     ec8:	0e 94 5f 07 	call	0xebe	; 0xebe <uart_putchar_1>
    //_delay_ms(10);
	while(1) {
	    if((UCSR0A & (1 << UDRE0)) != 0 )
     ecc:	80 91 c0 00 	lds	r24, 0x00C0
     ed0:	85 ff       	sbrs	r24, 5
     ed2:	fc cf       	rjmp	.-8      	; 0xecc <uart_putchar_1+0xe>
		    break;
	}
	UDR0 = ch;
     ed4:	c0 93 c6 00 	sts	0x00C6, r28
	return (1);
}
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	cf 91       	pop	r28
     ede:	08 95       	ret

00000ee0 <uart_echo>:

	if (ch == EOT) return(-1);
	else 		   return(ch);
}

void uart_echo(char ch) {
     ee0:	cf 93       	push	r28
     ee2:	c8 2f       	mov	r28, r24
	if(ch == '\n') uart_echo('\r');
     ee4:	8a 30       	cpi	r24, 0x0A	; 10
     ee6:	19 f4       	brne	.+6      	; 0xeee <uart_echo+0xe>
     ee8:	8d e0       	ldi	r24, 0x0D	; 13
     eea:	0e 94 70 07 	call	0xee0	; 0xee0 <uart_echo>
	if(!uart_busy) {
     eee:	80 91 fe 05 	lds	r24, 0x05FE
     ef2:	88 23       	and	r24, r24
     ef4:	31 f4       	brne	.+12     	; 0xf02 <uart_echo+0x22>
		UDR0 = ch;
     ef6:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy = 1;
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	80 93 fe 05 	sts	0x05FE, r24
     f00:	03 c0       	rjmp	.+6      	; 0xf08 <uart_echo+0x28>
	}
	else
		qo_insert(ch);
     f02:	8c 2f       	mov	r24, r28
     f04:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <qo_insert>
}
     f08:	cf 91       	pop	r28
     f0a:	08 95       	ret

00000f0c <uart_peek>:

int uart_peek() {
	return (qi_peek());
     f0c:	0e 94 38 03 	call	0x670	; 0x670 <qi_peek>
}
     f10:	08 95       	ret

00000f12 <__vector_27>:


ISR(USART0_TX_vect){
     f12:	1f 92       	push	r1
     f14:	0f 92       	push	r0
     f16:	0f b6       	in	r0, 0x3f	; 63
     f18:	0f 92       	push	r0
     f1a:	0b b6       	in	r0, 0x3b	; 59
     f1c:	0f 92       	push	r0
     f1e:	11 24       	eor	r1, r1
     f20:	2f 93       	push	r18
     f22:	3f 93       	push	r19
     f24:	4f 93       	push	r20
     f26:	5f 93       	push	r21
     f28:	6f 93       	push	r22
     f2a:	7f 93       	push	r23
     f2c:	8f 93       	push	r24
     f2e:	9f 93       	push	r25
     f30:	af 93       	push	r26
     f32:	bf 93       	push	r27
     f34:	ef 93       	push	r30
     f36:	ff 93       	push	r31
	char ch;

	if((ch = qo_delete()) == 0)
     f38:	0e 94 1b 03 	call	0x636	; 0x636 <qo_delete>
     f3c:	88 23       	and	r24, r24
     f3e:	19 f4       	brne	.+6      	; 0xf46 <__vector_27+0x34>
		uart_busy = 0;
     f40:	10 92 fe 05 	sts	0x05FE, r1
     f44:	02 c0       	rjmp	.+4      	; 0xf4a <__vector_27+0x38>
	else 
		UDR0 = ch;
     f46:	80 93 c6 00 	sts	0x00C6, r24
}
     f4a:	ff 91       	pop	r31
     f4c:	ef 91       	pop	r30
     f4e:	bf 91       	pop	r27
     f50:	af 91       	pop	r26
     f52:	9f 91       	pop	r25
     f54:	8f 91       	pop	r24
     f56:	7f 91       	pop	r23
     f58:	6f 91       	pop	r22
     f5a:	5f 91       	pop	r21
     f5c:	4f 91       	pop	r20
     f5e:	3f 91       	pop	r19
     f60:	2f 91       	pop	r18
     f62:	0f 90       	pop	r0
     f64:	0b be       	out	0x3b, r0	; 59
     f66:	0f 90       	pop	r0
     f68:	0f be       	out	0x3f, r0	; 63
     f6a:	0f 90       	pop	r0
     f6c:	1f 90       	pop	r1
     f6e:	18 95       	reti

00000f70 <__vector_25>:

ISR(USART0_RX_vect) {
     f70:	1f 92       	push	r1
     f72:	0f 92       	push	r0
     f74:	0f b6       	in	r0, 0x3f	; 63
     f76:	0f 92       	push	r0
     f78:	0b b6       	in	r0, 0x3b	; 59
     f7a:	0f 92       	push	r0
     f7c:	11 24       	eor	r1, r1
     f7e:	1f 93       	push	r17
     f80:	2f 93       	push	r18
     f82:	3f 93       	push	r19
     f84:	4f 93       	push	r20
     f86:	5f 93       	push	r21
     f88:	6f 93       	push	r22
     f8a:	7f 93       	push	r23
     f8c:	8f 93       	push	r24
     f8e:	9f 93       	push	r25
     f90:	af 93       	push	r26
     f92:	bf 93       	push	r27
     f94:	ef 93       	push	r30
     f96:	ff 93       	push	r31
     f98:	cf 93       	push	r28
     f9a:	df 93       	push	r29
     f9c:	cd b7       	in	r28, 0x3d	; 61
     f9e:	de b7       	in	r29, 0x3e	; 62
     fa0:	2a 97       	sbiw	r28, 0x0a	; 10
     fa2:	de bf       	out	0x3e, r29	; 62
     fa4:	cd bf       	out	0x3d, r28	; 61
	struct task task;
	char ch;
	ch = UDR0;
     fa6:	10 91 c6 00 	lds	r17, 0x00C6
	if (ch == ESC) {
     faa:	1b 31       	cpi	r17, 0x1B	; 27
     fac:	61 f4       	brne	.+24     	; 0xfc6 <__vector_25+0x56>
		echo_mode = (echo_mode + 1) & 0x01;
     fae:	80 91 56 03 	lds	r24, 0x0356
     fb2:	90 91 57 03 	lds	r25, 0x0357
     fb6:	01 96       	adiw	r24, 0x01	; 1
     fb8:	81 70       	andi	r24, 0x01	; 1
     fba:	90 70       	andi	r25, 0x00	; 0
     fbc:	90 93 57 03 	sts	0x0357, r25
     fc0:	80 93 56 03 	sts	0x0356, r24
		return ;
     fc4:	24 c0       	rjmp	.+72     	; 0x100e <__vector_25+0x9e>
	}

	if(ch != EOT) {
     fc6:	14 30       	cpi	r17, 0x04	; 4
     fc8:	69 f0       	breq	.+26     	; 0xfe4 <__vector_25+0x74>
		if (ch == '\r')  ch = '\n';
     fca:	1d 30       	cpi	r17, 0x0D	; 13
     fcc:	09 f4       	brne	.+2      	; 0xfd0 <__vector_25+0x60>
     fce:	1a e0       	ldi	r17, 0x0A	; 10
		if (echo_mode)	uart_echo(ch);
     fd0:	20 91 56 03 	lds	r18, 0x0356
     fd4:	30 91 57 03 	lds	r19, 0x0357
     fd8:	21 15       	cp	r18, r1
     fda:	31 05       	cpc	r19, r1
     fdc:	19 f0       	breq	.+6      	; 0xfe4 <__vector_25+0x74>
     fde:	81 2f       	mov	r24, r17
     fe0:	0e 94 70 07 	call	0xee0	; 0xee0 <uart_echo>
	}
	qi_insert(ch);
     fe4:	81 2f       	mov	r24, r17
     fe6:	0e 94 ba 02 	call	0x574	; 0x574 <qi_insert>
	if (ch == EOT || ch == '\n') {
     fea:	14 30       	cpi	r17, 0x04	; 4
     fec:	11 f0       	breq	.+4      	; 0xff2 <__vector_25+0x82>
     fee:	1a 30       	cpi	r17, 0x0A	; 10
     ff0:	71 f4       	brne	.+28     	; 0x100e <__vector_25+0x9e>
		task.fun = task_cmd;
     ff2:	8c ed       	ldi	r24, 0xDC	; 220
     ff4:	94 e0       	ldi	r25, 0x04	; 4
     ff6:	9a 83       	std	Y+2, r25	; 0x02
     ff8:	89 83       	std	Y+1, r24	; 0x01
		strcpy(task.arg, "");
     ffa:	ce 01       	movw	r24, r28
     ffc:	03 96       	adiw	r24, 0x03	; 3
     ffe:	69 e3       	ldi	r22, 0x39	; 57
    1000:	73 e0       	ldi	r23, 0x03	; 3
    1002:	0e 94 28 11 	call	0x2250	; 0x2250 <strcpy>
		task_insert(&task);
    1006:	ce 01       	movw	r24, r28
    1008:	01 96       	adiw	r24, 0x01	; 1
    100a:	0e 94 36 04 	call	0x86c	; 0x86c <task_insert>
	}
}
    100e:	2a 96       	adiw	r28, 0x0a	; 10
    1010:	de bf       	out	0x3e, r29	; 62
    1012:	cd bf       	out	0x3d, r28	; 61
    1014:	df 91       	pop	r29
    1016:	cf 91       	pop	r28
    1018:	ff 91       	pop	r31
    101a:	ef 91       	pop	r30
    101c:	bf 91       	pop	r27
    101e:	af 91       	pop	r26
    1020:	9f 91       	pop	r25
    1022:	8f 91       	pop	r24
    1024:	7f 91       	pop	r23
    1026:	6f 91       	pop	r22
    1028:	5f 91       	pop	r21
    102a:	4f 91       	pop	r20
    102c:	3f 91       	pop	r19
    102e:	2f 91       	pop	r18
    1030:	1f 91       	pop	r17
    1032:	0f 90       	pop	r0
    1034:	0b be       	out	0x3b, r0	; 59
    1036:	0f 90       	pop	r0
    1038:	0f be       	out	0x3f, r0	; 63
    103a:	0f 90       	pop	r0
    103c:	1f 90       	pop	r1
    103e:	18 95       	reti

00001040 <spi_init>:
#include "spi_tc77.h"
#include "task.h"
#include "timer_linked_list.h"

void spi_init() {
	sbi(DDRB, 0);
    1040:	20 9a       	sbi	0x04, 0	; 4
	sbi(DDRB, 1);
    1042:	21 9a       	sbi	0x04, 1	; 4
	sbi(DDRB, 2);
    1044:	22 9a       	sbi	0x04, 2	; 4
	cbi(DDRB, 3);
    1046:	23 98       	cbi	0x04, 3	; 4

	sbi(SPSR, SPI2X);
    1048:	8d b5       	in	r24, 0x2d	; 45
    104a:	81 60       	ori	r24, 0x01	; 1
    104c:	8d bd       	out	0x2d, r24	; 45
	SPCR = ((1 << MSTR) | (1 << SPE) | (1 << SPIE));
    104e:	80 ed       	ldi	r24, 0xD0	; 208
    1050:	8c bd       	out	0x2c, r24	; 44

}
    1052:	08 95       	ret

00001054 <spi_select>:

void spi_select() {
	cbi(PORTB, 0);
    1054:	28 98       	cbi	0x05, 0	; 5
}
    1056:	08 95       	ret

00001058 <spi_release>:

void spi_release() {
	sbi(PORTB, 0);
    1058:	28 9a       	sbi	0x05, 0	; 5
}
    105a:	08 95       	ret

0000105c <task_tc77>:

void spi_write(uint8_t data) {
	SPDR = data;
}

void task_tc77(void *arg) {
    105c:	cf 92       	push	r12
    105e:	df 92       	push	r13
    1060:	ef 92       	push	r14
    1062:	ff 92       	push	r15
	static uint8_t state;
	static uint16_t value;

	if (!strcmp(arg, "")) {
    1064:	dc 01       	movw	r26, r24
    1066:	2c 91       	ld	r18, X
    1068:	22 23       	and	r18, r18
    106a:	31 f4       	brne	.+12     	; 0x1078 <task_tc77+0x1c>
		state = TC77_WAIT_HI;
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	80 93 cd 04 	sts	0x04CD, r24
		spi_select();
    1072:	0e 94 2a 08 	call	0x1054	; 0x1054 <spi_select>
    1076:	11 c0       	rjmp	.+34     	; 0x109a <task_tc77+0x3e>
		spi_write(0x00);
	} else {
		switch(state) {
    1078:	20 91 cd 04 	lds	r18, 0x04CD
    107c:	21 30       	cpi	r18, 0x01	; 1
    107e:	21 f0       	breq	.+8      	; 0x1088 <task_tc77+0x2c>
    1080:	22 30       	cpi	r18, 0x02	; 2
    1082:	09 f0       	breq	.+2      	; 0x1086 <task_tc77+0x2a>
    1084:	44 c0       	rjmp	.+136    	; 0x110e <task_tc77+0xb2>
    1086:	0b c0       	rjmp	.+22     	; 0x109e <task_tc77+0x42>
			case TC77_WAIT_HI:
				value = atoi(arg) << 8;
    1088:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <atoi>
    108c:	10 92 ce 04 	sts	0x04CE, r1
    1090:	80 93 cf 04 	sts	0x04CF, r24
				state = TC77_WAIT_LO;
    1094:	82 e0       	ldi	r24, 0x02	; 2
    1096:	80 93 cd 04 	sts	0x04CD, r24
void spi_release() {
	sbi(PORTB, 0);
}

void spi_write(uint8_t data) {
	SPDR = data;
    109a:	1e bc       	out	0x2e, r1	; 46
    109c:	3e c0       	rjmp	.+124    	; 0x111a <task_tc77+0xbe>
				value = atoi(arg) << 8;
				state = TC77_WAIT_LO;
				spi_write(0x00);
				break;
			case TC77_WAIT_LO:
				value |= atoi(arg);
    109e:	c0 90 ce 04 	lds	r12, 0x04CE
    10a2:	d0 90 cf 04 	lds	r13, 0x04CF
    10a6:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <atoi>
    10aa:	c8 2a       	or	r12, r24
    10ac:	d9 2a       	or	r13, r25
				value = (value >> 3) * 0.0625;
    10ae:	23 e0       	ldi	r18, 0x03	; 3
    10b0:	d6 94       	lsr	r13
    10b2:	c7 94       	ror	r12
    10b4:	2a 95       	dec	r18
    10b6:	e1 f7       	brne	.-8      	; 0x10b0 <task_tc77+0x54>
    10b8:	b6 01       	movw	r22, r12
    10ba:	80 e0       	ldi	r24, 0x00	; 0
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <__floatunsisf>
    10c2:	20 e0       	ldi	r18, 0x00	; 0
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	40 e8       	ldi	r20, 0x80	; 128
    10c8:	5d e3       	ldi	r21, 0x3D	; 61
    10ca:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <__mulsf3>
    10ce:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__fixunssfsi>
    10d2:	6b 01       	movw	r12, r22
    10d4:	7c 01       	movw	r14, r24
    10d6:	70 93 cf 04 	sts	0x04CF, r23
    10da:	60 93 ce 04 	sts	0x04CE, r22
				spi_release();
    10de:	0e 94 2c 08 	call	0x1058	; 0x1058 <spi_release>
				printf("task_tc77() : crrent_temperatur -> %d degree.\n", value);
    10e2:	00 d0       	rcall	.+0      	; 0x10e4 <task_tc77+0x88>
    10e4:	0f 92       	push	r0
    10e6:	ed b7       	in	r30, 0x3d	; 61
    10e8:	fe b7       	in	r31, 0x3e	; 62
    10ea:	31 96       	adiw	r30, 0x01	; 1
    10ec:	88 e5       	ldi	r24, 0x58	; 88
    10ee:	93 e0       	ldi	r25, 0x03	; 3
    10f0:	ad b7       	in	r26, 0x3d	; 61
    10f2:	be b7       	in	r27, 0x3e	; 62
    10f4:	12 96       	adiw	r26, 0x02	; 2
    10f6:	9c 93       	st	X, r25
    10f8:	8e 93       	st	-X, r24
    10fa:	11 97       	sbiw	r26, 0x01	; 1
    10fc:	d3 82       	std	Z+3, r13	; 0x03
    10fe:	c2 82       	std	Z+2, r12	; 0x02
    1100:	0e 94 b8 11 	call	0x2370	; 0x2370 <printf>
    1104:	0f 90       	pop	r0
    1106:	0f 90       	pop	r0
    1108:	0f 90       	pop	r0
    110a:	0f 90       	pop	r0
    110c:	06 c0       	rjmp	.+12     	; 0x111a <task_tc77+0xbe>
				break;
			default:
				spi_release();
    110e:	0e 94 2c 08 	call	0x1058	; 0x1058 <spi_release>
				printf("task_tc77() : unecpecetd state task_tc77...\n"); 
    1112:	87 e8       	ldi	r24, 0x87	; 135
    1114:	93 e0       	ldi	r25, 0x03	; 3
    1116:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <puts>
		}
	}
}
    111a:	ff 90       	pop	r15
    111c:	ef 90       	pop	r14
    111e:	df 90       	pop	r13
    1120:	cf 90       	pop	r12
    1122:	08 95       	ret

00001124 <spi_write>:
void spi_release() {
	sbi(PORTB, 0);
}

void spi_write(uint8_t data) {
	SPDR = data;
    1124:	8e bd       	out	0x2e, r24	; 46
}
    1126:	08 95       	ret

00001128 <__vector_24>:
				printf("task_tc77() : unecpecetd state task_tc77...\n"); 
		}
	}
}

ISR(SPI_STC_vect) {
    1128:	1f 92       	push	r1
    112a:	0f 92       	push	r0
    112c:	0f b6       	in	r0, 0x3f	; 63
    112e:	0f 92       	push	r0
    1130:	0b b6       	in	r0, 0x3b	; 59
    1132:	0f 92       	push	r0
    1134:	11 24       	eor	r1, r1
    1136:	2f 93       	push	r18
    1138:	3f 93       	push	r19
    113a:	4f 93       	push	r20
    113c:	5f 93       	push	r21
    113e:	6f 93       	push	r22
    1140:	7f 93       	push	r23
    1142:	8f 93       	push	r24
    1144:	9f 93       	push	r25
    1146:	af 93       	push	r26
    1148:	bf 93       	push	r27
    114a:	ef 93       	push	r30
    114c:	ff 93       	push	r31
    114e:	cf 93       	push	r28
    1150:	df 93       	push	r29
    1152:	cd b7       	in	r28, 0x3d	; 61
    1154:	de b7       	in	r29, 0x3e	; 62
    1156:	2a 97       	sbiw	r28, 0x0a	; 10
    1158:	de bf       	out	0x3e, r29	; 62
    115a:	cd bf       	out	0x3d, r28	; 61
	struct task task;
	uint8_t     data;
	data = SPDR;
    115c:	2e b5       	in	r18, 0x2e	; 46
	task.fun = task_tc77;
    115e:	8e e2       	ldi	r24, 0x2E	; 46
    1160:	98 e0       	ldi	r25, 0x08	; 8
    1162:	9a 83       	std	Y+2, r25	; 0x02
    1164:	89 83       	std	Y+1, r24	; 0x01
	sprintf(task.arg, "%d", data);
    1166:	00 d0       	rcall	.+0      	; 0x1168 <__vector_24+0x40>
    1168:	00 d0       	rcall	.+0      	; 0x116a <__vector_24+0x42>
    116a:	ed b7       	in	r30, 0x3d	; 61
    116c:	fe b7       	in	r31, 0x3e	; 62
    116e:	31 96       	adiw	r30, 0x01	; 1
    1170:	ce 01       	movw	r24, r28
    1172:	03 96       	adiw	r24, 0x03	; 3
    1174:	ad b7       	in	r26, 0x3d	; 61
    1176:	be b7       	in	r27, 0x3e	; 62
    1178:	12 96       	adiw	r26, 0x02	; 2
    117a:	9c 93       	st	X, r25
    117c:	8e 93       	st	-X, r24
    117e:	11 97       	sbiw	r26, 0x01	; 1
    1180:	83 eb       	ldi	r24, 0xB3	; 179
    1182:	93 e0       	ldi	r25, 0x03	; 3
    1184:	93 83       	std	Z+3, r25	; 0x03
    1186:	82 83       	std	Z+2, r24	; 0x02
    1188:	24 83       	std	Z+4, r18	; 0x04
    118a:	15 82       	std	Z+5, r1	; 0x05
    118c:	0e 94 ff 11 	call	0x23fe	; 0x23fe <sprintf>
	task_insert(&task);
    1190:	8d b7       	in	r24, 0x3d	; 61
    1192:	9e b7       	in	r25, 0x3e	; 62
    1194:	06 96       	adiw	r24, 0x06	; 6
    1196:	0f b6       	in	r0, 0x3f	; 63
    1198:	f8 94       	cli
    119a:	9e bf       	out	0x3e, r25	; 62
    119c:	0f be       	out	0x3f, r0	; 63
    119e:	8d bf       	out	0x3d, r24	; 61
    11a0:	ce 01       	movw	r24, r28
    11a2:	01 96       	adiw	r24, 0x01	; 1
    11a4:	0e 94 36 04 	call	0x86c	; 0x86c <task_insert>
}
    11a8:	2a 96       	adiw	r28, 0x0a	; 10
    11aa:	de bf       	out	0x3e, r29	; 62
    11ac:	cd bf       	out	0x3d, r28	; 61
    11ae:	df 91       	pop	r29
    11b0:	cf 91       	pop	r28
    11b2:	ff 91       	pop	r31
    11b4:	ef 91       	pop	r30
    11b6:	bf 91       	pop	r27
    11b8:	af 91       	pop	r26
    11ba:	9f 91       	pop	r25
    11bc:	8f 91       	pop	r24
    11be:	7f 91       	pop	r23
    11c0:	6f 91       	pop	r22
    11c2:	5f 91       	pop	r21
    11c4:	4f 91       	pop	r20
    11c6:	3f 91       	pop	r19
    11c8:	2f 91       	pop	r18
    11ca:	0f 90       	pop	r0
    11cc:	0b be       	out	0x3b, r0	; 59
    11ce:	0f 90       	pop	r0
    11d0:	0f be       	out	0x3f, r0	; 63
    11d2:	0f 90       	pop	r0
    11d4:	1f 90       	pop	r1
    11d6:	18 95       	reti

000011d8 <__fixunssfsi>:
    11d8:	cf 92       	push	r12
    11da:	df 92       	push	r13
    11dc:	ef 92       	push	r14
    11de:	ff 92       	push	r15
    11e0:	0f 93       	push	r16
    11e2:	1f 93       	push	r17
    11e4:	6b 01       	movw	r12, r22
    11e6:	7c 01       	movw	r14, r24
    11e8:	20 e0       	ldi	r18, 0x00	; 0
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	40 e0       	ldi	r20, 0x00	; 0
    11ee:	5f e4       	ldi	r21, 0x4F	; 79
    11f0:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__gesf2>
    11f4:	87 fd       	sbrc	r24, 7
    11f6:	11 c0       	rjmp	.+34     	; 0x121a <__fixunssfsi+0x42>
    11f8:	c7 01       	movw	r24, r14
    11fa:	b6 01       	movw	r22, r12
    11fc:	20 e0       	ldi	r18, 0x00	; 0
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	40 e0       	ldi	r20, 0x00	; 0
    1202:	5f e4       	ldi	r21, 0x4F	; 79
    1204:	0e 94 a1 0a 	call	0x1542	; 0x1542 <__subsf3>
    1208:	0e 94 82 0c 	call	0x1904	; 0x1904 <__fixsfsi>
    120c:	8b 01       	movw	r16, r22
    120e:	9c 01       	movw	r18, r24
    1210:	00 50       	subi	r16, 0x00	; 0
    1212:	10 40       	sbci	r17, 0x00	; 0
    1214:	20 40       	sbci	r18, 0x00	; 0
    1216:	30 48       	sbci	r19, 0x80	; 128
    1218:	06 c0       	rjmp	.+12     	; 0x1226 <__fixunssfsi+0x4e>
    121a:	c7 01       	movw	r24, r14
    121c:	b6 01       	movw	r22, r12
    121e:	0e 94 82 0c 	call	0x1904	; 0x1904 <__fixsfsi>
    1222:	8b 01       	movw	r16, r22
    1224:	9c 01       	movw	r18, r24
    1226:	b8 01       	movw	r22, r16
    1228:	c9 01       	movw	r24, r18
    122a:	1f 91       	pop	r17
    122c:	0f 91       	pop	r16
    122e:	ff 90       	pop	r15
    1230:	ef 90       	pop	r14
    1232:	df 90       	pop	r13
    1234:	cf 90       	pop	r12
    1236:	08 95       	ret

00001238 <_fpadd_parts>:
    1238:	a0 e0       	ldi	r26, 0x00	; 0
    123a:	b0 e0       	ldi	r27, 0x00	; 0
    123c:	e2 e2       	ldi	r30, 0x22	; 34
    123e:	f9 e0       	ldi	r31, 0x09	; 9
    1240:	0c 94 98 0f 	jmp	0x1f30	; 0x1f30 <__prologue_saves__+0x4>
    1244:	ec 01       	movw	r28, r24
    1246:	4b 01       	movw	r8, r22
    1248:	fa 01       	movw	r30, r20
    124a:	88 81       	ld	r24, Y
    124c:	82 30       	cpi	r24, 0x02	; 2
    124e:	08 f4       	brcc	.+2      	; 0x1252 <_fpadd_parts+0x1a>
    1250:	3e c1       	rjmp	.+636    	; 0x14ce <_fpadd_parts+0x296>
    1252:	db 01       	movw	r26, r22
    1254:	9c 91       	ld	r25, X
    1256:	92 30       	cpi	r25, 0x02	; 2
    1258:	08 f4       	brcc	.+2      	; 0x125c <_fpadd_parts+0x24>
    125a:	36 c1       	rjmp	.+620    	; 0x14c8 <_fpadd_parts+0x290>
    125c:	84 30       	cpi	r24, 0x04	; 4
    125e:	59 f4       	brne	.+22     	; 0x1276 <_fpadd_parts+0x3e>
    1260:	94 30       	cpi	r25, 0x04	; 4
    1262:	09 f0       	breq	.+2      	; 0x1266 <_fpadd_parts+0x2e>
    1264:	34 c1       	rjmp	.+616    	; 0x14ce <_fpadd_parts+0x296>
    1266:	99 81       	ldd	r25, Y+1	; 0x01
    1268:	11 96       	adiw	r26, 0x01	; 1
    126a:	8c 91       	ld	r24, X
    126c:	11 97       	sbiw	r26, 0x01	; 1
    126e:	98 17       	cp	r25, r24
    1270:	09 f0       	breq	.+2      	; 0x1274 <_fpadd_parts+0x3c>
    1272:	27 c1       	rjmp	.+590    	; 0x14c2 <_fpadd_parts+0x28a>
    1274:	2c c1       	rjmp	.+600    	; 0x14ce <_fpadd_parts+0x296>
    1276:	94 30       	cpi	r25, 0x04	; 4
    1278:	09 f4       	brne	.+2      	; 0x127c <_fpadd_parts+0x44>
    127a:	26 c1       	rjmp	.+588    	; 0x14c8 <_fpadd_parts+0x290>
    127c:	92 30       	cpi	r25, 0x02	; 2
    127e:	a9 f4       	brne	.+42     	; 0x12aa <_fpadd_parts+0x72>
    1280:	82 30       	cpi	r24, 0x02	; 2
    1282:	09 f0       	breq	.+2      	; 0x1286 <_fpadd_parts+0x4e>
    1284:	24 c1       	rjmp	.+584    	; 0x14ce <_fpadd_parts+0x296>
    1286:	ce 01       	movw	r24, r28
    1288:	28 e0       	ldi	r18, 0x08	; 8
    128a:	dc 01       	movw	r26, r24
    128c:	0d 90       	ld	r0, X+
    128e:	cd 01       	movw	r24, r26
    1290:	da 01       	movw	r26, r20
    1292:	0d 92       	st	X+, r0
    1294:	ad 01       	movw	r20, r26
    1296:	21 50       	subi	r18, 0x01	; 1
    1298:	c1 f7       	brne	.-16     	; 0x128a <_fpadd_parts+0x52>
    129a:	d4 01       	movw	r26, r8
    129c:	11 96       	adiw	r26, 0x01	; 1
    129e:	8c 91       	ld	r24, X
    12a0:	11 97       	sbiw	r26, 0x01	; 1
    12a2:	99 81       	ldd	r25, Y+1	; 0x01
    12a4:	89 23       	and	r24, r25
    12a6:	81 83       	std	Z+1, r24	; 0x01
    12a8:	11 c1       	rjmp	.+546    	; 0x14cc <_fpadd_parts+0x294>
    12aa:	82 30       	cpi	r24, 0x02	; 2
    12ac:	09 f4       	brne	.+2      	; 0x12b0 <_fpadd_parts+0x78>
    12ae:	0c c1       	rjmp	.+536    	; 0x14c8 <_fpadd_parts+0x290>
    12b0:	aa 80       	ldd	r10, Y+2	; 0x02
    12b2:	bb 80       	ldd	r11, Y+3	; 0x03
    12b4:	db 01       	movw	r26, r22
    12b6:	12 96       	adiw	r26, 0x02	; 2
    12b8:	4d 91       	ld	r20, X+
    12ba:	5c 91       	ld	r21, X
    12bc:	13 97       	sbiw	r26, 0x03	; 3
    12be:	cc 80       	ldd	r12, Y+4	; 0x04
    12c0:	dd 80       	ldd	r13, Y+5	; 0x05
    12c2:	ee 80       	ldd	r14, Y+6	; 0x06
    12c4:	ff 80       	ldd	r15, Y+7	; 0x07
    12c6:	14 96       	adiw	r26, 0x04	; 4
    12c8:	0d 91       	ld	r16, X+
    12ca:	1d 91       	ld	r17, X+
    12cc:	2d 91       	ld	r18, X+
    12ce:	3c 91       	ld	r19, X
    12d0:	17 97       	sbiw	r26, 0x07	; 7
    12d2:	c5 01       	movw	r24, r10
    12d4:	84 1b       	sub	r24, r20
    12d6:	95 0b       	sbc	r25, r21
    12d8:	dc 01       	movw	r26, r24
    12da:	97 ff       	sbrs	r25, 7
    12dc:	04 c0       	rjmp	.+8      	; 0x12e6 <_fpadd_parts+0xae>
    12de:	aa 27       	eor	r26, r26
    12e0:	bb 27       	eor	r27, r27
    12e2:	a8 1b       	sub	r26, r24
    12e4:	b9 0b       	sbc	r27, r25
    12e6:	a0 32       	cpi	r26, 0x20	; 32
    12e8:	b1 05       	cpc	r27, r1
    12ea:	0c f0       	brlt	.+2      	; 0x12ee <_fpadd_parts+0xb6>
    12ec:	67 c0       	rjmp	.+206    	; 0x13bc <_fpadd_parts+0x184>
    12ee:	18 16       	cp	r1, r24
    12f0:	19 06       	cpc	r1, r25
    12f2:	84 f5       	brge	.+96     	; 0x1354 <_fpadd_parts+0x11c>
    12f4:	28 01       	movw	r4, r16
    12f6:	39 01       	movw	r6, r18
    12f8:	0a 2e       	mov	r0, r26
    12fa:	04 c0       	rjmp	.+8      	; 0x1304 <_fpadd_parts+0xcc>
    12fc:	76 94       	lsr	r7
    12fe:	67 94       	ror	r6
    1300:	57 94       	ror	r5
    1302:	47 94       	ror	r4
    1304:	0a 94       	dec	r0
    1306:	d2 f7       	brpl	.-12     	; 0x12fc <_fpadd_parts+0xc4>
    1308:	41 e0       	ldi	r20, 0x01	; 1
    130a:	50 e0       	ldi	r21, 0x00	; 0
    130c:	60 e0       	ldi	r22, 0x00	; 0
    130e:	70 e0       	ldi	r23, 0x00	; 0
    1310:	04 c0       	rjmp	.+8      	; 0x131a <_fpadd_parts+0xe2>
    1312:	44 0f       	add	r20, r20
    1314:	55 1f       	adc	r21, r21
    1316:	66 1f       	adc	r22, r22
    1318:	77 1f       	adc	r23, r23
    131a:	aa 95       	dec	r26
    131c:	d2 f7       	brpl	.-12     	; 0x1312 <_fpadd_parts+0xda>
    131e:	41 50       	subi	r20, 0x01	; 1
    1320:	50 40       	sbci	r21, 0x00	; 0
    1322:	60 40       	sbci	r22, 0x00	; 0
    1324:	70 40       	sbci	r23, 0x00	; 0
    1326:	40 23       	and	r20, r16
    1328:	51 23       	and	r21, r17
    132a:	62 23       	and	r22, r18
    132c:	73 23       	and	r23, r19
    132e:	81 e0       	ldi	r24, 0x01	; 1
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	a0 e0       	ldi	r26, 0x00	; 0
    1334:	b0 e0       	ldi	r27, 0x00	; 0
    1336:	41 15       	cp	r20, r1
    1338:	51 05       	cpc	r21, r1
    133a:	61 05       	cpc	r22, r1
    133c:	71 05       	cpc	r23, r1
    133e:	19 f4       	brne	.+6      	; 0x1346 <_fpadd_parts+0x10e>
    1340:	80 e0       	ldi	r24, 0x00	; 0
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	dc 01       	movw	r26, r24
    1346:	8c 01       	movw	r16, r24
    1348:	9d 01       	movw	r18, r26
    134a:	04 29       	or	r16, r4
    134c:	15 29       	or	r17, r5
    134e:	26 29       	or	r18, r6
    1350:	37 29       	or	r19, r7
    1352:	3f c0       	rjmp	.+126    	; 0x13d2 <_fpadd_parts+0x19a>
    1354:	00 97       	sbiw	r24, 0x00	; 0
    1356:	e9 f1       	breq	.+122    	; 0x13d2 <_fpadd_parts+0x19a>
    1358:	aa 0e       	add	r10, r26
    135a:	bb 1e       	adc	r11, r27
    135c:	26 01       	movw	r4, r12
    135e:	37 01       	movw	r6, r14
    1360:	0a 2e       	mov	r0, r26
    1362:	04 c0       	rjmp	.+8      	; 0x136c <_fpadd_parts+0x134>
    1364:	76 94       	lsr	r7
    1366:	67 94       	ror	r6
    1368:	57 94       	ror	r5
    136a:	47 94       	ror	r4
    136c:	0a 94       	dec	r0
    136e:	d2 f7       	brpl	.-12     	; 0x1364 <_fpadd_parts+0x12c>
    1370:	41 e0       	ldi	r20, 0x01	; 1
    1372:	50 e0       	ldi	r21, 0x00	; 0
    1374:	60 e0       	ldi	r22, 0x00	; 0
    1376:	70 e0       	ldi	r23, 0x00	; 0
    1378:	04 c0       	rjmp	.+8      	; 0x1382 <_fpadd_parts+0x14a>
    137a:	44 0f       	add	r20, r20
    137c:	55 1f       	adc	r21, r21
    137e:	66 1f       	adc	r22, r22
    1380:	77 1f       	adc	r23, r23
    1382:	aa 95       	dec	r26
    1384:	d2 f7       	brpl	.-12     	; 0x137a <_fpadd_parts+0x142>
    1386:	41 50       	subi	r20, 0x01	; 1
    1388:	50 40       	sbci	r21, 0x00	; 0
    138a:	60 40       	sbci	r22, 0x00	; 0
    138c:	70 40       	sbci	r23, 0x00	; 0
    138e:	4c 21       	and	r20, r12
    1390:	5d 21       	and	r21, r13
    1392:	6e 21       	and	r22, r14
    1394:	7f 21       	and	r23, r15
    1396:	81 e0       	ldi	r24, 0x01	; 1
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	a0 e0       	ldi	r26, 0x00	; 0
    139c:	b0 e0       	ldi	r27, 0x00	; 0
    139e:	41 15       	cp	r20, r1
    13a0:	51 05       	cpc	r21, r1
    13a2:	61 05       	cpc	r22, r1
    13a4:	71 05       	cpc	r23, r1
    13a6:	19 f4       	brne	.+6      	; 0x13ae <_fpadd_parts+0x176>
    13a8:	80 e0       	ldi	r24, 0x00	; 0
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	dc 01       	movw	r26, r24
    13ae:	6c 01       	movw	r12, r24
    13b0:	7d 01       	movw	r14, r26
    13b2:	c4 28       	or	r12, r4
    13b4:	d5 28       	or	r13, r5
    13b6:	e6 28       	or	r14, r6
    13b8:	f7 28       	or	r15, r7
    13ba:	0b c0       	rjmp	.+22     	; 0x13d2 <_fpadd_parts+0x19a>
    13bc:	4a 15       	cp	r20, r10
    13be:	5b 05       	cpc	r21, r11
    13c0:	24 f4       	brge	.+8      	; 0x13ca <_fpadd_parts+0x192>
    13c2:	00 e0       	ldi	r16, 0x00	; 0
    13c4:	10 e0       	ldi	r17, 0x00	; 0
    13c6:	98 01       	movw	r18, r16
    13c8:	04 c0       	rjmp	.+8      	; 0x13d2 <_fpadd_parts+0x19a>
    13ca:	5a 01       	movw	r10, r20
    13cc:	cc 24       	eor	r12, r12
    13ce:	dd 24       	eor	r13, r13
    13d0:	76 01       	movw	r14, r12
    13d2:	89 81       	ldd	r24, Y+1	; 0x01
    13d4:	d4 01       	movw	r26, r8
    13d6:	11 96       	adiw	r26, 0x01	; 1
    13d8:	9c 91       	ld	r25, X
    13da:	11 97       	sbiw	r26, 0x01	; 1
    13dc:	89 17       	cp	r24, r25
    13de:	09 f4       	brne	.+2      	; 0x13e2 <_fpadd_parts+0x1aa>
    13e0:	45 c0       	rjmp	.+138    	; 0x146c <_fpadd_parts+0x234>
    13e2:	88 23       	and	r24, r24
    13e4:	29 f0       	breq	.+10     	; 0x13f0 <_fpadd_parts+0x1b8>
    13e6:	0c 19       	sub	r16, r12
    13e8:	1d 09       	sbc	r17, r13
    13ea:	2e 09       	sbc	r18, r14
    13ec:	3f 09       	sbc	r19, r15
    13ee:	08 c0       	rjmp	.+16     	; 0x1400 <_fpadd_parts+0x1c8>
    13f0:	d7 01       	movw	r26, r14
    13f2:	c6 01       	movw	r24, r12
    13f4:	80 1b       	sub	r24, r16
    13f6:	91 0b       	sbc	r25, r17
    13f8:	a2 0b       	sbc	r26, r18
    13fa:	b3 0b       	sbc	r27, r19
    13fc:	8c 01       	movw	r16, r24
    13fe:	9d 01       	movw	r18, r26
    1400:	37 fd       	sbrc	r19, 7
    1402:	04 c0       	rjmp	.+8      	; 0x140c <_fpadd_parts+0x1d4>
    1404:	11 82       	std	Z+1, r1	; 0x01
    1406:	b3 82       	std	Z+3, r11	; 0x03
    1408:	a2 82       	std	Z+2, r10	; 0x02
    140a:	0b c0       	rjmp	.+22     	; 0x1422 <_fpadd_parts+0x1ea>
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	81 83       	std	Z+1, r24	; 0x01
    1410:	b3 82       	std	Z+3, r11	; 0x03
    1412:	a2 82       	std	Z+2, r10	; 0x02
    1414:	30 95       	com	r19
    1416:	20 95       	com	r18
    1418:	10 95       	com	r17
    141a:	01 95       	neg	r16
    141c:	1f 4f       	sbci	r17, 0xFF	; 255
    141e:	2f 4f       	sbci	r18, 0xFF	; 255
    1420:	3f 4f       	sbci	r19, 0xFF	; 255
    1422:	04 83       	std	Z+4, r16	; 0x04
    1424:	15 83       	std	Z+5, r17	; 0x05
    1426:	26 83       	std	Z+6, r18	; 0x06
    1428:	37 83       	std	Z+7, r19	; 0x07
    142a:	0d c0       	rjmp	.+26     	; 0x1446 <_fpadd_parts+0x20e>
    142c:	88 0f       	add	r24, r24
    142e:	99 1f       	adc	r25, r25
    1430:	aa 1f       	adc	r26, r26
    1432:	bb 1f       	adc	r27, r27
    1434:	84 83       	std	Z+4, r24	; 0x04
    1436:	95 83       	std	Z+5, r25	; 0x05
    1438:	a6 83       	std	Z+6, r26	; 0x06
    143a:	b7 83       	std	Z+7, r27	; 0x07
    143c:	82 81       	ldd	r24, Z+2	; 0x02
    143e:	93 81       	ldd	r25, Z+3	; 0x03
    1440:	01 97       	sbiw	r24, 0x01	; 1
    1442:	93 83       	std	Z+3, r25	; 0x03
    1444:	82 83       	std	Z+2, r24	; 0x02
    1446:	84 81       	ldd	r24, Z+4	; 0x04
    1448:	95 81       	ldd	r25, Z+5	; 0x05
    144a:	a6 81       	ldd	r26, Z+6	; 0x06
    144c:	b7 81       	ldd	r27, Z+7	; 0x07
    144e:	ac 01       	movw	r20, r24
    1450:	bd 01       	movw	r22, r26
    1452:	41 50       	subi	r20, 0x01	; 1
    1454:	50 40       	sbci	r21, 0x00	; 0
    1456:	60 40       	sbci	r22, 0x00	; 0
    1458:	70 40       	sbci	r23, 0x00	; 0
    145a:	4f 3f       	cpi	r20, 0xFF	; 255
    145c:	2f ef       	ldi	r18, 0xFF	; 255
    145e:	52 07       	cpc	r21, r18
    1460:	2f ef       	ldi	r18, 0xFF	; 255
    1462:	62 07       	cpc	r22, r18
    1464:	2f e3       	ldi	r18, 0x3F	; 63
    1466:	72 07       	cpc	r23, r18
    1468:	08 f3       	brcs	.-62     	; 0x142c <_fpadd_parts+0x1f4>
    146a:	0b c0       	rjmp	.+22     	; 0x1482 <_fpadd_parts+0x24a>
    146c:	81 83       	std	Z+1, r24	; 0x01
    146e:	b3 82       	std	Z+3, r11	; 0x03
    1470:	a2 82       	std	Z+2, r10	; 0x02
    1472:	0c 0d       	add	r16, r12
    1474:	1d 1d       	adc	r17, r13
    1476:	2e 1d       	adc	r18, r14
    1478:	3f 1d       	adc	r19, r15
    147a:	04 83       	std	Z+4, r16	; 0x04
    147c:	15 83       	std	Z+5, r17	; 0x05
    147e:	26 83       	std	Z+6, r18	; 0x06
    1480:	37 83       	std	Z+7, r19	; 0x07
    1482:	83 e0       	ldi	r24, 0x03	; 3
    1484:	80 83       	st	Z, r24
    1486:	44 81       	ldd	r20, Z+4	; 0x04
    1488:	55 81       	ldd	r21, Z+5	; 0x05
    148a:	66 81       	ldd	r22, Z+6	; 0x06
    148c:	77 81       	ldd	r23, Z+7	; 0x07
    148e:	77 ff       	sbrs	r23, 7
    1490:	1d c0       	rjmp	.+58     	; 0x14cc <_fpadd_parts+0x294>
    1492:	db 01       	movw	r26, r22
    1494:	ca 01       	movw	r24, r20
    1496:	81 70       	andi	r24, 0x01	; 1
    1498:	90 70       	andi	r25, 0x00	; 0
    149a:	a0 70       	andi	r26, 0x00	; 0
    149c:	b0 70       	andi	r27, 0x00	; 0
    149e:	76 95       	lsr	r23
    14a0:	67 95       	ror	r22
    14a2:	57 95       	ror	r21
    14a4:	47 95       	ror	r20
    14a6:	84 2b       	or	r24, r20
    14a8:	95 2b       	or	r25, r21
    14aa:	a6 2b       	or	r26, r22
    14ac:	b7 2b       	or	r27, r23
    14ae:	84 83       	std	Z+4, r24	; 0x04
    14b0:	95 83       	std	Z+5, r25	; 0x05
    14b2:	a6 83       	std	Z+6, r26	; 0x06
    14b4:	b7 83       	std	Z+7, r27	; 0x07
    14b6:	82 81       	ldd	r24, Z+2	; 0x02
    14b8:	93 81       	ldd	r25, Z+3	; 0x03
    14ba:	01 96       	adiw	r24, 0x01	; 1
    14bc:	93 83       	std	Z+3, r25	; 0x03
    14be:	82 83       	std	Z+2, r24	; 0x02
    14c0:	05 c0       	rjmp	.+10     	; 0x14cc <_fpadd_parts+0x294>
    14c2:	c6 eb       	ldi	r28, 0xB6	; 182
    14c4:	d3 e0       	ldi	r29, 0x03	; 3
    14c6:	03 c0       	rjmp	.+6      	; 0x14ce <_fpadd_parts+0x296>
    14c8:	e4 01       	movw	r28, r8
    14ca:	01 c0       	rjmp	.+2      	; 0x14ce <_fpadd_parts+0x296>
    14cc:	ef 01       	movw	r28, r30
    14ce:	ce 01       	movw	r24, r28
    14d0:	cd b7       	in	r28, 0x3d	; 61
    14d2:	de b7       	in	r29, 0x3e	; 62
    14d4:	e0 e1       	ldi	r30, 0x10	; 16
    14d6:	0c 94 b4 0f 	jmp	0x1f68	; 0x1f68 <__epilogue_restores__+0x4>

000014da <__addsf3>:
    14da:	a0 e2       	ldi	r26, 0x20	; 32
    14dc:	b0 e0       	ldi	r27, 0x00	; 0
    14de:	e3 e7       	ldi	r30, 0x73	; 115
    14e0:	fa e0       	ldi	r31, 0x0A	; 10
    14e2:	0c 94 a6 0f 	jmp	0x1f4c	; 0x1f4c <__prologue_saves__+0x20>
    14e6:	dc 01       	movw	r26, r24
    14e8:	cb 01       	movw	r24, r22
    14ea:	8d 83       	std	Y+5, r24	; 0x05
    14ec:	9e 83       	std	Y+6, r25	; 0x06
    14ee:	af 83       	std	Y+7, r26	; 0x07
    14f0:	b8 87       	std	Y+8, r27	; 0x08
    14f2:	29 83       	std	Y+1, r18	; 0x01
    14f4:	3a 83       	std	Y+2, r19	; 0x02
    14f6:	4b 83       	std	Y+3, r20	; 0x03
    14f8:	5c 83       	std	Y+4, r21	; 0x04
    14fa:	ce 01       	movw	r24, r28
    14fc:	05 96       	adiw	r24, 0x05	; 5
    14fe:	be 01       	movw	r22, r28
    1500:	67 5e       	subi	r22, 0xE7	; 231
    1502:	7f 4f       	sbci	r23, 0xFF	; 255
    1504:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <__unpack_f>
    1508:	ce 01       	movw	r24, r28
    150a:	01 96       	adiw	r24, 0x01	; 1
    150c:	be 01       	movw	r22, r28
    150e:	6f 5e       	subi	r22, 0xEF	; 239
    1510:	7f 4f       	sbci	r23, 0xFF	; 255
    1512:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <__unpack_f>
    1516:	ce 01       	movw	r24, r28
    1518:	49 96       	adiw	r24, 0x19	; 25
    151a:	be 01       	movw	r22, r28
    151c:	6f 5e       	subi	r22, 0xEF	; 239
    151e:	7f 4f       	sbci	r23, 0xFF	; 255
    1520:	ae 01       	movw	r20, r28
    1522:	47 5f       	subi	r20, 0xF7	; 247
    1524:	5f 4f       	sbci	r21, 0xFF	; 255
    1526:	0e 94 1c 09 	call	0x1238	; 0x1238 <_fpadd_parts>
    152a:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <__pack_f>
    152e:	46 2f       	mov	r20, r22
    1530:	57 2f       	mov	r21, r23
    1532:	68 2f       	mov	r22, r24
    1534:	79 2f       	mov	r23, r25
    1536:	cb 01       	movw	r24, r22
    1538:	ba 01       	movw	r22, r20
    153a:	a0 96       	adiw	r28, 0x20	; 32
    153c:	e2 e0       	ldi	r30, 0x02	; 2
    153e:	0c 94 c2 0f 	jmp	0x1f84	; 0x1f84 <__epilogue_restores__+0x20>

00001542 <__subsf3>:
    1542:	a0 e2       	ldi	r26, 0x20	; 32
    1544:	b0 e0       	ldi	r27, 0x00	; 0
    1546:	e7 ea       	ldi	r30, 0xA7	; 167
    1548:	fa e0       	ldi	r31, 0x0A	; 10
    154a:	0c 94 a6 0f 	jmp	0x1f4c	; 0x1f4c <__prologue_saves__+0x20>
    154e:	dc 01       	movw	r26, r24
    1550:	cb 01       	movw	r24, r22
    1552:	8d 83       	std	Y+5, r24	; 0x05
    1554:	9e 83       	std	Y+6, r25	; 0x06
    1556:	af 83       	std	Y+7, r26	; 0x07
    1558:	b8 87       	std	Y+8, r27	; 0x08
    155a:	29 83       	std	Y+1, r18	; 0x01
    155c:	3a 83       	std	Y+2, r19	; 0x02
    155e:	4b 83       	std	Y+3, r20	; 0x03
    1560:	5c 83       	std	Y+4, r21	; 0x04
    1562:	ce 01       	movw	r24, r28
    1564:	05 96       	adiw	r24, 0x05	; 5
    1566:	be 01       	movw	r22, r28
    1568:	67 5e       	subi	r22, 0xE7	; 231
    156a:	7f 4f       	sbci	r23, 0xFF	; 255
    156c:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <__unpack_f>
    1570:	ce 01       	movw	r24, r28
    1572:	01 96       	adiw	r24, 0x01	; 1
    1574:	be 01       	movw	r22, r28
    1576:	6f 5e       	subi	r22, 0xEF	; 239
    1578:	7f 4f       	sbci	r23, 0xFF	; 255
    157a:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <__unpack_f>
    157e:	8a 89       	ldd	r24, Y+18	; 0x12
    1580:	91 e0       	ldi	r25, 0x01	; 1
    1582:	89 27       	eor	r24, r25
    1584:	8a 8b       	std	Y+18, r24	; 0x12
    1586:	ce 01       	movw	r24, r28
    1588:	49 96       	adiw	r24, 0x19	; 25
    158a:	be 01       	movw	r22, r28
    158c:	6f 5e       	subi	r22, 0xEF	; 239
    158e:	7f 4f       	sbci	r23, 0xFF	; 255
    1590:	ae 01       	movw	r20, r28
    1592:	47 5f       	subi	r20, 0xF7	; 247
    1594:	5f 4f       	sbci	r21, 0xFF	; 255
    1596:	0e 94 1c 09 	call	0x1238	; 0x1238 <_fpadd_parts>
    159a:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <__pack_f>
    159e:	46 2f       	mov	r20, r22
    15a0:	57 2f       	mov	r21, r23
    15a2:	68 2f       	mov	r22, r24
    15a4:	79 2f       	mov	r23, r25
    15a6:	cb 01       	movw	r24, r22
    15a8:	ba 01       	movw	r22, r20
    15aa:	a0 96       	adiw	r28, 0x20	; 32
    15ac:	e2 e0       	ldi	r30, 0x02	; 2
    15ae:	0c 94 c2 0f 	jmp	0x1f84	; 0x1f84 <__epilogue_restores__+0x20>

000015b2 <__mulsf3>:
    15b2:	a0 e2       	ldi	r26, 0x20	; 32
    15b4:	b0 e0       	ldi	r27, 0x00	; 0
    15b6:	ef ed       	ldi	r30, 0xDF	; 223
    15b8:	fa e0       	ldi	r31, 0x0A	; 10
    15ba:	0c 94 98 0f 	jmp	0x1f30	; 0x1f30 <__prologue_saves__+0x4>
    15be:	dc 01       	movw	r26, r24
    15c0:	cb 01       	movw	r24, r22
    15c2:	8d 83       	std	Y+5, r24	; 0x05
    15c4:	9e 83       	std	Y+6, r25	; 0x06
    15c6:	af 83       	std	Y+7, r26	; 0x07
    15c8:	b8 87       	std	Y+8, r27	; 0x08
    15ca:	29 83       	std	Y+1, r18	; 0x01
    15cc:	3a 83       	std	Y+2, r19	; 0x02
    15ce:	4b 83       	std	Y+3, r20	; 0x03
    15d0:	5c 83       	std	Y+4, r21	; 0x04
    15d2:	ce 01       	movw	r24, r28
    15d4:	05 96       	adiw	r24, 0x05	; 5
    15d6:	be 01       	movw	r22, r28
    15d8:	67 5e       	subi	r22, 0xE7	; 231
    15da:	7f 4f       	sbci	r23, 0xFF	; 255
    15dc:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <__unpack_f>
    15e0:	ce 01       	movw	r24, r28
    15e2:	01 96       	adiw	r24, 0x01	; 1
    15e4:	be 01       	movw	r22, r28
    15e6:	6f 5e       	subi	r22, 0xEF	; 239
    15e8:	7f 4f       	sbci	r23, 0xFF	; 255
    15ea:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <__unpack_f>
    15ee:	99 8d       	ldd	r25, Y+25	; 0x19
    15f0:	92 30       	cpi	r25, 0x02	; 2
    15f2:	78 f0       	brcs	.+30     	; 0x1612 <__mulsf3+0x60>
    15f4:	89 89       	ldd	r24, Y+17	; 0x11
    15f6:	82 30       	cpi	r24, 0x02	; 2
    15f8:	c0 f0       	brcs	.+48     	; 0x162a <__mulsf3+0x78>
    15fa:	94 30       	cpi	r25, 0x04	; 4
    15fc:	19 f4       	brne	.+6      	; 0x1604 <__mulsf3+0x52>
    15fe:	82 30       	cpi	r24, 0x02	; 2
    1600:	41 f4       	brne	.+16     	; 0x1612 <__mulsf3+0x60>
    1602:	ca c0       	rjmp	.+404    	; 0x1798 <__mulsf3+0x1e6>
    1604:	84 30       	cpi	r24, 0x04	; 4
    1606:	19 f4       	brne	.+6      	; 0x160e <__mulsf3+0x5c>
    1608:	92 30       	cpi	r25, 0x02	; 2
    160a:	79 f4       	brne	.+30     	; 0x162a <__mulsf3+0x78>
    160c:	c5 c0       	rjmp	.+394    	; 0x1798 <__mulsf3+0x1e6>
    160e:	92 30       	cpi	r25, 0x02	; 2
    1610:	51 f4       	brne	.+20     	; 0x1626 <__mulsf3+0x74>
    1612:	81 e0       	ldi	r24, 0x01	; 1
    1614:	2a 8d       	ldd	r18, Y+26	; 0x1a
    1616:	9a 89       	ldd	r25, Y+18	; 0x12
    1618:	29 17       	cp	r18, r25
    161a:	09 f4       	brne	.+2      	; 0x161e <__mulsf3+0x6c>
    161c:	80 e0       	ldi	r24, 0x00	; 0
    161e:	8a 8f       	std	Y+26, r24	; 0x1a
    1620:	ce 01       	movw	r24, r28
    1622:	49 96       	adiw	r24, 0x19	; 25
    1624:	bb c0       	rjmp	.+374    	; 0x179c <__mulsf3+0x1ea>
    1626:	82 30       	cpi	r24, 0x02	; 2
    1628:	51 f4       	brne	.+20     	; 0x163e <__mulsf3+0x8c>
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	2a 8d       	ldd	r18, Y+26	; 0x1a
    162e:	9a 89       	ldd	r25, Y+18	; 0x12
    1630:	29 17       	cp	r18, r25
    1632:	09 f4       	brne	.+2      	; 0x1636 <__mulsf3+0x84>
    1634:	80 e0       	ldi	r24, 0x00	; 0
    1636:	8a 8b       	std	Y+18, r24	; 0x12
    1638:	ce 01       	movw	r24, r28
    163a:	41 96       	adiw	r24, 0x11	; 17
    163c:	af c0       	rjmp	.+350    	; 0x179c <__mulsf3+0x1ea>
    163e:	4d 8c       	ldd	r4, Y+29	; 0x1d
    1640:	5e 8c       	ldd	r5, Y+30	; 0x1e
    1642:	6f 8c       	ldd	r6, Y+31	; 0x1f
    1644:	78 a0       	lds	r23, 0x88
    1646:	0d 89       	ldd	r16, Y+21	; 0x15
    1648:	1e 89       	ldd	r17, Y+22	; 0x16
    164a:	2f 89       	ldd	r18, Y+23	; 0x17
    164c:	38 8d       	ldd	r19, Y+24	; 0x18
    164e:	e0 e2       	ldi	r30, 0x20	; 32
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	40 e0       	ldi	r20, 0x00	; 0
    1654:	50 e0       	ldi	r21, 0x00	; 0
    1656:	ba 01       	movw	r22, r20
    1658:	88 24       	eor	r8, r8
    165a:	99 24       	eor	r9, r9
    165c:	54 01       	movw	r10, r8
    165e:	cc 24       	eor	r12, r12
    1660:	dd 24       	eor	r13, r13
    1662:	76 01       	movw	r14, r12
    1664:	c2 01       	movw	r24, r4
    1666:	81 70       	andi	r24, 0x01	; 1
    1668:	90 70       	andi	r25, 0x00	; 0
    166a:	00 97       	sbiw	r24, 0x00	; 0
    166c:	d1 f0       	breq	.+52     	; 0x16a2 <__mulsf3+0xf0>
    166e:	c0 0e       	add	r12, r16
    1670:	d1 1e       	adc	r13, r17
    1672:	e2 1e       	adc	r14, r18
    1674:	f3 1e       	adc	r15, r19
    1676:	db 01       	movw	r26, r22
    1678:	ca 01       	movw	r24, r20
    167a:	88 0d       	add	r24, r8
    167c:	99 1d       	adc	r25, r9
    167e:	aa 1d       	adc	r26, r10
    1680:	bb 1d       	adc	r27, r11
    1682:	41 e0       	ldi	r20, 0x01	; 1
    1684:	50 e0       	ldi	r21, 0x00	; 0
    1686:	60 e0       	ldi	r22, 0x00	; 0
    1688:	70 e0       	ldi	r23, 0x00	; 0
    168a:	c0 16       	cp	r12, r16
    168c:	d1 06       	cpc	r13, r17
    168e:	e2 06       	cpc	r14, r18
    1690:	f3 06       	cpc	r15, r19
    1692:	18 f0       	brcs	.+6      	; 0x169a <__mulsf3+0xe8>
    1694:	40 e0       	ldi	r20, 0x00	; 0
    1696:	50 e0       	ldi	r21, 0x00	; 0
    1698:	ba 01       	movw	r22, r20
    169a:	48 0f       	add	r20, r24
    169c:	59 1f       	adc	r21, r25
    169e:	6a 1f       	adc	r22, r26
    16a0:	7b 1f       	adc	r23, r27
    16a2:	88 0c       	add	r8, r8
    16a4:	99 1c       	adc	r9, r9
    16a6:	aa 1c       	adc	r10, r10
    16a8:	bb 1c       	adc	r11, r11
    16aa:	37 ff       	sbrs	r19, 7
    16ac:	08 c0       	rjmp	.+16     	; 0x16be <__mulsf3+0x10c>
    16ae:	81 e0       	ldi	r24, 0x01	; 1
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	a0 e0       	ldi	r26, 0x00	; 0
    16b4:	b0 e0       	ldi	r27, 0x00	; 0
    16b6:	88 2a       	or	r8, r24
    16b8:	99 2a       	or	r9, r25
    16ba:	aa 2a       	or	r10, r26
    16bc:	bb 2a       	or	r11, r27
    16be:	00 0f       	add	r16, r16
    16c0:	11 1f       	adc	r17, r17
    16c2:	22 1f       	adc	r18, r18
    16c4:	33 1f       	adc	r19, r19
    16c6:	76 94       	lsr	r7
    16c8:	67 94       	ror	r6
    16ca:	57 94       	ror	r5
    16cc:	47 94       	ror	r4
    16ce:	31 97       	sbiw	r30, 0x01	; 1
    16d0:	49 f6       	brne	.-110    	; 0x1664 <__mulsf3+0xb2>
    16d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16d6:	2b 89       	ldd	r18, Y+19	; 0x13
    16d8:	3c 89       	ldd	r19, Y+20	; 0x14
    16da:	82 0f       	add	r24, r18
    16dc:	93 1f       	adc	r25, r19
    16de:	02 96       	adiw	r24, 0x02	; 2
    16e0:	9c 87       	std	Y+12, r25	; 0x0c
    16e2:	8b 87       	std	Y+11, r24	; 0x0b
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	2a 8d       	ldd	r18, Y+26	; 0x1a
    16e8:	9a 89       	ldd	r25, Y+18	; 0x12
    16ea:	29 17       	cp	r18, r25
    16ec:	09 f4       	brne	.+2      	; 0x16f0 <__mulsf3+0x13e>
    16ee:	80 e0       	ldi	r24, 0x00	; 0
    16f0:	8a 87       	std	Y+10, r24	; 0x0a
    16f2:	2b 85       	ldd	r18, Y+11	; 0x0b
    16f4:	3c 85       	ldd	r19, Y+12	; 0x0c
    16f6:	17 c0       	rjmp	.+46     	; 0x1726 <__mulsf3+0x174>
    16f8:	ca 01       	movw	r24, r20
    16fa:	81 70       	andi	r24, 0x01	; 1
    16fc:	90 70       	andi	r25, 0x00	; 0
    16fe:	00 97       	sbiw	r24, 0x00	; 0
    1700:	61 f0       	breq	.+24     	; 0x171a <__mulsf3+0x168>
    1702:	f6 94       	lsr	r15
    1704:	e7 94       	ror	r14
    1706:	d7 94       	ror	r13
    1708:	c7 94       	ror	r12
    170a:	80 e0       	ldi	r24, 0x00	; 0
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	a0 e0       	ldi	r26, 0x00	; 0
    1710:	b0 e8       	ldi	r27, 0x80	; 128
    1712:	c8 2a       	or	r12, r24
    1714:	d9 2a       	or	r13, r25
    1716:	ea 2a       	or	r14, r26
    1718:	fb 2a       	or	r15, r27
    171a:	76 95       	lsr	r23
    171c:	67 95       	ror	r22
    171e:	57 95       	ror	r21
    1720:	47 95       	ror	r20
    1722:	2f 5f       	subi	r18, 0xFF	; 255
    1724:	3f 4f       	sbci	r19, 0xFF	; 255
    1726:	77 fd       	sbrc	r23, 7
    1728:	e7 cf       	rjmp	.-50     	; 0x16f8 <__mulsf3+0x146>
    172a:	c9 01       	movw	r24, r18
    172c:	0b c0       	rjmp	.+22     	; 0x1744 <__mulsf3+0x192>
    172e:	44 0f       	add	r20, r20
    1730:	55 1f       	adc	r21, r21
    1732:	66 1f       	adc	r22, r22
    1734:	77 1f       	adc	r23, r23
    1736:	f7 fc       	sbrc	r15, 7
    1738:	41 60       	ori	r20, 0x01	; 1
    173a:	cc 0c       	add	r12, r12
    173c:	dd 1c       	adc	r13, r13
    173e:	ee 1c       	adc	r14, r14
    1740:	ff 1c       	adc	r15, r15
    1742:	01 97       	sbiw	r24, 0x01	; 1
    1744:	40 30       	cpi	r20, 0x00	; 0
    1746:	a0 e0       	ldi	r26, 0x00	; 0
    1748:	5a 07       	cpc	r21, r26
    174a:	a0 e0       	ldi	r26, 0x00	; 0
    174c:	6a 07       	cpc	r22, r26
    174e:	a0 e4       	ldi	r26, 0x40	; 64
    1750:	7a 07       	cpc	r23, r26
    1752:	68 f3       	brcs	.-38     	; 0x172e <__mulsf3+0x17c>
    1754:	8b 87       	std	Y+11, r24	; 0x0b
    1756:	9c 87       	std	Y+12, r25	; 0x0c
    1758:	db 01       	movw	r26, r22
    175a:	ca 01       	movw	r24, r20
    175c:	8f 77       	andi	r24, 0x7F	; 127
    175e:	90 70       	andi	r25, 0x00	; 0
    1760:	a0 70       	andi	r26, 0x00	; 0
    1762:	b0 70       	andi	r27, 0x00	; 0
    1764:	80 34       	cpi	r24, 0x40	; 64
    1766:	91 05       	cpc	r25, r1
    1768:	a1 05       	cpc	r26, r1
    176a:	b1 05       	cpc	r27, r1
    176c:	61 f4       	brne	.+24     	; 0x1786 <__mulsf3+0x1d4>
    176e:	47 fd       	sbrc	r20, 7
    1770:	0a c0       	rjmp	.+20     	; 0x1786 <__mulsf3+0x1d4>
    1772:	c1 14       	cp	r12, r1
    1774:	d1 04       	cpc	r13, r1
    1776:	e1 04       	cpc	r14, r1
    1778:	f1 04       	cpc	r15, r1
    177a:	29 f0       	breq	.+10     	; 0x1786 <__mulsf3+0x1d4>
    177c:	40 5c       	subi	r20, 0xC0	; 192
    177e:	5f 4f       	sbci	r21, 0xFF	; 255
    1780:	6f 4f       	sbci	r22, 0xFF	; 255
    1782:	7f 4f       	sbci	r23, 0xFF	; 255
    1784:	40 78       	andi	r20, 0x80	; 128
    1786:	4d 87       	std	Y+13, r20	; 0x0d
    1788:	5e 87       	std	Y+14, r21	; 0x0e
    178a:	6f 87       	std	Y+15, r22	; 0x0f
    178c:	78 8b       	std	Y+16, r23	; 0x10
    178e:	83 e0       	ldi	r24, 0x03	; 3
    1790:	89 87       	std	Y+9, r24	; 0x09
    1792:	ce 01       	movw	r24, r28
    1794:	09 96       	adiw	r24, 0x09	; 9
    1796:	02 c0       	rjmp	.+4      	; 0x179c <__mulsf3+0x1ea>
    1798:	86 eb       	ldi	r24, 0xB6	; 182
    179a:	93 e0       	ldi	r25, 0x03	; 3
    179c:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <__pack_f>
    17a0:	46 2f       	mov	r20, r22
    17a2:	57 2f       	mov	r21, r23
    17a4:	68 2f       	mov	r22, r24
    17a6:	79 2f       	mov	r23, r25
    17a8:	cb 01       	movw	r24, r22
    17aa:	ba 01       	movw	r22, r20
    17ac:	a0 96       	adiw	r28, 0x20	; 32
    17ae:	e0 e1       	ldi	r30, 0x10	; 16
    17b0:	0c 94 b4 0f 	jmp	0x1f68	; 0x1f68 <__epilogue_restores__+0x4>

000017b4 <__gesf2>:
    17b4:	a8 e1       	ldi	r26, 0x18	; 24
    17b6:	b0 e0       	ldi	r27, 0x00	; 0
    17b8:	e0 ee       	ldi	r30, 0xE0	; 224
    17ba:	fb e0       	ldi	r31, 0x0B	; 11
    17bc:	0c 94 a6 0f 	jmp	0x1f4c	; 0x1f4c <__prologue_saves__+0x20>
    17c0:	dc 01       	movw	r26, r24
    17c2:	cb 01       	movw	r24, r22
    17c4:	8d 83       	std	Y+5, r24	; 0x05
    17c6:	9e 83       	std	Y+6, r25	; 0x06
    17c8:	af 83       	std	Y+7, r26	; 0x07
    17ca:	b8 87       	std	Y+8, r27	; 0x08
    17cc:	29 83       	std	Y+1, r18	; 0x01
    17ce:	3a 83       	std	Y+2, r19	; 0x02
    17d0:	4b 83       	std	Y+3, r20	; 0x03
    17d2:	5c 83       	std	Y+4, r21	; 0x04
    17d4:	ce 01       	movw	r24, r28
    17d6:	05 96       	adiw	r24, 0x05	; 5
    17d8:	be 01       	movw	r22, r28
    17da:	6f 5e       	subi	r22, 0xEF	; 239
    17dc:	7f 4f       	sbci	r23, 0xFF	; 255
    17de:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <__unpack_f>
    17e2:	ce 01       	movw	r24, r28
    17e4:	01 96       	adiw	r24, 0x01	; 1
    17e6:	be 01       	movw	r22, r28
    17e8:	67 5f       	subi	r22, 0xF7	; 247
    17ea:	7f 4f       	sbci	r23, 0xFF	; 255
    17ec:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <__unpack_f>
    17f0:	89 89       	ldd	r24, Y+17	; 0x11
    17f2:	82 30       	cpi	r24, 0x02	; 2
    17f4:	58 f0       	brcs	.+22     	; 0x180c <__gesf2+0x58>
    17f6:	89 85       	ldd	r24, Y+9	; 0x09
    17f8:	82 30       	cpi	r24, 0x02	; 2
    17fa:	40 f0       	brcs	.+16     	; 0x180c <__gesf2+0x58>
    17fc:	ce 01       	movw	r24, r28
    17fe:	41 96       	adiw	r24, 0x11	; 17
    1800:	be 01       	movw	r22, r28
    1802:	67 5f       	subi	r22, 0xF7	; 247
    1804:	7f 4f       	sbci	r23, 0xFF	; 255
    1806:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <__fpcmp_parts_f>
    180a:	01 c0       	rjmp	.+2      	; 0x180e <__gesf2+0x5a>
    180c:	8f ef       	ldi	r24, 0xFF	; 255
    180e:	68 96       	adiw	r28, 0x18	; 24
    1810:	e2 e0       	ldi	r30, 0x02	; 2
    1812:	0c 94 c2 0f 	jmp	0x1f84	; 0x1f84 <__epilogue_restores__+0x20>

00001816 <__floatsisf>:
    1816:	cf 92       	push	r12
    1818:	df 92       	push	r13
    181a:	ef 92       	push	r14
    181c:	ff 92       	push	r15
    181e:	cf 93       	push	r28
    1820:	df 93       	push	r29
    1822:	cd b7       	in	r28, 0x3d	; 61
    1824:	de b7       	in	r29, 0x3e	; 62
    1826:	28 97       	sbiw	r28, 0x08	; 8
    1828:	0f b6       	in	r0, 0x3f	; 63
    182a:	f8 94       	cli
    182c:	de bf       	out	0x3e, r29	; 62
    182e:	0f be       	out	0x3f, r0	; 63
    1830:	cd bf       	out	0x3d, r28	; 61
    1832:	6b 01       	movw	r12, r22
    1834:	7c 01       	movw	r14, r24
    1836:	83 e0       	ldi	r24, 0x03	; 3
    1838:	89 83       	std	Y+1, r24	; 0x01
    183a:	d7 01       	movw	r26, r14
    183c:	c6 01       	movw	r24, r12
    183e:	88 27       	eor	r24, r24
    1840:	b7 fd       	sbrc	r27, 7
    1842:	83 95       	inc	r24
    1844:	99 27       	eor	r25, r25
    1846:	aa 27       	eor	r26, r26
    1848:	bb 27       	eor	r27, r27
    184a:	28 2f       	mov	r18, r24
    184c:	8a 83       	std	Y+2, r24	; 0x02
    184e:	c1 14       	cp	r12, r1
    1850:	d1 04       	cpc	r13, r1
    1852:	e1 04       	cpc	r14, r1
    1854:	f1 04       	cpc	r15, r1
    1856:	19 f4       	brne	.+6      	; 0x185e <__floatsisf+0x48>
    1858:	82 e0       	ldi	r24, 0x02	; 2
    185a:	89 83       	std	Y+1, r24	; 0x01
    185c:	35 c0       	rjmp	.+106    	; 0x18c8 <__floatsisf+0xb2>
    185e:	8e e1       	ldi	r24, 0x1E	; 30
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	9c 83       	std	Y+4, r25	; 0x04
    1864:	8b 83       	std	Y+3, r24	; 0x03
    1866:	22 23       	and	r18, r18
    1868:	89 f0       	breq	.+34     	; 0x188c <__floatsisf+0x76>
    186a:	80 e0       	ldi	r24, 0x00	; 0
    186c:	c8 16       	cp	r12, r24
    186e:	80 e0       	ldi	r24, 0x00	; 0
    1870:	d8 06       	cpc	r13, r24
    1872:	80 e0       	ldi	r24, 0x00	; 0
    1874:	e8 06       	cpc	r14, r24
    1876:	80 e8       	ldi	r24, 0x80	; 128
    1878:	f8 06       	cpc	r15, r24
    187a:	59 f1       	breq	.+86     	; 0x18d2 <__floatsisf+0xbc>
    187c:	f0 94       	com	r15
    187e:	e0 94       	com	r14
    1880:	d0 94       	com	r13
    1882:	c0 94       	com	r12
    1884:	c1 1c       	adc	r12, r1
    1886:	d1 1c       	adc	r13, r1
    1888:	e1 1c       	adc	r14, r1
    188a:	f1 1c       	adc	r15, r1
    188c:	cd 82       	std	Y+5, r12	; 0x05
    188e:	de 82       	std	Y+6, r13	; 0x06
    1890:	ef 82       	std	Y+7, r14	; 0x07
    1892:	f8 86       	std	Y+8, r15	; 0x08
    1894:	c7 01       	movw	r24, r14
    1896:	b6 01       	movw	r22, r12
    1898:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <__clzsi2>
    189c:	01 97       	sbiw	r24, 0x01	; 1
    189e:	18 16       	cp	r1, r24
    18a0:	19 06       	cpc	r1, r25
    18a2:	94 f4       	brge	.+36     	; 0x18c8 <__floatsisf+0xb2>
    18a4:	08 2e       	mov	r0, r24
    18a6:	04 c0       	rjmp	.+8      	; 0x18b0 <__floatsisf+0x9a>
    18a8:	cc 0c       	add	r12, r12
    18aa:	dd 1c       	adc	r13, r13
    18ac:	ee 1c       	adc	r14, r14
    18ae:	ff 1c       	adc	r15, r15
    18b0:	0a 94       	dec	r0
    18b2:	d2 f7       	brpl	.-12     	; 0x18a8 <__floatsisf+0x92>
    18b4:	cd 82       	std	Y+5, r12	; 0x05
    18b6:	de 82       	std	Y+6, r13	; 0x06
    18b8:	ef 82       	std	Y+7, r14	; 0x07
    18ba:	f8 86       	std	Y+8, r15	; 0x08
    18bc:	2e e1       	ldi	r18, 0x1E	; 30
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	28 1b       	sub	r18, r24
    18c2:	39 0b       	sbc	r19, r25
    18c4:	3c 83       	std	Y+4, r19	; 0x04
    18c6:	2b 83       	std	Y+3, r18	; 0x03
    18c8:	ce 01       	movw	r24, r28
    18ca:	01 96       	adiw	r24, 0x01	; 1
    18cc:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <__pack_f>
    18d0:	04 c0       	rjmp	.+8      	; 0x18da <__floatsisf+0xc4>
    18d2:	60 e0       	ldi	r22, 0x00	; 0
    18d4:	70 e0       	ldi	r23, 0x00	; 0
    18d6:	80 e0       	ldi	r24, 0x00	; 0
    18d8:	9f ec       	ldi	r25, 0xCF	; 207
    18da:	38 2f       	mov	r19, r24
    18dc:	29 2f       	mov	r18, r25
    18de:	86 2f       	mov	r24, r22
    18e0:	97 2f       	mov	r25, r23
    18e2:	a3 2f       	mov	r26, r19
    18e4:	b2 2f       	mov	r27, r18
    18e6:	bc 01       	movw	r22, r24
    18e8:	cd 01       	movw	r24, r26
    18ea:	28 96       	adiw	r28, 0x08	; 8
    18ec:	0f b6       	in	r0, 0x3f	; 63
    18ee:	f8 94       	cli
    18f0:	de bf       	out	0x3e, r29	; 62
    18f2:	0f be       	out	0x3f, r0	; 63
    18f4:	cd bf       	out	0x3d, r28	; 61
    18f6:	df 91       	pop	r29
    18f8:	cf 91       	pop	r28
    18fa:	ff 90       	pop	r15
    18fc:	ef 90       	pop	r14
    18fe:	df 90       	pop	r13
    1900:	cf 90       	pop	r12
    1902:	08 95       	ret

00001904 <__fixsfsi>:
    1904:	ac e0       	ldi	r26, 0x0C	; 12
    1906:	b0 e0       	ldi	r27, 0x00	; 0
    1908:	e8 e8       	ldi	r30, 0x88	; 136
    190a:	fc e0       	ldi	r31, 0x0C	; 12
    190c:	0c 94 a4 0f 	jmp	0x1f48	; 0x1f48 <__prologue_saves__+0x1c>
    1910:	dc 01       	movw	r26, r24
    1912:	cb 01       	movw	r24, r22
    1914:	89 83       	std	Y+1, r24	; 0x01
    1916:	9a 83       	std	Y+2, r25	; 0x02
    1918:	ab 83       	std	Y+3, r26	; 0x03
    191a:	bc 83       	std	Y+4, r27	; 0x04
    191c:	ce 01       	movw	r24, r28
    191e:	01 96       	adiw	r24, 0x01	; 1
    1920:	be 01       	movw	r22, r28
    1922:	6b 5f       	subi	r22, 0xFB	; 251
    1924:	7f 4f       	sbci	r23, 0xFF	; 255
    1926:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <__unpack_f>
    192a:	8d 81       	ldd	r24, Y+5	; 0x05
    192c:	82 30       	cpi	r24, 0x02	; 2
    192e:	69 f1       	breq	.+90     	; 0x198a <__fixsfsi+0x86>
    1930:	82 30       	cpi	r24, 0x02	; 2
    1932:	58 f1       	brcs	.+86     	; 0x198a <__fixsfsi+0x86>
    1934:	84 30       	cpi	r24, 0x04	; 4
    1936:	39 f0       	breq	.+14     	; 0x1946 <__fixsfsi+0x42>
    1938:	2f 81       	ldd	r18, Y+7	; 0x07
    193a:	38 85       	ldd	r19, Y+8	; 0x08
    193c:	37 fd       	sbrc	r19, 7
    193e:	25 c0       	rjmp	.+74     	; 0x198a <__fixsfsi+0x86>
    1940:	2f 31       	cpi	r18, 0x1F	; 31
    1942:	31 05       	cpc	r19, r1
    1944:	44 f0       	brlt	.+16     	; 0x1956 <__fixsfsi+0x52>
    1946:	8e 81       	ldd	r24, Y+6	; 0x06
    1948:	88 23       	and	r24, r24
    194a:	19 f1       	breq	.+70     	; 0x1992 <__fixsfsi+0x8e>
    194c:	00 e0       	ldi	r16, 0x00	; 0
    194e:	10 e0       	ldi	r17, 0x00	; 0
    1950:	20 e0       	ldi	r18, 0x00	; 0
    1952:	30 e8       	ldi	r19, 0x80	; 128
    1954:	22 c0       	rjmp	.+68     	; 0x199a <__fixsfsi+0x96>
    1956:	8e e1       	ldi	r24, 0x1E	; 30
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	82 1b       	sub	r24, r18
    195c:	93 0b       	sbc	r25, r19
    195e:	09 85       	ldd	r16, Y+9	; 0x09
    1960:	1a 85       	ldd	r17, Y+10	; 0x0a
    1962:	2b 85       	ldd	r18, Y+11	; 0x0b
    1964:	3c 85       	ldd	r19, Y+12	; 0x0c
    1966:	04 c0       	rjmp	.+8      	; 0x1970 <__fixsfsi+0x6c>
    1968:	36 95       	lsr	r19
    196a:	27 95       	ror	r18
    196c:	17 95       	ror	r17
    196e:	07 95       	ror	r16
    1970:	8a 95       	dec	r24
    1972:	d2 f7       	brpl	.-12     	; 0x1968 <__fixsfsi+0x64>
    1974:	8e 81       	ldd	r24, Y+6	; 0x06
    1976:	88 23       	and	r24, r24
    1978:	81 f0       	breq	.+32     	; 0x199a <__fixsfsi+0x96>
    197a:	30 95       	com	r19
    197c:	20 95       	com	r18
    197e:	10 95       	com	r17
    1980:	01 95       	neg	r16
    1982:	1f 4f       	sbci	r17, 0xFF	; 255
    1984:	2f 4f       	sbci	r18, 0xFF	; 255
    1986:	3f 4f       	sbci	r19, 0xFF	; 255
    1988:	08 c0       	rjmp	.+16     	; 0x199a <__fixsfsi+0x96>
    198a:	00 e0       	ldi	r16, 0x00	; 0
    198c:	10 e0       	ldi	r17, 0x00	; 0
    198e:	98 01       	movw	r18, r16
    1990:	04 c0       	rjmp	.+8      	; 0x199a <__fixsfsi+0x96>
    1992:	0f ef       	ldi	r16, 0xFF	; 255
    1994:	1f ef       	ldi	r17, 0xFF	; 255
    1996:	2f ef       	ldi	r18, 0xFF	; 255
    1998:	3f e7       	ldi	r19, 0x7F	; 127
    199a:	b8 01       	movw	r22, r16
    199c:	c9 01       	movw	r24, r18
    199e:	2c 96       	adiw	r28, 0x0c	; 12
    19a0:	e4 e0       	ldi	r30, 0x04	; 4
    19a2:	0c 94 c0 0f 	jmp	0x1f80	; 0x1f80 <__epilogue_restores__+0x1c>

000019a6 <__floatunsisf>:
    19a6:	a8 e0       	ldi	r26, 0x08	; 8
    19a8:	b0 e0       	ldi	r27, 0x00	; 0
    19aa:	e9 ed       	ldi	r30, 0xD9	; 217
    19ac:	fc e0       	ldi	r31, 0x0C	; 12
    19ae:	0c 94 a0 0f 	jmp	0x1f40	; 0x1f40 <__prologue_saves__+0x14>
    19b2:	6b 01       	movw	r12, r22
    19b4:	7c 01       	movw	r14, r24
    19b6:	1a 82       	std	Y+2, r1	; 0x02
    19b8:	61 15       	cp	r22, r1
    19ba:	71 05       	cpc	r23, r1
    19bc:	81 05       	cpc	r24, r1
    19be:	91 05       	cpc	r25, r1
    19c0:	19 f4       	brne	.+6      	; 0x19c8 <__floatunsisf+0x22>
    19c2:	82 e0       	ldi	r24, 0x02	; 2
    19c4:	89 83       	std	Y+1, r24	; 0x01
    19c6:	5e c0       	rjmp	.+188    	; 0x1a84 <__floatunsisf+0xde>
    19c8:	83 e0       	ldi	r24, 0x03	; 3
    19ca:	89 83       	std	Y+1, r24	; 0x01
    19cc:	0e e1       	ldi	r16, 0x1E	; 30
    19ce:	10 e0       	ldi	r17, 0x00	; 0
    19d0:	1c 83       	std	Y+4, r17	; 0x04
    19d2:	0b 83       	std	Y+3, r16	; 0x03
    19d4:	cd 82       	std	Y+5, r12	; 0x05
    19d6:	de 82       	std	Y+6, r13	; 0x06
    19d8:	ef 82       	std	Y+7, r14	; 0x07
    19da:	f8 86       	std	Y+8, r15	; 0x08
    19dc:	c7 01       	movw	r24, r14
    19de:	b6 01       	movw	r22, r12
    19e0:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <__clzsi2>
    19e4:	9c 01       	movw	r18, r24
    19e6:	21 50       	subi	r18, 0x01	; 1
    19e8:	30 40       	sbci	r19, 0x00	; 0
    19ea:	37 ff       	sbrs	r19, 7
    19ec:	38 c0       	rjmp	.+112    	; 0x1a5e <__floatunsisf+0xb8>
    19ee:	ee 27       	eor	r30, r30
    19f0:	ff 27       	eor	r31, r31
    19f2:	e2 1b       	sub	r30, r18
    19f4:	f3 0b       	sbc	r31, r19
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	a0 e0       	ldi	r26, 0x00	; 0
    19fc:	b0 e0       	ldi	r27, 0x00	; 0
    19fe:	0e 2e       	mov	r0, r30
    1a00:	04 c0       	rjmp	.+8      	; 0x1a0a <__floatunsisf+0x64>
    1a02:	88 0f       	add	r24, r24
    1a04:	99 1f       	adc	r25, r25
    1a06:	aa 1f       	adc	r26, r26
    1a08:	bb 1f       	adc	r27, r27
    1a0a:	0a 94       	dec	r0
    1a0c:	d2 f7       	brpl	.-12     	; 0x1a02 <__floatunsisf+0x5c>
    1a0e:	01 97       	sbiw	r24, 0x01	; 1
    1a10:	a1 09       	sbc	r26, r1
    1a12:	b1 09       	sbc	r27, r1
    1a14:	8c 21       	and	r24, r12
    1a16:	9d 21       	and	r25, r13
    1a18:	ae 21       	and	r26, r14
    1a1a:	bf 21       	and	r27, r15
    1a1c:	41 e0       	ldi	r20, 0x01	; 1
    1a1e:	50 e0       	ldi	r21, 0x00	; 0
    1a20:	60 e0       	ldi	r22, 0x00	; 0
    1a22:	70 e0       	ldi	r23, 0x00	; 0
    1a24:	00 97       	sbiw	r24, 0x00	; 0
    1a26:	a1 05       	cpc	r26, r1
    1a28:	b1 05       	cpc	r27, r1
    1a2a:	19 f4       	brne	.+6      	; 0x1a32 <__floatunsisf+0x8c>
    1a2c:	40 e0       	ldi	r20, 0x00	; 0
    1a2e:	50 e0       	ldi	r21, 0x00	; 0
    1a30:	ba 01       	movw	r22, r20
    1a32:	04 c0       	rjmp	.+8      	; 0x1a3c <__floatunsisf+0x96>
    1a34:	f6 94       	lsr	r15
    1a36:	e7 94       	ror	r14
    1a38:	d7 94       	ror	r13
    1a3a:	c7 94       	ror	r12
    1a3c:	ea 95       	dec	r30
    1a3e:	d2 f7       	brpl	.-12     	; 0x1a34 <__floatunsisf+0x8e>
    1a40:	c4 2a       	or	r12, r20
    1a42:	d5 2a       	or	r13, r21
    1a44:	e6 2a       	or	r14, r22
    1a46:	f7 2a       	or	r15, r23
    1a48:	cd 82       	std	Y+5, r12	; 0x05
    1a4a:	de 82       	std	Y+6, r13	; 0x06
    1a4c:	ef 82       	std	Y+7, r14	; 0x07
    1a4e:	f8 86       	std	Y+8, r15	; 0x08
    1a50:	8e e1       	ldi	r24, 0x1E	; 30
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	82 1b       	sub	r24, r18
    1a56:	93 0b       	sbc	r25, r19
    1a58:	9c 83       	std	Y+4, r25	; 0x04
    1a5a:	8b 83       	std	Y+3, r24	; 0x03
    1a5c:	13 c0       	rjmp	.+38     	; 0x1a84 <__floatunsisf+0xde>
    1a5e:	21 15       	cp	r18, r1
    1a60:	31 05       	cpc	r19, r1
    1a62:	81 f0       	breq	.+32     	; 0x1a84 <__floatunsisf+0xde>
    1a64:	02 2e       	mov	r0, r18
    1a66:	04 c0       	rjmp	.+8      	; 0x1a70 <__floatunsisf+0xca>
    1a68:	cc 0c       	add	r12, r12
    1a6a:	dd 1c       	adc	r13, r13
    1a6c:	ee 1c       	adc	r14, r14
    1a6e:	ff 1c       	adc	r15, r15
    1a70:	0a 94       	dec	r0
    1a72:	d2 f7       	brpl	.-12     	; 0x1a68 <__floatunsisf+0xc2>
    1a74:	cd 82       	std	Y+5, r12	; 0x05
    1a76:	de 82       	std	Y+6, r13	; 0x06
    1a78:	ef 82       	std	Y+7, r14	; 0x07
    1a7a:	f8 86       	std	Y+8, r15	; 0x08
    1a7c:	02 1b       	sub	r16, r18
    1a7e:	13 0b       	sbc	r17, r19
    1a80:	1c 83       	std	Y+4, r17	; 0x04
    1a82:	0b 83       	std	Y+3, r16	; 0x03
    1a84:	ce 01       	movw	r24, r28
    1a86:	01 96       	adiw	r24, 0x01	; 1
    1a88:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <__pack_f>
    1a8c:	46 2f       	mov	r20, r22
    1a8e:	57 2f       	mov	r21, r23
    1a90:	68 2f       	mov	r22, r24
    1a92:	79 2f       	mov	r23, r25
    1a94:	cb 01       	movw	r24, r22
    1a96:	ba 01       	movw	r22, r20
    1a98:	28 96       	adiw	r28, 0x08	; 8
    1a9a:	e8 e0       	ldi	r30, 0x08	; 8
    1a9c:	0c 94 bc 0f 	jmp	0x1f78	; 0x1f78 <__epilogue_restores__+0x14>

00001aa0 <__clzsi2>:
    1aa0:	cf 92       	push	r12
    1aa2:	df 92       	push	r13
    1aa4:	ef 92       	push	r14
    1aa6:	ff 92       	push	r15
    1aa8:	0f 93       	push	r16
    1aaa:	1f 93       	push	r17
    1aac:	8b 01       	movw	r16, r22
    1aae:	9c 01       	movw	r18, r24
    1ab0:	00 30       	cpi	r16, 0x00	; 0
    1ab2:	80 e0       	ldi	r24, 0x00	; 0
    1ab4:	18 07       	cpc	r17, r24
    1ab6:	81 e0       	ldi	r24, 0x01	; 1
    1ab8:	28 07       	cpc	r18, r24
    1aba:	80 e0       	ldi	r24, 0x00	; 0
    1abc:	38 07       	cpc	r19, r24
    1abe:	50 f4       	brcc	.+20     	; 0x1ad4 <__clzsi2+0x34>
    1ac0:	0f 3f       	cpi	r16, 0xFF	; 255
    1ac2:	11 05       	cpc	r17, r1
    1ac4:	21 05       	cpc	r18, r1
    1ac6:	31 05       	cpc	r19, r1
    1ac8:	09 f0       	breq	.+2      	; 0x1acc <__clzsi2+0x2c>
    1aca:	88 f4       	brcc	.+34     	; 0x1aee <__clzsi2+0x4e>
    1acc:	80 e0       	ldi	r24, 0x00	; 0
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	dc 01       	movw	r26, r24
    1ad2:	16 c0       	rjmp	.+44     	; 0x1b00 <__clzsi2+0x60>
    1ad4:	00 30       	cpi	r16, 0x00	; 0
    1ad6:	e0 e0       	ldi	r30, 0x00	; 0
    1ad8:	1e 07       	cpc	r17, r30
    1ada:	e0 e0       	ldi	r30, 0x00	; 0
    1adc:	2e 07       	cpc	r18, r30
    1ade:	e1 e0       	ldi	r30, 0x01	; 1
    1ae0:	3e 07       	cpc	r19, r30
    1ae2:	50 f4       	brcc	.+20     	; 0x1af8 <__clzsi2+0x58>
    1ae4:	80 e1       	ldi	r24, 0x10	; 16
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	a0 e0       	ldi	r26, 0x00	; 0
    1aea:	b0 e0       	ldi	r27, 0x00	; 0
    1aec:	09 c0       	rjmp	.+18     	; 0x1b00 <__clzsi2+0x60>
    1aee:	88 e0       	ldi	r24, 0x08	; 8
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	a0 e0       	ldi	r26, 0x00	; 0
    1af4:	b0 e0       	ldi	r27, 0x00	; 0
    1af6:	04 c0       	rjmp	.+8      	; 0x1b00 <__clzsi2+0x60>
    1af8:	88 e1       	ldi	r24, 0x18	; 24
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	a0 e0       	ldi	r26, 0x00	; 0
    1afe:	b0 e0       	ldi	r27, 0x00	; 0
    1b00:	40 e2       	ldi	r20, 0x20	; 32
    1b02:	50 e0       	ldi	r21, 0x00	; 0
    1b04:	60 e0       	ldi	r22, 0x00	; 0
    1b06:	70 e0       	ldi	r23, 0x00	; 0
    1b08:	48 1b       	sub	r20, r24
    1b0a:	59 0b       	sbc	r21, r25
    1b0c:	6a 0b       	sbc	r22, r26
    1b0e:	7b 0b       	sbc	r23, r27
    1b10:	68 01       	movw	r12, r16
    1b12:	79 01       	movw	r14, r18
    1b14:	04 c0       	rjmp	.+8      	; 0x1b1e <__clzsi2+0x7e>
    1b16:	f6 94       	lsr	r15
    1b18:	e7 94       	ror	r14
    1b1a:	d7 94       	ror	r13
    1b1c:	c7 94       	ror	r12
    1b1e:	8a 95       	dec	r24
    1b20:	d2 f7       	brpl	.-12     	; 0x1b16 <__clzsi2+0x76>
    1b22:	d7 01       	movw	r26, r14
    1b24:	c6 01       	movw	r24, r12
    1b26:	82 54       	subi	r24, 0x42	; 66
    1b28:	9c 4f       	sbci	r25, 0xFC	; 252
    1b2a:	fc 01       	movw	r30, r24
    1b2c:	80 81       	ld	r24, Z
    1b2e:	48 1b       	sub	r20, r24
    1b30:	51 09       	sbc	r21, r1
    1b32:	61 09       	sbc	r22, r1
    1b34:	71 09       	sbc	r23, r1
    1b36:	ca 01       	movw	r24, r20
    1b38:	1f 91       	pop	r17
    1b3a:	0f 91       	pop	r16
    1b3c:	ff 90       	pop	r15
    1b3e:	ef 90       	pop	r14
    1b40:	df 90       	pop	r13
    1b42:	cf 90       	pop	r12
    1b44:	08 95       	ret

00001b46 <__pack_f>:
    1b46:	cf 92       	push	r12
    1b48:	df 92       	push	r13
    1b4a:	ef 92       	push	r14
    1b4c:	ff 92       	push	r15
    1b4e:	0f 93       	push	r16
    1b50:	1f 93       	push	r17
    1b52:	dc 01       	movw	r26, r24
    1b54:	14 96       	adiw	r26, 0x04	; 4
    1b56:	4d 91       	ld	r20, X+
    1b58:	5d 91       	ld	r21, X+
    1b5a:	6d 91       	ld	r22, X+
    1b5c:	7c 91       	ld	r23, X
    1b5e:	17 97       	sbiw	r26, 0x07	; 7
    1b60:	11 96       	adiw	r26, 0x01	; 1
    1b62:	ec 91       	ld	r30, X
    1b64:	11 97       	sbiw	r26, 0x01	; 1
    1b66:	8c 91       	ld	r24, X
    1b68:	82 30       	cpi	r24, 0x02	; 2
    1b6a:	20 f4       	brcc	.+8      	; 0x1b74 <__pack_f+0x2e>
    1b6c:	60 61       	ori	r22, 0x10	; 16
    1b6e:	8f ef       	ldi	r24, 0xFF	; 255
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	a5 c0       	rjmp	.+330    	; 0x1cbe <__pack_f+0x178>
    1b74:	84 30       	cpi	r24, 0x04	; 4
    1b76:	09 f4       	brne	.+2      	; 0x1b7a <__pack_f+0x34>
    1b78:	9d c0       	rjmp	.+314    	; 0x1cb4 <__pack_f+0x16e>
    1b7a:	82 30       	cpi	r24, 0x02	; 2
    1b7c:	09 f4       	brne	.+2      	; 0x1b80 <__pack_f+0x3a>
    1b7e:	94 c0       	rjmp	.+296    	; 0x1ca8 <__pack_f+0x162>
    1b80:	41 15       	cp	r20, r1
    1b82:	51 05       	cpc	r21, r1
    1b84:	61 05       	cpc	r22, r1
    1b86:	71 05       	cpc	r23, r1
    1b88:	09 f4       	brne	.+2      	; 0x1b8c <__pack_f+0x46>
    1b8a:	91 c0       	rjmp	.+290    	; 0x1cae <__pack_f+0x168>
    1b8c:	12 96       	adiw	r26, 0x02	; 2
    1b8e:	8d 91       	ld	r24, X+
    1b90:	9c 91       	ld	r25, X
    1b92:	13 97       	sbiw	r26, 0x03	; 3
    1b94:	2f ef       	ldi	r18, 0xFF	; 255
    1b96:	82 38       	cpi	r24, 0x82	; 130
    1b98:	92 07       	cpc	r25, r18
    1b9a:	0c f0       	brlt	.+2      	; 0x1b9e <__pack_f+0x58>
    1b9c:	59 c0       	rjmp	.+178    	; 0x1c50 <__pack_f+0x10a>
    1b9e:	22 e8       	ldi	r18, 0x82	; 130
    1ba0:	3f ef       	ldi	r19, 0xFF	; 255
    1ba2:	28 1b       	sub	r18, r24
    1ba4:	39 0b       	sbc	r19, r25
    1ba6:	2a 31       	cpi	r18, 0x1A	; 26
    1ba8:	31 05       	cpc	r19, r1
    1baa:	64 f5       	brge	.+88     	; 0x1c04 <__pack_f+0xbe>
    1bac:	6a 01       	movw	r12, r20
    1bae:	7b 01       	movw	r14, r22
    1bb0:	02 2e       	mov	r0, r18
    1bb2:	04 c0       	rjmp	.+8      	; 0x1bbc <__pack_f+0x76>
    1bb4:	f6 94       	lsr	r15
    1bb6:	e7 94       	ror	r14
    1bb8:	d7 94       	ror	r13
    1bba:	c7 94       	ror	r12
    1bbc:	0a 94       	dec	r0
    1bbe:	d2 f7       	brpl	.-12     	; 0x1bb4 <__pack_f+0x6e>
    1bc0:	81 e0       	ldi	r24, 0x01	; 1
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	a0 e0       	ldi	r26, 0x00	; 0
    1bc6:	b0 e0       	ldi	r27, 0x00	; 0
    1bc8:	04 c0       	rjmp	.+8      	; 0x1bd2 <__pack_f+0x8c>
    1bca:	88 0f       	add	r24, r24
    1bcc:	99 1f       	adc	r25, r25
    1bce:	aa 1f       	adc	r26, r26
    1bd0:	bb 1f       	adc	r27, r27
    1bd2:	2a 95       	dec	r18
    1bd4:	d2 f7       	brpl	.-12     	; 0x1bca <__pack_f+0x84>
    1bd6:	01 97       	sbiw	r24, 0x01	; 1
    1bd8:	a1 09       	sbc	r26, r1
    1bda:	b1 09       	sbc	r27, r1
    1bdc:	84 23       	and	r24, r20
    1bde:	95 23       	and	r25, r21
    1be0:	a6 23       	and	r26, r22
    1be2:	b7 23       	and	r27, r23
    1be4:	41 e0       	ldi	r20, 0x01	; 1
    1be6:	50 e0       	ldi	r21, 0x00	; 0
    1be8:	60 e0       	ldi	r22, 0x00	; 0
    1bea:	70 e0       	ldi	r23, 0x00	; 0
    1bec:	00 97       	sbiw	r24, 0x00	; 0
    1bee:	a1 05       	cpc	r26, r1
    1bf0:	b1 05       	cpc	r27, r1
    1bf2:	19 f4       	brne	.+6      	; 0x1bfa <__pack_f+0xb4>
    1bf4:	40 e0       	ldi	r20, 0x00	; 0
    1bf6:	50 e0       	ldi	r21, 0x00	; 0
    1bf8:	ba 01       	movw	r22, r20
    1bfa:	4c 29       	or	r20, r12
    1bfc:	5d 29       	or	r21, r13
    1bfe:	6e 29       	or	r22, r14
    1c00:	7f 29       	or	r23, r15
    1c02:	03 c0       	rjmp	.+6      	; 0x1c0a <__pack_f+0xc4>
    1c04:	40 e0       	ldi	r20, 0x00	; 0
    1c06:	50 e0       	ldi	r21, 0x00	; 0
    1c08:	ba 01       	movw	r22, r20
    1c0a:	db 01       	movw	r26, r22
    1c0c:	ca 01       	movw	r24, r20
    1c0e:	8f 77       	andi	r24, 0x7F	; 127
    1c10:	90 70       	andi	r25, 0x00	; 0
    1c12:	a0 70       	andi	r26, 0x00	; 0
    1c14:	b0 70       	andi	r27, 0x00	; 0
    1c16:	80 34       	cpi	r24, 0x40	; 64
    1c18:	91 05       	cpc	r25, r1
    1c1a:	a1 05       	cpc	r26, r1
    1c1c:	b1 05       	cpc	r27, r1
    1c1e:	39 f4       	brne	.+14     	; 0x1c2e <__pack_f+0xe8>
    1c20:	47 ff       	sbrs	r20, 7
    1c22:	09 c0       	rjmp	.+18     	; 0x1c36 <__pack_f+0xf0>
    1c24:	40 5c       	subi	r20, 0xC0	; 192
    1c26:	5f 4f       	sbci	r21, 0xFF	; 255
    1c28:	6f 4f       	sbci	r22, 0xFF	; 255
    1c2a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c2c:	04 c0       	rjmp	.+8      	; 0x1c36 <__pack_f+0xf0>
    1c2e:	41 5c       	subi	r20, 0xC1	; 193
    1c30:	5f 4f       	sbci	r21, 0xFF	; 255
    1c32:	6f 4f       	sbci	r22, 0xFF	; 255
    1c34:	7f 4f       	sbci	r23, 0xFF	; 255
    1c36:	81 e0       	ldi	r24, 0x01	; 1
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	40 30       	cpi	r20, 0x00	; 0
    1c3c:	20 e0       	ldi	r18, 0x00	; 0
    1c3e:	52 07       	cpc	r21, r18
    1c40:	20 e0       	ldi	r18, 0x00	; 0
    1c42:	62 07       	cpc	r22, r18
    1c44:	20 e4       	ldi	r18, 0x40	; 64
    1c46:	72 07       	cpc	r23, r18
    1c48:	38 f5       	brcc	.+78     	; 0x1c98 <__pack_f+0x152>
    1c4a:	80 e0       	ldi	r24, 0x00	; 0
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	24 c0       	rjmp	.+72     	; 0x1c98 <__pack_f+0x152>
    1c50:	80 38       	cpi	r24, 0x80	; 128
    1c52:	91 05       	cpc	r25, r1
    1c54:	7c f5       	brge	.+94     	; 0x1cb4 <__pack_f+0x16e>
    1c56:	8a 01       	movw	r16, r20
    1c58:	9b 01       	movw	r18, r22
    1c5a:	0f 77       	andi	r16, 0x7F	; 127
    1c5c:	10 70       	andi	r17, 0x00	; 0
    1c5e:	20 70       	andi	r18, 0x00	; 0
    1c60:	30 70       	andi	r19, 0x00	; 0
    1c62:	00 34       	cpi	r16, 0x40	; 64
    1c64:	11 05       	cpc	r17, r1
    1c66:	21 05       	cpc	r18, r1
    1c68:	31 05       	cpc	r19, r1
    1c6a:	39 f4       	brne	.+14     	; 0x1c7a <__pack_f+0x134>
    1c6c:	47 ff       	sbrs	r20, 7
    1c6e:	09 c0       	rjmp	.+18     	; 0x1c82 <__pack_f+0x13c>
    1c70:	40 5c       	subi	r20, 0xC0	; 192
    1c72:	5f 4f       	sbci	r21, 0xFF	; 255
    1c74:	6f 4f       	sbci	r22, 0xFF	; 255
    1c76:	7f 4f       	sbci	r23, 0xFF	; 255
    1c78:	04 c0       	rjmp	.+8      	; 0x1c82 <__pack_f+0x13c>
    1c7a:	41 5c       	subi	r20, 0xC1	; 193
    1c7c:	5f 4f       	sbci	r21, 0xFF	; 255
    1c7e:	6f 4f       	sbci	r22, 0xFF	; 255
    1c80:	7f 4f       	sbci	r23, 0xFF	; 255
    1c82:	77 fd       	sbrc	r23, 7
    1c84:	03 c0       	rjmp	.+6      	; 0x1c8c <__pack_f+0x146>
    1c86:	81 58       	subi	r24, 0x81	; 129
    1c88:	9f 4f       	sbci	r25, 0xFF	; 255
    1c8a:	06 c0       	rjmp	.+12     	; 0x1c98 <__pack_f+0x152>
    1c8c:	76 95       	lsr	r23
    1c8e:	67 95       	ror	r22
    1c90:	57 95       	ror	r21
    1c92:	47 95       	ror	r20
    1c94:	80 58       	subi	r24, 0x80	; 128
    1c96:	9f 4f       	sbci	r25, 0xFF	; 255
    1c98:	97 e0       	ldi	r25, 0x07	; 7
    1c9a:	76 95       	lsr	r23
    1c9c:	67 95       	ror	r22
    1c9e:	57 95       	ror	r21
    1ca0:	47 95       	ror	r20
    1ca2:	9a 95       	dec	r25
    1ca4:	d1 f7       	brne	.-12     	; 0x1c9a <__pack_f+0x154>
    1ca6:	0b c0       	rjmp	.+22     	; 0x1cbe <__pack_f+0x178>
    1ca8:	80 e0       	ldi	r24, 0x00	; 0
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	05 c0       	rjmp	.+10     	; 0x1cb8 <__pack_f+0x172>
    1cae:	80 e0       	ldi	r24, 0x00	; 0
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	05 c0       	rjmp	.+10     	; 0x1cbe <__pack_f+0x178>
    1cb4:	8f ef       	ldi	r24, 0xFF	; 255
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	40 e0       	ldi	r20, 0x00	; 0
    1cba:	50 e0       	ldi	r21, 0x00	; 0
    1cbc:	ba 01       	movw	r22, r20
    1cbe:	98 2f       	mov	r25, r24
    1cc0:	97 95       	ror	r25
    1cc2:	99 27       	eor	r25, r25
    1cc4:	97 95       	ror	r25
    1cc6:	a6 2f       	mov	r26, r22
    1cc8:	af 77       	andi	r26, 0x7F	; 127
    1cca:	e7 95       	ror	r30
    1ccc:	ee 27       	eor	r30, r30
    1cce:	e7 95       	ror	r30
    1cd0:	86 95       	lsr	r24
    1cd2:	3a 2f       	mov	r19, r26
    1cd4:	39 2b       	or	r19, r25
    1cd6:	28 2f       	mov	r18, r24
    1cd8:	2e 2b       	or	r18, r30
    1cda:	84 2f       	mov	r24, r20
    1cdc:	95 2f       	mov	r25, r21
    1cde:	a3 2f       	mov	r26, r19
    1ce0:	b2 2f       	mov	r27, r18
    1ce2:	bc 01       	movw	r22, r24
    1ce4:	cd 01       	movw	r24, r26
    1ce6:	1f 91       	pop	r17
    1ce8:	0f 91       	pop	r16
    1cea:	ff 90       	pop	r15
    1cec:	ef 90       	pop	r14
    1cee:	df 90       	pop	r13
    1cf0:	cf 90       	pop	r12
    1cf2:	08 95       	ret

00001cf4 <__unpack_f>:
    1cf4:	dc 01       	movw	r26, r24
    1cf6:	fb 01       	movw	r30, r22
    1cf8:	4c 91       	ld	r20, X
    1cfa:	11 96       	adiw	r26, 0x01	; 1
    1cfc:	5c 91       	ld	r21, X
    1cfe:	11 97       	sbiw	r26, 0x01	; 1
    1d00:	12 96       	adiw	r26, 0x02	; 2
    1d02:	8c 91       	ld	r24, X
    1d04:	12 97       	sbiw	r26, 0x02	; 2
    1d06:	68 2f       	mov	r22, r24
    1d08:	6f 77       	andi	r22, 0x7F	; 127
    1d0a:	70 e0       	ldi	r23, 0x00	; 0
    1d0c:	98 2f       	mov	r25, r24
    1d0e:	99 1f       	adc	r25, r25
    1d10:	99 27       	eor	r25, r25
    1d12:	99 1f       	adc	r25, r25
    1d14:	13 96       	adiw	r26, 0x03	; 3
    1d16:	2c 91       	ld	r18, X
    1d18:	13 97       	sbiw	r26, 0x03	; 3
    1d1a:	82 2f       	mov	r24, r18
    1d1c:	88 0f       	add	r24, r24
    1d1e:	89 2b       	or	r24, r25
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	22 1f       	adc	r18, r18
    1d24:	22 27       	eor	r18, r18
    1d26:	22 1f       	adc	r18, r18
    1d28:	21 83       	std	Z+1, r18	; 0x01
    1d2a:	00 97       	sbiw	r24, 0x00	; 0
    1d2c:	39 f5       	brne	.+78     	; 0x1d7c <__unpack_f+0x88>
    1d2e:	41 15       	cp	r20, r1
    1d30:	51 05       	cpc	r21, r1
    1d32:	61 05       	cpc	r22, r1
    1d34:	71 05       	cpc	r23, r1
    1d36:	11 f4       	brne	.+4      	; 0x1d3c <__unpack_f+0x48>
    1d38:	82 e0       	ldi	r24, 0x02	; 2
    1d3a:	29 c0       	rjmp	.+82     	; 0x1d8e <__unpack_f+0x9a>
    1d3c:	82 e8       	ldi	r24, 0x82	; 130
    1d3e:	9f ef       	ldi	r25, 0xFF	; 255
    1d40:	93 83       	std	Z+3, r25	; 0x03
    1d42:	82 83       	std	Z+2, r24	; 0x02
    1d44:	27 e0       	ldi	r18, 0x07	; 7
    1d46:	44 0f       	add	r20, r20
    1d48:	55 1f       	adc	r21, r21
    1d4a:	66 1f       	adc	r22, r22
    1d4c:	77 1f       	adc	r23, r23
    1d4e:	2a 95       	dec	r18
    1d50:	d1 f7       	brne	.-12     	; 0x1d46 <__unpack_f+0x52>
    1d52:	83 e0       	ldi	r24, 0x03	; 3
    1d54:	80 83       	st	Z, r24
    1d56:	09 c0       	rjmp	.+18     	; 0x1d6a <__unpack_f+0x76>
    1d58:	44 0f       	add	r20, r20
    1d5a:	55 1f       	adc	r21, r21
    1d5c:	66 1f       	adc	r22, r22
    1d5e:	77 1f       	adc	r23, r23
    1d60:	82 81       	ldd	r24, Z+2	; 0x02
    1d62:	93 81       	ldd	r25, Z+3	; 0x03
    1d64:	01 97       	sbiw	r24, 0x01	; 1
    1d66:	93 83       	std	Z+3, r25	; 0x03
    1d68:	82 83       	std	Z+2, r24	; 0x02
    1d6a:	40 30       	cpi	r20, 0x00	; 0
    1d6c:	80 e0       	ldi	r24, 0x00	; 0
    1d6e:	58 07       	cpc	r21, r24
    1d70:	80 e0       	ldi	r24, 0x00	; 0
    1d72:	68 07       	cpc	r22, r24
    1d74:	80 e4       	ldi	r24, 0x40	; 64
    1d76:	78 07       	cpc	r23, r24
    1d78:	78 f3       	brcs	.-34     	; 0x1d58 <__unpack_f+0x64>
    1d7a:	20 c0       	rjmp	.+64     	; 0x1dbc <__unpack_f+0xc8>
    1d7c:	8f 3f       	cpi	r24, 0xFF	; 255
    1d7e:	91 05       	cpc	r25, r1
    1d80:	79 f4       	brne	.+30     	; 0x1da0 <__unpack_f+0xac>
    1d82:	41 15       	cp	r20, r1
    1d84:	51 05       	cpc	r21, r1
    1d86:	61 05       	cpc	r22, r1
    1d88:	71 05       	cpc	r23, r1
    1d8a:	19 f4       	brne	.+6      	; 0x1d92 <__unpack_f+0x9e>
    1d8c:	84 e0       	ldi	r24, 0x04	; 4
    1d8e:	80 83       	st	Z, r24
    1d90:	08 95       	ret
    1d92:	64 ff       	sbrs	r22, 4
    1d94:	03 c0       	rjmp	.+6      	; 0x1d9c <__unpack_f+0xa8>
    1d96:	81 e0       	ldi	r24, 0x01	; 1
    1d98:	80 83       	st	Z, r24
    1d9a:	10 c0       	rjmp	.+32     	; 0x1dbc <__unpack_f+0xc8>
    1d9c:	10 82       	st	Z, r1
    1d9e:	0e c0       	rjmp	.+28     	; 0x1dbc <__unpack_f+0xc8>
    1da0:	8f 57       	subi	r24, 0x7F	; 127
    1da2:	90 40       	sbci	r25, 0x00	; 0
    1da4:	93 83       	std	Z+3, r25	; 0x03
    1da6:	82 83       	std	Z+2, r24	; 0x02
    1da8:	83 e0       	ldi	r24, 0x03	; 3
    1daa:	80 83       	st	Z, r24
    1dac:	87 e0       	ldi	r24, 0x07	; 7
    1dae:	44 0f       	add	r20, r20
    1db0:	55 1f       	adc	r21, r21
    1db2:	66 1f       	adc	r22, r22
    1db4:	77 1f       	adc	r23, r23
    1db6:	8a 95       	dec	r24
    1db8:	d1 f7       	brne	.-12     	; 0x1dae <__unpack_f+0xba>
    1dba:	70 64       	ori	r23, 0x40	; 64
    1dbc:	44 83       	std	Z+4, r20	; 0x04
    1dbe:	55 83       	std	Z+5, r21	; 0x05
    1dc0:	66 83       	std	Z+6, r22	; 0x06
    1dc2:	77 83       	std	Z+7, r23	; 0x07
    1dc4:	08 95       	ret

00001dc6 <__fpcmp_parts_f>:
    1dc6:	cf 93       	push	r28
    1dc8:	fc 01       	movw	r30, r24
    1dca:	db 01       	movw	r26, r22
    1dcc:	90 81       	ld	r25, Z
    1dce:	92 30       	cpi	r25, 0x02	; 2
    1dd0:	08 f4       	brcc	.+2      	; 0x1dd4 <__fpcmp_parts_f+0xe>
    1dd2:	4c c0       	rjmp	.+152    	; 0x1e6c <__fpcmp_parts_f+0xa6>
    1dd4:	8c 91       	ld	r24, X
    1dd6:	82 30       	cpi	r24, 0x02	; 2
    1dd8:	08 f4       	brcc	.+2      	; 0x1ddc <__fpcmp_parts_f+0x16>
    1dda:	48 c0       	rjmp	.+144    	; 0x1e6c <__fpcmp_parts_f+0xa6>
    1ddc:	94 30       	cpi	r25, 0x04	; 4
    1dde:	69 f4       	brne	.+26     	; 0x1dfa <__fpcmp_parts_f+0x34>
    1de0:	21 81       	ldd	r18, Z+1	; 0x01
    1de2:	84 30       	cpi	r24, 0x04	; 4
    1de4:	39 f4       	brne	.+14     	; 0x1df4 <__fpcmp_parts_f+0x2e>
    1de6:	11 96       	adiw	r26, 0x01	; 1
    1de8:	8c 91       	ld	r24, X
    1dea:	11 97       	sbiw	r26, 0x01	; 1
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	82 1b       	sub	r24, r18
    1df0:	91 09       	sbc	r25, r1
    1df2:	44 c0       	rjmp	.+136    	; 0x1e7c <__fpcmp_parts_f+0xb6>
    1df4:	22 23       	and	r18, r18
    1df6:	d1 f1       	breq	.+116    	; 0x1e6c <__fpcmp_parts_f+0xa6>
    1df8:	3f c0       	rjmp	.+126    	; 0x1e78 <__fpcmp_parts_f+0xb2>
    1dfa:	84 30       	cpi	r24, 0x04	; 4
    1dfc:	21 f0       	breq	.+8      	; 0x1e06 <__fpcmp_parts_f+0x40>
    1dfe:	92 30       	cpi	r25, 0x02	; 2
    1e00:	41 f4       	brne	.+16     	; 0x1e12 <__fpcmp_parts_f+0x4c>
    1e02:	82 30       	cpi	r24, 0x02	; 2
    1e04:	b1 f1       	breq	.+108    	; 0x1e72 <__fpcmp_parts_f+0xac>
    1e06:	11 96       	adiw	r26, 0x01	; 1
    1e08:	8c 91       	ld	r24, X
    1e0a:	11 97       	sbiw	r26, 0x01	; 1
    1e0c:	88 23       	and	r24, r24
    1e0e:	a1 f1       	breq	.+104    	; 0x1e78 <__fpcmp_parts_f+0xb2>
    1e10:	2d c0       	rjmp	.+90     	; 0x1e6c <__fpcmp_parts_f+0xa6>
    1e12:	c1 81       	ldd	r28, Z+1	; 0x01
    1e14:	82 30       	cpi	r24, 0x02	; 2
    1e16:	01 f1       	breq	.+64     	; 0x1e58 <__fpcmp_parts_f+0x92>
    1e18:	11 96       	adiw	r26, 0x01	; 1
    1e1a:	8c 91       	ld	r24, X
    1e1c:	11 97       	sbiw	r26, 0x01	; 1
    1e1e:	c8 17       	cp	r28, r24
    1e20:	d9 f4       	brne	.+54     	; 0x1e58 <__fpcmp_parts_f+0x92>
    1e22:	82 81       	ldd	r24, Z+2	; 0x02
    1e24:	93 81       	ldd	r25, Z+3	; 0x03
    1e26:	12 96       	adiw	r26, 0x02	; 2
    1e28:	2d 91       	ld	r18, X+
    1e2a:	3c 91       	ld	r19, X
    1e2c:	13 97       	sbiw	r26, 0x03	; 3
    1e2e:	28 17       	cp	r18, r24
    1e30:	39 07       	cpc	r19, r25
    1e32:	94 f0       	brlt	.+36     	; 0x1e58 <__fpcmp_parts_f+0x92>
    1e34:	82 17       	cp	r24, r18
    1e36:	93 07       	cpc	r25, r19
    1e38:	bc f0       	brlt	.+46     	; 0x1e68 <__fpcmp_parts_f+0xa2>
    1e3a:	44 81       	ldd	r20, Z+4	; 0x04
    1e3c:	55 81       	ldd	r21, Z+5	; 0x05
    1e3e:	66 81       	ldd	r22, Z+6	; 0x06
    1e40:	77 81       	ldd	r23, Z+7	; 0x07
    1e42:	14 96       	adiw	r26, 0x04	; 4
    1e44:	8d 91       	ld	r24, X+
    1e46:	9d 91       	ld	r25, X+
    1e48:	0d 90       	ld	r0, X+
    1e4a:	bc 91       	ld	r27, X
    1e4c:	a0 2d       	mov	r26, r0
    1e4e:	84 17       	cp	r24, r20
    1e50:	95 07       	cpc	r25, r21
    1e52:	a6 07       	cpc	r26, r22
    1e54:	b7 07       	cpc	r27, r23
    1e56:	18 f4       	brcc	.+6      	; 0x1e5e <__fpcmp_parts_f+0x98>
    1e58:	cc 23       	and	r28, r28
    1e5a:	41 f0       	breq	.+16     	; 0x1e6c <__fpcmp_parts_f+0xa6>
    1e5c:	0d c0       	rjmp	.+26     	; 0x1e78 <__fpcmp_parts_f+0xb2>
    1e5e:	48 17       	cp	r20, r24
    1e60:	59 07       	cpc	r21, r25
    1e62:	6a 07       	cpc	r22, r26
    1e64:	7b 07       	cpc	r23, r27
    1e66:	28 f4       	brcc	.+10     	; 0x1e72 <__fpcmp_parts_f+0xac>
    1e68:	cc 23       	and	r28, r28
    1e6a:	31 f0       	breq	.+12     	; 0x1e78 <__fpcmp_parts_f+0xb2>
    1e6c:	81 e0       	ldi	r24, 0x01	; 1
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	05 c0       	rjmp	.+10     	; 0x1e7c <__fpcmp_parts_f+0xb6>
    1e72:	80 e0       	ldi	r24, 0x00	; 0
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	02 c0       	rjmp	.+4      	; 0x1e7c <__fpcmp_parts_f+0xb6>
    1e78:	8f ef       	ldi	r24, 0xFF	; 255
    1e7a:	9f ef       	ldi	r25, 0xFF	; 255
    1e7c:	cf 91       	pop	r28
    1e7e:	08 95       	ret

00001e80 <main>:
#include "task.h"
#include "adc_tc1047.h"
#include "spi_tc77.h"

int main()
{
    1e80:	cf 93       	push	r28
    1e82:	df 93       	push	r29
    1e84:	cd b7       	in	r28, 0x3d	; 61
    1e86:	de b7       	in	r29, 0x3e	; 62
    1e88:	2a 97       	sbiw	r28, 0x0a	; 10
    1e8a:	0f b6       	in	r0, 0x3f	; 63
    1e8c:	f8 94       	cli
    1e8e:	de bf       	out	0x3e, r29	; 62
    1e90:	0f be       	out	0x3f, r0	; 63
    1e92:	cd bf       	out	0x3d, r28	; 61
	int tag;	
	struct task task;

	sei();
    1e94:	78 94       	sei
	uart_init();
    1e96:	0e 94 36 07 	call	0xe6c	; 0xe6c <uart_init>
	task_init();
    1e9a:	0e 94 2d 04 	call	0x85a	; 0x85a <task_init>
	timer_init();
    1e9e:	0e 94 97 05 	call	0xb2e	; 0xb2e <timer_init>
	adc_init();
    1ea2:	0e 94 96 00 	call	0x12c	; 0x12c <adc_init>
	spi_init();
    1ea6:	0e 94 20 08 	call	0x1040	; 0x1040 <spi_init>
	printf("$ ");
    1eaa:	0f 92       	push	r0
    1eac:	0f 92       	push	r0
    1eae:	8e e5       	ldi	r24, 0x5E	; 94
    1eb0:	92 e0       	ldi	r25, 0x02	; 2
    1eb2:	ed b7       	in	r30, 0x3d	; 61
    1eb4:	fe b7       	in	r31, 0x3e	; 62
    1eb6:	92 83       	std	Z+2, r25	; 0x02
    1eb8:	81 83       	std	Z+1, r24	; 0x01
    1eba:	0e 94 b8 11 	call	0x2370	; 0x2370 <printf>
    1ebe:	0f 90       	pop	r0
    1ec0:	0f 90       	pop	r0

	while(1) {
		cli();
    1ec2:	f8 94       	cli
		tag = task_delete(&task);
    1ec4:	ce 01       	movw	r24, r28
    1ec6:	01 96       	adiw	r24, 0x01	; 1
    1ec8:	0e 94 76 04 	call	0x8ec	; 0x8ec <task_delete>
		sei();
    1ecc:	78 94       	sei
		if (tag)
    1ece:	00 97       	sbiw	r24, 0x00	; 0
    1ed0:	c1 f3       	breq	.-16     	; 0x1ec2 <main+0x42>
			(*(task.fun))(task.arg);
    1ed2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ed4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ed6:	ce 01       	movw	r24, r28
    1ed8:	03 96       	adiw	r24, 0x03	; 3
    1eda:	19 95       	eicall
    1edc:	f2 cf       	rjmp	.-28     	; 0x1ec2 <main+0x42>

00001ede <__divmodhi4>:
    1ede:	97 fb       	bst	r25, 7
    1ee0:	09 2e       	mov	r0, r25
    1ee2:	07 26       	eor	r0, r23
    1ee4:	0a d0       	rcall	.+20     	; 0x1efa <__divmodhi4_neg1>
    1ee6:	77 fd       	sbrc	r23, 7
    1ee8:	04 d0       	rcall	.+8      	; 0x1ef2 <__divmodhi4_neg2>
    1eea:	0c d0       	rcall	.+24     	; 0x1f04 <__udivmodhi4>
    1eec:	06 d0       	rcall	.+12     	; 0x1efa <__divmodhi4_neg1>
    1eee:	00 20       	and	r0, r0
    1ef0:	1a f4       	brpl	.+6      	; 0x1ef8 <__divmodhi4_exit>

00001ef2 <__divmodhi4_neg2>:
    1ef2:	70 95       	com	r23
    1ef4:	61 95       	neg	r22
    1ef6:	7f 4f       	sbci	r23, 0xFF	; 255

00001ef8 <__divmodhi4_exit>:
    1ef8:	08 95       	ret

00001efa <__divmodhi4_neg1>:
    1efa:	f6 f7       	brtc	.-4      	; 0x1ef8 <__divmodhi4_exit>
    1efc:	90 95       	com	r25
    1efe:	81 95       	neg	r24
    1f00:	9f 4f       	sbci	r25, 0xFF	; 255
    1f02:	08 95       	ret

00001f04 <__udivmodhi4>:
    1f04:	aa 1b       	sub	r26, r26
    1f06:	bb 1b       	sub	r27, r27
    1f08:	51 e1       	ldi	r21, 0x11	; 17
    1f0a:	07 c0       	rjmp	.+14     	; 0x1f1a <__udivmodhi4_ep>

00001f0c <__udivmodhi4_loop>:
    1f0c:	aa 1f       	adc	r26, r26
    1f0e:	bb 1f       	adc	r27, r27
    1f10:	a6 17       	cp	r26, r22
    1f12:	b7 07       	cpc	r27, r23
    1f14:	10 f0       	brcs	.+4      	; 0x1f1a <__udivmodhi4_ep>
    1f16:	a6 1b       	sub	r26, r22
    1f18:	b7 0b       	sbc	r27, r23

00001f1a <__udivmodhi4_ep>:
    1f1a:	88 1f       	adc	r24, r24
    1f1c:	99 1f       	adc	r25, r25
    1f1e:	5a 95       	dec	r21
    1f20:	a9 f7       	brne	.-22     	; 0x1f0c <__udivmodhi4_loop>
    1f22:	80 95       	com	r24
    1f24:	90 95       	com	r25
    1f26:	bc 01       	movw	r22, r24
    1f28:	cd 01       	movw	r24, r26
    1f2a:	08 95       	ret

00001f2c <__prologue_saves__>:
    1f2c:	2f 92       	push	r2
    1f2e:	3f 92       	push	r3
    1f30:	4f 92       	push	r4
    1f32:	5f 92       	push	r5
    1f34:	6f 92       	push	r6
    1f36:	7f 92       	push	r7
    1f38:	8f 92       	push	r8
    1f3a:	9f 92       	push	r9
    1f3c:	af 92       	push	r10
    1f3e:	bf 92       	push	r11
    1f40:	cf 92       	push	r12
    1f42:	df 92       	push	r13
    1f44:	ef 92       	push	r14
    1f46:	ff 92       	push	r15
    1f48:	0f 93       	push	r16
    1f4a:	1f 93       	push	r17
    1f4c:	cf 93       	push	r28
    1f4e:	df 93       	push	r29
    1f50:	cd b7       	in	r28, 0x3d	; 61
    1f52:	de b7       	in	r29, 0x3e	; 62
    1f54:	ca 1b       	sub	r28, r26
    1f56:	db 0b       	sbc	r29, r27
    1f58:	0f b6       	in	r0, 0x3f	; 63
    1f5a:	f8 94       	cli
    1f5c:	de bf       	out	0x3e, r29	; 62
    1f5e:	0f be       	out	0x3f, r0	; 63
    1f60:	cd bf       	out	0x3d, r28	; 61
    1f62:	19 94       	eijmp

00001f64 <__epilogue_restores__>:
    1f64:	2a 88       	ldd	r2, Y+18	; 0x12
    1f66:	39 88       	ldd	r3, Y+17	; 0x11
    1f68:	48 88       	ldd	r4, Y+16	; 0x10
    1f6a:	5f 84       	ldd	r5, Y+15	; 0x0f
    1f6c:	6e 84       	ldd	r6, Y+14	; 0x0e
    1f6e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1f70:	8c 84       	ldd	r8, Y+12	; 0x0c
    1f72:	9b 84       	ldd	r9, Y+11	; 0x0b
    1f74:	aa 84       	ldd	r10, Y+10	; 0x0a
    1f76:	b9 84       	ldd	r11, Y+9	; 0x09
    1f78:	c8 84       	ldd	r12, Y+8	; 0x08
    1f7a:	df 80       	ldd	r13, Y+7	; 0x07
    1f7c:	ee 80       	ldd	r14, Y+6	; 0x06
    1f7e:	fd 80       	ldd	r15, Y+5	; 0x05
    1f80:	0c 81       	ldd	r16, Y+4	; 0x04
    1f82:	1b 81       	ldd	r17, Y+3	; 0x03
    1f84:	aa 81       	ldd	r26, Y+2	; 0x02
    1f86:	b9 81       	ldd	r27, Y+1	; 0x01
    1f88:	ce 0f       	add	r28, r30
    1f8a:	d1 1d       	adc	r29, r1
    1f8c:	0f b6       	in	r0, 0x3f	; 63
    1f8e:	f8 94       	cli
    1f90:	de bf       	out	0x3e, r29	; 62
    1f92:	0f be       	out	0x3f, r0	; 63
    1f94:	cd bf       	out	0x3d, r28	; 61
    1f96:	ed 01       	movw	r28, r26
    1f98:	08 95       	ret

00001f9a <malloc>:
    1f9a:	cf 93       	push	r28
    1f9c:	df 93       	push	r29
    1f9e:	ac 01       	movw	r20, r24
    1fa0:	82 30       	cpi	r24, 0x02	; 2
    1fa2:	91 05       	cpc	r25, r1
    1fa4:	10 f4       	brcc	.+4      	; 0x1faa <malloc+0x10>
    1fa6:	42 e0       	ldi	r20, 0x02	; 2
    1fa8:	50 e0       	ldi	r21, 0x00	; 0
    1faa:	e0 91 01 06 	lds	r30, 0x0601
    1fae:	f0 91 02 06 	lds	r31, 0x0602
    1fb2:	20 e0       	ldi	r18, 0x00	; 0
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	a0 e0       	ldi	r26, 0x00	; 0
    1fb8:	b0 e0       	ldi	r27, 0x00	; 0
    1fba:	24 c0       	rjmp	.+72     	; 0x2004 <malloc+0x6a>
    1fbc:	80 81       	ld	r24, Z
    1fbe:	91 81       	ldd	r25, Z+1	; 0x01
    1fc0:	84 17       	cp	r24, r20
    1fc2:	95 07       	cpc	r25, r21
    1fc4:	d0 f0       	brcs	.+52     	; 0x1ffa <malloc+0x60>
    1fc6:	84 17       	cp	r24, r20
    1fc8:	95 07       	cpc	r25, r21
    1fca:	71 f4       	brne	.+28     	; 0x1fe8 <malloc+0x4e>
    1fcc:	82 81       	ldd	r24, Z+2	; 0x02
    1fce:	93 81       	ldd	r25, Z+3	; 0x03
    1fd0:	10 97       	sbiw	r26, 0x00	; 0
    1fd2:	29 f0       	breq	.+10     	; 0x1fde <malloc+0x44>
    1fd4:	13 96       	adiw	r26, 0x03	; 3
    1fd6:	9c 93       	st	X, r25
    1fd8:	8e 93       	st	-X, r24
    1fda:	12 97       	sbiw	r26, 0x02	; 2
    1fdc:	2c c0       	rjmp	.+88     	; 0x2036 <malloc+0x9c>
    1fde:	90 93 02 06 	sts	0x0602, r25
    1fe2:	80 93 01 06 	sts	0x0601, r24
    1fe6:	27 c0       	rjmp	.+78     	; 0x2036 <malloc+0x9c>
    1fe8:	21 15       	cp	r18, r1
    1fea:	31 05       	cpc	r19, r1
    1fec:	19 f0       	breq	.+6      	; 0x1ff4 <malloc+0x5a>
    1fee:	82 17       	cp	r24, r18
    1ff0:	93 07       	cpc	r25, r19
    1ff2:	18 f4       	brcc	.+6      	; 0x1ffa <malloc+0x60>
    1ff4:	9c 01       	movw	r18, r24
    1ff6:	bd 01       	movw	r22, r26
    1ff8:	ef 01       	movw	r28, r30
    1ffa:	92 81       	ldd	r25, Z+2	; 0x02
    1ffc:	83 81       	ldd	r24, Z+3	; 0x03
    1ffe:	df 01       	movw	r26, r30
    2000:	e9 2f       	mov	r30, r25
    2002:	f8 2f       	mov	r31, r24
    2004:	30 97       	sbiw	r30, 0x00	; 0
    2006:	d1 f6       	brne	.-76     	; 0x1fbc <malloc+0x22>
    2008:	21 15       	cp	r18, r1
    200a:	31 05       	cpc	r19, r1
    200c:	f9 f0       	breq	.+62     	; 0x204c <malloc+0xb2>
    200e:	c9 01       	movw	r24, r18
    2010:	84 1b       	sub	r24, r20
    2012:	95 0b       	sbc	r25, r21
    2014:	84 30       	cpi	r24, 0x04	; 4
    2016:	91 05       	cpc	r25, r1
    2018:	80 f4       	brcc	.+32     	; 0x203a <malloc+0xa0>
    201a:	8a 81       	ldd	r24, Y+2	; 0x02
    201c:	9b 81       	ldd	r25, Y+3	; 0x03
    201e:	61 15       	cp	r22, r1
    2020:	71 05       	cpc	r23, r1
    2022:	21 f0       	breq	.+8      	; 0x202c <malloc+0x92>
    2024:	fb 01       	movw	r30, r22
    2026:	93 83       	std	Z+3, r25	; 0x03
    2028:	82 83       	std	Z+2, r24	; 0x02
    202a:	04 c0       	rjmp	.+8      	; 0x2034 <malloc+0x9a>
    202c:	90 93 02 06 	sts	0x0602, r25
    2030:	80 93 01 06 	sts	0x0601, r24
    2034:	fe 01       	movw	r30, r28
    2036:	32 96       	adiw	r30, 0x02	; 2
    2038:	42 c0       	rjmp	.+132    	; 0x20be <malloc+0x124>
    203a:	fe 01       	movw	r30, r28
    203c:	e8 0f       	add	r30, r24
    203e:	f9 1f       	adc	r31, r25
    2040:	41 93       	st	Z+, r20
    2042:	51 93       	st	Z+, r21
    2044:	02 97       	sbiw	r24, 0x02	; 2
    2046:	99 83       	std	Y+1, r25	; 0x01
    2048:	88 83       	st	Y, r24
    204a:	39 c0       	rjmp	.+114    	; 0x20be <malloc+0x124>
    204c:	80 91 ff 05 	lds	r24, 0x05FF
    2050:	90 91 00 06 	lds	r25, 0x0600
    2054:	00 97       	sbiw	r24, 0x00	; 0
    2056:	41 f4       	brne	.+16     	; 0x2068 <malloc+0xce>
    2058:	80 91 c0 04 	lds	r24, 0x04C0
    205c:	90 91 c1 04 	lds	r25, 0x04C1
    2060:	90 93 00 06 	sts	0x0600, r25
    2064:	80 93 ff 05 	sts	0x05FF, r24
    2068:	20 91 be 04 	lds	r18, 0x04BE
    206c:	30 91 bf 04 	lds	r19, 0x04BF
    2070:	21 15       	cp	r18, r1
    2072:	31 05       	cpc	r19, r1
    2074:	41 f4       	brne	.+16     	; 0x2086 <malloc+0xec>
    2076:	2d b7       	in	r18, 0x3d	; 61
    2078:	3e b7       	in	r19, 0x3e	; 62
    207a:	80 91 c2 04 	lds	r24, 0x04C2
    207e:	90 91 c3 04 	lds	r25, 0x04C3
    2082:	28 1b       	sub	r18, r24
    2084:	39 0b       	sbc	r19, r25
    2086:	e0 91 ff 05 	lds	r30, 0x05FF
    208a:	f0 91 00 06 	lds	r31, 0x0600
    208e:	e2 17       	cp	r30, r18
    2090:	f3 07       	cpc	r31, r19
    2092:	98 f4       	brcc	.+38     	; 0x20ba <malloc+0x120>
    2094:	2e 1b       	sub	r18, r30
    2096:	3f 0b       	sbc	r19, r31
    2098:	24 17       	cp	r18, r20
    209a:	35 07       	cpc	r19, r21
    209c:	70 f0       	brcs	.+28     	; 0x20ba <malloc+0x120>
    209e:	ca 01       	movw	r24, r20
    20a0:	02 96       	adiw	r24, 0x02	; 2
    20a2:	28 17       	cp	r18, r24
    20a4:	39 07       	cpc	r19, r25
    20a6:	48 f0       	brcs	.+18     	; 0x20ba <malloc+0x120>
    20a8:	8e 0f       	add	r24, r30
    20aa:	9f 1f       	adc	r25, r31
    20ac:	90 93 00 06 	sts	0x0600, r25
    20b0:	80 93 ff 05 	sts	0x05FF, r24
    20b4:	41 93       	st	Z+, r20
    20b6:	51 93       	st	Z+, r21
    20b8:	02 c0       	rjmp	.+4      	; 0x20be <malloc+0x124>
    20ba:	e0 e0       	ldi	r30, 0x00	; 0
    20bc:	f0 e0       	ldi	r31, 0x00	; 0
    20be:	cf 01       	movw	r24, r30
    20c0:	df 91       	pop	r29
    20c2:	cf 91       	pop	r28
    20c4:	08 95       	ret

000020c6 <free>:
    20c6:	0f 93       	push	r16
    20c8:	1f 93       	push	r17
    20ca:	cf 93       	push	r28
    20cc:	df 93       	push	r29
    20ce:	9c 01       	movw	r18, r24
    20d0:	00 97       	sbiw	r24, 0x00	; 0
    20d2:	09 f4       	brne	.+2      	; 0x20d6 <free+0x10>
    20d4:	8c c0       	rjmp	.+280    	; 0x21ee <free+0x128>
    20d6:	dc 01       	movw	r26, r24
    20d8:	12 97       	sbiw	r26, 0x02	; 2
    20da:	13 96       	adiw	r26, 0x03	; 3
    20dc:	1c 92       	st	X, r1
    20de:	1e 92       	st	-X, r1
    20e0:	12 97       	sbiw	r26, 0x02	; 2
    20e2:	60 91 01 06 	lds	r22, 0x0601
    20e6:	70 91 02 06 	lds	r23, 0x0602
    20ea:	61 15       	cp	r22, r1
    20ec:	71 05       	cpc	r23, r1
    20ee:	89 f4       	brne	.+34     	; 0x2112 <free+0x4c>
    20f0:	8d 91       	ld	r24, X+
    20f2:	9c 91       	ld	r25, X
    20f4:	11 97       	sbiw	r26, 0x01	; 1
    20f6:	82 0f       	add	r24, r18
    20f8:	93 1f       	adc	r25, r19
    20fa:	20 91 ff 05 	lds	r18, 0x05FF
    20fe:	30 91 00 06 	lds	r19, 0x0600
    2102:	28 17       	cp	r18, r24
    2104:	39 07       	cpc	r19, r25
    2106:	69 f5       	brne	.+90     	; 0x2162 <free+0x9c>
    2108:	b0 93 00 06 	sts	0x0600, r27
    210c:	a0 93 ff 05 	sts	0x05FF, r26
    2110:	6e c0       	rjmp	.+220    	; 0x21ee <free+0x128>
    2112:	fb 01       	movw	r30, r22
    2114:	40 e0       	ldi	r20, 0x00	; 0
    2116:	50 e0       	ldi	r21, 0x00	; 0
    2118:	01 c0       	rjmp	.+2      	; 0x211c <free+0x56>
    211a:	fc 01       	movw	r30, r24
    211c:	ea 17       	cp	r30, r26
    211e:	fb 07       	cpc	r31, r27
    2120:	30 f4       	brcc	.+12     	; 0x212e <free+0x68>
    2122:	82 81       	ldd	r24, Z+2	; 0x02
    2124:	93 81       	ldd	r25, Z+3	; 0x03
    2126:	af 01       	movw	r20, r30
    2128:	00 97       	sbiw	r24, 0x00	; 0
    212a:	b9 f7       	brne	.-18     	; 0x211a <free+0x54>
    212c:	1f c0       	rjmp	.+62     	; 0x216c <free+0xa6>
    212e:	e9 01       	movw	r28, r18
    2130:	22 97       	sbiw	r28, 0x02	; 2
    2132:	fb 83       	std	Y+3, r31	; 0x03
    2134:	ea 83       	std	Y+2, r30	; 0x02
    2136:	08 81       	ld	r16, Y
    2138:	19 81       	ldd	r17, Y+1	; 0x01
    213a:	c9 01       	movw	r24, r18
    213c:	80 0f       	add	r24, r16
    213e:	91 1f       	adc	r25, r17
    2140:	8e 17       	cp	r24, r30
    2142:	9f 07       	cpc	r25, r31
    2144:	59 f4       	brne	.+22     	; 0x215c <free+0x96>
    2146:	80 81       	ld	r24, Z
    2148:	91 81       	ldd	r25, Z+1	; 0x01
    214a:	80 0f       	add	r24, r16
    214c:	91 1f       	adc	r25, r17
    214e:	02 96       	adiw	r24, 0x02	; 2
    2150:	99 83       	std	Y+1, r25	; 0x01
    2152:	88 83       	st	Y, r24
    2154:	82 81       	ldd	r24, Z+2	; 0x02
    2156:	93 81       	ldd	r25, Z+3	; 0x03
    2158:	9b 83       	std	Y+3, r25	; 0x03
    215a:	8a 83       	std	Y+2, r24	; 0x02
    215c:	41 15       	cp	r20, r1
    215e:	51 05       	cpc	r21, r1
    2160:	29 f4       	brne	.+10     	; 0x216c <free+0xa6>
    2162:	b0 93 02 06 	sts	0x0602, r27
    2166:	a0 93 01 06 	sts	0x0601, r26
    216a:	41 c0       	rjmp	.+130    	; 0x21ee <free+0x128>
    216c:	fa 01       	movw	r30, r20
    216e:	b3 83       	std	Z+3, r27	; 0x03
    2170:	a2 83       	std	Z+2, r26	; 0x02
    2172:	c1 91       	ld	r28, Z+
    2174:	d1 91       	ld	r29, Z+
    2176:	ec 0f       	add	r30, r28
    2178:	fd 1f       	adc	r31, r29
    217a:	ae 17       	cp	r26, r30
    217c:	bf 07       	cpc	r27, r31
    217e:	81 f4       	brne	.+32     	; 0x21a0 <free+0xda>
    2180:	f9 01       	movw	r30, r18
    2182:	92 91       	ld	r25, -Z
    2184:	82 91       	ld	r24, -Z
    2186:	8c 0f       	add	r24, r28
    2188:	9d 1f       	adc	r25, r29
    218a:	02 96       	adiw	r24, 0x02	; 2
    218c:	da 01       	movw	r26, r20
    218e:	11 96       	adiw	r26, 0x01	; 1
    2190:	9c 93       	st	X, r25
    2192:	8e 93       	st	-X, r24
    2194:	82 81       	ldd	r24, Z+2	; 0x02
    2196:	93 81       	ldd	r25, Z+3	; 0x03
    2198:	13 96       	adiw	r26, 0x03	; 3
    219a:	9c 93       	st	X, r25
    219c:	8e 93       	st	-X, r24
    219e:	12 97       	sbiw	r26, 0x02	; 2
    21a0:	e0 e0       	ldi	r30, 0x00	; 0
    21a2:	f0 e0       	ldi	r31, 0x00	; 0
    21a4:	02 c0       	rjmp	.+4      	; 0x21aa <free+0xe4>
    21a6:	fb 01       	movw	r30, r22
    21a8:	bc 01       	movw	r22, r24
    21aa:	db 01       	movw	r26, r22
    21ac:	12 96       	adiw	r26, 0x02	; 2
    21ae:	8d 91       	ld	r24, X+
    21b0:	9c 91       	ld	r25, X
    21b2:	13 97       	sbiw	r26, 0x03	; 3
    21b4:	00 97       	sbiw	r24, 0x00	; 0
    21b6:	b9 f7       	brne	.-18     	; 0x21a6 <free+0xe0>
    21b8:	cb 01       	movw	r24, r22
    21ba:	02 96       	adiw	r24, 0x02	; 2
    21bc:	2d 91       	ld	r18, X+
    21be:	3c 91       	ld	r19, X
    21c0:	11 97       	sbiw	r26, 0x01	; 1
    21c2:	82 0f       	add	r24, r18
    21c4:	93 1f       	adc	r25, r19
    21c6:	20 91 ff 05 	lds	r18, 0x05FF
    21ca:	30 91 00 06 	lds	r19, 0x0600
    21ce:	28 17       	cp	r18, r24
    21d0:	39 07       	cpc	r19, r25
    21d2:	69 f4       	brne	.+26     	; 0x21ee <free+0x128>
    21d4:	30 97       	sbiw	r30, 0x00	; 0
    21d6:	29 f4       	brne	.+10     	; 0x21e2 <free+0x11c>
    21d8:	10 92 02 06 	sts	0x0602, r1
    21dc:	10 92 01 06 	sts	0x0601, r1
    21e0:	02 c0       	rjmp	.+4      	; 0x21e6 <free+0x120>
    21e2:	13 82       	std	Z+3, r1	; 0x03
    21e4:	12 82       	std	Z+2, r1	; 0x02
    21e6:	70 93 00 06 	sts	0x0600, r23
    21ea:	60 93 ff 05 	sts	0x05FF, r22
    21ee:	df 91       	pop	r29
    21f0:	cf 91       	pop	r28
    21f2:	1f 91       	pop	r17
    21f4:	0f 91       	pop	r16
    21f6:	08 95       	ret

000021f8 <atoi>:
    21f8:	fc 01       	movw	r30, r24
    21fa:	88 27       	eor	r24, r24
    21fc:	99 27       	eor	r25, r25
    21fe:	e8 94       	clt
    2200:	21 91       	ld	r18, Z+
    2202:	20 32       	cpi	r18, 0x20	; 32
    2204:	e9 f3       	breq	.-6      	; 0x2200 <__stack+0x1>
    2206:	29 30       	cpi	r18, 0x09	; 9
    2208:	10 f0       	brcs	.+4      	; 0x220e <__stack+0xf>
    220a:	2e 30       	cpi	r18, 0x0E	; 14
    220c:	c8 f3       	brcs	.-14     	; 0x2200 <__stack+0x1>
    220e:	2b 32       	cpi	r18, 0x2B	; 43
    2210:	41 f0       	breq	.+16     	; 0x2222 <__stack+0x23>
    2212:	2d 32       	cpi	r18, 0x2D	; 45
    2214:	39 f4       	brne	.+14     	; 0x2224 <__stack+0x25>
    2216:	68 94       	set
    2218:	04 c0       	rjmp	.+8      	; 0x2222 <__stack+0x23>
    221a:	0e 94 56 11 	call	0x22ac	; 0x22ac <__mulhi_const_10>
    221e:	82 0f       	add	r24, r18
    2220:	91 1d       	adc	r25, r1
    2222:	21 91       	ld	r18, Z+
    2224:	20 53       	subi	r18, 0x30	; 48
    2226:	2a 30       	cpi	r18, 0x0A	; 10
    2228:	c0 f3       	brcs	.-16     	; 0x221a <__stack+0x1b>
    222a:	1e f4       	brtc	.+6      	; 0x2232 <__stack+0x33>
    222c:	90 95       	com	r25
    222e:	81 95       	neg	r24
    2230:	9f 4f       	sbci	r25, 0xFF	; 255
    2232:	08 95       	ret

00002234 <strtok>:
    2234:	40 ed       	ldi	r20, 0xD0	; 208
    2236:	54 e0       	ldi	r21, 0x04	; 4
    2238:	0e 94 2f 11 	call	0x225e	; 0x225e <strtok_r>
    223c:	08 95       	ret

0000223e <strcmp>:
    223e:	fb 01       	movw	r30, r22
    2240:	dc 01       	movw	r26, r24
    2242:	8d 91       	ld	r24, X+
    2244:	01 90       	ld	r0, Z+
    2246:	80 19       	sub	r24, r0
    2248:	01 10       	cpse	r0, r1
    224a:	d9 f3       	breq	.-10     	; 0x2242 <strcmp+0x4>
    224c:	99 0b       	sbc	r25, r25
    224e:	08 95       	ret

00002250 <strcpy>:
    2250:	fb 01       	movw	r30, r22
    2252:	dc 01       	movw	r26, r24
    2254:	01 90       	ld	r0, Z+
    2256:	0d 92       	st	X+, r0
    2258:	00 20       	and	r0, r0
    225a:	e1 f7       	brne	.-8      	; 0x2254 <strcpy+0x4>
    225c:	08 95       	ret

0000225e <strtok_r>:
    225e:	fa 01       	movw	r30, r20
    2260:	a1 91       	ld	r26, Z+
    2262:	b0 81       	ld	r27, Z
    2264:	00 97       	sbiw	r24, 0x00	; 0
    2266:	19 f4       	brne	.+6      	; 0x226e <strtok_r+0x10>
    2268:	10 97       	sbiw	r26, 0x00	; 0
    226a:	e1 f0       	breq	.+56     	; 0x22a4 <strtok_r+0x46>
    226c:	cd 01       	movw	r24, r26
    226e:	dc 01       	movw	r26, r24
    2270:	cd 01       	movw	r24, r26
    2272:	0d 90       	ld	r0, X+
    2274:	00 20       	and	r0, r0
    2276:	11 f4       	brne	.+4      	; 0x227c <strtok_r+0x1e>
    2278:	c0 01       	movw	r24, r0
    227a:	13 c0       	rjmp	.+38     	; 0x22a2 <strtok_r+0x44>
    227c:	fb 01       	movw	r30, r22
    227e:	21 91       	ld	r18, Z+
    2280:	22 23       	and	r18, r18
    2282:	19 f0       	breq	.+6      	; 0x228a <strtok_r+0x2c>
    2284:	20 15       	cp	r18, r0
    2286:	d9 f7       	brne	.-10     	; 0x227e <strtok_r+0x20>
    2288:	f3 cf       	rjmp	.-26     	; 0x2270 <strtok_r+0x12>
    228a:	fb 01       	movw	r30, r22
    228c:	21 91       	ld	r18, Z+
    228e:	20 15       	cp	r18, r0
    2290:	19 f4       	brne	.+6      	; 0x2298 <strtok_r+0x3a>
    2292:	1e 92       	st	-X, r1
    2294:	11 96       	adiw	r26, 0x01	; 1
    2296:	06 c0       	rjmp	.+12     	; 0x22a4 <strtok_r+0x46>
    2298:	22 23       	and	r18, r18
    229a:	c1 f7       	brne	.-16     	; 0x228c <strtok_r+0x2e>
    229c:	0d 90       	ld	r0, X+
    229e:	00 20       	and	r0, r0
    22a0:	a1 f7       	brne	.-24     	; 0x228a <strtok_r+0x2c>
    22a2:	d0 01       	movw	r26, r0
    22a4:	fa 01       	movw	r30, r20
    22a6:	a1 93       	st	Z+, r26
    22a8:	b0 83       	st	Z, r27
    22aa:	08 95       	ret

000022ac <__mulhi_const_10>:
    22ac:	7a e0       	ldi	r23, 0x0A	; 10
    22ae:	97 9f       	mul	r25, r23
    22b0:	90 2d       	mov	r25, r0
    22b2:	87 9f       	mul	r24, r23
    22b4:	80 2d       	mov	r24, r0
    22b6:	91 0d       	add	r25, r1
    22b8:	11 24       	eor	r1, r1
    22ba:	08 95       	ret

000022bc <fgets>:
    22bc:	cf 92       	push	r12
    22be:	df 92       	push	r13
    22c0:	ef 92       	push	r14
    22c2:	ff 92       	push	r15
    22c4:	0f 93       	push	r16
    22c6:	1f 93       	push	r17
    22c8:	cf 93       	push	r28
    22ca:	df 93       	push	r29
    22cc:	8c 01       	movw	r16, r24
    22ce:	6a 01       	movw	r12, r20
    22d0:	fa 01       	movw	r30, r20
    22d2:	83 81       	ldd	r24, Z+3	; 0x03
    22d4:	80 ff       	sbrs	r24, 0
    22d6:	1a c0       	rjmp	.+52     	; 0x230c <fgets+0x50>
    22d8:	16 16       	cp	r1, r22
    22da:	17 06       	cpc	r1, r23
    22dc:	bc f4       	brge	.+46     	; 0x230c <fgets+0x50>
    22de:	7b 01       	movw	r14, r22
    22e0:	e8 01       	movw	r28, r16
    22e2:	0e c0       	rjmp	.+28     	; 0x2300 <fgets+0x44>
    22e4:	c6 01       	movw	r24, r12
    22e6:	0e 94 4b 14 	call	0x2896	; 0x2896 <fgetc>
    22ea:	ff ef       	ldi	r31, 0xFF	; 255
    22ec:	8f 3f       	cpi	r24, 0xFF	; 255
    22ee:	9f 07       	cpc	r25, r31
    22f0:	69 f0       	breq	.+26     	; 0x230c <fgets+0x50>
    22f2:	89 93       	st	Y+, r24
    22f4:	08 94       	sec
    22f6:	e1 08       	sbc	r14, r1
    22f8:	f1 08       	sbc	r15, r1
    22fa:	8a 30       	cpi	r24, 0x0A	; 10
    22fc:	91 05       	cpc	r25, r1
    22fe:	21 f0       	breq	.+8      	; 0x2308 <fgets+0x4c>
    2300:	21 e0       	ldi	r18, 0x01	; 1
    2302:	e2 16       	cp	r14, r18
    2304:	f1 04       	cpc	r15, r1
    2306:	71 f7       	brne	.-36     	; 0x22e4 <fgets+0x28>
    2308:	18 82       	st	Y, r1
    230a:	02 c0       	rjmp	.+4      	; 0x2310 <fgets+0x54>
    230c:	00 e0       	ldi	r16, 0x00	; 0
    230e:	10 e0       	ldi	r17, 0x00	; 0
    2310:	c8 01       	movw	r24, r16
    2312:	df 91       	pop	r29
    2314:	cf 91       	pop	r28
    2316:	1f 91       	pop	r17
    2318:	0f 91       	pop	r16
    231a:	ff 90       	pop	r15
    231c:	ef 90       	pop	r14
    231e:	df 90       	pop	r13
    2320:	cf 90       	pop	r12
    2322:	08 95       	ret

00002324 <gets>:
    2324:	0f 93       	push	r16
    2326:	1f 93       	push	r17
    2328:	cf 93       	push	r28
    232a:	df 93       	push	r29
    232c:	8c 01       	movw	r16, r24
    232e:	e0 91 03 06 	lds	r30, 0x0603
    2332:	f0 91 04 06 	lds	r31, 0x0604
    2336:	83 81       	ldd	r24, Z+3	; 0x03
    2338:	80 ff       	sbrs	r24, 0
    233a:	12 c0       	rjmp	.+36     	; 0x2360 <gets+0x3c>
    233c:	e8 01       	movw	r28, r16
    233e:	80 91 03 06 	lds	r24, 0x0603
    2342:	90 91 04 06 	lds	r25, 0x0604
    2346:	0e 94 4b 14 	call	0x2896	; 0x2896 <fgetc>
    234a:	2f ef       	ldi	r18, 0xFF	; 255
    234c:	8f 3f       	cpi	r24, 0xFF	; 255
    234e:	92 07       	cpc	r25, r18
    2350:	39 f0       	breq	.+14     	; 0x2360 <gets+0x3c>
    2352:	89 93       	st	Y+, r24
    2354:	8a 30       	cpi	r24, 0x0A	; 10
    2356:	91 05       	cpc	r25, r1
    2358:	91 f7       	brne	.-28     	; 0x233e <gets+0x1a>
    235a:	21 97       	sbiw	r28, 0x01	; 1
    235c:	18 82       	st	Y, r1
    235e:	02 c0       	rjmp	.+4      	; 0x2364 <gets+0x40>
    2360:	00 e0       	ldi	r16, 0x00	; 0
    2362:	10 e0       	ldi	r17, 0x00	; 0
    2364:	c8 01       	movw	r24, r16
    2366:	df 91       	pop	r29
    2368:	cf 91       	pop	r28
    236a:	1f 91       	pop	r17
    236c:	0f 91       	pop	r16
    236e:	08 95       	ret

00002370 <printf>:
    2370:	cf 93       	push	r28
    2372:	df 93       	push	r29
    2374:	cd b7       	in	r28, 0x3d	; 61
    2376:	de b7       	in	r29, 0x3e	; 62
    2378:	fe 01       	movw	r30, r28
    237a:	36 96       	adiw	r30, 0x06	; 6
    237c:	61 91       	ld	r22, Z+
    237e:	71 91       	ld	r23, Z+
    2380:	80 91 05 06 	lds	r24, 0x0605
    2384:	90 91 06 06 	lds	r25, 0x0606
    2388:	af 01       	movw	r20, r30
    238a:	0e 94 2e 12 	call	0x245c	; 0x245c <vfprintf>
    238e:	df 91       	pop	r29
    2390:	cf 91       	pop	r28
    2392:	08 95       	ret

00002394 <putchar>:
    2394:	60 91 05 06 	lds	r22, 0x0605
    2398:	70 91 06 06 	lds	r23, 0x0606
    239c:	0e 94 8b 14 	call	0x2916	; 0x2916 <fputc>
    23a0:	08 95       	ret

000023a2 <puts>:
    23a2:	0f 93       	push	r16
    23a4:	1f 93       	push	r17
    23a6:	cf 93       	push	r28
    23a8:	df 93       	push	r29
    23aa:	8c 01       	movw	r16, r24
    23ac:	e0 91 05 06 	lds	r30, 0x0605
    23b0:	f0 91 06 06 	lds	r31, 0x0606
    23b4:	83 81       	ldd	r24, Z+3	; 0x03
    23b6:	81 ff       	sbrs	r24, 1
    23b8:	1a c0       	rjmp	.+52     	; 0x23ee <puts+0x4c>
    23ba:	c0 e0       	ldi	r28, 0x00	; 0
    23bc:	d0 e0       	ldi	r29, 0x00	; 0
    23be:	05 c0       	rjmp	.+10     	; 0x23ca <puts+0x28>
    23c0:	19 95       	eicall
    23c2:	00 97       	sbiw	r24, 0x00	; 0
    23c4:	11 f0       	breq	.+4      	; 0x23ca <puts+0x28>
    23c6:	cf ef       	ldi	r28, 0xFF	; 255
    23c8:	df ef       	ldi	r29, 0xFF	; 255
    23ca:	f8 01       	movw	r30, r16
    23cc:	81 91       	ld	r24, Z+
    23ce:	8f 01       	movw	r16, r30
    23d0:	60 91 05 06 	lds	r22, 0x0605
    23d4:	70 91 06 06 	lds	r23, 0x0606
    23d8:	db 01       	movw	r26, r22
    23da:	18 96       	adiw	r26, 0x08	; 8
    23dc:	ed 91       	ld	r30, X+
    23de:	fc 91       	ld	r31, X
    23e0:	19 97       	sbiw	r26, 0x09	; 9
    23e2:	88 23       	and	r24, r24
    23e4:	69 f7       	brne	.-38     	; 0x23c0 <puts+0x1e>
    23e6:	8a e0       	ldi	r24, 0x0A	; 10
    23e8:	19 95       	eicall
    23ea:	00 97       	sbiw	r24, 0x00	; 0
    23ec:	11 f0       	breq	.+4      	; 0x23f2 <puts+0x50>
    23ee:	cf ef       	ldi	r28, 0xFF	; 255
    23f0:	df ef       	ldi	r29, 0xFF	; 255
    23f2:	ce 01       	movw	r24, r28
    23f4:	df 91       	pop	r29
    23f6:	cf 91       	pop	r28
    23f8:	1f 91       	pop	r17
    23fa:	0f 91       	pop	r16
    23fc:	08 95       	ret

000023fe <sprintf>:
    23fe:	0f 93       	push	r16
    2400:	1f 93       	push	r17
    2402:	cf 93       	push	r28
    2404:	df 93       	push	r29
    2406:	cd b7       	in	r28, 0x3d	; 61
    2408:	de b7       	in	r29, 0x3e	; 62
    240a:	2e 97       	sbiw	r28, 0x0e	; 14
    240c:	0f b6       	in	r0, 0x3f	; 63
    240e:	f8 94       	cli
    2410:	de bf       	out	0x3e, r29	; 62
    2412:	0f be       	out	0x3f, r0	; 63
    2414:	cd bf       	out	0x3d, r28	; 61
    2416:	0e 89       	ldd	r16, Y+22	; 0x16
    2418:	1f 89       	ldd	r17, Y+23	; 0x17
    241a:	86 e0       	ldi	r24, 0x06	; 6
    241c:	8c 83       	std	Y+4, r24	; 0x04
    241e:	1a 83       	std	Y+2, r17	; 0x02
    2420:	09 83       	std	Y+1, r16	; 0x01
    2422:	8f ef       	ldi	r24, 0xFF	; 255
    2424:	9f e7       	ldi	r25, 0x7F	; 127
    2426:	9e 83       	std	Y+6, r25	; 0x06
    2428:	8d 83       	std	Y+5, r24	; 0x05
    242a:	ae 01       	movw	r20, r28
    242c:	46 5e       	subi	r20, 0xE6	; 230
    242e:	5f 4f       	sbci	r21, 0xFF	; 255
    2430:	ce 01       	movw	r24, r28
    2432:	01 96       	adiw	r24, 0x01	; 1
    2434:	68 8d       	ldd	r22, Y+24	; 0x18
    2436:	79 8d       	ldd	r23, Y+25	; 0x19
    2438:	0e 94 2e 12 	call	0x245c	; 0x245c <vfprintf>
    243c:	ef 81       	ldd	r30, Y+7	; 0x07
    243e:	f8 85       	ldd	r31, Y+8	; 0x08
    2440:	e0 0f       	add	r30, r16
    2442:	f1 1f       	adc	r31, r17
    2444:	10 82       	st	Z, r1
    2446:	2e 96       	adiw	r28, 0x0e	; 14
    2448:	0f b6       	in	r0, 0x3f	; 63
    244a:	f8 94       	cli
    244c:	de bf       	out	0x3e, r29	; 62
    244e:	0f be       	out	0x3f, r0	; 63
    2450:	cd bf       	out	0x3d, r28	; 61
    2452:	df 91       	pop	r29
    2454:	cf 91       	pop	r28
    2456:	1f 91       	pop	r17
    2458:	0f 91       	pop	r16
    245a:	08 95       	ret

0000245c <vfprintf>:
    245c:	2f 92       	push	r2
    245e:	3f 92       	push	r3
    2460:	4f 92       	push	r4
    2462:	5f 92       	push	r5
    2464:	6f 92       	push	r6
    2466:	7f 92       	push	r7
    2468:	8f 92       	push	r8
    246a:	9f 92       	push	r9
    246c:	af 92       	push	r10
    246e:	bf 92       	push	r11
    2470:	cf 92       	push	r12
    2472:	df 92       	push	r13
    2474:	ef 92       	push	r14
    2476:	ff 92       	push	r15
    2478:	0f 93       	push	r16
    247a:	1f 93       	push	r17
    247c:	cf 93       	push	r28
    247e:	df 93       	push	r29
    2480:	cd b7       	in	r28, 0x3d	; 61
    2482:	de b7       	in	r29, 0x3e	; 62
    2484:	2d 97       	sbiw	r28, 0x0d	; 13
    2486:	0f b6       	in	r0, 0x3f	; 63
    2488:	f8 94       	cli
    248a:	de bf       	out	0x3e, r29	; 62
    248c:	0f be       	out	0x3f, r0	; 63
    248e:	cd bf       	out	0x3d, r28	; 61
    2490:	3c 01       	movw	r6, r24
    2492:	7d 87       	std	Y+13, r23	; 0x0d
    2494:	6c 87       	std	Y+12, r22	; 0x0c
    2496:	5a 01       	movw	r10, r20
    2498:	fc 01       	movw	r30, r24
    249a:	17 82       	std	Z+7, r1	; 0x07
    249c:	16 82       	std	Z+6, r1	; 0x06
    249e:	83 81       	ldd	r24, Z+3	; 0x03
    24a0:	81 ff       	sbrs	r24, 1
    24a2:	c8 c1       	rjmp	.+912    	; 0x2834 <vfprintf+0x3d8>
    24a4:	2e 01       	movw	r4, r28
    24a6:	08 94       	sec
    24a8:	41 1c       	adc	r4, r1
    24aa:	51 1c       	adc	r5, r1
    24ac:	f3 01       	movw	r30, r6
    24ae:	93 81       	ldd	r25, Z+3	; 0x03
    24b0:	ec 85       	ldd	r30, Y+12	; 0x0c
    24b2:	fd 85       	ldd	r31, Y+13	; 0x0d
    24b4:	93 fd       	sbrc	r25, 3
    24b6:	85 91       	lpm	r24, Z+
    24b8:	93 ff       	sbrs	r25, 3
    24ba:	81 91       	ld	r24, Z+
    24bc:	fd 87       	std	Y+13, r31	; 0x0d
    24be:	ec 87       	std	Y+12, r30	; 0x0c
    24c0:	88 23       	and	r24, r24
    24c2:	09 f4       	brne	.+2      	; 0x24c6 <vfprintf+0x6a>
    24c4:	b3 c1       	rjmp	.+870    	; 0x282c <vfprintf+0x3d0>
    24c6:	85 32       	cpi	r24, 0x25	; 37
    24c8:	41 f4       	brne	.+16     	; 0x24da <vfprintf+0x7e>
    24ca:	93 fd       	sbrc	r25, 3
    24cc:	85 91       	lpm	r24, Z+
    24ce:	93 ff       	sbrs	r25, 3
    24d0:	81 91       	ld	r24, Z+
    24d2:	fd 87       	std	Y+13, r31	; 0x0d
    24d4:	ec 87       	std	Y+12, r30	; 0x0c
    24d6:	85 32       	cpi	r24, 0x25	; 37
    24d8:	29 f4       	brne	.+10     	; 0x24e4 <vfprintf+0x88>
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	b3 01       	movw	r22, r6
    24de:	0e 94 8b 14 	call	0x2916	; 0x2916 <fputc>
    24e2:	e4 cf       	rjmp	.-56     	; 0x24ac <vfprintf+0x50>
    24e4:	ff 24       	eor	r15, r15
    24e6:	ee 24       	eor	r14, r14
    24e8:	10 e0       	ldi	r17, 0x00	; 0
    24ea:	10 32       	cpi	r17, 0x20	; 32
    24ec:	b0 f4       	brcc	.+44     	; 0x251a <vfprintf+0xbe>
    24ee:	8b 32       	cpi	r24, 0x2B	; 43
    24f0:	69 f0       	breq	.+26     	; 0x250c <vfprintf+0xb0>
    24f2:	8c 32       	cpi	r24, 0x2C	; 44
    24f4:	28 f4       	brcc	.+10     	; 0x2500 <vfprintf+0xa4>
    24f6:	80 32       	cpi	r24, 0x20	; 32
    24f8:	51 f0       	breq	.+20     	; 0x250e <vfprintf+0xb2>
    24fa:	83 32       	cpi	r24, 0x23	; 35
    24fc:	71 f4       	brne	.+28     	; 0x251a <vfprintf+0xbe>
    24fe:	0b c0       	rjmp	.+22     	; 0x2516 <vfprintf+0xba>
    2500:	8d 32       	cpi	r24, 0x2D	; 45
    2502:	39 f0       	breq	.+14     	; 0x2512 <vfprintf+0xb6>
    2504:	80 33       	cpi	r24, 0x30	; 48
    2506:	49 f4       	brne	.+18     	; 0x251a <vfprintf+0xbe>
    2508:	11 60       	ori	r17, 0x01	; 1
    250a:	2c c0       	rjmp	.+88     	; 0x2564 <vfprintf+0x108>
    250c:	12 60       	ori	r17, 0x02	; 2
    250e:	14 60       	ori	r17, 0x04	; 4
    2510:	29 c0       	rjmp	.+82     	; 0x2564 <vfprintf+0x108>
    2512:	18 60       	ori	r17, 0x08	; 8
    2514:	27 c0       	rjmp	.+78     	; 0x2564 <vfprintf+0x108>
    2516:	10 61       	ori	r17, 0x10	; 16
    2518:	25 c0       	rjmp	.+74     	; 0x2564 <vfprintf+0x108>
    251a:	17 fd       	sbrc	r17, 7
    251c:	2e c0       	rjmp	.+92     	; 0x257a <vfprintf+0x11e>
    251e:	28 2f       	mov	r18, r24
    2520:	20 53       	subi	r18, 0x30	; 48
    2522:	2a 30       	cpi	r18, 0x0A	; 10
    2524:	98 f4       	brcc	.+38     	; 0x254c <vfprintf+0xf0>
    2526:	16 ff       	sbrs	r17, 6
    2528:	08 c0       	rjmp	.+16     	; 0x253a <vfprintf+0xde>
    252a:	8f 2d       	mov	r24, r15
    252c:	88 0f       	add	r24, r24
    252e:	f8 2e       	mov	r15, r24
    2530:	ff 0c       	add	r15, r15
    2532:	ff 0c       	add	r15, r15
    2534:	f8 0e       	add	r15, r24
    2536:	f2 0e       	add	r15, r18
    2538:	15 c0       	rjmp	.+42     	; 0x2564 <vfprintf+0x108>
    253a:	8e 2d       	mov	r24, r14
    253c:	88 0f       	add	r24, r24
    253e:	e8 2e       	mov	r14, r24
    2540:	ee 0c       	add	r14, r14
    2542:	ee 0c       	add	r14, r14
    2544:	e8 0e       	add	r14, r24
    2546:	e2 0e       	add	r14, r18
    2548:	10 62       	ori	r17, 0x20	; 32
    254a:	0c c0       	rjmp	.+24     	; 0x2564 <vfprintf+0x108>
    254c:	8e 32       	cpi	r24, 0x2E	; 46
    254e:	21 f4       	brne	.+8      	; 0x2558 <vfprintf+0xfc>
    2550:	16 fd       	sbrc	r17, 6
    2552:	6c c1       	rjmp	.+728    	; 0x282c <vfprintf+0x3d0>
    2554:	10 64       	ori	r17, 0x40	; 64
    2556:	06 c0       	rjmp	.+12     	; 0x2564 <vfprintf+0x108>
    2558:	8c 36       	cpi	r24, 0x6C	; 108
    255a:	11 f4       	brne	.+4      	; 0x2560 <vfprintf+0x104>
    255c:	10 68       	ori	r17, 0x80	; 128
    255e:	02 c0       	rjmp	.+4      	; 0x2564 <vfprintf+0x108>
    2560:	88 36       	cpi	r24, 0x68	; 104
    2562:	59 f4       	brne	.+22     	; 0x257a <vfprintf+0x11e>
    2564:	ec 85       	ldd	r30, Y+12	; 0x0c
    2566:	fd 85       	ldd	r31, Y+13	; 0x0d
    2568:	93 fd       	sbrc	r25, 3
    256a:	85 91       	lpm	r24, Z+
    256c:	93 ff       	sbrs	r25, 3
    256e:	81 91       	ld	r24, Z+
    2570:	fd 87       	std	Y+13, r31	; 0x0d
    2572:	ec 87       	std	Y+12, r30	; 0x0c
    2574:	88 23       	and	r24, r24
    2576:	09 f0       	breq	.+2      	; 0x257a <vfprintf+0x11e>
    2578:	b8 cf       	rjmp	.-144    	; 0x24ea <vfprintf+0x8e>
    257a:	98 2f       	mov	r25, r24
    257c:	95 54       	subi	r25, 0x45	; 69
    257e:	93 30       	cpi	r25, 0x03	; 3
    2580:	18 f0       	brcs	.+6      	; 0x2588 <vfprintf+0x12c>
    2582:	90 52       	subi	r25, 0x20	; 32
    2584:	93 30       	cpi	r25, 0x03	; 3
    2586:	38 f4       	brcc	.+14     	; 0x2596 <vfprintf+0x13a>
    2588:	24 e0       	ldi	r18, 0x04	; 4
    258a:	30 e0       	ldi	r19, 0x00	; 0
    258c:	a2 0e       	add	r10, r18
    258e:	b3 1e       	adc	r11, r19
    2590:	3f e3       	ldi	r19, 0x3F	; 63
    2592:	39 83       	std	Y+1, r19	; 0x01
    2594:	0f c0       	rjmp	.+30     	; 0x25b4 <vfprintf+0x158>
    2596:	83 36       	cpi	r24, 0x63	; 99
    2598:	31 f0       	breq	.+12     	; 0x25a6 <vfprintf+0x14a>
    259a:	83 37       	cpi	r24, 0x73	; 115
    259c:	81 f0       	breq	.+32     	; 0x25be <vfprintf+0x162>
    259e:	83 35       	cpi	r24, 0x53	; 83
    25a0:	09 f0       	breq	.+2      	; 0x25a4 <vfprintf+0x148>
    25a2:	5a c0       	rjmp	.+180    	; 0x2658 <vfprintf+0x1fc>
    25a4:	22 c0       	rjmp	.+68     	; 0x25ea <vfprintf+0x18e>
    25a6:	f5 01       	movw	r30, r10
    25a8:	80 81       	ld	r24, Z
    25aa:	89 83       	std	Y+1, r24	; 0x01
    25ac:	22 e0       	ldi	r18, 0x02	; 2
    25ae:	30 e0       	ldi	r19, 0x00	; 0
    25b0:	a2 0e       	add	r10, r18
    25b2:	b3 1e       	adc	r11, r19
    25b4:	21 e0       	ldi	r18, 0x01	; 1
    25b6:	c2 2e       	mov	r12, r18
    25b8:	d1 2c       	mov	r13, r1
    25ba:	42 01       	movw	r8, r4
    25bc:	14 c0       	rjmp	.+40     	; 0x25e6 <vfprintf+0x18a>
    25be:	92 e0       	ldi	r25, 0x02	; 2
    25c0:	29 2e       	mov	r2, r25
    25c2:	31 2c       	mov	r3, r1
    25c4:	2a 0c       	add	r2, r10
    25c6:	3b 1c       	adc	r3, r11
    25c8:	f5 01       	movw	r30, r10
    25ca:	80 80       	ld	r8, Z
    25cc:	91 80       	ldd	r9, Z+1	; 0x01
    25ce:	16 ff       	sbrs	r17, 6
    25d0:	03 c0       	rjmp	.+6      	; 0x25d8 <vfprintf+0x17c>
    25d2:	6f 2d       	mov	r22, r15
    25d4:	70 e0       	ldi	r23, 0x00	; 0
    25d6:	02 c0       	rjmp	.+4      	; 0x25dc <vfprintf+0x180>
    25d8:	6f ef       	ldi	r22, 0xFF	; 255
    25da:	7f ef       	ldi	r23, 0xFF	; 255
    25dc:	c4 01       	movw	r24, r8
    25de:	0e 94 40 14 	call	0x2880	; 0x2880 <strnlen>
    25e2:	6c 01       	movw	r12, r24
    25e4:	51 01       	movw	r10, r2
    25e6:	1f 77       	andi	r17, 0x7F	; 127
    25e8:	15 c0       	rjmp	.+42     	; 0x2614 <vfprintf+0x1b8>
    25ea:	82 e0       	ldi	r24, 0x02	; 2
    25ec:	28 2e       	mov	r2, r24
    25ee:	31 2c       	mov	r3, r1
    25f0:	2a 0c       	add	r2, r10
    25f2:	3b 1c       	adc	r3, r11
    25f4:	f5 01       	movw	r30, r10
    25f6:	80 80       	ld	r8, Z
    25f8:	91 80       	ldd	r9, Z+1	; 0x01
    25fa:	16 ff       	sbrs	r17, 6
    25fc:	03 c0       	rjmp	.+6      	; 0x2604 <vfprintf+0x1a8>
    25fe:	6f 2d       	mov	r22, r15
    2600:	70 e0       	ldi	r23, 0x00	; 0
    2602:	02 c0       	rjmp	.+4      	; 0x2608 <vfprintf+0x1ac>
    2604:	6f ef       	ldi	r22, 0xFF	; 255
    2606:	7f ef       	ldi	r23, 0xFF	; 255
    2608:	c4 01       	movw	r24, r8
    260a:	0e 94 35 14 	call	0x286a	; 0x286a <strnlen_P>
    260e:	6c 01       	movw	r12, r24
    2610:	10 68       	ori	r17, 0x80	; 128
    2612:	51 01       	movw	r10, r2
    2614:	13 fd       	sbrc	r17, 3
    2616:	1c c0       	rjmp	.+56     	; 0x2650 <vfprintf+0x1f4>
    2618:	06 c0       	rjmp	.+12     	; 0x2626 <vfprintf+0x1ca>
    261a:	80 e2       	ldi	r24, 0x20	; 32
    261c:	90 e0       	ldi	r25, 0x00	; 0
    261e:	b3 01       	movw	r22, r6
    2620:	0e 94 8b 14 	call	0x2916	; 0x2916 <fputc>
    2624:	ea 94       	dec	r14
    2626:	8e 2d       	mov	r24, r14
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	c8 16       	cp	r12, r24
    262c:	d9 06       	cpc	r13, r25
    262e:	a8 f3       	brcs	.-22     	; 0x261a <vfprintf+0x1be>
    2630:	0f c0       	rjmp	.+30     	; 0x2650 <vfprintf+0x1f4>
    2632:	f4 01       	movw	r30, r8
    2634:	17 fd       	sbrc	r17, 7
    2636:	85 91       	lpm	r24, Z+
    2638:	17 ff       	sbrs	r17, 7
    263a:	81 91       	ld	r24, Z+
    263c:	4f 01       	movw	r8, r30
    263e:	90 e0       	ldi	r25, 0x00	; 0
    2640:	b3 01       	movw	r22, r6
    2642:	0e 94 8b 14 	call	0x2916	; 0x2916 <fputc>
    2646:	e1 10       	cpse	r14, r1
    2648:	ea 94       	dec	r14
    264a:	08 94       	sec
    264c:	c1 08       	sbc	r12, r1
    264e:	d1 08       	sbc	r13, r1
    2650:	c1 14       	cp	r12, r1
    2652:	d1 04       	cpc	r13, r1
    2654:	71 f7       	brne	.-36     	; 0x2632 <vfprintf+0x1d6>
    2656:	e7 c0       	rjmp	.+462    	; 0x2826 <vfprintf+0x3ca>
    2658:	84 36       	cpi	r24, 0x64	; 100
    265a:	11 f0       	breq	.+4      	; 0x2660 <vfprintf+0x204>
    265c:	89 36       	cpi	r24, 0x69	; 105
    265e:	51 f5       	brne	.+84     	; 0x26b4 <vfprintf+0x258>
    2660:	f5 01       	movw	r30, r10
    2662:	17 ff       	sbrs	r17, 7
    2664:	07 c0       	rjmp	.+14     	; 0x2674 <vfprintf+0x218>
    2666:	80 81       	ld	r24, Z
    2668:	91 81       	ldd	r25, Z+1	; 0x01
    266a:	a2 81       	ldd	r26, Z+2	; 0x02
    266c:	b3 81       	ldd	r27, Z+3	; 0x03
    266e:	24 e0       	ldi	r18, 0x04	; 4
    2670:	30 e0       	ldi	r19, 0x00	; 0
    2672:	08 c0       	rjmp	.+16     	; 0x2684 <vfprintf+0x228>
    2674:	80 81       	ld	r24, Z
    2676:	91 81       	ldd	r25, Z+1	; 0x01
    2678:	aa 27       	eor	r26, r26
    267a:	97 fd       	sbrc	r25, 7
    267c:	a0 95       	com	r26
    267e:	ba 2f       	mov	r27, r26
    2680:	22 e0       	ldi	r18, 0x02	; 2
    2682:	30 e0       	ldi	r19, 0x00	; 0
    2684:	a2 0e       	add	r10, r18
    2686:	b3 1e       	adc	r11, r19
    2688:	01 2f       	mov	r16, r17
    268a:	0f 76       	andi	r16, 0x6F	; 111
    268c:	b7 ff       	sbrs	r27, 7
    268e:	08 c0       	rjmp	.+16     	; 0x26a0 <vfprintf+0x244>
    2690:	b0 95       	com	r27
    2692:	a0 95       	com	r26
    2694:	90 95       	com	r25
    2696:	81 95       	neg	r24
    2698:	9f 4f       	sbci	r25, 0xFF	; 255
    269a:	af 4f       	sbci	r26, 0xFF	; 255
    269c:	bf 4f       	sbci	r27, 0xFF	; 255
    269e:	00 68       	ori	r16, 0x80	; 128
    26a0:	bc 01       	movw	r22, r24
    26a2:	cd 01       	movw	r24, r26
    26a4:	a2 01       	movw	r20, r4
    26a6:	2a e0       	ldi	r18, 0x0A	; 10
    26a8:	30 e0       	ldi	r19, 0x00	; 0
    26aa:	0e 94 b7 14 	call	0x296e	; 0x296e <__ultoa_invert>
    26ae:	d8 2e       	mov	r13, r24
    26b0:	d4 18       	sub	r13, r4
    26b2:	3f c0       	rjmp	.+126    	; 0x2732 <vfprintf+0x2d6>
    26b4:	85 37       	cpi	r24, 0x75	; 117
    26b6:	21 f4       	brne	.+8      	; 0x26c0 <vfprintf+0x264>
    26b8:	1f 7e       	andi	r17, 0xEF	; 239
    26ba:	2a e0       	ldi	r18, 0x0A	; 10
    26bc:	30 e0       	ldi	r19, 0x00	; 0
    26be:	20 c0       	rjmp	.+64     	; 0x2700 <vfprintf+0x2a4>
    26c0:	19 7f       	andi	r17, 0xF9	; 249
    26c2:	8f 36       	cpi	r24, 0x6F	; 111
    26c4:	a9 f0       	breq	.+42     	; 0x26f0 <vfprintf+0x294>
    26c6:	80 37       	cpi	r24, 0x70	; 112
    26c8:	20 f4       	brcc	.+8      	; 0x26d2 <vfprintf+0x276>
    26ca:	88 35       	cpi	r24, 0x58	; 88
    26cc:	09 f0       	breq	.+2      	; 0x26d0 <vfprintf+0x274>
    26ce:	ae c0       	rjmp	.+348    	; 0x282c <vfprintf+0x3d0>
    26d0:	0b c0       	rjmp	.+22     	; 0x26e8 <vfprintf+0x28c>
    26d2:	80 37       	cpi	r24, 0x70	; 112
    26d4:	21 f0       	breq	.+8      	; 0x26de <vfprintf+0x282>
    26d6:	88 37       	cpi	r24, 0x78	; 120
    26d8:	09 f0       	breq	.+2      	; 0x26dc <vfprintf+0x280>
    26da:	a8 c0       	rjmp	.+336    	; 0x282c <vfprintf+0x3d0>
    26dc:	01 c0       	rjmp	.+2      	; 0x26e0 <vfprintf+0x284>
    26de:	10 61       	ori	r17, 0x10	; 16
    26e0:	14 ff       	sbrs	r17, 4
    26e2:	09 c0       	rjmp	.+18     	; 0x26f6 <vfprintf+0x29a>
    26e4:	14 60       	ori	r17, 0x04	; 4
    26e6:	07 c0       	rjmp	.+14     	; 0x26f6 <vfprintf+0x29a>
    26e8:	14 ff       	sbrs	r17, 4
    26ea:	08 c0       	rjmp	.+16     	; 0x26fc <vfprintf+0x2a0>
    26ec:	16 60       	ori	r17, 0x06	; 6
    26ee:	06 c0       	rjmp	.+12     	; 0x26fc <vfprintf+0x2a0>
    26f0:	28 e0       	ldi	r18, 0x08	; 8
    26f2:	30 e0       	ldi	r19, 0x00	; 0
    26f4:	05 c0       	rjmp	.+10     	; 0x2700 <vfprintf+0x2a4>
    26f6:	20 e1       	ldi	r18, 0x10	; 16
    26f8:	30 e0       	ldi	r19, 0x00	; 0
    26fa:	02 c0       	rjmp	.+4      	; 0x2700 <vfprintf+0x2a4>
    26fc:	20 e1       	ldi	r18, 0x10	; 16
    26fe:	32 e0       	ldi	r19, 0x02	; 2
    2700:	f5 01       	movw	r30, r10
    2702:	17 ff       	sbrs	r17, 7
    2704:	07 c0       	rjmp	.+14     	; 0x2714 <vfprintf+0x2b8>
    2706:	60 81       	ld	r22, Z
    2708:	71 81       	ldd	r23, Z+1	; 0x01
    270a:	82 81       	ldd	r24, Z+2	; 0x02
    270c:	93 81       	ldd	r25, Z+3	; 0x03
    270e:	44 e0       	ldi	r20, 0x04	; 4
    2710:	50 e0       	ldi	r21, 0x00	; 0
    2712:	06 c0       	rjmp	.+12     	; 0x2720 <vfprintf+0x2c4>
    2714:	60 81       	ld	r22, Z
    2716:	71 81       	ldd	r23, Z+1	; 0x01
    2718:	80 e0       	ldi	r24, 0x00	; 0
    271a:	90 e0       	ldi	r25, 0x00	; 0
    271c:	42 e0       	ldi	r20, 0x02	; 2
    271e:	50 e0       	ldi	r21, 0x00	; 0
    2720:	a4 0e       	add	r10, r20
    2722:	b5 1e       	adc	r11, r21
    2724:	a2 01       	movw	r20, r4
    2726:	0e 94 b7 14 	call	0x296e	; 0x296e <__ultoa_invert>
    272a:	d8 2e       	mov	r13, r24
    272c:	d4 18       	sub	r13, r4
    272e:	01 2f       	mov	r16, r17
    2730:	0f 77       	andi	r16, 0x7F	; 127
    2732:	06 ff       	sbrs	r16, 6
    2734:	09 c0       	rjmp	.+18     	; 0x2748 <vfprintf+0x2ec>
    2736:	0e 7f       	andi	r16, 0xFE	; 254
    2738:	df 14       	cp	r13, r15
    273a:	30 f4       	brcc	.+12     	; 0x2748 <vfprintf+0x2ec>
    273c:	04 ff       	sbrs	r16, 4
    273e:	06 c0       	rjmp	.+12     	; 0x274c <vfprintf+0x2f0>
    2740:	02 fd       	sbrc	r16, 2
    2742:	04 c0       	rjmp	.+8      	; 0x274c <vfprintf+0x2f0>
    2744:	0f 7e       	andi	r16, 0xEF	; 239
    2746:	02 c0       	rjmp	.+4      	; 0x274c <vfprintf+0x2f0>
    2748:	1d 2d       	mov	r17, r13
    274a:	01 c0       	rjmp	.+2      	; 0x274e <vfprintf+0x2f2>
    274c:	1f 2d       	mov	r17, r15
    274e:	80 2f       	mov	r24, r16
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	04 ff       	sbrs	r16, 4
    2754:	0c c0       	rjmp	.+24     	; 0x276e <vfprintf+0x312>
    2756:	fe 01       	movw	r30, r28
    2758:	ed 0d       	add	r30, r13
    275a:	f1 1d       	adc	r31, r1
    275c:	20 81       	ld	r18, Z
    275e:	20 33       	cpi	r18, 0x30	; 48
    2760:	11 f4       	brne	.+4      	; 0x2766 <vfprintf+0x30a>
    2762:	09 7e       	andi	r16, 0xE9	; 233
    2764:	09 c0       	rjmp	.+18     	; 0x2778 <vfprintf+0x31c>
    2766:	02 ff       	sbrs	r16, 2
    2768:	06 c0       	rjmp	.+12     	; 0x2776 <vfprintf+0x31a>
    276a:	1e 5f       	subi	r17, 0xFE	; 254
    276c:	05 c0       	rjmp	.+10     	; 0x2778 <vfprintf+0x31c>
    276e:	86 78       	andi	r24, 0x86	; 134
    2770:	90 70       	andi	r25, 0x00	; 0
    2772:	00 97       	sbiw	r24, 0x00	; 0
    2774:	09 f0       	breq	.+2      	; 0x2778 <vfprintf+0x31c>
    2776:	1f 5f       	subi	r17, 0xFF	; 255
    2778:	80 2e       	mov	r8, r16
    277a:	99 24       	eor	r9, r9
    277c:	03 fd       	sbrc	r16, 3
    277e:	12 c0       	rjmp	.+36     	; 0x27a4 <vfprintf+0x348>
    2780:	00 ff       	sbrs	r16, 0
    2782:	0d c0       	rjmp	.+26     	; 0x279e <vfprintf+0x342>
    2784:	fd 2c       	mov	r15, r13
    2786:	1e 15       	cp	r17, r14
    2788:	50 f4       	brcc	.+20     	; 0x279e <vfprintf+0x342>
    278a:	fe 0c       	add	r15, r14
    278c:	f1 1a       	sub	r15, r17
    278e:	1e 2d       	mov	r17, r14
    2790:	06 c0       	rjmp	.+12     	; 0x279e <vfprintf+0x342>
    2792:	80 e2       	ldi	r24, 0x20	; 32
    2794:	90 e0       	ldi	r25, 0x00	; 0
    2796:	b3 01       	movw	r22, r6
    2798:	0e 94 8b 14 	call	0x2916	; 0x2916 <fputc>
    279c:	1f 5f       	subi	r17, 0xFF	; 255
    279e:	1e 15       	cp	r17, r14
    27a0:	c0 f3       	brcs	.-16     	; 0x2792 <vfprintf+0x336>
    27a2:	04 c0       	rjmp	.+8      	; 0x27ac <vfprintf+0x350>
    27a4:	1e 15       	cp	r17, r14
    27a6:	10 f4       	brcc	.+4      	; 0x27ac <vfprintf+0x350>
    27a8:	e1 1a       	sub	r14, r17
    27aa:	01 c0       	rjmp	.+2      	; 0x27ae <vfprintf+0x352>
    27ac:	ee 24       	eor	r14, r14
    27ae:	84 fe       	sbrs	r8, 4
    27b0:	0f c0       	rjmp	.+30     	; 0x27d0 <vfprintf+0x374>
    27b2:	80 e3       	ldi	r24, 0x30	; 48
    27b4:	90 e0       	ldi	r25, 0x00	; 0
    27b6:	b3 01       	movw	r22, r6
    27b8:	0e 94 8b 14 	call	0x2916	; 0x2916 <fputc>
    27bc:	82 fe       	sbrs	r8, 2
    27be:	1f c0       	rjmp	.+62     	; 0x27fe <vfprintf+0x3a2>
    27c0:	81 fe       	sbrs	r8, 1
    27c2:	03 c0       	rjmp	.+6      	; 0x27ca <vfprintf+0x36e>
    27c4:	88 e5       	ldi	r24, 0x58	; 88
    27c6:	90 e0       	ldi	r25, 0x00	; 0
    27c8:	10 c0       	rjmp	.+32     	; 0x27ea <vfprintf+0x38e>
    27ca:	88 e7       	ldi	r24, 0x78	; 120
    27cc:	90 e0       	ldi	r25, 0x00	; 0
    27ce:	0d c0       	rjmp	.+26     	; 0x27ea <vfprintf+0x38e>
    27d0:	c4 01       	movw	r24, r8
    27d2:	86 78       	andi	r24, 0x86	; 134
    27d4:	90 70       	andi	r25, 0x00	; 0
    27d6:	00 97       	sbiw	r24, 0x00	; 0
    27d8:	91 f0       	breq	.+36     	; 0x27fe <vfprintf+0x3a2>
    27da:	81 fc       	sbrc	r8, 1
    27dc:	02 c0       	rjmp	.+4      	; 0x27e2 <vfprintf+0x386>
    27de:	80 e2       	ldi	r24, 0x20	; 32
    27e0:	01 c0       	rjmp	.+2      	; 0x27e4 <vfprintf+0x388>
    27e2:	8b e2       	ldi	r24, 0x2B	; 43
    27e4:	07 fd       	sbrc	r16, 7
    27e6:	8d e2       	ldi	r24, 0x2D	; 45
    27e8:	90 e0       	ldi	r25, 0x00	; 0
    27ea:	b3 01       	movw	r22, r6
    27ec:	0e 94 8b 14 	call	0x2916	; 0x2916 <fputc>
    27f0:	06 c0       	rjmp	.+12     	; 0x27fe <vfprintf+0x3a2>
    27f2:	80 e3       	ldi	r24, 0x30	; 48
    27f4:	90 e0       	ldi	r25, 0x00	; 0
    27f6:	b3 01       	movw	r22, r6
    27f8:	0e 94 8b 14 	call	0x2916	; 0x2916 <fputc>
    27fc:	fa 94       	dec	r15
    27fe:	df 14       	cp	r13, r15
    2800:	c0 f3       	brcs	.-16     	; 0x27f2 <vfprintf+0x396>
    2802:	da 94       	dec	r13
    2804:	f2 01       	movw	r30, r4
    2806:	ed 0d       	add	r30, r13
    2808:	f1 1d       	adc	r31, r1
    280a:	80 81       	ld	r24, Z
    280c:	90 e0       	ldi	r25, 0x00	; 0
    280e:	b3 01       	movw	r22, r6
    2810:	0e 94 8b 14 	call	0x2916	; 0x2916 <fputc>
    2814:	dd 20       	and	r13, r13
    2816:	a9 f7       	brne	.-22     	; 0x2802 <vfprintf+0x3a6>
    2818:	06 c0       	rjmp	.+12     	; 0x2826 <vfprintf+0x3ca>
    281a:	80 e2       	ldi	r24, 0x20	; 32
    281c:	90 e0       	ldi	r25, 0x00	; 0
    281e:	b3 01       	movw	r22, r6
    2820:	0e 94 8b 14 	call	0x2916	; 0x2916 <fputc>
    2824:	ea 94       	dec	r14
    2826:	ee 20       	and	r14, r14
    2828:	c1 f7       	brne	.-16     	; 0x281a <vfprintf+0x3be>
    282a:	40 ce       	rjmp	.-896    	; 0x24ac <vfprintf+0x50>
    282c:	f3 01       	movw	r30, r6
    282e:	86 81       	ldd	r24, Z+6	; 0x06
    2830:	97 81       	ldd	r25, Z+7	; 0x07
    2832:	02 c0       	rjmp	.+4      	; 0x2838 <vfprintf+0x3dc>
    2834:	8f ef       	ldi	r24, 0xFF	; 255
    2836:	9f ef       	ldi	r25, 0xFF	; 255
    2838:	2d 96       	adiw	r28, 0x0d	; 13
    283a:	0f b6       	in	r0, 0x3f	; 63
    283c:	f8 94       	cli
    283e:	de bf       	out	0x3e, r29	; 62
    2840:	0f be       	out	0x3f, r0	; 63
    2842:	cd bf       	out	0x3d, r28	; 61
    2844:	df 91       	pop	r29
    2846:	cf 91       	pop	r28
    2848:	1f 91       	pop	r17
    284a:	0f 91       	pop	r16
    284c:	ff 90       	pop	r15
    284e:	ef 90       	pop	r14
    2850:	df 90       	pop	r13
    2852:	cf 90       	pop	r12
    2854:	bf 90       	pop	r11
    2856:	af 90       	pop	r10
    2858:	9f 90       	pop	r9
    285a:	8f 90       	pop	r8
    285c:	7f 90       	pop	r7
    285e:	6f 90       	pop	r6
    2860:	5f 90       	pop	r5
    2862:	4f 90       	pop	r4
    2864:	3f 90       	pop	r3
    2866:	2f 90       	pop	r2
    2868:	08 95       	ret

0000286a <strnlen_P>:
    286a:	fc 01       	movw	r30, r24
    286c:	05 90       	lpm	r0, Z+
    286e:	61 50       	subi	r22, 0x01	; 1
    2870:	70 40       	sbci	r23, 0x00	; 0
    2872:	01 10       	cpse	r0, r1
    2874:	d8 f7       	brcc	.-10     	; 0x286c <strnlen_P+0x2>
    2876:	80 95       	com	r24
    2878:	90 95       	com	r25
    287a:	8e 0f       	add	r24, r30
    287c:	9f 1f       	adc	r25, r31
    287e:	08 95       	ret

00002880 <strnlen>:
    2880:	fc 01       	movw	r30, r24
    2882:	61 50       	subi	r22, 0x01	; 1
    2884:	70 40       	sbci	r23, 0x00	; 0
    2886:	01 90       	ld	r0, Z+
    2888:	01 10       	cpse	r0, r1
    288a:	d8 f7       	brcc	.-10     	; 0x2882 <strnlen+0x2>
    288c:	80 95       	com	r24
    288e:	90 95       	com	r25
    2890:	8e 0f       	add	r24, r30
    2892:	9f 1f       	adc	r25, r31
    2894:	08 95       	ret

00002896 <fgetc>:
    2896:	cf 93       	push	r28
    2898:	df 93       	push	r29
    289a:	ec 01       	movw	r28, r24
    289c:	2b 81       	ldd	r18, Y+3	; 0x03
    289e:	20 ff       	sbrs	r18, 0
    28a0:	35 c0       	rjmp	.+106    	; 0x290c <fgetc+0x76>
    28a2:	26 ff       	sbrs	r18, 6
    28a4:	09 c0       	rjmp	.+18     	; 0x28b8 <fgetc+0x22>
    28a6:	2f 7b       	andi	r18, 0xBF	; 191
    28a8:	2b 83       	std	Y+3, r18	; 0x03
    28aa:	8e 81       	ldd	r24, Y+6	; 0x06
    28ac:	9f 81       	ldd	r25, Y+7	; 0x07
    28ae:	01 96       	adiw	r24, 0x01	; 1
    28b0:	9f 83       	std	Y+7, r25	; 0x07
    28b2:	8e 83       	std	Y+6, r24	; 0x06
    28b4:	8a 81       	ldd	r24, Y+2	; 0x02
    28b6:	28 c0       	rjmp	.+80     	; 0x2908 <fgetc+0x72>
    28b8:	22 ff       	sbrs	r18, 2
    28ba:	0f c0       	rjmp	.+30     	; 0x28da <fgetc+0x44>
    28bc:	e8 81       	ld	r30, Y
    28be:	f9 81       	ldd	r31, Y+1	; 0x01
    28c0:	80 81       	ld	r24, Z
    28c2:	99 27       	eor	r25, r25
    28c4:	87 fd       	sbrc	r24, 7
    28c6:	90 95       	com	r25
    28c8:	00 97       	sbiw	r24, 0x00	; 0
    28ca:	19 f4       	brne	.+6      	; 0x28d2 <fgetc+0x3c>
    28cc:	20 62       	ori	r18, 0x20	; 32
    28ce:	2b 83       	std	Y+3, r18	; 0x03
    28d0:	1d c0       	rjmp	.+58     	; 0x290c <fgetc+0x76>
    28d2:	31 96       	adiw	r30, 0x01	; 1
    28d4:	f9 83       	std	Y+1, r31	; 0x01
    28d6:	e8 83       	st	Y, r30
    28d8:	11 c0       	rjmp	.+34     	; 0x28fc <fgetc+0x66>
    28da:	ea 85       	ldd	r30, Y+10	; 0x0a
    28dc:	fb 85       	ldd	r31, Y+11	; 0x0b
    28de:	ce 01       	movw	r24, r28
    28e0:	19 95       	eicall
    28e2:	97 ff       	sbrs	r25, 7
    28e4:	0b c0       	rjmp	.+22     	; 0x28fc <fgetc+0x66>
    28e6:	2b 81       	ldd	r18, Y+3	; 0x03
    28e8:	3f ef       	ldi	r19, 0xFF	; 255
    28ea:	8f 3f       	cpi	r24, 0xFF	; 255
    28ec:	93 07       	cpc	r25, r19
    28ee:	11 f4       	brne	.+4      	; 0x28f4 <fgetc+0x5e>
    28f0:	80 e1       	ldi	r24, 0x10	; 16
    28f2:	01 c0       	rjmp	.+2      	; 0x28f6 <fgetc+0x60>
    28f4:	80 e2       	ldi	r24, 0x20	; 32
    28f6:	82 2b       	or	r24, r18
    28f8:	8b 83       	std	Y+3, r24	; 0x03
    28fa:	08 c0       	rjmp	.+16     	; 0x290c <fgetc+0x76>
    28fc:	2e 81       	ldd	r18, Y+6	; 0x06
    28fe:	3f 81       	ldd	r19, Y+7	; 0x07
    2900:	2f 5f       	subi	r18, 0xFF	; 255
    2902:	3f 4f       	sbci	r19, 0xFF	; 255
    2904:	3f 83       	std	Y+7, r19	; 0x07
    2906:	2e 83       	std	Y+6, r18	; 0x06
    2908:	90 e0       	ldi	r25, 0x00	; 0
    290a:	02 c0       	rjmp	.+4      	; 0x2910 <fgetc+0x7a>
    290c:	8f ef       	ldi	r24, 0xFF	; 255
    290e:	9f ef       	ldi	r25, 0xFF	; 255
    2910:	df 91       	pop	r29
    2912:	cf 91       	pop	r28
    2914:	08 95       	ret

00002916 <fputc>:
    2916:	0f 93       	push	r16
    2918:	1f 93       	push	r17
    291a:	cf 93       	push	r28
    291c:	df 93       	push	r29
    291e:	8c 01       	movw	r16, r24
    2920:	eb 01       	movw	r28, r22
    2922:	8b 81       	ldd	r24, Y+3	; 0x03
    2924:	81 ff       	sbrs	r24, 1
    2926:	1b c0       	rjmp	.+54     	; 0x295e <fputc+0x48>
    2928:	82 ff       	sbrs	r24, 2
    292a:	0d c0       	rjmp	.+26     	; 0x2946 <fputc+0x30>
    292c:	2e 81       	ldd	r18, Y+6	; 0x06
    292e:	3f 81       	ldd	r19, Y+7	; 0x07
    2930:	8c 81       	ldd	r24, Y+4	; 0x04
    2932:	9d 81       	ldd	r25, Y+5	; 0x05
    2934:	28 17       	cp	r18, r24
    2936:	39 07       	cpc	r19, r25
    2938:	64 f4       	brge	.+24     	; 0x2952 <fputc+0x3c>
    293a:	e8 81       	ld	r30, Y
    293c:	f9 81       	ldd	r31, Y+1	; 0x01
    293e:	01 93       	st	Z+, r16
    2940:	f9 83       	std	Y+1, r31	; 0x01
    2942:	e8 83       	st	Y, r30
    2944:	06 c0       	rjmp	.+12     	; 0x2952 <fputc+0x3c>
    2946:	e8 85       	ldd	r30, Y+8	; 0x08
    2948:	f9 85       	ldd	r31, Y+9	; 0x09
    294a:	80 2f       	mov	r24, r16
    294c:	19 95       	eicall
    294e:	00 97       	sbiw	r24, 0x00	; 0
    2950:	31 f4       	brne	.+12     	; 0x295e <fputc+0x48>
    2952:	8e 81       	ldd	r24, Y+6	; 0x06
    2954:	9f 81       	ldd	r25, Y+7	; 0x07
    2956:	01 96       	adiw	r24, 0x01	; 1
    2958:	9f 83       	std	Y+7, r25	; 0x07
    295a:	8e 83       	std	Y+6, r24	; 0x06
    295c:	02 c0       	rjmp	.+4      	; 0x2962 <fputc+0x4c>
    295e:	0f ef       	ldi	r16, 0xFF	; 255
    2960:	1f ef       	ldi	r17, 0xFF	; 255
    2962:	c8 01       	movw	r24, r16
    2964:	df 91       	pop	r29
    2966:	cf 91       	pop	r28
    2968:	1f 91       	pop	r17
    296a:	0f 91       	pop	r16
    296c:	08 95       	ret

0000296e <__ultoa_invert>:
    296e:	fa 01       	movw	r30, r20
    2970:	aa 27       	eor	r26, r26
    2972:	28 30       	cpi	r18, 0x08	; 8
    2974:	51 f1       	breq	.+84     	; 0x29ca <__ultoa_invert+0x5c>
    2976:	20 31       	cpi	r18, 0x10	; 16
    2978:	81 f1       	breq	.+96     	; 0x29da <__ultoa_invert+0x6c>
    297a:	e8 94       	clt
    297c:	6f 93       	push	r22
    297e:	6e 7f       	andi	r22, 0xFE	; 254
    2980:	6e 5f       	subi	r22, 0xFE	; 254
    2982:	7f 4f       	sbci	r23, 0xFF	; 255
    2984:	8f 4f       	sbci	r24, 0xFF	; 255
    2986:	9f 4f       	sbci	r25, 0xFF	; 255
    2988:	af 4f       	sbci	r26, 0xFF	; 255
    298a:	b1 e0       	ldi	r27, 0x01	; 1
    298c:	3e d0       	rcall	.+124    	; 0x2a0a <__ultoa_invert+0x9c>
    298e:	b4 e0       	ldi	r27, 0x04	; 4
    2990:	3c d0       	rcall	.+120    	; 0x2a0a <__ultoa_invert+0x9c>
    2992:	67 0f       	add	r22, r23
    2994:	78 1f       	adc	r23, r24
    2996:	89 1f       	adc	r24, r25
    2998:	9a 1f       	adc	r25, r26
    299a:	a1 1d       	adc	r26, r1
    299c:	68 0f       	add	r22, r24
    299e:	79 1f       	adc	r23, r25
    29a0:	8a 1f       	adc	r24, r26
    29a2:	91 1d       	adc	r25, r1
    29a4:	a1 1d       	adc	r26, r1
    29a6:	6a 0f       	add	r22, r26
    29a8:	71 1d       	adc	r23, r1
    29aa:	81 1d       	adc	r24, r1
    29ac:	91 1d       	adc	r25, r1
    29ae:	a1 1d       	adc	r26, r1
    29b0:	20 d0       	rcall	.+64     	; 0x29f2 <__ultoa_invert+0x84>
    29b2:	09 f4       	brne	.+2      	; 0x29b6 <__ultoa_invert+0x48>
    29b4:	68 94       	set
    29b6:	3f 91       	pop	r19
    29b8:	2a e0       	ldi	r18, 0x0A	; 10
    29ba:	26 9f       	mul	r18, r22
    29bc:	11 24       	eor	r1, r1
    29be:	30 19       	sub	r19, r0
    29c0:	30 5d       	subi	r19, 0xD0	; 208
    29c2:	31 93       	st	Z+, r19
    29c4:	de f6       	brtc	.-74     	; 0x297c <__ultoa_invert+0xe>
    29c6:	cf 01       	movw	r24, r30
    29c8:	08 95       	ret
    29ca:	46 2f       	mov	r20, r22
    29cc:	47 70       	andi	r20, 0x07	; 7
    29ce:	40 5d       	subi	r20, 0xD0	; 208
    29d0:	41 93       	st	Z+, r20
    29d2:	b3 e0       	ldi	r27, 0x03	; 3
    29d4:	0f d0       	rcall	.+30     	; 0x29f4 <__ultoa_invert+0x86>
    29d6:	c9 f7       	brne	.-14     	; 0x29ca <__ultoa_invert+0x5c>
    29d8:	f6 cf       	rjmp	.-20     	; 0x29c6 <__ultoa_invert+0x58>
    29da:	46 2f       	mov	r20, r22
    29dc:	4f 70       	andi	r20, 0x0F	; 15
    29de:	40 5d       	subi	r20, 0xD0	; 208
    29e0:	4a 33       	cpi	r20, 0x3A	; 58
    29e2:	18 f0       	brcs	.+6      	; 0x29ea <__ultoa_invert+0x7c>
    29e4:	49 5d       	subi	r20, 0xD9	; 217
    29e6:	31 fd       	sbrc	r19, 1
    29e8:	40 52       	subi	r20, 0x20	; 32
    29ea:	41 93       	st	Z+, r20
    29ec:	02 d0       	rcall	.+4      	; 0x29f2 <__ultoa_invert+0x84>
    29ee:	a9 f7       	brne	.-22     	; 0x29da <__ultoa_invert+0x6c>
    29f0:	ea cf       	rjmp	.-44     	; 0x29c6 <__ultoa_invert+0x58>
    29f2:	b4 e0       	ldi	r27, 0x04	; 4
    29f4:	a6 95       	lsr	r26
    29f6:	97 95       	ror	r25
    29f8:	87 95       	ror	r24
    29fa:	77 95       	ror	r23
    29fc:	67 95       	ror	r22
    29fe:	ba 95       	dec	r27
    2a00:	c9 f7       	brne	.-14     	; 0x29f4 <__ultoa_invert+0x86>
    2a02:	00 97       	sbiw	r24, 0x00	; 0
    2a04:	61 05       	cpc	r22, r1
    2a06:	71 05       	cpc	r23, r1
    2a08:	08 95       	ret
    2a0a:	9b 01       	movw	r18, r22
    2a0c:	ac 01       	movw	r20, r24
    2a0e:	0a 2e       	mov	r0, r26
    2a10:	06 94       	lsr	r0
    2a12:	57 95       	ror	r21
    2a14:	47 95       	ror	r20
    2a16:	37 95       	ror	r19
    2a18:	27 95       	ror	r18
    2a1a:	ba 95       	dec	r27
    2a1c:	c9 f7       	brne	.-14     	; 0x2a10 <__ultoa_invert+0xa2>
    2a1e:	62 0f       	add	r22, r18
    2a20:	73 1f       	adc	r23, r19
    2a22:	84 1f       	adc	r24, r20
    2a24:	95 1f       	adc	r25, r21
    2a26:	a0 1d       	adc	r26, r0
    2a28:	08 95       	ret

00002a2a <_exit>:
    2a2a:	f8 94       	cli

00002a2c <__stop_program>:
    2a2c:	ff cf       	rjmp	.-2      	; 0x2a2c <__stop_program>
