
Pjt11_timer_task.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f4  00800200  0000198e  00001a22  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000198e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000013e  008002f4  008002f4  00001b16  2**0
                  ALLOC
  3 .stab         0000117c  00000000  00000000  00001b18  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000039d  00000000  00000000  00002c94  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000328  00000000  00000000  00003038  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002b96  00000000  00000000  00003360  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001545  00000000  00000000  00005ef6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000016d7  00000000  00000000  0000743b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000904  00000000  00000000  00008b14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008a5  00000000  00000000  00009418  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001fff  00000000  00000000  00009cbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  0000bcbc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      3c:	0c 94 78 04 	jmp	0x8f0	; 0x8f0 <__vector_15>
      40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      5c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      60:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      64:	0c 94 5d 05 	jmp	0xaba	; 0xaba <__vector_25>
      68:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      6c:	0c 94 2e 05 	jmp	0xa5c	; 0xa5c <__vector_27>
      70:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      74:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      78:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      7c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      80:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      84:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      88:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      8c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      90:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      94:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      98:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      9c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      ac:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      bc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      cc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      dc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      e0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ee e8       	ldi	r30, 0x8E	; 142
      fc:	f9 e1       	ldi	r31, 0x19	; 25
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a4 3f       	cpi	r26, 0xF4	; 244
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
     10e:	1b be       	out	0x3b, r1	; 59

00000110 <__do_clear_bss>:
     110:	14 e0       	ldi	r17, 0x04	; 4
     112:	a4 ef       	ldi	r26, 0xF4	; 244
     114:	b2 e0       	ldi	r27, 0x02	; 2
     116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
     118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
     11a:	a2 33       	cpi	r26, 0x32	; 50
     11c:	b1 07       	cpc	r27, r17
     11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
     120:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <main>
     124:	0c 94 c5 0c 	jmp	0x198a	; 0x198a <_exit>

00000128 <__bad_interrupt>:
     128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <app_list>:
#include <stdio.h>
#include <stdlib.h>
#include "linked_list.h"
#include "uart.h"

void app_list(char *ap) {
     12c:	cf 92       	push	r12
     12e:	df 92       	push	r13
     130:	ff 92       	push	r15
     132:	0f 93       	push	r16
     134:	1f 93       	push	r17
     136:	cf 93       	push	r28
     138:	df 93       	push	r29
     13a:	cd b7       	in	r28, 0x3d	; 61
     13c:	de b7       	in	r29, 0x3e	; 62
     13e:	28 97       	sbiw	r28, 0x08	; 8
     140:	0f b6       	in	r0, 0x3f	; 63
     142:	f8 94       	cli
     144:	de bf       	out	0x3e, r29	; 62
     146:	0f be       	out	0x3f, r0	; 63
     148:	cd bf       	out	0x3d, r28	; 61
	char buf[8], how = 'a';
	struct node *np;

	if (ap) how = *ap;
     14a:	00 97       	sbiw	r24, 0x00	; 0
     14c:	19 f0       	breq	.+6      	; 0x154 <app_list+0x28>
     14e:	fc 01       	movw	r30, r24
     150:	f0 80       	ld	r15, Z
     152:	02 c0       	rjmp	.+4      	; 0x158 <app_list+0x2c>
#include <stdlib.h>
#include "linked_list.h"
#include "uart.h"

void app_list(char *ap) {
	char buf[8], how = 'a';
     154:	91 e6       	ldi	r25, 0x61	; 97
     156:	f9 2e       	mov	r15, r25
	struct node *np;

	if (ap) how = *ap;
	while(1) {
		printf("> ");
     158:	80 e0       	ldi	r24, 0x00	; 0
     15a:	c8 2e       	mov	r12, r24
     15c:	82 e0       	ldi	r24, 0x02	; 2
     15e:	d8 2e       	mov	r13, r24
     160:	0f 92       	push	r0
     162:	0f 92       	push	r0
     164:	ed b7       	in	r30, 0x3d	; 61
     166:	fe b7       	in	r31, 0x3e	; 62
     168:	d2 82       	std	Z+2, r13	; 0x02
     16a:	c1 82       	std	Z+1, r12	; 0x01
     16c:	0e 94 97 09 	call	0x132e	; 0x132e <printf>
		if (fgets(buf, 8, stdin) == NULL)
     170:	0f 90       	pop	r0
     172:	0f 90       	pop	r0
     174:	40 91 2c 04 	lds	r20, 0x042C
     178:	50 91 2d 04 	lds	r21, 0x042D
     17c:	ce 01       	movw	r24, r28
     17e:	01 96       	adiw	r24, 0x01	; 1
     180:	68 e0       	ldi	r22, 0x08	; 8
     182:	70 e0       	ldi	r23, 0x00	; 0
     184:	0e 94 3d 09 	call	0x127a	; 0x127a <fgets>
     188:	00 97       	sbiw	r24, 0x00	; 0
     18a:	e9 f0       	breq	.+58     	; 0x1c6 <app_list+0x9a>
			break;
		np = get_node();
     18c:	0e 94 96 02 	call	0x52c	; 0x52c <get_node>
     190:	8c 01       	movw	r16, r24
		np->data = atoi(buf);
     192:	ce 01       	movw	r24, r28
     194:	01 96       	adiw	r24, 0x01	; 1
     196:	0e 94 db 08 	call	0x11b6	; 0x11b6 <atoi>
     19a:	f8 01       	movw	r30, r16
     19c:	91 83       	std	Z+1, r25	; 0x01
     19e:	80 83       	st	Z, r24
		switch(how) {
     1a0:	f8 e6       	ldi	r31, 0x68	; 104
     1a2:	ff 16       	cp	r15, r31
     1a4:	21 f0       	breq	.+8      	; 0x1ae <app_list+0x82>
     1a6:	84 e7       	ldi	r24, 0x74	; 116
     1a8:	f8 16       	cp	r15, r24
     1aa:	49 f4       	brne	.+18     	; 0x1be <app_list+0x92>
     1ac:	04 c0       	rjmp	.+8      	; 0x1b6 <app_list+0x8a>
			case 'h' : insert_node_head(np); break;
     1ae:	c8 01       	movw	r24, r16
     1b0:	0e 94 9e 02 	call	0x53c	; 0x53c <insert_node_head>
     1b4:	d5 cf       	rjmp	.-86     	; 0x160 <app_list+0x34>
			case 't' : insert_node_tail(np); break;
     1b6:	c8 01       	movw	r24, r16
     1b8:	0e 94 b3 02 	call	0x566	; 0x566 <insert_node_tail>
     1bc:	d1 cf       	rjmp	.-94     	; 0x160 <app_list+0x34>
			default  : insert_node_ascn(np);
     1be:	c8 01       	movw	r24, r16
     1c0:	0e 94 c7 02 	call	0x58e	; 0x58e <insert_node_ascn>
     1c4:	cd cf       	rjmp	.-102    	; 0x160 <app_list+0x34>
		}
	}
	tour_list();
     1c6:	0e 94 fe 02 	call	0x5fc	; 0x5fc <tour_list>
	free_list();
     1ca:	0e 94 2b 03 	call	0x656	; 0x656 <free_list>
}
     1ce:	28 96       	adiw	r28, 0x08	; 8
     1d0:	0f b6       	in	r0, 0x3f	; 63
     1d2:	f8 94       	cli
     1d4:	de bf       	out	0x3e, r29	; 62
     1d6:	0f be       	out	0x3f, r0	; 63
     1d8:	cd bf       	out	0x3d, r28	; 61
     1da:	df 91       	pop	r29
     1dc:	cf 91       	pop	r28
     1de:	1f 91       	pop	r17
     1e0:	0f 91       	pop	r16
     1e2:	ff 90       	pop	r15
     1e4:	df 90       	pop	r13
     1e6:	cf 90       	pop	r12
     1e8:	08 95       	ret

000001ea <is_prime>:
// app_prime.c
#include <stdio.h>
#include <stdlib.h>
#include "app_prime.h"

int is_prime(int n) {
     1ea:	cf 93       	push	r28
     1ec:	df 93       	push	r29
     1ee:	fc 01       	movw	r30, r24
    int i;
	for(i = 2; i <= n/2; i++){
     1f0:	62 e0       	ldi	r22, 0x02	; 2
     1f2:	70 e0       	ldi	r23, 0x00	; 0
     1f4:	0e 94 85 07 	call	0xf0a	; 0xf0a <__divmodhi4>
     1f8:	eb 01       	movw	r28, r22
     1fa:	22 e0       	ldi	r18, 0x02	; 2
     1fc:	30 e0       	ldi	r19, 0x00	; 0
     1fe:	08 c0       	rjmp	.+16     	; 0x210 <is_prime+0x26>
		if((n % i) == 0) 
     200:	cf 01       	movw	r24, r30
     202:	b9 01       	movw	r22, r18
     204:	0e 94 85 07 	call	0xf0a	; 0xf0a <__divmodhi4>
     208:	00 97       	sbiw	r24, 0x00	; 0
     20a:	41 f0       	breq	.+16     	; 0x21c <is_prime+0x32>
#include <stdlib.h>
#include "app_prime.h"

int is_prime(int n) {
    int i;
	for(i = 2; i <= n/2; i++){
     20c:	2f 5f       	subi	r18, 0xFF	; 255
     20e:	3f 4f       	sbci	r19, 0xFF	; 255
     210:	c2 17       	cp	r28, r18
     212:	d3 07       	cpc	r29, r19
     214:	ac f7       	brge	.-22     	; 0x200 <is_prime+0x16>
		if((n % i) == 0) 
			return(0);
	}
	return(1);
     216:	81 e0       	ldi	r24, 0x01	; 1
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	02 c0       	rjmp	.+4      	; 0x220 <is_prime+0x36>

int is_prime(int n) {
    int i;
	for(i = 2; i <= n/2; i++){
		if((n % i) == 0) 
			return(0);
     21c:	80 e0       	ldi	r24, 0x00	; 0
     21e:	90 e0       	ldi	r25, 0x00	; 0
	}
	return(1);
}
     220:	df 91       	pop	r29
     222:	cf 91       	pop	r28
     224:	08 95       	ret

00000226 <app_prime>:

void app_prime(char *ap) {
     226:	cf 92       	push	r12
     228:	df 92       	push	r13
     22a:	ef 92       	push	r14
     22c:	ff 92       	push	r15
     22e:	0f 93       	push	r16
     230:	1f 93       	push	r17
     232:	cf 93       	push	r28
     234:	df 93       	push	r29
    int t = 2000, count = 0, n;

	if(ap) t = atoi(ap);
     236:	00 97       	sbiw	r24, 0x00	; 0
     238:	21 f0       	breq	.+8      	; 0x242 <app_prime+0x1c>
     23a:	0e 94 db 08 	call	0x11b6	; 0x11b6 <atoi>
     23e:	7c 01       	movw	r14, r24
     240:	04 c0       	rjmp	.+8      	; 0x24a <app_prime+0x24>
	}
	return(1);
}

void app_prime(char *ap) {
    int t = 2000, count = 0, n;
     242:	90 ed       	ldi	r25, 0xD0	; 208
     244:	e9 2e       	mov	r14, r25
     246:	97 e0       	ldi	r25, 0x07	; 7
     248:	f9 2e       	mov	r15, r25

	if(ap) t = atoi(ap);

	for (n = 2; n <= t; n++){
     24a:	c2 e0       	ldi	r28, 0x02	; 2
     24c:	d0 e0       	ldi	r29, 0x00	; 0
	}
	return(1);
}

void app_prime(char *ap) {
    int t = 2000, count = 0, n;
     24e:	00 e0       	ldi	r16, 0x00	; 0
     250:	10 e0       	ldi	r17, 0x00	; 0
	if(ap) t = atoi(ap);

	for (n = 2; n <= t; n++){
		if(is_prime(n)) {
		    count++;
			printf("%d is a prime number!!!\n", n);
     252:	83 e0       	ldi	r24, 0x03	; 3
     254:	c8 2e       	mov	r12, r24
     256:	82 e0       	ldi	r24, 0x02	; 2
     258:	d8 2e       	mov	r13, r24
void app_prime(char *ap) {
    int t = 2000, count = 0, n;

	if(ap) t = atoi(ap);

	for (n = 2; n <= t; n++){
     25a:	16 c0       	rjmp	.+44     	; 0x288 <app_prime+0x62>
		if(is_prime(n)) {
     25c:	ce 01       	movw	r24, r28
     25e:	0e 94 f5 00 	call	0x1ea	; 0x1ea <is_prime>
     262:	00 97       	sbiw	r24, 0x00	; 0
     264:	81 f0       	breq	.+32     	; 0x286 <app_prime+0x60>
		    count++;
     266:	0f 5f       	subi	r16, 0xFF	; 255
     268:	1f 4f       	sbci	r17, 0xFF	; 255
			printf("%d is a prime number!!!\n", n);
     26a:	00 d0       	rcall	.+0      	; 0x26c <app_prime+0x46>
     26c:	0f 92       	push	r0
     26e:	ed b7       	in	r30, 0x3d	; 61
     270:	fe b7       	in	r31, 0x3e	; 62
     272:	d2 82       	std	Z+2, r13	; 0x02
     274:	c1 82       	std	Z+1, r12	; 0x01
     276:	d4 83       	std	Z+4, r29	; 0x04
     278:	c3 83       	std	Z+3, r28	; 0x03
     27a:	0e 94 97 09 	call	0x132e	; 0x132e <printf>
     27e:	0f 90       	pop	r0
     280:	0f 90       	pop	r0
     282:	0f 90       	pop	r0
     284:	0f 90       	pop	r0
void app_prime(char *ap) {
    int t = 2000, count = 0, n;

	if(ap) t = atoi(ap);

	for (n = 2; n <= t; n++){
     286:	21 96       	adiw	r28, 0x01	; 1
     288:	ec 16       	cp	r14, r28
     28a:	fd 06       	cpc	r15, r29
     28c:	3c f7       	brge	.-50     	; 0x25c <app_prime+0x36>
		if(is_prime(n)) {
		    count++;
			printf("%d is a prime number!!!\n", n);
		}
	}
	printf("count=%d\n", count);
     28e:	00 d0       	rcall	.+0      	; 0x290 <app_prime+0x6a>
     290:	0f 92       	push	r0
     292:	8c e1       	ldi	r24, 0x1C	; 28
     294:	92 e0       	ldi	r25, 0x02	; 2
     296:	ed b7       	in	r30, 0x3d	; 61
     298:	fe b7       	in	r31, 0x3e	; 62
     29a:	92 83       	std	Z+2, r25	; 0x02
     29c:	81 83       	std	Z+1, r24	; 0x01
     29e:	14 83       	std	Z+4, r17	; 0x04
     2a0:	03 83       	std	Z+3, r16	; 0x03
     2a2:	0e 94 97 09 	call	0x132e	; 0x132e <printf>
     2a6:	0f 90       	pop	r0
     2a8:	0f 90       	pop	r0
     2aa:	0f 90       	pop	r0
     2ac:	0f 90       	pop	r0
}
     2ae:	df 91       	pop	r29
     2b0:	cf 91       	pop	r28
     2b2:	1f 91       	pop	r17
     2b4:	0f 91       	pop	r16
     2b6:	ff 90       	pop	r15
     2b8:	ef 90       	pop	r14
     2ba:	df 90       	pop	r13
     2bc:	cf 90       	pop	r12
     2be:	08 95       	ret

000002c0 <task_prime>:

void task_prime(char *ap) {
     2c0:	cf 92       	push	r12
     2c2:	df 92       	push	r13
     2c4:	ef 92       	push	r14
     2c6:	ff 92       	push	r15
     2c8:	0f 93       	push	r16
     2ca:	1f 93       	push	r17
     2cc:	cf 93       	push	r28
     2ce:	df 93       	push	r29
	int n, t = 2000, count = 0;

	if (ap && *ap) t = atoi(ap);
     2d0:	00 97       	sbiw	r24, 0x00	; 0
     2d2:	41 f0       	breq	.+16     	; 0x2e4 <task_prime+0x24>
     2d4:	fc 01       	movw	r30, r24
     2d6:	20 81       	ld	r18, Z
     2d8:	22 23       	and	r18, r18
     2da:	21 f0       	breq	.+8      	; 0x2e4 <task_prime+0x24>
     2dc:	0e 94 db 08 	call	0x11b6	; 0x11b6 <atoi>
     2e0:	8c 01       	movw	r16, r24
     2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <task_prime+0x28>
	}
	printf("count=%d\n", count);
}

void task_prime(char *ap) {
	int n, t = 2000, count = 0;
     2e4:	00 ed       	ldi	r16, 0xD0	; 208
     2e6:	17 e0       	ldi	r17, 0x07	; 7
     2e8:	ee 24       	eor	r14, r14
     2ea:	ff 24       	eor	r15, r15

	if (ap && *ap) t = atoi(ap);
	for (n = 2; n <= t; n++){
     2ec:	c2 e0       	ldi	r28, 0x02	; 2
     2ee:	d0 e0       	ldi	r29, 0x00	; 0
		if(is_prime(n)) {
		    count++;
			printf("%d is a prime number!!!\n", n);
     2f0:	23 e0       	ldi	r18, 0x03	; 3
     2f2:	c2 2e       	mov	r12, r18
     2f4:	22 e0       	ldi	r18, 0x02	; 2
     2f6:	d2 2e       	mov	r13, r18

void task_prime(char *ap) {
	int n, t = 2000, count = 0;

	if (ap && *ap) t = atoi(ap);
	for (n = 2; n <= t; n++){
     2f8:	17 c0       	rjmp	.+46     	; 0x328 <task_prime+0x68>
		if(is_prime(n)) {
     2fa:	ce 01       	movw	r24, r28
     2fc:	0e 94 f5 00 	call	0x1ea	; 0x1ea <is_prime>
     300:	00 97       	sbiw	r24, 0x00	; 0
     302:	89 f0       	breq	.+34     	; 0x326 <task_prime+0x66>
		    count++;
     304:	08 94       	sec
     306:	e1 1c       	adc	r14, r1
     308:	f1 1c       	adc	r15, r1
			printf("%d is a prime number!!!\n", n);
     30a:	00 d0       	rcall	.+0      	; 0x30c <task_prime+0x4c>
     30c:	0f 92       	push	r0
     30e:	ed b7       	in	r30, 0x3d	; 61
     310:	fe b7       	in	r31, 0x3e	; 62
     312:	d2 82       	std	Z+2, r13	; 0x02
     314:	c1 82       	std	Z+1, r12	; 0x01
     316:	d4 83       	std	Z+4, r29	; 0x04
     318:	c3 83       	std	Z+3, r28	; 0x03
     31a:	0e 94 97 09 	call	0x132e	; 0x132e <printf>
     31e:	0f 90       	pop	r0
     320:	0f 90       	pop	r0
     322:	0f 90       	pop	r0
     324:	0f 90       	pop	r0

void task_prime(char *ap) {
	int n, t = 2000, count = 0;

	if (ap && *ap) t = atoi(ap);
	for (n = 2; n <= t; n++){
     326:	21 96       	adiw	r28, 0x01	; 1
     328:	0c 17       	cp	r16, r28
     32a:	1d 07       	cpc	r17, r29
     32c:	34 f7       	brge	.-52     	; 0x2fa <task_prime+0x3a>
		if(is_prime(n)) {
		    count++;
			printf("%d is a prime number!!!\n", n);
		}
	}
	printf("count=%d\n", count);
     32e:	00 d0       	rcall	.+0      	; 0x330 <task_prime+0x70>
     330:	0f 92       	push	r0
     332:	8c e1       	ldi	r24, 0x1C	; 28
     334:	92 e0       	ldi	r25, 0x02	; 2
     336:	ed b7       	in	r30, 0x3d	; 61
     338:	fe b7       	in	r31, 0x3e	; 62
     33a:	92 83       	std	Z+2, r25	; 0x02
     33c:	81 83       	std	Z+1, r24	; 0x01
     33e:	f4 82       	std	Z+4, r15	; 0x04
     340:	e3 82       	std	Z+3, r14	; 0x03
     342:	0e 94 97 09 	call	0x132e	; 0x132e <printf>
	printf("$ ");
     346:	0f 90       	pop	r0
     348:	0f 90       	pop	r0
     34a:	86 e2       	ldi	r24, 0x26	; 38
     34c:	92 e0       	ldi	r25, 0x02	; 2
     34e:	ed b7       	in	r30, 0x3d	; 61
     350:	fe b7       	in	r31, 0x3e	; 62
     352:	92 83       	std	Z+2, r25	; 0x02
     354:	81 83       	std	Z+1, r24	; 0x01
     356:	0e 94 97 09 	call	0x132e	; 0x132e <printf>
     35a:	0f 90       	pop	r0
     35c:	0f 90       	pop	r0
}
     35e:	df 91       	pop	r29
     360:	cf 91       	pop	r28
     362:	1f 91       	pop	r17
     364:	0f 91       	pop	r16
     366:	ff 90       	pop	r15
     368:	ef 90       	pop	r14
     36a:	df 90       	pop	r13
     36c:	cf 90       	pop	r12
     36e:	08 95       	ret

00000370 <q_init>:
#include "cir_queue.h"

char qi[QI_SIZE], qo[QO_SIZE];
int fi, ri, fo, ro;
void q_init(void) {
	fi = ri = fo = ro = 0;
     370:	10 92 40 03 	sts	0x0340, r1
     374:	10 92 3f 03 	sts	0x033F, r1
     378:	10 92 3e 03 	sts	0x033E, r1
     37c:	10 92 3d 03 	sts	0x033D, r1
     380:	10 92 42 03 	sts	0x0342, r1
     384:	10 92 41 03 	sts	0x0341, r1
     388:	10 92 fc 02 	sts	0x02FC, r1
     38c:	10 92 fb 02 	sts	0x02FB, r1
}
     390:	08 95       	ret

00000392 <qi_insert>:
int qi_insert(char ch) {
     392:	48 2f       	mov	r20, r24
	if((ri + 1) % QI_SIZE == fi)
     394:	20 91 41 03 	lds	r18, 0x0341
     398:	30 91 42 03 	lds	r19, 0x0342
     39c:	2f 5f       	subi	r18, 0xFF	; 255
     39e:	3f 4f       	sbci	r19, 0xFF	; 255
     3a0:	c9 01       	movw	r24, r18
     3a2:	60 e4       	ldi	r22, 0x40	; 64
     3a4:	70 e0       	ldi	r23, 0x00	; 0
     3a6:	0e 94 85 07 	call	0xf0a	; 0xf0a <__divmodhi4>
     3aa:	9c 01       	movw	r18, r24
     3ac:	80 91 fb 02 	lds	r24, 0x02FB
     3b0:	90 91 fc 02 	lds	r25, 0x02FC
     3b4:	28 17       	cp	r18, r24
     3b6:	39 07       	cpc	r19, r25
     3b8:	59 f0       	breq	.+22     	; 0x3d0 <qi_insert+0x3e>
		return (0);
	ri = (ri + 1) % QI_SIZE;
     3ba:	30 93 42 03 	sts	0x0342, r19
     3be:	20 93 41 03 	sts	0x0341, r18
	qi[ri] = ch;
     3c2:	2d 5b       	subi	r18, 0xBD	; 189
     3c4:	3c 4f       	sbci	r19, 0xFC	; 252
     3c6:	f9 01       	movw	r30, r18
     3c8:	40 83       	st	Z, r20
	return(1);
     3ca:	81 e0       	ldi	r24, 0x01	; 1
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	08 95       	ret
void q_init(void) {
	fi = ri = fo = ro = 0;
}
int qi_insert(char ch) {
	if((ri + 1) % QI_SIZE == fi)
		return (0);
     3d0:	80 e0       	ldi	r24, 0x00	; 0
     3d2:	90 e0       	ldi	r25, 0x00	; 0
	ri = (ri + 1) % QI_SIZE;
	qi[ri] = ch;
	return(1);
}
     3d4:	08 95       	ret

000003d6 <qi_delete>:
int qi_delete(void) {
	if( ri == fi)
     3d6:	80 91 fb 02 	lds	r24, 0x02FB
     3da:	90 91 fc 02 	lds	r25, 0x02FC
     3de:	20 91 41 03 	lds	r18, 0x0341
     3e2:	30 91 42 03 	lds	r19, 0x0342
     3e6:	28 17       	cp	r18, r24
     3e8:	39 07       	cpc	r19, r25
     3ea:	79 f0       	breq	.+30     	; 0x40a <qi_delete+0x34>
		return(0);
    fi = (fi+1) % QI_SIZE;
     3ec:	01 96       	adiw	r24, 0x01	; 1
     3ee:	60 e4       	ldi	r22, 0x40	; 64
     3f0:	70 e0       	ldi	r23, 0x00	; 0
     3f2:	0e 94 85 07 	call	0xf0a	; 0xf0a <__divmodhi4>
     3f6:	90 93 fc 02 	sts	0x02FC, r25
     3fa:	80 93 fb 02 	sts	0x02FB, r24
	return(qi[fi]);
     3fe:	8d 5b       	subi	r24, 0xBD	; 189
     400:	9c 4f       	sbci	r25, 0xFC	; 252
     402:	fc 01       	movw	r30, r24
     404:	80 81       	ld	r24, Z
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	08 95       	ret
	qi[ri] = ch;
	return(1);
}
int qi_delete(void) {
	if( ri == fi)
		return(0);
     40a:	80 e0       	ldi	r24, 0x00	; 0
     40c:	90 e0       	ldi	r25, 0x00	; 0
    fi = (fi+1) % QI_SIZE;
	return(qi[fi]);
}
     40e:	08 95       	ret

00000410 <qo_insert>:
int qo_insert(char ch) {
     410:	48 2f       	mov	r20, r24
	if((ro + 1) % QO_SIZE == fo)
     412:	20 91 3f 03 	lds	r18, 0x033F
     416:	30 91 40 03 	lds	r19, 0x0340
     41a:	2f 5f       	subi	r18, 0xFF	; 255
     41c:	3f 4f       	sbci	r19, 0xFF	; 255
     41e:	c9 01       	movw	r24, r18
     420:	60 e4       	ldi	r22, 0x40	; 64
     422:	70 e0       	ldi	r23, 0x00	; 0
     424:	0e 94 85 07 	call	0xf0a	; 0xf0a <__divmodhi4>
     428:	9c 01       	movw	r18, r24
     42a:	80 91 3d 03 	lds	r24, 0x033D
     42e:	90 91 3e 03 	lds	r25, 0x033E
     432:	28 17       	cp	r18, r24
     434:	39 07       	cpc	r19, r25
     436:	59 f0       	breq	.+22     	; 0x44e <qo_insert+0x3e>
		return (0);
	ro = (ro + 1) % QO_SIZE;
     438:	30 93 40 03 	sts	0x0340, r19
     43c:	20 93 3f 03 	sts	0x033F, r18
	qo[ro] = ch;
     440:	23 50       	subi	r18, 0x03	; 3
     442:	3d 4f       	sbci	r19, 0xFD	; 253
     444:	f9 01       	movw	r30, r18
     446:	40 83       	st	Z, r20
	return(1);
     448:	81 e0       	ldi	r24, 0x01	; 1
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	08 95       	ret
    fi = (fi+1) % QI_SIZE;
	return(qi[fi]);
}
int qo_insert(char ch) {
	if((ro + 1) % QO_SIZE == fo)
		return (0);
     44e:	80 e0       	ldi	r24, 0x00	; 0
     450:	90 e0       	ldi	r25, 0x00	; 0
	ro = (ro + 1) % QO_SIZE;
	qo[ro] = ch;
	return(1);
}
     452:	08 95       	ret

00000454 <qo_delete>:
int qo_delete(void) {
	if( ro == fo)
     454:	80 91 3d 03 	lds	r24, 0x033D
     458:	90 91 3e 03 	lds	r25, 0x033E
     45c:	20 91 3f 03 	lds	r18, 0x033F
     460:	30 91 40 03 	lds	r19, 0x0340
     464:	28 17       	cp	r18, r24
     466:	39 07       	cpc	r19, r25
     468:	79 f0       	breq	.+30     	; 0x488 <qo_delete+0x34>
		return(0);
    fo = (fo+1) % QO_SIZE;
     46a:	01 96       	adiw	r24, 0x01	; 1
     46c:	60 e4       	ldi	r22, 0x40	; 64
     46e:	70 e0       	ldi	r23, 0x00	; 0
     470:	0e 94 85 07 	call	0xf0a	; 0xf0a <__divmodhi4>
     474:	90 93 3e 03 	sts	0x033E, r25
     478:	80 93 3d 03 	sts	0x033D, r24
	return(qo[fo]);
     47c:	83 50       	subi	r24, 0x03	; 3
     47e:	9d 4f       	sbci	r25, 0xFD	; 253
     480:	fc 01       	movw	r30, r24
     482:	80 81       	ld	r24, Z
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	08 95       	ret
	qo[ro] = ch;
	return(1);
}
int qo_delete(void) {
	if( ro == fo)
		return(0);
     488:	80 e0       	ldi	r24, 0x00	; 0
     48a:	90 e0       	ldi	r25, 0x00	; 0
    fo = (fo+1) % QO_SIZE;
	return(qo[fo]);
}
     48c:	08 95       	ret

0000048e <qi_peek>:

int qi_peek() {
	if (fi == ri) return 0;
     48e:	80 91 fb 02 	lds	r24, 0x02FB
     492:	90 91 fc 02 	lds	r25, 0x02FC
     496:	20 91 41 03 	lds	r18, 0x0341
     49a:	30 91 42 03 	lds	r19, 0x0342
     49e:	82 17       	cp	r24, r18
     4a0:	93 07       	cpc	r25, r19
     4a2:	59 f0       	breq	.+22     	; 0x4ba <qi_peek+0x2c>
	else 
		return (qi[(fi + 1) % QI_SIZE]);
     4a4:	01 96       	adiw	r24, 0x01	; 1
     4a6:	60 e4       	ldi	r22, 0x40	; 64
     4a8:	70 e0       	ldi	r23, 0x00	; 0
     4aa:	0e 94 85 07 	call	0xf0a	; 0xf0a <__divmodhi4>
     4ae:	8d 5b       	subi	r24, 0xBD	; 189
     4b0:	9c 4f       	sbci	r25, 0xFC	; 252
     4b2:	fc 01       	movw	r30, r24
     4b4:	80 81       	ld	r24, Z
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	08 95       	ret
    fo = (fo+1) % QO_SIZE;
	return(qo[fo]);
}

int qi_peek() {
	if (fi == ri) return 0;
     4ba:	80 e0       	ldi	r24, 0x00	; 0
     4bc:	90 e0       	ldi	r25, 0x00	; 0
	else 
		return (qi[(fi + 1) % QI_SIZE]);
}
     4be:	08 95       	ret

000004c0 <led_init>:
#include "led.h"

static uint8_t Leds;

void led_init(void) {
    DDRL = PORTL = 0xff;
     4c0:	8f ef       	ldi	r24, 0xFF	; 255
     4c2:	80 93 0b 01 	sts	0x010B, r24
     4c6:	80 93 0a 01 	sts	0x010A, r24
} 
     4ca:	08 95       	ret

000004cc <led_on_all>:
void led_on_all(void) {
    Leds = PORTL = 0x00;
     4cc:	10 92 0b 01 	sts	0x010B, r1
     4d0:	10 92 f4 02 	sts	0x02F4, r1
}
     4d4:	08 95       	ret

000004d6 <led_off_all>:
void led_off_all(void) {
    Leds = PORTL = 0xff;
     4d6:	8f ef       	ldi	r24, 0xFF	; 255
     4d8:	80 93 0b 01 	sts	0x010B, r24
     4dc:	80 93 f4 02 	sts	0x02F4, r24
}
     4e0:	08 95       	ret

000004e2 <led_on>:
void led_on(uint8_t led_no) {
    Leds &= ~(1 << led_no);
     4e2:	21 e0       	ldi	r18, 0x01	; 1
     4e4:	30 e0       	ldi	r19, 0x00	; 0
     4e6:	02 c0       	rjmp	.+4      	; 0x4ec <led_on+0xa>
     4e8:	22 0f       	add	r18, r18
     4ea:	33 1f       	adc	r19, r19
     4ec:	8a 95       	dec	r24
     4ee:	e2 f7       	brpl	.-8      	; 0x4e8 <led_on+0x6>
     4f0:	20 95       	com	r18
     4f2:	80 91 f4 02 	lds	r24, 0x02F4
     4f6:	28 23       	and	r18, r24
     4f8:	20 93 f4 02 	sts	0x02F4, r18
	PORTL = Leds;
     4fc:	20 93 0b 01 	sts	0x010B, r18
}
     500:	08 95       	ret

00000502 <led_off>:
void led_off(uint8_t led_no) {
	Leds |= (1 << led_no);
     502:	21 e0       	ldi	r18, 0x01	; 1
     504:	30 e0       	ldi	r19, 0x00	; 0
     506:	02 c0       	rjmp	.+4      	; 0x50c <led_off+0xa>
     508:	22 0f       	add	r18, r18
     50a:	33 1f       	adc	r19, r19
     50c:	8a 95       	dec	r24
     50e:	e2 f7       	brpl	.-8      	; 0x508 <led_off+0x6>
     510:	80 91 f4 02 	lds	r24, 0x02F4
     514:	82 2b       	or	r24, r18
     516:	80 93 f4 02 	sts	0x02F4, r24
	PORTL = Leds;
     51a:	80 93 0b 01 	sts	0x010B, r24
}
     51e:	08 95       	ret

00000520 <led_set>:
void led_set(uint8_t led_mask) {
    Leds = ~led_mask;
     520:	80 95       	com	r24
     522:	80 93 f4 02 	sts	0x02F4, r24
	PORTL = Leds;
     526:	80 93 0b 01 	sts	0x010B, r24
}
     52a:	08 95       	ret

0000052c <get_node>:
struct node *Head = NULL;

struct node *get_node() {
	struct node *cp;
	
	cp = (struct node *)malloc(sizeof(struct node));
     52c:	84 e0       	ldi	r24, 0x04	; 4
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	0e 94 ac 07 	call	0xf58	; 0xf58 <malloc>
	return cp;
}
     534:	08 95       	ret

00000536 <free_node>:

void free_node(struct node *np) {
	free(np);
     536:	0e 94 42 08 	call	0x1084	; 0x1084 <free>
	np = NULL;
}
     53a:	08 95       	ret

0000053c <insert_node_head>:

void insert_node_head(struct node *np) {
     53c:	fc 01       	movw	r30, r24
	if(!Head) {
     53e:	80 91 f5 02 	lds	r24, 0x02F5
     542:	90 91 f6 02 	lds	r25, 0x02F6
     546:	00 97       	sbiw	r24, 0x00	; 0
     548:	39 f4       	brne	.+14     	; 0x558 <insert_node_head+0x1c>
		Head = np;
     54a:	f0 93 f6 02 	sts	0x02F6, r31
     54e:	e0 93 f5 02 	sts	0x02F5, r30
		np->link = NULL;
     552:	13 82       	std	Z+3, r1	; 0x03
     554:	12 82       	std	Z+2, r1	; 0x02
     556:	08 95       	ret
	} else {
		np->link = Head;
     558:	93 83       	std	Z+3, r25	; 0x03
     55a:	82 83       	std	Z+2, r24	; 0x02
		Head = np;
     55c:	f0 93 f6 02 	sts	0x02F6, r31
     560:	e0 93 f5 02 	sts	0x02F5, r30
     564:	08 95       	ret

00000566 <insert_node_tail>:
	}
}
void insert_node_tail(struct node *np){
	struct node *cp;
	if(!Head)
     566:	e0 91 f5 02 	lds	r30, 0x02F5
     56a:	f0 91 f6 02 	lds	r31, 0x02F6
     56e:	30 97       	sbiw	r30, 0x00	; 0
     570:	31 f4       	brne	.+12     	; 0x57e <insert_node_tail+0x18>
		Head = np;
     572:	90 93 f6 02 	sts	0x02F6, r25
     576:	80 93 f5 02 	sts	0x02F5, r24
     57a:	08 95       	ret
	else {
		for (cp = Head; cp->link != NULL; cp = cp->link);
     57c:	f9 01       	movw	r30, r18
     57e:	22 81       	ldd	r18, Z+2	; 0x02
     580:	33 81       	ldd	r19, Z+3	; 0x03
     582:	21 15       	cp	r18, r1
     584:	31 05       	cpc	r19, r1
     586:	d1 f7       	brne	.-12     	; 0x57c <insert_node_tail+0x16>
		cp->link = np;
     588:	93 83       	std	Z+3, r25	; 0x03
     58a:	82 83       	std	Z+2, r24	; 0x02
     58c:	08 95       	ret

0000058e <insert_node_ascn>:
	}
}
void insert_node_ascn(struct node *np) {
     58e:	cf 93       	push	r28
     590:	df 93       	push	r29
     592:	fc 01       	movw	r30, r24
	struct node *cp, *pp;
	if(!Head) {
     594:	20 91 f5 02 	lds	r18, 0x02F5
     598:	30 91 f6 02 	lds	r19, 0x02F6
     59c:	21 15       	cp	r18, r1
     59e:	31 05       	cpc	r19, r1
     5a0:	31 f0       	breq	.+12     	; 0x5ae <insert_node_ascn+0x20>
		Head = np;
		np->link = NULL;
	} else {
		for (cp = Head, pp = NULL; cp != NULL && cp->data < np->data;
     5a2:	40 81       	ld	r20, Z
     5a4:	51 81       	ldd	r21, Z+1	; 0x01
     5a6:	d9 01       	movw	r26, r18
     5a8:	c0 e0       	ldi	r28, 0x00	; 0
     5aa:	d0 e0       	ldi	r29, 0x00	; 0
     5ac:	0f c0       	rjmp	.+30     	; 0x5cc <insert_node_ascn+0x3e>
	}
}
void insert_node_ascn(struct node *np) {
	struct node *cp, *pp;
	if(!Head) {
		Head = np;
     5ae:	90 93 f6 02 	sts	0x02F6, r25
     5b2:	80 93 f5 02 	sts	0x02F5, r24
		np->link = NULL;
     5b6:	13 82       	std	Z+3, r1	; 0x03
     5b8:	12 82       	std	Z+2, r1	; 0x02
     5ba:	1d c0       	rjmp	.+58     	; 0x5f6 <insert_node_ascn+0x68>
	} else {
		for (cp = Head, pp = NULL; cp != NULL && cp->data < np->data;
												pp = cp, cp = cp->link);
     5bc:	12 96       	adiw	r26, 0x02	; 2
     5be:	8d 91       	ld	r24, X+
     5c0:	9c 91       	ld	r25, X
     5c2:	13 97       	sbiw	r26, 0x03	; 3
	struct node *cp, *pp;
	if(!Head) {
		Head = np;
		np->link = NULL;
	} else {
		for (cp = Head, pp = NULL; cp != NULL && cp->data < np->data;
     5c4:	ed 01       	movw	r28, r26
     5c6:	00 97       	sbiw	r24, 0x00	; 0
     5c8:	39 f0       	breq	.+14     	; 0x5d8 <insert_node_ascn+0x4a>
												pp = cp, cp = cp->link);
     5ca:	dc 01       	movw	r26, r24
	struct node *cp, *pp;
	if(!Head) {
		Head = np;
		np->link = NULL;
	} else {
		for (cp = Head, pp = NULL; cp != NULL && cp->data < np->data;
     5cc:	8d 91       	ld	r24, X+
     5ce:	9c 91       	ld	r25, X
     5d0:	11 97       	sbiw	r26, 0x01	; 1
     5d2:	84 17       	cp	r24, r20
     5d4:	95 07       	cpc	r25, r21
     5d6:	94 f3       	brlt	.-28     	; 0x5bc <insert_node_ascn+0x2e>
												pp = cp, cp = cp->link);
		
		if(pp == NULL) {
     5d8:	20 97       	sbiw	r28, 0x00	; 0
     5da:	39 f4       	brne	.+14     	; 0x5ea <insert_node_ascn+0x5c>
			np->link = Head;
     5dc:	33 83       	std	Z+3, r19	; 0x03
     5de:	22 83       	std	Z+2, r18	; 0x02
			Head = np;
     5e0:	f0 93 f6 02 	sts	0x02F6, r31
     5e4:	e0 93 f5 02 	sts	0x02F5, r30
     5e8:	06 c0       	rjmp	.+12     	; 0x5f6 <insert_node_ascn+0x68>
		} else {
			np->link = pp->link;
     5ea:	8a 81       	ldd	r24, Y+2	; 0x02
     5ec:	9b 81       	ldd	r25, Y+3	; 0x03
     5ee:	93 83       	std	Z+3, r25	; 0x03
     5f0:	82 83       	std	Z+2, r24	; 0x02
			pp->link = np;
     5f2:	fb 83       	std	Y+3, r31	; 0x03
     5f4:	ea 83       	std	Y+2, r30	; 0x02
		}
	}
}
     5f6:	df 91       	pop	r29
     5f8:	cf 91       	pop	r28
     5fa:	08 95       	ret

000005fc <tour_list>:

void tour_list() {
     5fc:	0f 93       	push	r16
     5fe:	1f 93       	push	r17
     600:	cf 93       	push	r28
     602:	df 93       	push	r29
	struct node *cp;

	printf("\n");
     604:	8a e0       	ldi	r24, 0x0A	; 10
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	0e 94 a9 09 	call	0x1352	; 0x1352 <putchar>
	for (cp = Head; cp !=NULL; cp = cp->link)
     60c:	c0 91 f5 02 	lds	r28, 0x02F5
     610:	d0 91 f6 02 	lds	r29, 0x02F6
		printf("-->%d ", cp->data);
     614:	09 e2       	ldi	r16, 0x29	; 41
     616:	12 e0       	ldi	r17, 0x02	; 2

void tour_list() {
	struct node *cp;

	printf("\n");
	for (cp = Head; cp !=NULL; cp = cp->link)
     618:	13 c0       	rjmp	.+38     	; 0x640 <tour_list+0x44>
		printf("-->%d ", cp->data);
     61a:	00 d0       	rcall	.+0      	; 0x61c <tour_list+0x20>
     61c:	0f 92       	push	r0
     61e:	ed b7       	in	r30, 0x3d	; 61
     620:	fe b7       	in	r31, 0x3e	; 62
     622:	12 83       	std	Z+2, r17	; 0x02
     624:	01 83       	std	Z+1, r16	; 0x01
     626:	88 81       	ld	r24, Y
     628:	99 81       	ldd	r25, Y+1	; 0x01
     62a:	94 83       	std	Z+4, r25	; 0x04
     62c:	83 83       	std	Z+3, r24	; 0x03
     62e:	0e 94 97 09 	call	0x132e	; 0x132e <printf>

void tour_list() {
	struct node *cp;

	printf("\n");
	for (cp = Head; cp !=NULL; cp = cp->link)
     632:	0a 80       	ldd	r0, Y+2	; 0x02
     634:	db 81       	ldd	r29, Y+3	; 0x03
     636:	c0 2d       	mov	r28, r0
     638:	0f 90       	pop	r0
     63a:	0f 90       	pop	r0
     63c:	0f 90       	pop	r0
     63e:	0f 90       	pop	r0
     640:	20 97       	sbiw	r28, 0x00	; 0
     642:	59 f7       	brne	.-42     	; 0x61a <tour_list+0x1e>
		printf("-->%d ", cp->data);
	printf("\n");
     644:	8a e0       	ldi	r24, 0x0A	; 10
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	0e 94 a9 09 	call	0x1352	; 0x1352 <putchar>
}
     64c:	df 91       	pop	r29
     64e:	cf 91       	pop	r28
     650:	1f 91       	pop	r17
     652:	0f 91       	pop	r16
     654:	08 95       	ret

00000656 <free_list>:

void free_list() {
	struct node *cp;

	for( ; Head != NULL; ) {
     656:	09 c0       	rjmp	.+18     	; 0x66a <free_list+0x14>
		cp = Head;
		Head = cp->link;
     658:	fc 01       	movw	r30, r24
     65a:	22 81       	ldd	r18, Z+2	; 0x02
     65c:	33 81       	ldd	r19, Z+3	; 0x03
     65e:	30 93 f6 02 	sts	0x02F6, r19
     662:	20 93 f5 02 	sts	0x02F5, r18
	cp = (struct node *)malloc(sizeof(struct node));
	return cp;
}

void free_node(struct node *np) {
	free(np);
     666:	0e 94 42 08 	call	0x1084	; 0x1084 <free>
}

void free_list() {
	struct node *cp;

	for( ; Head != NULL; ) {
     66a:	80 91 f5 02 	lds	r24, 0x02F5
     66e:	90 91 f6 02 	lds	r25, 0x02F6
     672:	00 97       	sbiw	r24, 0x00	; 0
     674:	89 f7       	brne	.-30     	; 0x658 <free_list+0x2>
		cp = Head;
		Head = cp->link;
		free_node(cp);
	}
}
     676:	08 95       	ret

00000678 <timer_init>:

struct timer *Thead = NULL;


void timer_init() {
	TCNT2 = 0;
     678:	10 92 b2 00 	sts	0x00B2, r1
	sbi(ASSR, AS2);
     67c:	e6 eb       	ldi	r30, 0xB6	; 182
     67e:	f0 e0       	ldi	r31, 0x00	; 0
     680:	80 81       	ld	r24, Z
     682:	80 62       	ori	r24, 0x20	; 32
     684:	80 83       	st	Z, r24
	sbi(TIMSK2, TOIE2);
     686:	e0 e7       	ldi	r30, 0x70	; 112
     688:	f0 e0       	ldi	r31, 0x00	; 0
     68a:	80 81       	ld	r24, Z
     68c:	81 60       	ori	r24, 0x01	; 1
     68e:	80 83       	st	Z, r24
	sbi(TCCR2B, CS20); sbi(TCCR2B, CS21);
     690:	e1 eb       	ldi	r30, 0xB1	; 177
     692:	f0 e0       	ldi	r31, 0x00	; 0
     694:	80 81       	ld	r24, Z
     696:	81 60       	ori	r24, 0x01	; 1
     698:	80 83       	st	Z, r24
     69a:	80 81       	ld	r24, Z
     69c:	82 60       	ori	r24, 0x02	; 2
     69e:	80 83       	st	Z, r24
}
     6a0:	08 95       	ret

000006a2 <timer_expire>:

void timer_expire(void) {
     6a2:	cf 93       	push	r28
     6a4:	df 93       	push	r29
	struct timer *tp;

	for ( ; Thead != NULL && !Thead->time; ) {
     6a6:	0d c0       	rjmp	.+26     	; 0x6c2 <timer_expire+0x20>
		tp = Thead, Thead = tp->link;
     6a8:	8c 85       	ldd	r24, Y+12	; 0x0c
     6aa:	9d 85       	ldd	r25, Y+13	; 0x0d
     6ac:	90 93 f8 02 	sts	0x02F8, r25
     6b0:	80 93 f7 02 	sts	0x02F7, r24

		task_insert(&tp->task);
     6b4:	ce 01       	movw	r24, r28
     6b6:	02 96       	adiw	r24, 0x02	; 2
     6b8:	0e 94 ce 05 	call	0xb9c	; 0xb9c <task_insert>
		free(tp);
     6bc:	ce 01       	movw	r24, r28
     6be:	0e 94 42 08 	call	0x1084	; 0x1084 <free>
}

void timer_expire(void) {
	struct timer *tp;

	for ( ; Thead != NULL && !Thead->time; ) {
     6c2:	c0 91 f7 02 	lds	r28, 0x02F7
     6c6:	d0 91 f8 02 	lds	r29, 0x02F8
     6ca:	20 97       	sbiw	r28, 0x00	; 0
     6cc:	21 f0       	breq	.+8      	; 0x6d6 <timer_expire+0x34>
     6ce:	88 81       	ld	r24, Y
     6d0:	99 81       	ldd	r25, Y+1	; 0x01
     6d2:	00 97       	sbiw	r24, 0x00	; 0
     6d4:	49 f3       	breq	.-46     	; 0x6a8 <timer_expire+0x6>
		tp = Thead, Thead = tp->link;

		task_insert(&tp->task);
		free(tp);
	}
}
     6d6:	df 91       	pop	r29
     6d8:	cf 91       	pop	r28
     6da:	08 95       	ret

000006dc <get_timer>:

struct timer *get_timer() {
	struct timer *tp;

	tp = (struct timer *) malloc(sizeof(*tp));
     6dc:	8e e0       	ldi	r24, 0x0E	; 14
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	0e 94 ac 07 	call	0xf58	; 0xf58 <malloc>
	return(tp);
}
     6e4:	08 95       	ret

000006e6 <insert_timer>:

void insert_timer(struct task *tskp, int ms) {
     6e6:	ef 92       	push	r14
     6e8:	ff 92       	push	r15
     6ea:	0f 93       	push	r16
     6ec:	1f 93       	push	r17
     6ee:	cf 93       	push	r28
     6f0:	df 93       	push	r29
     6f2:	f8 2e       	mov	r15, r24
     6f4:	e9 2e       	mov	r14, r25
     6f6:	8b 01       	movw	r16, r22
	int total;
	struct timer *tp, *cp, *pp;
	
	tp = get_timer();
     6f8:	0e 94 6e 03 	call	0x6dc	; 0x6dc <get_timer>
     6fc:	ec 01       	movw	r28, r24
	tp->task = *tskp;
     6fe:	dc 01       	movw	r26, r24
     700:	12 96       	adiw	r26, 0x02	; 2
     702:	ef 2d       	mov	r30, r15
     704:	fe 2d       	mov	r31, r14
     706:	8a e0       	ldi	r24, 0x0A	; 10
     708:	01 90       	ld	r0, Z+
     70a:	0d 92       	st	X+, r0
     70c:	81 50       	subi	r24, 0x01	; 1
     70e:	e1 f7       	brne	.-8      	; 0x708 <insert_timer+0x22>
	tp->time = ms;
     710:	19 83       	std	Y+1, r17	; 0x01
     712:	08 83       	st	Y, r16

	if (Thead == NULL) {
     714:	e0 91 f7 02 	lds	r30, 0x02F7
     718:	f0 91 f8 02 	lds	r31, 0x02F8
     71c:	30 97       	sbiw	r30, 0x00	; 0
     71e:	29 f4       	brne	.+10     	; 0x72a <insert_timer+0x44>
		Thead = tp, tp->link =NULL;
     720:	d0 93 f8 02 	sts	0x02F8, r29
     724:	c0 93 f7 02 	sts	0x02F7, r28
     728:	2f c0       	rjmp	.+94     	; 0x788 <insert_timer+0xa2>
	
	tp = get_timer();
	tp->task = *tskp;
	tp->time = ms;

	if (Thead == NULL) {
     72a:	40 e0       	ldi	r20, 0x00	; 0
     72c:	50 e0       	ldi	r21, 0x00	; 0
     72e:	20 e0       	ldi	r18, 0x00	; 0
     730:	30 e0       	ldi	r19, 0x00	; 0
     732:	01 c0       	rjmp	.+2      	; 0x736 <insert_timer+0x50>
		Thead = tp, tp->link =NULL;
		return ;
	}

	pp = NULL, total = 0;
	for (cp = Thead; cp; cp = cp->link) {
     734:	fd 01       	movw	r30, r26
		total += cp->time;
     736:	80 81       	ld	r24, Z
     738:	91 81       	ldd	r25, Z+1	; 0x01
     73a:	28 0f       	add	r18, r24
     73c:	39 1f       	adc	r19, r25
		if (total >= ms) break;
     73e:	20 17       	cp	r18, r16
     740:	31 07       	cpc	r19, r17
     742:	34 f4       	brge	.+12     	; 0x750 <insert_timer+0x6a>
		Thead = tp, tp->link =NULL;
		return ;
	}

	pp = NULL, total = 0;
	for (cp = Thead; cp; cp = cp->link) {
     744:	a4 85       	ldd	r26, Z+12	; 0x0c
     746:	b5 85       	ldd	r27, Z+13	; 0x0d
     748:	af 01       	movw	r20, r30
     74a:	10 97       	sbiw	r26, 0x00	; 0
     74c:	99 f7       	brne	.-26     	; 0x734 <insert_timer+0x4e>
     74e:	01 c0       	rjmp	.+2      	; 0x752 <insert_timer+0x6c>
		total += cp->time;
		if (total >= ms) break;
     750:	df 01       	movw	r26, r30
		pp = cp;
	}

	if (pp == NULL) {
     752:	41 15       	cp	r20, r1
     754:	51 05       	cpc	r21, r1
     756:	79 f4       	brne	.+30     	; 0x776 <insert_timer+0x90>
		cp->time -= tp->time;
     758:	8d 91       	ld	r24, X+
     75a:	9c 91       	ld	r25, X
     75c:	11 97       	sbiw	r26, 0x01	; 1
     75e:	80 1b       	sub	r24, r16
     760:	91 0b       	sbc	r25, r17
     762:	11 96       	adiw	r26, 0x01	; 1
     764:	9c 93       	st	X, r25
     766:	8e 93       	st	-X, r24
		tp->link = cp, Thead = tp;
     768:	bd 87       	std	Y+13, r27	; 0x0d
     76a:	ac 87       	std	Y+12, r26	; 0x0c
     76c:	d0 93 f8 02 	sts	0x02F8, r29
     770:	c0 93 f7 02 	sts	0x02F7, r28
     774:	24 c0       	rjmp	.+72     	; 0x7be <insert_timer+0xd8>
	} else if (cp == NULL) {
     776:	10 97       	sbiw	r26, 0x00	; 0
     778:	51 f4       	brne	.+20     	; 0x78e <insert_timer+0xa8>
		tp->time -= total;
     77a:	02 1b       	sub	r16, r18
     77c:	13 0b       	sbc	r17, r19
     77e:	19 83       	std	Y+1, r17	; 0x01
     780:	08 83       	st	Y, r16
		pp->link = tp;
     782:	fa 01       	movw	r30, r20
     784:	d5 87       	std	Z+13, r29	; 0x0d
     786:	c4 87       	std	Z+12, r28	; 0x0c
		tp->link = NULL;
     788:	1d 86       	std	Y+13, r1	; 0x0d
     78a:	1c 86       	std	Y+12, r1	; 0x0c
     78c:	18 c0       	rjmp	.+48     	; 0x7be <insert_timer+0xd8>
	} else {
		total -= cp->time;
     78e:	8d 91       	ld	r24, X+
     790:	9c 91       	ld	r25, X
     792:	11 97       	sbiw	r26, 0x01	; 1
     794:	b9 01       	movw	r22, r18
     796:	68 1b       	sub	r22, r24
     798:	79 0b       	sbc	r23, r25
		tp->time -= total;
     79a:	98 01       	movw	r18, r16
     79c:	26 1b       	sub	r18, r22
     79e:	37 0b       	sbc	r19, r23
     7a0:	39 83       	std	Y+1, r19	; 0x01
     7a2:	28 83       	st	Y, r18
		cp->time -= tp->time;
     7a4:	8d 91       	ld	r24, X+
     7a6:	9c 91       	ld	r25, X
     7a8:	11 97       	sbiw	r26, 0x01	; 1
     7aa:	82 1b       	sub	r24, r18
     7ac:	93 0b       	sbc	r25, r19
     7ae:	11 96       	adiw	r26, 0x01	; 1
     7b0:	9c 93       	st	X, r25
     7b2:	8e 93       	st	-X, r24
		pp->link = tp;
     7b4:	fa 01       	movw	r30, r20
     7b6:	d5 87       	std	Z+13, r29	; 0x0d
     7b8:	c4 87       	std	Z+12, r28	; 0x0c
		tp->link = cp;
     7ba:	bd 87       	std	Y+13, r27	; 0x0d
     7bc:	ac 87       	std	Y+12, r26	; 0x0c
	}
}
     7be:	df 91       	pop	r29
     7c0:	cf 91       	pop	r28
     7c2:	1f 91       	pop	r17
     7c4:	0f 91       	pop	r16
     7c6:	ff 90       	pop	r15
     7c8:	ef 90       	pop	r14
     7ca:	08 95       	ret

000007cc <tour_timer>:

void tour_timer() {
     7cc:	ef 92       	push	r14
     7ce:	ff 92       	push	r15
     7d0:	0f 93       	push	r16
     7d2:	1f 93       	push	r17
     7d4:	cf 93       	push	r28
     7d6:	df 93       	push	r29
	struct timer *cp;
	int total = 0;

	printf("\n");
     7d8:	8a e0       	ldi	r24, 0x0A	; 10
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	0e 94 a9 09 	call	0x1352	; 0x1352 <putchar>
	for (cp = Thead; cp != NULL; cp = cp->link) {
     7e0:	c0 91 f7 02 	lds	r28, 0x02F7
     7e4:	d0 91 f8 02 	lds	r29, 0x02F8
	}
}

void tour_timer() {
	struct timer *cp;
	int total = 0;
     7e8:	00 e0       	ldi	r16, 0x00	; 0
     7ea:	10 e0       	ldi	r17, 0x00	; 0

	printf("\n");
	for (cp = Thead; cp != NULL; cp = cp->link) {
		total += cp->time;
		printf("-->%d(%d) ", cp->time, total);
     7ec:	83 e3       	ldi	r24, 0x33	; 51
     7ee:	e8 2e       	mov	r14, r24
     7f0:	82 e0       	ldi	r24, 0x02	; 2
     7f2:	f8 2e       	mov	r15, r24
void tour_timer() {
	struct timer *cp;
	int total = 0;

	printf("\n");
	for (cp = Thead; cp != NULL; cp = cp->link) {
     7f4:	20 c0       	rjmp	.+64     	; 0x836 <tour_timer+0x6a>
		total += cp->time;
     7f6:	88 81       	ld	r24, Y
     7f8:	99 81       	ldd	r25, Y+1	; 0x01
     7fa:	08 0f       	add	r16, r24
     7fc:	19 1f       	adc	r17, r25
		printf("-->%d(%d) ", cp->time, total);
     7fe:	00 d0       	rcall	.+0      	; 0x800 <tour_timer+0x34>
     800:	00 d0       	rcall	.+0      	; 0x802 <tour_timer+0x36>
     802:	ed b7       	in	r30, 0x3d	; 61
     804:	fe b7       	in	r31, 0x3e	; 62
     806:	31 96       	adiw	r30, 0x01	; 1
     808:	ad b7       	in	r26, 0x3d	; 61
     80a:	be b7       	in	r27, 0x3e	; 62
     80c:	12 96       	adiw	r26, 0x02	; 2
     80e:	fc 92       	st	X, r15
     810:	ee 92       	st	-X, r14
     812:	11 97       	sbiw	r26, 0x01	; 1
     814:	93 83       	std	Z+3, r25	; 0x03
     816:	82 83       	std	Z+2, r24	; 0x02
     818:	15 83       	std	Z+5, r17	; 0x05
     81a:	04 83       	std	Z+4, r16	; 0x04
     81c:	0e 94 97 09 	call	0x132e	; 0x132e <printf>
void tour_timer() {
	struct timer *cp;
	int total = 0;

	printf("\n");
	for (cp = Thead; cp != NULL; cp = cp->link) {
     820:	0c 84       	ldd	r0, Y+12	; 0x0c
     822:	dd 85       	ldd	r29, Y+13	; 0x0d
     824:	c0 2d       	mov	r28, r0
     826:	8d b7       	in	r24, 0x3d	; 61
     828:	9e b7       	in	r25, 0x3e	; 62
     82a:	06 96       	adiw	r24, 0x06	; 6
     82c:	0f b6       	in	r0, 0x3f	; 63
     82e:	f8 94       	cli
     830:	9e bf       	out	0x3e, r25	; 62
     832:	0f be       	out	0x3f, r0	; 63
     834:	8d bf       	out	0x3d, r24	; 61
     836:	20 97       	sbiw	r28, 0x00	; 0
     838:	f1 f6       	brne	.-68     	; 0x7f6 <tour_timer+0x2a>
		total += cp->time;
		printf("-->%d(%d) ", cp->time, total);
	}
	printf("\n");
     83a:	8a e0       	ldi	r24, 0x0A	; 10
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	0e 94 a9 09 	call	0x1352	; 0x1352 <putchar>
}
     842:	df 91       	pop	r29
     844:	cf 91       	pop	r28
     846:	1f 91       	pop	r17
     848:	0f 91       	pop	r16
     84a:	ff 90       	pop	r15
     84c:	ef 90       	pop	r14
     84e:	08 95       	ret

00000850 <free_timer>:

void free_timer() {
	struct timer *cp;

	for (  ; Thead != NULL;  ) {
     850:	09 c0       	rjmp	.+18     	; 0x864 <free_timer+0x14>
		cp = Thead;
		Thead = cp->link;
     852:	fc 01       	movw	r30, r24
     854:	24 85       	ldd	r18, Z+12	; 0x0c
     856:	35 85       	ldd	r19, Z+13	; 0x0d
     858:	30 93 f8 02 	sts	0x02F8, r19
     85c:	20 93 f7 02 	sts	0x02F7, r18
		free(cp);
     860:	0e 94 42 08 	call	0x1084	; 0x1084 <free>
}

void free_timer() {
	struct timer *cp;

	for (  ; Thead != NULL;  ) {
     864:	80 91 f7 02 	lds	r24, 0x02F7
     868:	90 91 f8 02 	lds	r25, 0x02F8
     86c:	00 97       	sbiw	r24, 0x00	; 0
     86e:	89 f7       	brne	.-30     	; 0x852 <free_timer+0x2>
		cp = Thead;
		Thead = cp->link;
		free(cp);
	}
}
     870:	08 95       	ret

00000872 <app_timer>:

void app_timer(char *ap) {
     872:	0f 93       	push	r16
     874:	1f 93       	push	r17
     876:	cf 93       	push	r28
     878:	df 93       	push	r29
     87a:	cd b7       	in	r28, 0x3d	; 61
     87c:	de b7       	in	r29, 0x3e	; 62
     87e:	62 97       	sbiw	r28, 0x12	; 18
     880:	0f b6       	in	r0, 0x3f	; 63
     882:	f8 94       	cli
     884:	de bf       	out	0x3e, r29	; 62
     886:	0f be       	out	0x3f, r0	; 63
     888:	cd bf       	out	0x3d, r28	; 61
	char buf[8];
	int ms;
	struct task tsk;

	while(1) {
		printf(">> ");
     88a:	0e e3       	ldi	r16, 0x3E	; 62
     88c:	12 e0       	ldi	r17, 0x02	; 2
     88e:	0f 92       	push	r0
     890:	0f 92       	push	r0
     892:	ed b7       	in	r30, 0x3d	; 61
     894:	fe b7       	in	r31, 0x3e	; 62
     896:	12 83       	std	Z+2, r17	; 0x02
     898:	01 83       	std	Z+1, r16	; 0x01
     89a:	0e 94 97 09 	call	0x132e	; 0x132e <printf>
		if (fgets(buf, 8, stdin) == NULL || (ms = atoi(buf)) == 0)
     89e:	0f 90       	pop	r0
     8a0:	0f 90       	pop	r0
     8a2:	40 91 2c 04 	lds	r20, 0x042C
     8a6:	50 91 2d 04 	lds	r21, 0x042D
     8aa:	ce 01       	movw	r24, r28
     8ac:	01 96       	adiw	r24, 0x01	; 1
     8ae:	68 e0       	ldi	r22, 0x08	; 8
     8b0:	70 e0       	ldi	r23, 0x00	; 0
     8b2:	0e 94 3d 09 	call	0x127a	; 0x127a <fgets>
     8b6:	00 97       	sbiw	r24, 0x00	; 0
     8b8:	61 f0       	breq	.+24     	; 0x8d2 <app_timer+0x60>
     8ba:	ce 01       	movw	r24, r28
     8bc:	01 96       	adiw	r24, 0x01	; 1
     8be:	0e 94 db 08 	call	0x11b6	; 0x11b6 <atoi>
     8c2:	bc 01       	movw	r22, r24
     8c4:	00 97       	sbiw	r24, 0x00	; 0
     8c6:	29 f0       	breq	.+10     	; 0x8d2 <app_timer+0x60>
			break;
		
		insert_timer(&tsk, ms);
     8c8:	ce 01       	movw	r24, r28
     8ca:	09 96       	adiw	r24, 0x09	; 9
     8cc:	0e 94 73 03 	call	0x6e6	; 0x6e6 <insert_timer>
	}
     8d0:	de cf       	rjmp	.-68     	; 0x88e <app_timer+0x1c>
	tour_timer();
     8d2:	0e 94 e6 03 	call	0x7cc	; 0x7cc <tour_timer>
	free_timer();
     8d6:	0e 94 28 04 	call	0x850	; 0x850 <free_timer>
}
     8da:	62 96       	adiw	r28, 0x12	; 18
     8dc:	0f b6       	in	r0, 0x3f	; 63
     8de:	f8 94       	cli
     8e0:	de bf       	out	0x3e, r29	; 62
     8e2:	0f be       	out	0x3f, r0	; 63
     8e4:	cd bf       	out	0x3d, r28	; 61
     8e6:	df 91       	pop	r29
     8e8:	cf 91       	pop	r28
     8ea:	1f 91       	pop	r17
     8ec:	0f 91       	pop	r16
     8ee:	08 95       	ret

000008f0 <__vector_15>:

ISR(TIMER2_OVF_vect) {
     8f0:	1f 92       	push	r1
     8f2:	0f 92       	push	r0
     8f4:	0f b6       	in	r0, 0x3f	; 63
     8f6:	0f 92       	push	r0
     8f8:	0b b6       	in	r0, 0x3b	; 59
     8fa:	0f 92       	push	r0
     8fc:	11 24       	eor	r1, r1
     8fe:	2f 93       	push	r18
     900:	3f 93       	push	r19
     902:	4f 93       	push	r20
     904:	5f 93       	push	r21
     906:	6f 93       	push	r22
     908:	7f 93       	push	r23
     90a:	8f 93       	push	r24
     90c:	9f 93       	push	r25
     90e:	af 93       	push	r26
     910:	bf 93       	push	r27
     912:	ef 93       	push	r30
     914:	ff 93       	push	r31
	if (!Thead)
     916:	e0 91 f7 02 	lds	r30, 0x02F7
     91a:	f0 91 f8 02 	lds	r31, 0x02F8
     91e:	30 97       	sbiw	r30, 0x00	; 0
     920:	49 f0       	breq	.+18     	; 0x934 <__vector_15+0x44>
		return ;
	if (--Thead->time == 0)
     922:	80 81       	ld	r24, Z
     924:	91 81       	ldd	r25, Z+1	; 0x01
     926:	01 97       	sbiw	r24, 0x01	; 1
     928:	91 83       	std	Z+1, r25	; 0x01
     92a:	80 83       	st	Z, r24
     92c:	00 97       	sbiw	r24, 0x00	; 0
     92e:	11 f4       	brne	.+4      	; 0x934 <__vector_15+0x44>
		timer_expire();
     930:	0e 94 51 03 	call	0x6a2	; 0x6a2 <timer_expire>
}
     934:	ff 91       	pop	r31
     936:	ef 91       	pop	r30
     938:	bf 91       	pop	r27
     93a:	af 91       	pop	r26
     93c:	9f 91       	pop	r25
     93e:	8f 91       	pop	r24
     940:	7f 91       	pop	r23
     942:	6f 91       	pop	r22
     944:	5f 91       	pop	r21
     946:	4f 91       	pop	r20
     948:	3f 91       	pop	r19
     94a:	2f 91       	pop	r18
     94c:	0f 90       	pop	r0
     94e:	0b be       	out	0x3b, r0	; 59
     950:	0f 90       	pop	r0
     952:	0f be       	out	0x3f, r0	; 63
     954:	0f 90       	pop	r0
     956:	1f 90       	pop	r1
     958:	18 95       	reti

0000095a <uart_getchar>:

int uart_getchar(FILE *stream) {
	char ch;

	do {
		cli();
     95a:	f8 94       	cli
		ch = qi_delete();
     95c:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <qi_delete>
		sei();
     960:	78 94       	sei
	} while (ch == 0);
     962:	88 23       	and	r24, r24
     964:	d1 f3       	breq	.-12     	; 0x95a <uart_getchar>

	if (ch == EOT) return(-1);
     966:	84 30       	cpi	r24, 0x04	; 4
     968:	11 f0       	breq	.+4      	; 0x96e <uart_getchar+0x14>
	else 		   return(ch);
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	08 95       	ret
		cli();
		ch = qi_delete();
		sei();
	} while (ch == 0);

	if (ch == EOT) return(-1);
     96e:	8f ef       	ldi	r24, 0xFF	; 255
     970:	9f ef       	ldi	r25, 0xFF	; 255
	else 		   return(ch);
}
     972:	08 95       	ret

00000974 <uart_putchar>:
	sbi(UCSR0B, TXCIE0);
	sbi(UCSR0B, RXEN0);
	sbi(UCSR0B, RXCIE0);
}

int uart_putchar(char ch, FILE *stream){
     974:	cf 93       	push	r28
     976:	c8 2f       	mov	r28, r24
    if(ch == '\n') 
     978:	8a 30       	cpi	r24, 0x0A	; 10
     97a:	19 f4       	brne	.+6      	; 0x982 <uart_putchar+0xe>
	    uart_putchar('\r', stream);
     97c:	8d e0       	ldi	r24, 0x0D	; 13
     97e:	0e 94 ba 04 	call	0x974	; 0x974 <uart_putchar>

	cli();
     982:	f8 94       	cli
	
	if(!uart_busy) {
     984:	80 91 83 03 	lds	r24, 0x0383
     988:	88 23       	and	r24, r24
     98a:	59 f4       	brne	.+22     	; 0x9a2 <uart_putchar+0x2e>
	    UDR0 = ch;
     98c:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy = 1;
     990:	81 e0       	ldi	r24, 0x01	; 1
     992:	80 93 83 03 	sts	0x0383, r24
     996:	0a c0       	rjmp	.+20     	; 0x9ac <uart_putchar+0x38>
	} else {
		while(qo_insert(ch) == 0) {
		    sei();
     998:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     99a:	86 ef       	ldi	r24, 0xF6	; 246
     99c:	8a 95       	dec	r24
     99e:	f1 f7       	brne	.-4      	; 0x99c <uart_putchar+0x28>
			_delay_us(100);
			cli();
     9a0:	f8 94       	cli
	
	if(!uart_busy) {
	    UDR0 = ch;
		uart_busy = 1;
	} else {
		while(qo_insert(ch) == 0) {
     9a2:	8c 2f       	mov	r24, r28
     9a4:	0e 94 08 02 	call	0x410	; 0x410 <qo_insert>
     9a8:	00 97       	sbiw	r24, 0x00	; 0
     9aa:	b1 f3       	breq	.-20     	; 0x998 <uart_putchar+0x24>
		    sei();
			_delay_us(100);
			cli();
		}
	}
	sei();
     9ac:	78 94       	sei
	return (1);
}
     9ae:	81 e0       	ldi	r24, 0x01	; 1
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	cf 91       	pop	r28
     9b4:	08 95       	ret

000009b6 <uart_init>:
char uart_busy;

static int echo_mode = 1;

void uart_init() {
	stdin = &Mystdin; stdout = &Mystdout;
     9b6:	83 e4       	ldi	r24, 0x43	; 67
     9b8:	92 e0       	ldi	r25, 0x02	; 2
     9ba:	90 93 2d 04 	sts	0x042D, r25
     9be:	80 93 2c 04 	sts	0x042C, r24
     9c2:	81 e5       	ldi	r24, 0x51	; 81
     9c4:	92 e0       	ldi	r25, 0x02	; 2
     9c6:	90 93 2f 04 	sts	0x042F, r25
     9ca:	80 93 2e 04 	sts	0x042E, r24
	uart_busy = 0;
     9ce:	10 92 83 03 	sts	0x0383, r1
	q_init();
     9d2:	0e 94 b8 01 	call	0x370	; 0x370 <q_init>
    UBRR0H = 0x00; UBRR0L = 0x07;
     9d6:	10 92 c5 00 	sts	0x00C5, r1
     9da:	87 e0       	ldi	r24, 0x07	; 7
     9dc:	80 93 c4 00 	sts	0x00C4, r24
	sbi(UCSR0A, U2X0);
     9e0:	e0 ec       	ldi	r30, 0xC0	; 192
     9e2:	f0 e0       	ldi	r31, 0x00	; 0
     9e4:	80 81       	ld	r24, Z
     9e6:	82 60       	ori	r24, 0x02	; 2
     9e8:	80 83       	st	Z, r24
	sbi(UCSR0B, TXEN0);
     9ea:	e1 ec       	ldi	r30, 0xC1	; 193
     9ec:	f0 e0       	ldi	r31, 0x00	; 0
     9ee:	80 81       	ld	r24, Z
     9f0:	88 60       	ori	r24, 0x08	; 8
     9f2:	80 83       	st	Z, r24
	sbi(UCSR0B, TXCIE0);
     9f4:	80 81       	ld	r24, Z
     9f6:	80 64       	ori	r24, 0x40	; 64
     9f8:	80 83       	st	Z, r24
	sbi(UCSR0B, RXEN0);
     9fa:	80 81       	ld	r24, Z
     9fc:	80 61       	ori	r24, 0x10	; 16
     9fe:	80 83       	st	Z, r24
	sbi(UCSR0B, RXCIE0);
     a00:	80 81       	ld	r24, Z
     a02:	80 68       	ori	r24, 0x80	; 128
     a04:	80 83       	st	Z, r24
}
     a06:	08 95       	ret

00000a08 <uart_putchar_1>:
void uart_putstr(char *sp){
    for(; *sp; sp++)
	    uart_putchar(*sp);
}
*/
int uart_putchar_1(char ch, FILE *stream) {
     a08:	cf 93       	push	r28
     a0a:	c8 2f       	mov	r28, r24
    if(ch == '\n')
     a0c:	8a 30       	cpi	r24, 0x0A	; 10
     a0e:	19 f4       	brne	.+6      	; 0xa16 <uart_putchar_1+0xe>
	    uart_putchar_1('\r', stream);
     a10:	8d e0       	ldi	r24, 0x0D	; 13
     a12:	0e 94 04 05 	call	0xa08	; 0xa08 <uart_putchar_1>
    //_delay_ms(10);
	while(1) {
	    if((UCSR0A & (1 << UDRE0)) != 0 )
     a16:	80 91 c0 00 	lds	r24, 0x00C0
     a1a:	85 ff       	sbrs	r24, 5
     a1c:	fc cf       	rjmp	.-8      	; 0xa16 <uart_putchar_1+0xe>
		    break;
	}
	UDR0 = ch;
     a1e:	c0 93 c6 00 	sts	0x00C6, r28
	return (1);
}
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	cf 91       	pop	r28
     a28:	08 95       	ret

00000a2a <uart_echo>:

	if (ch == EOT) return(-1);
	else 		   return(ch);
}

void uart_echo(char ch) {
     a2a:	cf 93       	push	r28
     a2c:	c8 2f       	mov	r28, r24
	if(ch == '\n') uart_echo('\r');
     a2e:	8a 30       	cpi	r24, 0x0A	; 10
     a30:	19 f4       	brne	.+6      	; 0xa38 <uart_echo+0xe>
     a32:	8d e0       	ldi	r24, 0x0D	; 13
     a34:	0e 94 15 05 	call	0xa2a	; 0xa2a <uart_echo>
	if(!uart_busy) {
     a38:	80 91 83 03 	lds	r24, 0x0383
     a3c:	88 23       	and	r24, r24
     a3e:	31 f4       	brne	.+12     	; 0xa4c <uart_echo+0x22>
		UDR0 = ch;
     a40:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy = 1;
     a44:	81 e0       	ldi	r24, 0x01	; 1
     a46:	80 93 83 03 	sts	0x0383, r24
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <uart_echo+0x28>
	}
	else
		qo_insert(ch);
     a4c:	8c 2f       	mov	r24, r28
     a4e:	0e 94 08 02 	call	0x410	; 0x410 <qo_insert>
}
     a52:	cf 91       	pop	r28
     a54:	08 95       	ret

00000a56 <uart_peek>:

int uart_peek() {
	return (qi_peek());
     a56:	0e 94 47 02 	call	0x48e	; 0x48e <qi_peek>
}
     a5a:	08 95       	ret

00000a5c <__vector_27>:


ISR(USART0_TX_vect){
     a5c:	1f 92       	push	r1
     a5e:	0f 92       	push	r0
     a60:	0f b6       	in	r0, 0x3f	; 63
     a62:	0f 92       	push	r0
     a64:	0b b6       	in	r0, 0x3b	; 59
     a66:	0f 92       	push	r0
     a68:	11 24       	eor	r1, r1
     a6a:	2f 93       	push	r18
     a6c:	3f 93       	push	r19
     a6e:	4f 93       	push	r20
     a70:	5f 93       	push	r21
     a72:	6f 93       	push	r22
     a74:	7f 93       	push	r23
     a76:	8f 93       	push	r24
     a78:	9f 93       	push	r25
     a7a:	af 93       	push	r26
     a7c:	bf 93       	push	r27
     a7e:	ef 93       	push	r30
     a80:	ff 93       	push	r31
	char ch;

	if((ch = qo_delete()) == 0)
     a82:	0e 94 2a 02 	call	0x454	; 0x454 <qo_delete>
     a86:	88 23       	and	r24, r24
     a88:	19 f4       	brne	.+6      	; 0xa90 <__vector_27+0x34>
		uart_busy = 0;
     a8a:	10 92 83 03 	sts	0x0383, r1
     a8e:	02 c0       	rjmp	.+4      	; 0xa94 <__vector_27+0x38>
	else 
		UDR0 = ch;
     a90:	80 93 c6 00 	sts	0x00C6, r24
}
     a94:	ff 91       	pop	r31
     a96:	ef 91       	pop	r30
     a98:	bf 91       	pop	r27
     a9a:	af 91       	pop	r26
     a9c:	9f 91       	pop	r25
     a9e:	8f 91       	pop	r24
     aa0:	7f 91       	pop	r23
     aa2:	6f 91       	pop	r22
     aa4:	5f 91       	pop	r21
     aa6:	4f 91       	pop	r20
     aa8:	3f 91       	pop	r19
     aaa:	2f 91       	pop	r18
     aac:	0f 90       	pop	r0
     aae:	0b be       	out	0x3b, r0	; 59
     ab0:	0f 90       	pop	r0
     ab2:	0f be       	out	0x3f, r0	; 63
     ab4:	0f 90       	pop	r0
     ab6:	1f 90       	pop	r1
     ab8:	18 95       	reti

00000aba <__vector_25>:

ISR(USART0_RX_vect) {
     aba:	1f 92       	push	r1
     abc:	0f 92       	push	r0
     abe:	0f b6       	in	r0, 0x3f	; 63
     ac0:	0f 92       	push	r0
     ac2:	0b b6       	in	r0, 0x3b	; 59
     ac4:	0f 92       	push	r0
     ac6:	11 24       	eor	r1, r1
     ac8:	1f 93       	push	r17
     aca:	2f 93       	push	r18
     acc:	3f 93       	push	r19
     ace:	4f 93       	push	r20
     ad0:	5f 93       	push	r21
     ad2:	6f 93       	push	r22
     ad4:	7f 93       	push	r23
     ad6:	8f 93       	push	r24
     ad8:	9f 93       	push	r25
     ada:	af 93       	push	r26
     adc:	bf 93       	push	r27
     ade:	ef 93       	push	r30
     ae0:	ff 93       	push	r31
     ae2:	cf 93       	push	r28
     ae4:	df 93       	push	r29
     ae6:	cd b7       	in	r28, 0x3d	; 61
     ae8:	de b7       	in	r29, 0x3e	; 62
     aea:	2a 97       	sbiw	r28, 0x0a	; 10
     aec:	de bf       	out	0x3e, r29	; 62
     aee:	cd bf       	out	0x3d, r28	; 61
	struct task task;
	char ch;
	ch = UDR0;
     af0:	10 91 c6 00 	lds	r17, 0x00C6
	if (ch == ESC) {
     af4:	1b 31       	cpi	r17, 0x1B	; 27
     af6:	61 f4       	brne	.+24     	; 0xb10 <__vector_25+0x56>
		echo_mode = (echo_mode + 1) & 0x01;
     af8:	80 91 5f 02 	lds	r24, 0x025F
     afc:	90 91 60 02 	lds	r25, 0x0260
     b00:	01 96       	adiw	r24, 0x01	; 1
     b02:	81 70       	andi	r24, 0x01	; 1
     b04:	90 70       	andi	r25, 0x00	; 0
     b06:	90 93 60 02 	sts	0x0260, r25
     b0a:	80 93 5f 02 	sts	0x025F, r24
		return ;
     b0e:	24 c0       	rjmp	.+72     	; 0xb58 <__vector_25+0x9e>
	}

	if(ch != EOT) {
     b10:	14 30       	cpi	r17, 0x04	; 4
     b12:	69 f0       	breq	.+26     	; 0xb2e <__vector_25+0x74>
		if (ch == '\r')  ch = '\n';
     b14:	1d 30       	cpi	r17, 0x0D	; 13
     b16:	09 f4       	brne	.+2      	; 0xb1a <__vector_25+0x60>
     b18:	1a e0       	ldi	r17, 0x0A	; 10
		if (echo_mode)	uart_echo(ch);
     b1a:	20 91 5f 02 	lds	r18, 0x025F
     b1e:	30 91 60 02 	lds	r19, 0x0260
     b22:	21 15       	cp	r18, r1
     b24:	31 05       	cpc	r19, r1
     b26:	19 f0       	breq	.+6      	; 0xb2e <__vector_25+0x74>
     b28:	81 2f       	mov	r24, r17
     b2a:	0e 94 15 05 	call	0xa2a	; 0xa2a <uart_echo>
	}
	qi_insert(ch);
     b2e:	81 2f       	mov	r24, r17
     b30:	0e 94 c9 01 	call	0x392	; 0x392 <qi_insert>
	if (ch == EOT || ch == '\n') {
     b34:	14 30       	cpi	r17, 0x04	; 4
     b36:	11 f0       	breq	.+4      	; 0xb3c <__vector_25+0x82>
     b38:	1a 30       	cpi	r17, 0x0A	; 10
     b3a:	71 f4       	brne	.+28     	; 0xb58 <__vector_25+0x9e>
		task.fun = task_cmd;
     b3c:	84 e7       	ldi	r24, 0x74	; 116
     b3e:	96 e0       	ldi	r25, 0x06	; 6
     b40:	9a 83       	std	Y+2, r25	; 0x02
     b42:	89 83       	std	Y+1, r24	; 0x01
		strcpy(task.arg, "");
     b44:	ce 01       	movw	r24, r28
     b46:	03 96       	adiw	r24, 0x03	; 3
     b48:	62 e4       	ldi	r22, 0x42	; 66
     b4a:	72 e0       	ldi	r23, 0x02	; 2
     b4c:	0e 94 07 09 	call	0x120e	; 0x120e <strcpy>
		task_insert(&task);
     b50:	ce 01       	movw	r24, r28
     b52:	01 96       	adiw	r24, 0x01	; 1
     b54:	0e 94 ce 05 	call	0xb9c	; 0xb9c <task_insert>
	}
}
     b58:	2a 96       	adiw	r28, 0x0a	; 10
     b5a:	de bf       	out	0x3e, r29	; 62
     b5c:	cd bf       	out	0x3d, r28	; 61
     b5e:	df 91       	pop	r29
     b60:	cf 91       	pop	r28
     b62:	ff 91       	pop	r31
     b64:	ef 91       	pop	r30
     b66:	bf 91       	pop	r27
     b68:	af 91       	pop	r26
     b6a:	9f 91       	pop	r25
     b6c:	8f 91       	pop	r24
     b6e:	7f 91       	pop	r23
     b70:	6f 91       	pop	r22
     b72:	5f 91       	pop	r21
     b74:	4f 91       	pop	r20
     b76:	3f 91       	pop	r19
     b78:	2f 91       	pop	r18
     b7a:	1f 91       	pop	r17
     b7c:	0f 90       	pop	r0
     b7e:	0b be       	out	0x3b, r0	; 59
     b80:	0f 90       	pop	r0
     b82:	0f be       	out	0x3f, r0	; 63
     b84:	0f 90       	pop	r0
     b86:	1f 90       	pop	r1
     b88:	18 95       	reti

00000b8a <task_init>:
};

int Task_cnt = sizeof(Task_tab) / sizeof(struct task_tab);

void task_init() {
	Task_f = Task_r = 0;
     b8a:	10 92 85 03 	sts	0x0385, r1
     b8e:	10 92 84 03 	sts	0x0384, r1
     b92:	10 92 27 04 	sts	0x0427, r1
     b96:	10 92 26 04 	sts	0x0426, r1
}
     b9a:	08 95       	ret

00000b9c <task_insert>:

int task_insert(struct task *tskp) {
     b9c:	cf 93       	push	r28
     b9e:	df 93       	push	r29
     ba0:	48 2f       	mov	r20, r24
     ba2:	e9 2f       	mov	r30, r25
	if ((Task_r + 1) % MAX_TASK == Task_f)
     ba4:	80 91 84 03 	lds	r24, 0x0384
     ba8:	90 91 85 03 	lds	r25, 0x0385
     bac:	c0 91 26 04 	lds	r28, 0x0426
     bb0:	d0 91 27 04 	lds	r29, 0x0427
     bb4:	01 96       	adiw	r24, 0x01	; 1
     bb6:	20 e1       	ldi	r18, 0x10	; 16
     bb8:	30 e0       	ldi	r19, 0x00	; 0
     bba:	b9 01       	movw	r22, r18
     bbc:	0e 94 85 07 	call	0xf0a	; 0xf0a <__divmodhi4>
     bc0:	8c 17       	cp	r24, r28
     bc2:	9d 07       	cpc	r25, r29
     bc4:	31 f1       	breq	.+76     	; 0xc12 <task_insert+0x76>
		return (0);
	Task_r = (Task_r + 1) % MAX_TASK;
     bc6:	80 91 84 03 	lds	r24, 0x0384
     bca:	90 91 85 03 	lds	r25, 0x0385
     bce:	01 96       	adiw	r24, 0x01	; 1
     bd0:	b9 01       	movw	r22, r18
     bd2:	0e 94 85 07 	call	0xf0a	; 0xf0a <__divmodhi4>
     bd6:	90 93 85 03 	sts	0x0385, r25
     bda:	80 93 84 03 	sts	0x0384, r24
	Task_q[Task_r] = *tskp;
     bde:	80 91 84 03 	lds	r24, 0x0384
     be2:	90 91 85 03 	lds	r25, 0x0385
     be6:	dc 01       	movw	r26, r24
     be8:	aa 0f       	add	r26, r26
     bea:	bb 1f       	adc	r27, r27
     bec:	63 e0       	ldi	r22, 0x03	; 3
     bee:	88 0f       	add	r24, r24
     bf0:	99 1f       	adc	r25, r25
     bf2:	6a 95       	dec	r22
     bf4:	e1 f7       	brne	.-8      	; 0xbee <task_insert+0x52>
     bf6:	a8 0f       	add	r26, r24
     bf8:	b9 1f       	adc	r27, r25
     bfa:	aa 57       	subi	r26, 0x7A	; 122
     bfc:	bc 4f       	sbci	r27, 0xFC	; 252
     bfe:	c4 2f       	mov	r28, r20
     c00:	de 2f       	mov	r29, r30
     c02:	8a e0       	ldi	r24, 0x0A	; 10
     c04:	09 90       	ld	r0, Y+
     c06:	0d 92       	st	X+, r0
     c08:	81 50       	subi	r24, 0x01	; 1
     c0a:	e1 f7       	brne	.-8      	; 0xc04 <task_insert+0x68>
	return (1);
     c0c:	81 e0       	ldi	r24, 0x01	; 1
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	02 c0       	rjmp	.+4      	; 0xc16 <task_insert+0x7a>
	Task_f = Task_r = 0;
}

int task_insert(struct task *tskp) {
	if ((Task_r + 1) % MAX_TASK == Task_f)
		return (0);
     c12:	80 e0       	ldi	r24, 0x00	; 0
     c14:	90 e0       	ldi	r25, 0x00	; 0
	Task_r = (Task_r + 1) % MAX_TASK;
	Task_q[Task_r] = *tskp;
	return (1);
}
     c16:	df 91       	pop	r29
     c18:	cf 91       	pop	r28
     c1a:	08 95       	ret

00000c1c <task_delete>:

int task_delete(struct task *tskp) {
     c1c:	9c 01       	movw	r18, r24
	if (Task_r == Task_f)
     c1e:	40 91 84 03 	lds	r20, 0x0384
     c22:	50 91 85 03 	lds	r21, 0x0385
     c26:	80 91 26 04 	lds	r24, 0x0426
     c2a:	90 91 27 04 	lds	r25, 0x0427
     c2e:	48 17       	cp	r20, r24
     c30:	59 07       	cpc	r21, r25
     c32:	31 f1       	breq	.+76     	; 0xc80 <task_delete+0x64>
		return(0);
	Task_f = (Task_f + 1) % MAX_TASK;
     c34:	80 91 26 04 	lds	r24, 0x0426
     c38:	90 91 27 04 	lds	r25, 0x0427
     c3c:	01 96       	adiw	r24, 0x01	; 1
     c3e:	60 e1       	ldi	r22, 0x10	; 16
     c40:	70 e0       	ldi	r23, 0x00	; 0
     c42:	0e 94 85 07 	call	0xf0a	; 0xf0a <__divmodhi4>
     c46:	90 93 27 04 	sts	0x0427, r25
     c4a:	80 93 26 04 	sts	0x0426, r24
	*tskp = Task_q[Task_f];
     c4e:	80 91 26 04 	lds	r24, 0x0426
     c52:	90 91 27 04 	lds	r25, 0x0427
     c56:	fc 01       	movw	r30, r24
     c58:	ee 0f       	add	r30, r30
     c5a:	ff 1f       	adc	r31, r31
     c5c:	a3 e0       	ldi	r26, 0x03	; 3
     c5e:	88 0f       	add	r24, r24
     c60:	99 1f       	adc	r25, r25
     c62:	aa 95       	dec	r26
     c64:	e1 f7       	brne	.-8      	; 0xc5e <task_delete+0x42>
     c66:	e8 0f       	add	r30, r24
     c68:	f9 1f       	adc	r31, r25
     c6a:	d9 01       	movw	r26, r18
     c6c:	ea 57       	subi	r30, 0x7A	; 122
     c6e:	fc 4f       	sbci	r31, 0xFC	; 252
     c70:	8a e0       	ldi	r24, 0x0A	; 10
     c72:	01 90       	ld	r0, Z+
     c74:	0d 92       	st	X+, r0
     c76:	81 50       	subi	r24, 0x01	; 1
     c78:	e1 f7       	brne	.-8      	; 0xc72 <task_delete+0x56>
	return (1);
     c7a:	81 e0       	ldi	r24, 0x01	; 1
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	08 95       	ret
	return (1);
}

int task_delete(struct task *tskp) {
	if (Task_r == Task_f)
		return(0);
     c80:	80 e0       	ldi	r24, 0x00	; 0
     c82:	90 e0       	ldi	r25, 0x00	; 0
	Task_f = (Task_f + 1) % MAX_TASK;
	*tskp = Task_q[Task_f];
	return (1);
}
     c84:	08 95       	ret

00000c86 <what_task>:

struct task_tab *what_task(char *name) {
     c86:	ef 92       	push	r14
     c88:	ff 92       	push	r15
     c8a:	0f 93       	push	r16
     c8c:	1f 93       	push	r17
     c8e:	cf 93       	push	r28
     c90:	df 93       	push	r29
     c92:	7c 01       	movw	r14, r24
	int i;
	for (i = 0; i < Task_cnt; i++)
     c94:	00 e0       	ldi	r16, 0x00	; 0
     c96:	10 e0       	ldi	r17, 0x00	; 0
     c98:	17 c0       	rjmp	.+46     	; 0xcc8 <what_task+0x42>
		if(!strcmp(name, Task_tab[i].task_name))
     c9a:	e8 01       	movw	r28, r16
     c9c:	cc 0f       	add	r28, r28
     c9e:	dd 1f       	adc	r29, r29
     ca0:	c8 01       	movw	r24, r16
     ca2:	25 e0       	ldi	r18, 0x05	; 5
     ca4:	88 0f       	add	r24, r24
     ca6:	99 1f       	adc	r25, r25
     ca8:	2a 95       	dec	r18
     caa:	e1 f7       	brne	.-8      	; 0xca4 <what_task+0x1e>
     cac:	c8 0f       	add	r28, r24
     cae:	d9 1f       	adc	r29, r25
     cb0:	ce 55       	subi	r28, 0x5E	; 94
     cb2:	dd 4f       	sbci	r29, 0xFD	; 253
     cb4:	c7 01       	movw	r24, r14
     cb6:	be 01       	movw	r22, r28
     cb8:	0e 94 fe 08 	call	0x11fc	; 0x11fc <strcmp>
     cbc:	00 97       	sbiw	r24, 0x00	; 0
     cbe:	11 f4       	brne	.+4      	; 0xcc4 <what_task+0x3e>
			return (&Task_tab[i]);
     cc0:	ce 01       	movw	r24, r28
     cc2:	0b c0       	rjmp	.+22     	; 0xcda <what_task+0x54>
	return (1);
}

struct task_tab *what_task(char *name) {
	int i;
	for (i = 0; i < Task_cnt; i++)
     cc4:	0f 5f       	subi	r16, 0xFF	; 255
     cc6:	1f 4f       	sbci	r17, 0xFF	; 255
     cc8:	80 91 a0 02 	lds	r24, 0x02A0
     ccc:	90 91 a1 02 	lds	r25, 0x02A1
     cd0:	08 17       	cp	r16, r24
     cd2:	19 07       	cpc	r17, r25
     cd4:	14 f3       	brlt	.-60     	; 0xc9a <what_task+0x14>
		if(!strcmp(name, Task_tab[i].task_name))
			return (&Task_tab[i]);
	return (NULL);
     cd6:	80 e0       	ldi	r24, 0x00	; 0
     cd8:	90 e0       	ldi	r25, 0x00	; 0
}
     cda:	df 91       	pop	r29
     cdc:	cf 91       	pop	r28
     cde:	1f 91       	pop	r17
     ce0:	0f 91       	pop	r16
     ce2:	ff 90       	pop	r15
     ce4:	ef 90       	pop	r14
     ce6:	08 95       	ret

00000ce8 <task_cmd>:

void task_cmd(char *arg) {
     ce8:	af 92       	push	r10
     cea:	bf 92       	push	r11
     cec:	cf 92       	push	r12
     cee:	df 92       	push	r13
     cf0:	ef 92       	push	r14
     cf2:	ff 92       	push	r15
     cf4:	0f 93       	push	r16
     cf6:	1f 93       	push	r17
     cf8:	cf 93       	push	r28
     cfa:	df 93       	push	r29
     cfc:	cd b7       	in	r28, 0x3d	; 61
     cfe:	de b7       	in	r29, 0x3e	; 62
     d00:	ca 54       	subi	r28, 0x4A	; 74
     d02:	d0 40       	sbci	r29, 0x00	; 0
     d04:	0f b6       	in	r0, 0x3f	; 63
     d06:	f8 94       	cli
     d08:	de bf       	out	0x3e, r29	; 62
     d0a:	0f be       	out	0x3f, r0	; 63
     d0c:	cd bf       	out	0x3d, r28	; 61
	char buf[64], *cp0, *cp1, *cp2, *cp3;
	struct task task;
	struct task_tab *ptt;
	int ms;

	if (!uart_peek()) return ;
     d0e:	0e 94 2b 05 	call	0xa56	; 0xa56 <uart_peek>
     d12:	00 97       	sbiw	r24, 0x00	; 0
     d14:	09 f4       	brne	.+2      	; 0xd18 <task_cmd+0x30>
     d16:	91 c0       	rjmp	.+290    	; 0xe3a <task_cmd+0x152>

	if (gets(buf) == NULL) {
     d18:	ce 01       	movw	r24, r28
     d1a:	0b 96       	adiw	r24, 0x0b	; 11
     d1c:	0e 94 71 09 	call	0x12e2	; 0x12e2 <gets>
     d20:	00 97       	sbiw	r24, 0x00	; 0
     d22:	29 f4       	brne	.+10     	; 0xd2e <task_cmd+0x46>
		printf("logout, good bye !!!\n");
     d24:	81 e6       	ldi	r24, 0x61	; 97
     d26:	92 e0       	ldi	r25, 0x02	; 2
     d28:	0e 94 b0 09 	call	0x1360	; 0x1360 <puts>
     d2c:	ff cf       	rjmp	.-2      	; 0xd2c <task_cmd+0x44>
		while(1);
	}

	cp0 = strtok(buf, " \t\n\r");
     d2e:	ce 01       	movw	r24, r28
     d30:	0b 96       	adiw	r24, 0x0b	; 11
     d32:	66 e7       	ldi	r22, 0x76	; 118
     d34:	72 e0       	ldi	r23, 0x02	; 2
     d36:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <strtok>
     d3a:	8c 01       	movw	r16, r24
	cp1 = strtok(NULL, " \t\n\r");
     d3c:	80 e0       	ldi	r24, 0x00	; 0
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	66 e7       	ldi	r22, 0x76	; 118
     d42:	72 e0       	ldi	r23, 0x02	; 2
     d44:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <strtok>
     d48:	7c 01       	movw	r14, r24
	cp2 = strtok(NULL, " \t\n\r");
     d4a:	80 e0       	ldi	r24, 0x00	; 0
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	66 e7       	ldi	r22, 0x76	; 118
     d50:	72 e0       	ldi	r23, 0x02	; 2
     d52:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <strtok>
     d56:	6c 01       	movw	r12, r24
	cp3 = strtok(NULL, " \t\n\r");
     d58:	80 e0       	ldi	r24, 0x00	; 0
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	66 e7       	ldi	r22, 0x76	; 118
     d5e:	72 e0       	ldi	r23, 0x02	; 2
     d60:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <strtok>
     d64:	5c 01       	movw	r10, r24

	if (cp0 == NULL) {
     d66:	01 15       	cp	r16, r1
     d68:	11 05       	cpc	r17, r1
     d6a:	59 f4       	brne	.+22     	; 0xd82 <task_cmd+0x9a>
		printf("$ "); return ;
     d6c:	0f 92       	push	r0
     d6e:	0f 92       	push	r0
     d70:	8b e7       	ldi	r24, 0x7B	; 123
     d72:	92 e0       	ldi	r25, 0x02	; 2
     d74:	ad b7       	in	r26, 0x3d	; 61
     d76:	be b7       	in	r27, 0x3e	; 62
     d78:	12 96       	adiw	r26, 0x02	; 2
     d7a:	9c 93       	st	X, r25
     d7c:	8e 93       	st	-X, r24
     d7e:	11 97       	sbiw	r26, 0x01	; 1
     d80:	58 c0       	rjmp	.+176    	; 0xe32 <task_cmd+0x14a>
	}

	if (!strcmp(cp0, "timer")) {
     d82:	c8 01       	movw	r24, r16
     d84:	6e e7       	ldi	r22, 0x7E	; 126
     d86:	72 e0       	ldi	r23, 0x02	; 2
     d88:	0e 94 fe 08 	call	0x11fc	; 0x11fc <strcmp>
     d8c:	00 97       	sbiw	r24, 0x00	; 0
     d8e:	91 f5       	brne	.+100    	; 0xdf4 <task_cmd+0x10c>
		if (!cp1 || !cp2) {
     d90:	e1 14       	cp	r14, r1
     d92:	f1 04       	cpc	r15, r1
     d94:	19 f0       	breq	.+6      	; 0xd9c <task_cmd+0xb4>
     d96:	c1 14       	cp	r12, r1
     d98:	d1 04       	cpc	r13, r1
     d9a:	29 f4       	brne	.+10     	; 0xda6 <task_cmd+0xbe>
			printf("!!!-222\n");
     d9c:	84 e8       	ldi	r24, 0x84	; 132
     d9e:	92 e0       	ldi	r25, 0x02	; 2
     da0:	0e 94 b0 09 	call	0x1360	; 0x1360 <puts>
     da4:	3e c0       	rjmp	.+124    	; 0xe22 <task_cmd+0x13a>
			printf("$ ");
			return ;
		}
		ms = atoi(cp1) / 256;
     da6:	c7 01       	movw	r24, r14
     da8:	0e 94 db 08 	call	0x11b6	; 0x11b6 <atoi>
     dac:	8c 01       	movw	r16, r24

		if (!(ptt = what_task(cp2))) {
     dae:	c6 01       	movw	r24, r12
     db0:	0e 94 43 06 	call	0xc86	; 0xc86 <what_task>
     db4:	00 97       	sbiw	r24, 0x00	; 0
     db6:	19 f1       	breq	.+70     	; 0xdfe <task_cmd+0x116>
			printf("Unknown command...\n");
			return ;
		}

		task.fun = ptt->task_fun;
     db8:	dc 01       	movw	r26, r24
     dba:	90 96       	adiw	r26, 0x20	; 32
     dbc:	8d 91       	ld	r24, X+
     dbe:	9c 91       	ld	r25, X
     dc0:	91 97       	sbiw	r26, 0x21	; 33
     dc2:	9a 83       	std	Y+2, r25	; 0x02
     dc4:	89 83       	std	Y+1, r24	; 0x01
		if (cp3) strcpy(task.arg, cp3);
     dc6:	ce 01       	movw	r24, r28
     dc8:	03 96       	adiw	r24, 0x03	; 3
     dca:	a1 14       	cp	r10, r1
     dcc:	b1 04       	cpc	r11, r1
     dce:	11 f0       	breq	.+4      	; 0xdd4 <task_cmd+0xec>
     dd0:	b5 01       	movw	r22, r10
     dd2:	02 c0       	rjmp	.+4      	; 0xdd8 <task_cmd+0xf0>
		else 	 strcpy(task.arg, "");
     dd4:	6f e9       	ldi	r22, 0x9F	; 159
     dd6:	72 e0       	ldi	r23, 0x02	; 2
     dd8:	0e 94 07 09 	call	0x120e	; 0x120e <strcpy>
		cli();
     ddc:	f8 94       	cli
		if (!cp1 || !cp2) {
			printf("!!!-222\n");
			printf("$ ");
			return ;
		}
		ms = atoi(cp1) / 256;
     dde:	c8 01       	movw	r24, r16
     de0:	60 e0       	ldi	r22, 0x00	; 0
     de2:	71 e0       	ldi	r23, 0x01	; 1
     de4:	0e 94 85 07 	call	0xf0a	; 0xf0a <__divmodhi4>

		task.fun = ptt->task_fun;
		if (cp3) strcpy(task.arg, cp3);
		else 	 strcpy(task.arg, "");
		cli();
		insert_timer(&task,ms);
     de8:	ce 01       	movw	r24, r28
     dea:	01 96       	adiw	r24, 0x01	; 1
     dec:	0e 94 73 03 	call	0x6e6	; 0x6e6 <insert_timer>
		sei();
     df0:	78 94       	sei
     df2:	17 c0       	rjmp	.+46     	; 0xe22 <task_cmd+0x13a>
			cli();
			insert_timer(&task,ms);
			sei();
		*/
		} else {
			if (!(ptt = what_task(cp0))) {
     df4:	c8 01       	movw	r24, r16
     df6:	0e 94 43 06 	call	0xc86	; 0xc86 <what_task>
     dfa:	00 97       	sbiw	r24, 0x00	; 0
     dfc:	29 f4       	brne	.+10     	; 0xe08 <task_cmd+0x120>
				printf("Unknown command...\n");
     dfe:	8c e8       	ldi	r24, 0x8C	; 140
     e00:	92 e0       	ldi	r25, 0x02	; 2
     e02:	0e 94 b0 09 	call	0x1360	; 0x1360 <puts>
				return ;
     e06:	19 c0       	rjmp	.+50     	; 0xe3a <task_cmd+0x152>
     e08:	dc 01       	movw	r26, r24
     e0a:	90 96       	adiw	r26, 0x20	; 32
     e0c:	ed 91       	ld	r30, X+
     e0e:	fc 91       	ld	r31, X
     e10:	91 97       	sbiw	r26, 0x21	; 33
			}

			if (cp2)
     e12:	c1 14       	cp	r12, r1
     e14:	d1 04       	cpc	r13, r1
     e16:	11 f0       	breq	.+4      	; 0xe1c <task_cmd+0x134>
				(*ptt->task_fun)(cp1);
     e18:	c7 01       	movw	r24, r14
     e1a:	02 c0       	rjmp	.+4      	; 0xe20 <task_cmd+0x138>
			else
				(*ptt->task_fun)("");
     e1c:	8f e9       	ldi	r24, 0x9F	; 159
     e1e:	92 e0       	ldi	r25, 0x02	; 2
     e20:	19 95       	eicall
		}
	printf("$ ");
     e22:	0f 92       	push	r0
     e24:	0f 92       	push	r0
     e26:	8b e7       	ldi	r24, 0x7B	; 123
     e28:	92 e0       	ldi	r25, 0x02	; 2
     e2a:	ed b7       	in	r30, 0x3d	; 61
     e2c:	fe b7       	in	r31, 0x3e	; 62
     e2e:	92 83       	std	Z+2, r25	; 0x02
     e30:	81 83       	std	Z+1, r24	; 0x01
     e32:	0e 94 97 09 	call	0x132e	; 0x132e <printf>
     e36:	0f 90       	pop	r0
     e38:	0f 90       	pop	r0
}
     e3a:	c6 5b       	subi	r28, 0xB6	; 182
     e3c:	df 4f       	sbci	r29, 0xFF	; 255
     e3e:	0f b6       	in	r0, 0x3f	; 63
     e40:	f8 94       	cli
     e42:	de bf       	out	0x3e, r29	; 62
     e44:	0f be       	out	0x3f, r0	; 63
     e46:	cd bf       	out	0x3d, r28	; 61
     e48:	df 91       	pop	r29
     e4a:	cf 91       	pop	r28
     e4c:	1f 91       	pop	r17
     e4e:	0f 91       	pop	r16
     e50:	ff 90       	pop	r15
     e52:	ef 90       	pop	r14
     e54:	df 90       	pop	r13
     e56:	cf 90       	pop	r12
     e58:	bf 90       	pop	r11
     e5a:	af 90       	pop	r10
     e5c:	08 95       	ret

00000e5e <app_sum>:
#include "app_sum.h"

void app_sum(char *ap) {
	int t = 100, sum = 0;

	if (ap && *ap) t = atoi(ap);
     e5e:	00 97       	sbiw	r24, 0x00	; 0
     e60:	41 f0       	breq	.+16     	; 0xe72 <app_sum+0x14>
     e62:	fc 01       	movw	r30, r24
     e64:	20 81       	ld	r18, Z
     e66:	22 23       	and	r18, r18
     e68:	21 f0       	breq	.+8      	; 0xe72 <app_sum+0x14>
     e6a:	0e 94 db 08 	call	0x11b6	; 0x11b6 <atoi>
     e6e:	9c 01       	movw	r18, r24
     e70:	02 c0       	rjmp	.+4      	; 0xe76 <app_sum+0x18>
#include <stdio.h>
#include <stdlib.h>
#include "app_sum.h"

void app_sum(char *ap) {
	int t = 100, sum = 0;
     e72:	24 e6       	ldi	r18, 0x64	; 100
     e74:	30 e0       	ldi	r19, 0x00	; 0

	if (ap && *ap) t = atoi(ap);
	sum = ((t + 1) * (t)) / 2;
	printf("sum=%d\n", sum);
     e76:	00 d0       	rcall	.+0      	; 0xe78 <app_sum+0x1a>
     e78:	0f 92       	push	r0
     e7a:	86 ee       	ldi	r24, 0xE6	; 230
     e7c:	92 e0       	ldi	r25, 0x02	; 2
     e7e:	ed b7       	in	r30, 0x3d	; 61
     e80:	fe b7       	in	r31, 0x3e	; 62
     e82:	92 83       	std	Z+2, r25	; 0x02
     e84:	81 83       	std	Z+1, r24	; 0x01

void app_sum(char *ap) {
	int t = 100, sum = 0;

	if (ap && *ap) t = atoi(ap);
	sum = ((t + 1) * (t)) / 2;
     e86:	a9 01       	movw	r20, r18
     e88:	4f 5f       	subi	r20, 0xFF	; 255
     e8a:	5f 4f       	sbci	r21, 0xFF	; 255
     e8c:	42 9f       	mul	r20, r18
     e8e:	c0 01       	movw	r24, r0
     e90:	43 9f       	mul	r20, r19
     e92:	90 0d       	add	r25, r0
     e94:	52 9f       	mul	r21, r18
     e96:	90 0d       	add	r25, r0
     e98:	11 24       	eor	r1, r1
     e9a:	62 e0       	ldi	r22, 0x02	; 2
     e9c:	70 e0       	ldi	r23, 0x00	; 0
     e9e:	0e 94 85 07 	call	0xf0a	; 0xf0a <__divmodhi4>
	printf("sum=%d\n", sum);
     ea2:	74 83       	std	Z+4, r23	; 0x04
     ea4:	63 83       	std	Z+3, r22	; 0x03
     ea6:	0e 94 97 09 	call	0x132e	; 0x132e <printf>
     eaa:	0f 90       	pop	r0
     eac:	0f 90       	pop	r0
     eae:	0f 90       	pop	r0
     eb0:	0f 90       	pop	r0
}
     eb2:	08 95       	ret

00000eb4 <main>:
#include "app_linked_list.h"
#include "timer_linked_list.h"
#include "task.h"

int main()
{
     eb4:	cf 93       	push	r28
     eb6:	df 93       	push	r29
     eb8:	cd b7       	in	r28, 0x3d	; 61
     eba:	de b7       	in	r29, 0x3e	; 62
     ebc:	2a 97       	sbiw	r28, 0x0a	; 10
     ebe:	0f b6       	in	r0, 0x3f	; 63
     ec0:	f8 94       	cli
     ec2:	de bf       	out	0x3e, r29	; 62
     ec4:	0f be       	out	0x3f, r0	; 63
     ec6:	cd bf       	out	0x3d, r28	; 61
	int tag;	
	struct task task;

	sei();
     ec8:	78 94       	sei
	uart_init();
     eca:	0e 94 db 04 	call	0x9b6	; 0x9b6 <uart_init>
	task_init();
     ece:	0e 94 c5 05 	call	0xb8a	; 0xb8a <task_init>
	timer_init();
     ed2:	0e 94 3c 03 	call	0x678	; 0x678 <timer_init>

	printf("$ ");
     ed6:	0f 92       	push	r0
     ed8:	0f 92       	push	r0
     eda:	80 e3       	ldi	r24, 0x30	; 48
     edc:	92 e0       	ldi	r25, 0x02	; 2
     ede:	ed b7       	in	r30, 0x3d	; 61
     ee0:	fe b7       	in	r31, 0x3e	; 62
     ee2:	92 83       	std	Z+2, r25	; 0x02
     ee4:	81 83       	std	Z+1, r24	; 0x01
     ee6:	0e 94 97 09 	call	0x132e	; 0x132e <printf>
     eea:	0f 90       	pop	r0
     eec:	0f 90       	pop	r0

	while(1) {
		cli();
     eee:	f8 94       	cli
		tag = task_delete(&task);
     ef0:	ce 01       	movw	r24, r28
     ef2:	01 96       	adiw	r24, 0x01	; 1
     ef4:	0e 94 0e 06 	call	0xc1c	; 0xc1c <task_delete>
		sei();
     ef8:	78 94       	sei
		if (tag)
     efa:	00 97       	sbiw	r24, 0x00	; 0
     efc:	c1 f3       	breq	.-16     	; 0xeee <main+0x3a>
			(*(task.fun))(task.arg);
     efe:	e9 81       	ldd	r30, Y+1	; 0x01
     f00:	fa 81       	ldd	r31, Y+2	; 0x02
     f02:	ce 01       	movw	r24, r28
     f04:	03 96       	adiw	r24, 0x03	; 3
     f06:	19 95       	eicall
     f08:	f2 cf       	rjmp	.-28     	; 0xeee <main+0x3a>

00000f0a <__divmodhi4>:
     f0a:	97 fb       	bst	r25, 7
     f0c:	09 2e       	mov	r0, r25
     f0e:	07 26       	eor	r0, r23
     f10:	0a d0       	rcall	.+20     	; 0xf26 <__divmodhi4_neg1>
     f12:	77 fd       	sbrc	r23, 7
     f14:	04 d0       	rcall	.+8      	; 0xf1e <__divmodhi4_neg2>
     f16:	0c d0       	rcall	.+24     	; 0xf30 <__udivmodhi4>
     f18:	06 d0       	rcall	.+12     	; 0xf26 <__divmodhi4_neg1>
     f1a:	00 20       	and	r0, r0
     f1c:	1a f4       	brpl	.+6      	; 0xf24 <__divmodhi4_exit>

00000f1e <__divmodhi4_neg2>:
     f1e:	70 95       	com	r23
     f20:	61 95       	neg	r22
     f22:	7f 4f       	sbci	r23, 0xFF	; 255

00000f24 <__divmodhi4_exit>:
     f24:	08 95       	ret

00000f26 <__divmodhi4_neg1>:
     f26:	f6 f7       	brtc	.-4      	; 0xf24 <__divmodhi4_exit>
     f28:	90 95       	com	r25
     f2a:	81 95       	neg	r24
     f2c:	9f 4f       	sbci	r25, 0xFF	; 255
     f2e:	08 95       	ret

00000f30 <__udivmodhi4>:
     f30:	aa 1b       	sub	r26, r26
     f32:	bb 1b       	sub	r27, r27
     f34:	51 e1       	ldi	r21, 0x11	; 17
     f36:	07 c0       	rjmp	.+14     	; 0xf46 <__udivmodhi4_ep>

00000f38 <__udivmodhi4_loop>:
     f38:	aa 1f       	adc	r26, r26
     f3a:	bb 1f       	adc	r27, r27
     f3c:	a6 17       	cp	r26, r22
     f3e:	b7 07       	cpc	r27, r23
     f40:	10 f0       	brcs	.+4      	; 0xf46 <__udivmodhi4_ep>
     f42:	a6 1b       	sub	r26, r22
     f44:	b7 0b       	sbc	r27, r23

00000f46 <__udivmodhi4_ep>:
     f46:	88 1f       	adc	r24, r24
     f48:	99 1f       	adc	r25, r25
     f4a:	5a 95       	dec	r21
     f4c:	a9 f7       	brne	.-22     	; 0xf38 <__udivmodhi4_loop>
     f4e:	80 95       	com	r24
     f50:	90 95       	com	r25
     f52:	bc 01       	movw	r22, r24
     f54:	cd 01       	movw	r24, r26
     f56:	08 95       	ret

00000f58 <malloc>:
     f58:	cf 93       	push	r28
     f5a:	df 93       	push	r29
     f5c:	ac 01       	movw	r20, r24
     f5e:	82 30       	cpi	r24, 0x02	; 2
     f60:	91 05       	cpc	r25, r1
     f62:	10 f4       	brcc	.+4      	; 0xf68 <malloc+0x10>
     f64:	42 e0       	ldi	r20, 0x02	; 2
     f66:	50 e0       	ldi	r21, 0x00	; 0
     f68:	e0 91 2a 04 	lds	r30, 0x042A
     f6c:	f0 91 2b 04 	lds	r31, 0x042B
     f70:	20 e0       	ldi	r18, 0x00	; 0
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	a0 e0       	ldi	r26, 0x00	; 0
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	24 c0       	rjmp	.+72     	; 0xfc2 <malloc+0x6a>
     f7a:	80 81       	ld	r24, Z
     f7c:	91 81       	ldd	r25, Z+1	; 0x01
     f7e:	84 17       	cp	r24, r20
     f80:	95 07       	cpc	r25, r21
     f82:	d0 f0       	brcs	.+52     	; 0xfb8 <malloc+0x60>
     f84:	84 17       	cp	r24, r20
     f86:	95 07       	cpc	r25, r21
     f88:	71 f4       	brne	.+28     	; 0xfa6 <malloc+0x4e>
     f8a:	82 81       	ldd	r24, Z+2	; 0x02
     f8c:	93 81       	ldd	r25, Z+3	; 0x03
     f8e:	10 97       	sbiw	r26, 0x00	; 0
     f90:	29 f0       	breq	.+10     	; 0xf9c <malloc+0x44>
     f92:	13 96       	adiw	r26, 0x03	; 3
     f94:	9c 93       	st	X, r25
     f96:	8e 93       	st	-X, r24
     f98:	12 97       	sbiw	r26, 0x02	; 2
     f9a:	2c c0       	rjmp	.+88     	; 0xff4 <malloc+0x9c>
     f9c:	90 93 2b 04 	sts	0x042B, r25
     fa0:	80 93 2a 04 	sts	0x042A, r24
     fa4:	27 c0       	rjmp	.+78     	; 0xff4 <malloc+0x9c>
     fa6:	21 15       	cp	r18, r1
     fa8:	31 05       	cpc	r19, r1
     faa:	19 f0       	breq	.+6      	; 0xfb2 <malloc+0x5a>
     fac:	82 17       	cp	r24, r18
     fae:	93 07       	cpc	r25, r19
     fb0:	18 f4       	brcc	.+6      	; 0xfb8 <malloc+0x60>
     fb2:	9c 01       	movw	r18, r24
     fb4:	bd 01       	movw	r22, r26
     fb6:	ef 01       	movw	r28, r30
     fb8:	92 81       	ldd	r25, Z+2	; 0x02
     fba:	83 81       	ldd	r24, Z+3	; 0x03
     fbc:	df 01       	movw	r26, r30
     fbe:	e9 2f       	mov	r30, r25
     fc0:	f8 2f       	mov	r31, r24
     fc2:	30 97       	sbiw	r30, 0x00	; 0
     fc4:	d1 f6       	brne	.-76     	; 0xf7a <malloc+0x22>
     fc6:	21 15       	cp	r18, r1
     fc8:	31 05       	cpc	r19, r1
     fca:	f9 f0       	breq	.+62     	; 0x100a <malloc+0xb2>
     fcc:	c9 01       	movw	r24, r18
     fce:	84 1b       	sub	r24, r20
     fd0:	95 0b       	sbc	r25, r21
     fd2:	84 30       	cpi	r24, 0x04	; 4
     fd4:	91 05       	cpc	r25, r1
     fd6:	80 f4       	brcc	.+32     	; 0xff8 <malloc+0xa0>
     fd8:	8a 81       	ldd	r24, Y+2	; 0x02
     fda:	9b 81       	ldd	r25, Y+3	; 0x03
     fdc:	61 15       	cp	r22, r1
     fde:	71 05       	cpc	r23, r1
     fe0:	21 f0       	breq	.+8      	; 0xfea <malloc+0x92>
     fe2:	fb 01       	movw	r30, r22
     fe4:	93 83       	std	Z+3, r25	; 0x03
     fe6:	82 83       	std	Z+2, r24	; 0x02
     fe8:	04 c0       	rjmp	.+8      	; 0xff2 <malloc+0x9a>
     fea:	90 93 2b 04 	sts	0x042B, r25
     fee:	80 93 2a 04 	sts	0x042A, r24
     ff2:	fe 01       	movw	r30, r28
     ff4:	32 96       	adiw	r30, 0x02	; 2
     ff6:	42 c0       	rjmp	.+132    	; 0x107c <malloc+0x124>
     ff8:	fe 01       	movw	r30, r28
     ffa:	e8 0f       	add	r30, r24
     ffc:	f9 1f       	adc	r31, r25
     ffe:	41 93       	st	Z+, r20
    1000:	51 93       	st	Z+, r21
    1002:	02 97       	sbiw	r24, 0x02	; 2
    1004:	99 83       	std	Y+1, r25	; 0x01
    1006:	88 83       	st	Y, r24
    1008:	39 c0       	rjmp	.+114    	; 0x107c <malloc+0x124>
    100a:	80 91 28 04 	lds	r24, 0x0428
    100e:	90 91 29 04 	lds	r25, 0x0429
    1012:	00 97       	sbiw	r24, 0x00	; 0
    1014:	41 f4       	brne	.+16     	; 0x1026 <malloc+0xce>
    1016:	80 91 f0 02 	lds	r24, 0x02F0
    101a:	90 91 f1 02 	lds	r25, 0x02F1
    101e:	90 93 29 04 	sts	0x0429, r25
    1022:	80 93 28 04 	sts	0x0428, r24
    1026:	20 91 ee 02 	lds	r18, 0x02EE
    102a:	30 91 ef 02 	lds	r19, 0x02EF
    102e:	21 15       	cp	r18, r1
    1030:	31 05       	cpc	r19, r1
    1032:	41 f4       	brne	.+16     	; 0x1044 <malloc+0xec>
    1034:	2d b7       	in	r18, 0x3d	; 61
    1036:	3e b7       	in	r19, 0x3e	; 62
    1038:	80 91 f2 02 	lds	r24, 0x02F2
    103c:	90 91 f3 02 	lds	r25, 0x02F3
    1040:	28 1b       	sub	r18, r24
    1042:	39 0b       	sbc	r19, r25
    1044:	e0 91 28 04 	lds	r30, 0x0428
    1048:	f0 91 29 04 	lds	r31, 0x0429
    104c:	e2 17       	cp	r30, r18
    104e:	f3 07       	cpc	r31, r19
    1050:	98 f4       	brcc	.+38     	; 0x1078 <malloc+0x120>
    1052:	2e 1b       	sub	r18, r30
    1054:	3f 0b       	sbc	r19, r31
    1056:	24 17       	cp	r18, r20
    1058:	35 07       	cpc	r19, r21
    105a:	70 f0       	brcs	.+28     	; 0x1078 <malloc+0x120>
    105c:	ca 01       	movw	r24, r20
    105e:	02 96       	adiw	r24, 0x02	; 2
    1060:	28 17       	cp	r18, r24
    1062:	39 07       	cpc	r19, r25
    1064:	48 f0       	brcs	.+18     	; 0x1078 <malloc+0x120>
    1066:	8e 0f       	add	r24, r30
    1068:	9f 1f       	adc	r25, r31
    106a:	90 93 29 04 	sts	0x0429, r25
    106e:	80 93 28 04 	sts	0x0428, r24
    1072:	41 93       	st	Z+, r20
    1074:	51 93       	st	Z+, r21
    1076:	02 c0       	rjmp	.+4      	; 0x107c <malloc+0x124>
    1078:	e0 e0       	ldi	r30, 0x00	; 0
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	cf 01       	movw	r24, r30
    107e:	df 91       	pop	r29
    1080:	cf 91       	pop	r28
    1082:	08 95       	ret

00001084 <free>:
    1084:	0f 93       	push	r16
    1086:	1f 93       	push	r17
    1088:	cf 93       	push	r28
    108a:	df 93       	push	r29
    108c:	9c 01       	movw	r18, r24
    108e:	00 97       	sbiw	r24, 0x00	; 0
    1090:	09 f4       	brne	.+2      	; 0x1094 <free+0x10>
    1092:	8c c0       	rjmp	.+280    	; 0x11ac <free+0x128>
    1094:	dc 01       	movw	r26, r24
    1096:	12 97       	sbiw	r26, 0x02	; 2
    1098:	13 96       	adiw	r26, 0x03	; 3
    109a:	1c 92       	st	X, r1
    109c:	1e 92       	st	-X, r1
    109e:	12 97       	sbiw	r26, 0x02	; 2
    10a0:	60 91 2a 04 	lds	r22, 0x042A
    10a4:	70 91 2b 04 	lds	r23, 0x042B
    10a8:	61 15       	cp	r22, r1
    10aa:	71 05       	cpc	r23, r1
    10ac:	89 f4       	brne	.+34     	; 0x10d0 <free+0x4c>
    10ae:	8d 91       	ld	r24, X+
    10b0:	9c 91       	ld	r25, X
    10b2:	11 97       	sbiw	r26, 0x01	; 1
    10b4:	82 0f       	add	r24, r18
    10b6:	93 1f       	adc	r25, r19
    10b8:	20 91 28 04 	lds	r18, 0x0428
    10bc:	30 91 29 04 	lds	r19, 0x0429
    10c0:	28 17       	cp	r18, r24
    10c2:	39 07       	cpc	r19, r25
    10c4:	69 f5       	brne	.+90     	; 0x1120 <free+0x9c>
    10c6:	b0 93 29 04 	sts	0x0429, r27
    10ca:	a0 93 28 04 	sts	0x0428, r26
    10ce:	6e c0       	rjmp	.+220    	; 0x11ac <free+0x128>
    10d0:	fb 01       	movw	r30, r22
    10d2:	40 e0       	ldi	r20, 0x00	; 0
    10d4:	50 e0       	ldi	r21, 0x00	; 0
    10d6:	01 c0       	rjmp	.+2      	; 0x10da <free+0x56>
    10d8:	fc 01       	movw	r30, r24
    10da:	ea 17       	cp	r30, r26
    10dc:	fb 07       	cpc	r31, r27
    10de:	30 f4       	brcc	.+12     	; 0x10ec <free+0x68>
    10e0:	82 81       	ldd	r24, Z+2	; 0x02
    10e2:	93 81       	ldd	r25, Z+3	; 0x03
    10e4:	af 01       	movw	r20, r30
    10e6:	00 97       	sbiw	r24, 0x00	; 0
    10e8:	b9 f7       	brne	.-18     	; 0x10d8 <free+0x54>
    10ea:	1f c0       	rjmp	.+62     	; 0x112a <free+0xa6>
    10ec:	e9 01       	movw	r28, r18
    10ee:	22 97       	sbiw	r28, 0x02	; 2
    10f0:	fb 83       	std	Y+3, r31	; 0x03
    10f2:	ea 83       	std	Y+2, r30	; 0x02
    10f4:	08 81       	ld	r16, Y
    10f6:	19 81       	ldd	r17, Y+1	; 0x01
    10f8:	c9 01       	movw	r24, r18
    10fa:	80 0f       	add	r24, r16
    10fc:	91 1f       	adc	r25, r17
    10fe:	8e 17       	cp	r24, r30
    1100:	9f 07       	cpc	r25, r31
    1102:	59 f4       	brne	.+22     	; 0x111a <free+0x96>
    1104:	80 81       	ld	r24, Z
    1106:	91 81       	ldd	r25, Z+1	; 0x01
    1108:	80 0f       	add	r24, r16
    110a:	91 1f       	adc	r25, r17
    110c:	02 96       	adiw	r24, 0x02	; 2
    110e:	99 83       	std	Y+1, r25	; 0x01
    1110:	88 83       	st	Y, r24
    1112:	82 81       	ldd	r24, Z+2	; 0x02
    1114:	93 81       	ldd	r25, Z+3	; 0x03
    1116:	9b 83       	std	Y+3, r25	; 0x03
    1118:	8a 83       	std	Y+2, r24	; 0x02
    111a:	41 15       	cp	r20, r1
    111c:	51 05       	cpc	r21, r1
    111e:	29 f4       	brne	.+10     	; 0x112a <free+0xa6>
    1120:	b0 93 2b 04 	sts	0x042B, r27
    1124:	a0 93 2a 04 	sts	0x042A, r26
    1128:	41 c0       	rjmp	.+130    	; 0x11ac <free+0x128>
    112a:	fa 01       	movw	r30, r20
    112c:	b3 83       	std	Z+3, r27	; 0x03
    112e:	a2 83       	std	Z+2, r26	; 0x02
    1130:	c1 91       	ld	r28, Z+
    1132:	d1 91       	ld	r29, Z+
    1134:	ec 0f       	add	r30, r28
    1136:	fd 1f       	adc	r31, r29
    1138:	ae 17       	cp	r26, r30
    113a:	bf 07       	cpc	r27, r31
    113c:	81 f4       	brne	.+32     	; 0x115e <free+0xda>
    113e:	f9 01       	movw	r30, r18
    1140:	92 91       	ld	r25, -Z
    1142:	82 91       	ld	r24, -Z
    1144:	8c 0f       	add	r24, r28
    1146:	9d 1f       	adc	r25, r29
    1148:	02 96       	adiw	r24, 0x02	; 2
    114a:	da 01       	movw	r26, r20
    114c:	11 96       	adiw	r26, 0x01	; 1
    114e:	9c 93       	st	X, r25
    1150:	8e 93       	st	-X, r24
    1152:	82 81       	ldd	r24, Z+2	; 0x02
    1154:	93 81       	ldd	r25, Z+3	; 0x03
    1156:	13 96       	adiw	r26, 0x03	; 3
    1158:	9c 93       	st	X, r25
    115a:	8e 93       	st	-X, r24
    115c:	12 97       	sbiw	r26, 0x02	; 2
    115e:	e0 e0       	ldi	r30, 0x00	; 0
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	02 c0       	rjmp	.+4      	; 0x1168 <free+0xe4>
    1164:	fb 01       	movw	r30, r22
    1166:	bc 01       	movw	r22, r24
    1168:	db 01       	movw	r26, r22
    116a:	12 96       	adiw	r26, 0x02	; 2
    116c:	8d 91       	ld	r24, X+
    116e:	9c 91       	ld	r25, X
    1170:	13 97       	sbiw	r26, 0x03	; 3
    1172:	00 97       	sbiw	r24, 0x00	; 0
    1174:	b9 f7       	brne	.-18     	; 0x1164 <free+0xe0>
    1176:	cb 01       	movw	r24, r22
    1178:	02 96       	adiw	r24, 0x02	; 2
    117a:	2d 91       	ld	r18, X+
    117c:	3c 91       	ld	r19, X
    117e:	11 97       	sbiw	r26, 0x01	; 1
    1180:	82 0f       	add	r24, r18
    1182:	93 1f       	adc	r25, r19
    1184:	20 91 28 04 	lds	r18, 0x0428
    1188:	30 91 29 04 	lds	r19, 0x0429
    118c:	28 17       	cp	r18, r24
    118e:	39 07       	cpc	r19, r25
    1190:	69 f4       	brne	.+26     	; 0x11ac <free+0x128>
    1192:	30 97       	sbiw	r30, 0x00	; 0
    1194:	29 f4       	brne	.+10     	; 0x11a0 <free+0x11c>
    1196:	10 92 2b 04 	sts	0x042B, r1
    119a:	10 92 2a 04 	sts	0x042A, r1
    119e:	02 c0       	rjmp	.+4      	; 0x11a4 <free+0x120>
    11a0:	13 82       	std	Z+3, r1	; 0x03
    11a2:	12 82       	std	Z+2, r1	; 0x02
    11a4:	70 93 29 04 	sts	0x0429, r23
    11a8:	60 93 28 04 	sts	0x0428, r22
    11ac:	df 91       	pop	r29
    11ae:	cf 91       	pop	r28
    11b0:	1f 91       	pop	r17
    11b2:	0f 91       	pop	r16
    11b4:	08 95       	ret

000011b6 <atoi>:
    11b6:	fc 01       	movw	r30, r24
    11b8:	88 27       	eor	r24, r24
    11ba:	99 27       	eor	r25, r25
    11bc:	e8 94       	clt
    11be:	21 91       	ld	r18, Z+
    11c0:	20 32       	cpi	r18, 0x20	; 32
    11c2:	e9 f3       	breq	.-6      	; 0x11be <atoi+0x8>
    11c4:	29 30       	cpi	r18, 0x09	; 9
    11c6:	10 f0       	brcs	.+4      	; 0x11cc <atoi+0x16>
    11c8:	2e 30       	cpi	r18, 0x0E	; 14
    11ca:	c8 f3       	brcs	.-14     	; 0x11be <atoi+0x8>
    11cc:	2b 32       	cpi	r18, 0x2B	; 43
    11ce:	41 f0       	breq	.+16     	; 0x11e0 <atoi+0x2a>
    11d0:	2d 32       	cpi	r18, 0x2D	; 45
    11d2:	39 f4       	brne	.+14     	; 0x11e2 <atoi+0x2c>
    11d4:	68 94       	set
    11d6:	04 c0       	rjmp	.+8      	; 0x11e0 <atoi+0x2a>
    11d8:	0e 94 35 09 	call	0x126a	; 0x126a <__mulhi_const_10>
    11dc:	82 0f       	add	r24, r18
    11de:	91 1d       	adc	r25, r1
    11e0:	21 91       	ld	r18, Z+
    11e2:	20 53       	subi	r18, 0x30	; 48
    11e4:	2a 30       	cpi	r18, 0x0A	; 10
    11e6:	c0 f3       	brcs	.-16     	; 0x11d8 <atoi+0x22>
    11e8:	1e f4       	brtc	.+6      	; 0x11f0 <atoi+0x3a>
    11ea:	90 95       	com	r25
    11ec:	81 95       	neg	r24
    11ee:	9f 4f       	sbci	r25, 0xFF	; 255
    11f0:	08 95       	ret

000011f2 <strtok>:
    11f2:	49 ef       	ldi	r20, 0xF9	; 249
    11f4:	52 e0       	ldi	r21, 0x02	; 2
    11f6:	0e 94 0e 09 	call	0x121c	; 0x121c <strtok_r>
    11fa:	08 95       	ret

000011fc <strcmp>:
    11fc:	fb 01       	movw	r30, r22
    11fe:	dc 01       	movw	r26, r24
    1200:	8d 91       	ld	r24, X+
    1202:	01 90       	ld	r0, Z+
    1204:	80 19       	sub	r24, r0
    1206:	01 10       	cpse	r0, r1
    1208:	d9 f3       	breq	.-10     	; 0x1200 <strcmp+0x4>
    120a:	99 0b       	sbc	r25, r25
    120c:	08 95       	ret

0000120e <strcpy>:
    120e:	fb 01       	movw	r30, r22
    1210:	dc 01       	movw	r26, r24
    1212:	01 90       	ld	r0, Z+
    1214:	0d 92       	st	X+, r0
    1216:	00 20       	and	r0, r0
    1218:	e1 f7       	brne	.-8      	; 0x1212 <strcpy+0x4>
    121a:	08 95       	ret

0000121c <strtok_r>:
    121c:	fa 01       	movw	r30, r20
    121e:	a1 91       	ld	r26, Z+
    1220:	b0 81       	ld	r27, Z
    1222:	00 97       	sbiw	r24, 0x00	; 0
    1224:	19 f4       	brne	.+6      	; 0x122c <strtok_r+0x10>
    1226:	10 97       	sbiw	r26, 0x00	; 0
    1228:	e1 f0       	breq	.+56     	; 0x1262 <strtok_r+0x46>
    122a:	cd 01       	movw	r24, r26
    122c:	dc 01       	movw	r26, r24
    122e:	cd 01       	movw	r24, r26
    1230:	0d 90       	ld	r0, X+
    1232:	00 20       	and	r0, r0
    1234:	11 f4       	brne	.+4      	; 0x123a <strtok_r+0x1e>
    1236:	c0 01       	movw	r24, r0
    1238:	13 c0       	rjmp	.+38     	; 0x1260 <strtok_r+0x44>
    123a:	fb 01       	movw	r30, r22
    123c:	21 91       	ld	r18, Z+
    123e:	22 23       	and	r18, r18
    1240:	19 f0       	breq	.+6      	; 0x1248 <strtok_r+0x2c>
    1242:	20 15       	cp	r18, r0
    1244:	d9 f7       	brne	.-10     	; 0x123c <strtok_r+0x20>
    1246:	f3 cf       	rjmp	.-26     	; 0x122e <strtok_r+0x12>
    1248:	fb 01       	movw	r30, r22
    124a:	21 91       	ld	r18, Z+
    124c:	20 15       	cp	r18, r0
    124e:	19 f4       	brne	.+6      	; 0x1256 <strtok_r+0x3a>
    1250:	1e 92       	st	-X, r1
    1252:	11 96       	adiw	r26, 0x01	; 1
    1254:	06 c0       	rjmp	.+12     	; 0x1262 <strtok_r+0x46>
    1256:	22 23       	and	r18, r18
    1258:	c1 f7       	brne	.-16     	; 0x124a <strtok_r+0x2e>
    125a:	0d 90       	ld	r0, X+
    125c:	00 20       	and	r0, r0
    125e:	a1 f7       	brne	.-24     	; 0x1248 <strtok_r+0x2c>
    1260:	d0 01       	movw	r26, r0
    1262:	fa 01       	movw	r30, r20
    1264:	a1 93       	st	Z+, r26
    1266:	b0 83       	st	Z, r27
    1268:	08 95       	ret

0000126a <__mulhi_const_10>:
    126a:	7a e0       	ldi	r23, 0x0A	; 10
    126c:	97 9f       	mul	r25, r23
    126e:	90 2d       	mov	r25, r0
    1270:	87 9f       	mul	r24, r23
    1272:	80 2d       	mov	r24, r0
    1274:	91 0d       	add	r25, r1
    1276:	11 24       	eor	r1, r1
    1278:	08 95       	ret

0000127a <fgets>:
    127a:	cf 92       	push	r12
    127c:	df 92       	push	r13
    127e:	ef 92       	push	r14
    1280:	ff 92       	push	r15
    1282:	0f 93       	push	r16
    1284:	1f 93       	push	r17
    1286:	cf 93       	push	r28
    1288:	df 93       	push	r29
    128a:	8c 01       	movw	r16, r24
    128c:	6a 01       	movw	r12, r20
    128e:	fa 01       	movw	r30, r20
    1290:	83 81       	ldd	r24, Z+3	; 0x03
    1292:	80 ff       	sbrs	r24, 0
    1294:	1a c0       	rjmp	.+52     	; 0x12ca <fgets+0x50>
    1296:	16 16       	cp	r1, r22
    1298:	17 06       	cpc	r1, r23
    129a:	bc f4       	brge	.+46     	; 0x12ca <fgets+0x50>
    129c:	7b 01       	movw	r14, r22
    129e:	e8 01       	movw	r28, r16
    12a0:	0e c0       	rjmp	.+28     	; 0x12be <fgets+0x44>
    12a2:	c6 01       	movw	r24, r12
    12a4:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <fgetc>
    12a8:	ff ef       	ldi	r31, 0xFF	; 255
    12aa:	8f 3f       	cpi	r24, 0xFF	; 255
    12ac:	9f 07       	cpc	r25, r31
    12ae:	69 f0       	breq	.+26     	; 0x12ca <fgets+0x50>
    12b0:	89 93       	st	Y+, r24
    12b2:	08 94       	sec
    12b4:	e1 08       	sbc	r14, r1
    12b6:	f1 08       	sbc	r15, r1
    12b8:	8a 30       	cpi	r24, 0x0A	; 10
    12ba:	91 05       	cpc	r25, r1
    12bc:	21 f0       	breq	.+8      	; 0x12c6 <fgets+0x4c>
    12be:	21 e0       	ldi	r18, 0x01	; 1
    12c0:	e2 16       	cp	r14, r18
    12c2:	f1 04       	cpc	r15, r1
    12c4:	71 f7       	brne	.-36     	; 0x12a2 <fgets+0x28>
    12c6:	18 82       	st	Y, r1
    12c8:	02 c0       	rjmp	.+4      	; 0x12ce <fgets+0x54>
    12ca:	00 e0       	ldi	r16, 0x00	; 0
    12cc:	10 e0       	ldi	r17, 0x00	; 0
    12ce:	c8 01       	movw	r24, r16
    12d0:	df 91       	pop	r29
    12d2:	cf 91       	pop	r28
    12d4:	1f 91       	pop	r17
    12d6:	0f 91       	pop	r16
    12d8:	ff 90       	pop	r15
    12da:	ef 90       	pop	r14
    12dc:	df 90       	pop	r13
    12de:	cf 90       	pop	r12
    12e0:	08 95       	ret

000012e2 <gets>:
    12e2:	0f 93       	push	r16
    12e4:	1f 93       	push	r17
    12e6:	cf 93       	push	r28
    12e8:	df 93       	push	r29
    12ea:	8c 01       	movw	r16, r24
    12ec:	e0 91 2c 04 	lds	r30, 0x042C
    12f0:	f0 91 2d 04 	lds	r31, 0x042D
    12f4:	83 81       	ldd	r24, Z+3	; 0x03
    12f6:	80 ff       	sbrs	r24, 0
    12f8:	12 c0       	rjmp	.+36     	; 0x131e <gets+0x3c>
    12fa:	e8 01       	movw	r28, r16
    12fc:	80 91 2c 04 	lds	r24, 0x042C
    1300:	90 91 2d 04 	lds	r25, 0x042D
    1304:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <fgetc>
    1308:	2f ef       	ldi	r18, 0xFF	; 255
    130a:	8f 3f       	cpi	r24, 0xFF	; 255
    130c:	92 07       	cpc	r25, r18
    130e:	39 f0       	breq	.+14     	; 0x131e <gets+0x3c>
    1310:	89 93       	st	Y+, r24
    1312:	8a 30       	cpi	r24, 0x0A	; 10
    1314:	91 05       	cpc	r25, r1
    1316:	91 f7       	brne	.-28     	; 0x12fc <gets+0x1a>
    1318:	21 97       	sbiw	r28, 0x01	; 1
    131a:	18 82       	st	Y, r1
    131c:	02 c0       	rjmp	.+4      	; 0x1322 <gets+0x40>
    131e:	00 e0       	ldi	r16, 0x00	; 0
    1320:	10 e0       	ldi	r17, 0x00	; 0
    1322:	c8 01       	movw	r24, r16
    1324:	df 91       	pop	r29
    1326:	cf 91       	pop	r28
    1328:	1f 91       	pop	r17
    132a:	0f 91       	pop	r16
    132c:	08 95       	ret

0000132e <printf>:
    132e:	cf 93       	push	r28
    1330:	df 93       	push	r29
    1332:	cd b7       	in	r28, 0x3d	; 61
    1334:	de b7       	in	r29, 0x3e	; 62
    1336:	fe 01       	movw	r30, r28
    1338:	36 96       	adiw	r30, 0x06	; 6
    133a:	61 91       	ld	r22, Z+
    133c:	71 91       	ld	r23, Z+
    133e:	80 91 2e 04 	lds	r24, 0x042E
    1342:	90 91 2f 04 	lds	r25, 0x042F
    1346:	af 01       	movw	r20, r30
    1348:	0e 94 de 09 	call	0x13bc	; 0x13bc <vfprintf>
    134c:	df 91       	pop	r29
    134e:	cf 91       	pop	r28
    1350:	08 95       	ret

00001352 <putchar>:
    1352:	60 91 2e 04 	lds	r22, 0x042E
    1356:	70 91 2f 04 	lds	r23, 0x042F
    135a:	0e 94 3b 0c 	call	0x1876	; 0x1876 <fputc>
    135e:	08 95       	ret

00001360 <puts>:
    1360:	0f 93       	push	r16
    1362:	1f 93       	push	r17
    1364:	cf 93       	push	r28
    1366:	df 93       	push	r29
    1368:	8c 01       	movw	r16, r24
    136a:	e0 91 2e 04 	lds	r30, 0x042E
    136e:	f0 91 2f 04 	lds	r31, 0x042F
    1372:	83 81       	ldd	r24, Z+3	; 0x03
    1374:	81 ff       	sbrs	r24, 1
    1376:	1a c0       	rjmp	.+52     	; 0x13ac <puts+0x4c>
    1378:	c0 e0       	ldi	r28, 0x00	; 0
    137a:	d0 e0       	ldi	r29, 0x00	; 0
    137c:	05 c0       	rjmp	.+10     	; 0x1388 <puts+0x28>
    137e:	19 95       	eicall
    1380:	00 97       	sbiw	r24, 0x00	; 0
    1382:	11 f0       	breq	.+4      	; 0x1388 <puts+0x28>
    1384:	cf ef       	ldi	r28, 0xFF	; 255
    1386:	df ef       	ldi	r29, 0xFF	; 255
    1388:	f8 01       	movw	r30, r16
    138a:	81 91       	ld	r24, Z+
    138c:	8f 01       	movw	r16, r30
    138e:	60 91 2e 04 	lds	r22, 0x042E
    1392:	70 91 2f 04 	lds	r23, 0x042F
    1396:	db 01       	movw	r26, r22
    1398:	18 96       	adiw	r26, 0x08	; 8
    139a:	ed 91       	ld	r30, X+
    139c:	fc 91       	ld	r31, X
    139e:	19 97       	sbiw	r26, 0x09	; 9
    13a0:	88 23       	and	r24, r24
    13a2:	69 f7       	brne	.-38     	; 0x137e <puts+0x1e>
    13a4:	8a e0       	ldi	r24, 0x0A	; 10
    13a6:	19 95       	eicall
    13a8:	00 97       	sbiw	r24, 0x00	; 0
    13aa:	11 f0       	breq	.+4      	; 0x13b0 <puts+0x50>
    13ac:	cf ef       	ldi	r28, 0xFF	; 255
    13ae:	df ef       	ldi	r29, 0xFF	; 255
    13b0:	ce 01       	movw	r24, r28
    13b2:	df 91       	pop	r29
    13b4:	cf 91       	pop	r28
    13b6:	1f 91       	pop	r17
    13b8:	0f 91       	pop	r16
    13ba:	08 95       	ret

000013bc <vfprintf>:
    13bc:	2f 92       	push	r2
    13be:	3f 92       	push	r3
    13c0:	4f 92       	push	r4
    13c2:	5f 92       	push	r5
    13c4:	6f 92       	push	r6
    13c6:	7f 92       	push	r7
    13c8:	8f 92       	push	r8
    13ca:	9f 92       	push	r9
    13cc:	af 92       	push	r10
    13ce:	bf 92       	push	r11
    13d0:	cf 92       	push	r12
    13d2:	df 92       	push	r13
    13d4:	ef 92       	push	r14
    13d6:	ff 92       	push	r15
    13d8:	0f 93       	push	r16
    13da:	1f 93       	push	r17
    13dc:	cf 93       	push	r28
    13de:	df 93       	push	r29
    13e0:	cd b7       	in	r28, 0x3d	; 61
    13e2:	de b7       	in	r29, 0x3e	; 62
    13e4:	2d 97       	sbiw	r28, 0x0d	; 13
    13e6:	0f b6       	in	r0, 0x3f	; 63
    13e8:	f8 94       	cli
    13ea:	de bf       	out	0x3e, r29	; 62
    13ec:	0f be       	out	0x3f, r0	; 63
    13ee:	cd bf       	out	0x3d, r28	; 61
    13f0:	3c 01       	movw	r6, r24
    13f2:	7d 87       	std	Y+13, r23	; 0x0d
    13f4:	6c 87       	std	Y+12, r22	; 0x0c
    13f6:	5a 01       	movw	r10, r20
    13f8:	fc 01       	movw	r30, r24
    13fa:	17 82       	std	Z+7, r1	; 0x07
    13fc:	16 82       	std	Z+6, r1	; 0x06
    13fe:	83 81       	ldd	r24, Z+3	; 0x03
    1400:	81 ff       	sbrs	r24, 1
    1402:	c8 c1       	rjmp	.+912    	; 0x1794 <vfprintf+0x3d8>
    1404:	2e 01       	movw	r4, r28
    1406:	08 94       	sec
    1408:	41 1c       	adc	r4, r1
    140a:	51 1c       	adc	r5, r1
    140c:	f3 01       	movw	r30, r6
    140e:	93 81       	ldd	r25, Z+3	; 0x03
    1410:	ec 85       	ldd	r30, Y+12	; 0x0c
    1412:	fd 85       	ldd	r31, Y+13	; 0x0d
    1414:	93 fd       	sbrc	r25, 3
    1416:	85 91       	lpm	r24, Z+
    1418:	93 ff       	sbrs	r25, 3
    141a:	81 91       	ld	r24, Z+
    141c:	fd 87       	std	Y+13, r31	; 0x0d
    141e:	ec 87       	std	Y+12, r30	; 0x0c
    1420:	88 23       	and	r24, r24
    1422:	09 f4       	brne	.+2      	; 0x1426 <vfprintf+0x6a>
    1424:	b3 c1       	rjmp	.+870    	; 0x178c <vfprintf+0x3d0>
    1426:	85 32       	cpi	r24, 0x25	; 37
    1428:	41 f4       	brne	.+16     	; 0x143a <vfprintf+0x7e>
    142a:	93 fd       	sbrc	r25, 3
    142c:	85 91       	lpm	r24, Z+
    142e:	93 ff       	sbrs	r25, 3
    1430:	81 91       	ld	r24, Z+
    1432:	fd 87       	std	Y+13, r31	; 0x0d
    1434:	ec 87       	std	Y+12, r30	; 0x0c
    1436:	85 32       	cpi	r24, 0x25	; 37
    1438:	29 f4       	brne	.+10     	; 0x1444 <vfprintf+0x88>
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	b3 01       	movw	r22, r6
    143e:	0e 94 3b 0c 	call	0x1876	; 0x1876 <fputc>
    1442:	e4 cf       	rjmp	.-56     	; 0x140c <vfprintf+0x50>
    1444:	ff 24       	eor	r15, r15
    1446:	ee 24       	eor	r14, r14
    1448:	10 e0       	ldi	r17, 0x00	; 0
    144a:	10 32       	cpi	r17, 0x20	; 32
    144c:	b0 f4       	brcc	.+44     	; 0x147a <vfprintf+0xbe>
    144e:	8b 32       	cpi	r24, 0x2B	; 43
    1450:	69 f0       	breq	.+26     	; 0x146c <vfprintf+0xb0>
    1452:	8c 32       	cpi	r24, 0x2C	; 44
    1454:	28 f4       	brcc	.+10     	; 0x1460 <vfprintf+0xa4>
    1456:	80 32       	cpi	r24, 0x20	; 32
    1458:	51 f0       	breq	.+20     	; 0x146e <vfprintf+0xb2>
    145a:	83 32       	cpi	r24, 0x23	; 35
    145c:	71 f4       	brne	.+28     	; 0x147a <vfprintf+0xbe>
    145e:	0b c0       	rjmp	.+22     	; 0x1476 <vfprintf+0xba>
    1460:	8d 32       	cpi	r24, 0x2D	; 45
    1462:	39 f0       	breq	.+14     	; 0x1472 <vfprintf+0xb6>
    1464:	80 33       	cpi	r24, 0x30	; 48
    1466:	49 f4       	brne	.+18     	; 0x147a <vfprintf+0xbe>
    1468:	11 60       	ori	r17, 0x01	; 1
    146a:	2c c0       	rjmp	.+88     	; 0x14c4 <vfprintf+0x108>
    146c:	12 60       	ori	r17, 0x02	; 2
    146e:	14 60       	ori	r17, 0x04	; 4
    1470:	29 c0       	rjmp	.+82     	; 0x14c4 <vfprintf+0x108>
    1472:	18 60       	ori	r17, 0x08	; 8
    1474:	27 c0       	rjmp	.+78     	; 0x14c4 <vfprintf+0x108>
    1476:	10 61       	ori	r17, 0x10	; 16
    1478:	25 c0       	rjmp	.+74     	; 0x14c4 <vfprintf+0x108>
    147a:	17 fd       	sbrc	r17, 7
    147c:	2e c0       	rjmp	.+92     	; 0x14da <vfprintf+0x11e>
    147e:	28 2f       	mov	r18, r24
    1480:	20 53       	subi	r18, 0x30	; 48
    1482:	2a 30       	cpi	r18, 0x0A	; 10
    1484:	98 f4       	brcc	.+38     	; 0x14ac <vfprintf+0xf0>
    1486:	16 ff       	sbrs	r17, 6
    1488:	08 c0       	rjmp	.+16     	; 0x149a <vfprintf+0xde>
    148a:	8f 2d       	mov	r24, r15
    148c:	88 0f       	add	r24, r24
    148e:	f8 2e       	mov	r15, r24
    1490:	ff 0c       	add	r15, r15
    1492:	ff 0c       	add	r15, r15
    1494:	f8 0e       	add	r15, r24
    1496:	f2 0e       	add	r15, r18
    1498:	15 c0       	rjmp	.+42     	; 0x14c4 <vfprintf+0x108>
    149a:	8e 2d       	mov	r24, r14
    149c:	88 0f       	add	r24, r24
    149e:	e8 2e       	mov	r14, r24
    14a0:	ee 0c       	add	r14, r14
    14a2:	ee 0c       	add	r14, r14
    14a4:	e8 0e       	add	r14, r24
    14a6:	e2 0e       	add	r14, r18
    14a8:	10 62       	ori	r17, 0x20	; 32
    14aa:	0c c0       	rjmp	.+24     	; 0x14c4 <vfprintf+0x108>
    14ac:	8e 32       	cpi	r24, 0x2E	; 46
    14ae:	21 f4       	brne	.+8      	; 0x14b8 <vfprintf+0xfc>
    14b0:	16 fd       	sbrc	r17, 6
    14b2:	6c c1       	rjmp	.+728    	; 0x178c <vfprintf+0x3d0>
    14b4:	10 64       	ori	r17, 0x40	; 64
    14b6:	06 c0       	rjmp	.+12     	; 0x14c4 <vfprintf+0x108>
    14b8:	8c 36       	cpi	r24, 0x6C	; 108
    14ba:	11 f4       	brne	.+4      	; 0x14c0 <vfprintf+0x104>
    14bc:	10 68       	ori	r17, 0x80	; 128
    14be:	02 c0       	rjmp	.+4      	; 0x14c4 <vfprintf+0x108>
    14c0:	88 36       	cpi	r24, 0x68	; 104
    14c2:	59 f4       	brne	.+22     	; 0x14da <vfprintf+0x11e>
    14c4:	ec 85       	ldd	r30, Y+12	; 0x0c
    14c6:	fd 85       	ldd	r31, Y+13	; 0x0d
    14c8:	93 fd       	sbrc	r25, 3
    14ca:	85 91       	lpm	r24, Z+
    14cc:	93 ff       	sbrs	r25, 3
    14ce:	81 91       	ld	r24, Z+
    14d0:	fd 87       	std	Y+13, r31	; 0x0d
    14d2:	ec 87       	std	Y+12, r30	; 0x0c
    14d4:	88 23       	and	r24, r24
    14d6:	09 f0       	breq	.+2      	; 0x14da <vfprintf+0x11e>
    14d8:	b8 cf       	rjmp	.-144    	; 0x144a <vfprintf+0x8e>
    14da:	98 2f       	mov	r25, r24
    14dc:	95 54       	subi	r25, 0x45	; 69
    14de:	93 30       	cpi	r25, 0x03	; 3
    14e0:	18 f0       	brcs	.+6      	; 0x14e8 <vfprintf+0x12c>
    14e2:	90 52       	subi	r25, 0x20	; 32
    14e4:	93 30       	cpi	r25, 0x03	; 3
    14e6:	38 f4       	brcc	.+14     	; 0x14f6 <vfprintf+0x13a>
    14e8:	24 e0       	ldi	r18, 0x04	; 4
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	a2 0e       	add	r10, r18
    14ee:	b3 1e       	adc	r11, r19
    14f0:	3f e3       	ldi	r19, 0x3F	; 63
    14f2:	39 83       	std	Y+1, r19	; 0x01
    14f4:	0f c0       	rjmp	.+30     	; 0x1514 <vfprintf+0x158>
    14f6:	83 36       	cpi	r24, 0x63	; 99
    14f8:	31 f0       	breq	.+12     	; 0x1506 <vfprintf+0x14a>
    14fa:	83 37       	cpi	r24, 0x73	; 115
    14fc:	81 f0       	breq	.+32     	; 0x151e <vfprintf+0x162>
    14fe:	83 35       	cpi	r24, 0x53	; 83
    1500:	09 f0       	breq	.+2      	; 0x1504 <vfprintf+0x148>
    1502:	5a c0       	rjmp	.+180    	; 0x15b8 <vfprintf+0x1fc>
    1504:	22 c0       	rjmp	.+68     	; 0x154a <vfprintf+0x18e>
    1506:	f5 01       	movw	r30, r10
    1508:	80 81       	ld	r24, Z
    150a:	89 83       	std	Y+1, r24	; 0x01
    150c:	22 e0       	ldi	r18, 0x02	; 2
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	a2 0e       	add	r10, r18
    1512:	b3 1e       	adc	r11, r19
    1514:	21 e0       	ldi	r18, 0x01	; 1
    1516:	c2 2e       	mov	r12, r18
    1518:	d1 2c       	mov	r13, r1
    151a:	42 01       	movw	r8, r4
    151c:	14 c0       	rjmp	.+40     	; 0x1546 <vfprintf+0x18a>
    151e:	92 e0       	ldi	r25, 0x02	; 2
    1520:	29 2e       	mov	r2, r25
    1522:	31 2c       	mov	r3, r1
    1524:	2a 0c       	add	r2, r10
    1526:	3b 1c       	adc	r3, r11
    1528:	f5 01       	movw	r30, r10
    152a:	80 80       	ld	r8, Z
    152c:	91 80       	ldd	r9, Z+1	; 0x01
    152e:	16 ff       	sbrs	r17, 6
    1530:	03 c0       	rjmp	.+6      	; 0x1538 <vfprintf+0x17c>
    1532:	6f 2d       	mov	r22, r15
    1534:	70 e0       	ldi	r23, 0x00	; 0
    1536:	02 c0       	rjmp	.+4      	; 0x153c <vfprintf+0x180>
    1538:	6f ef       	ldi	r22, 0xFF	; 255
    153a:	7f ef       	ldi	r23, 0xFF	; 255
    153c:	c4 01       	movw	r24, r8
    153e:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <strnlen>
    1542:	6c 01       	movw	r12, r24
    1544:	51 01       	movw	r10, r2
    1546:	1f 77       	andi	r17, 0x7F	; 127
    1548:	15 c0       	rjmp	.+42     	; 0x1574 <vfprintf+0x1b8>
    154a:	82 e0       	ldi	r24, 0x02	; 2
    154c:	28 2e       	mov	r2, r24
    154e:	31 2c       	mov	r3, r1
    1550:	2a 0c       	add	r2, r10
    1552:	3b 1c       	adc	r3, r11
    1554:	f5 01       	movw	r30, r10
    1556:	80 80       	ld	r8, Z
    1558:	91 80       	ldd	r9, Z+1	; 0x01
    155a:	16 ff       	sbrs	r17, 6
    155c:	03 c0       	rjmp	.+6      	; 0x1564 <vfprintf+0x1a8>
    155e:	6f 2d       	mov	r22, r15
    1560:	70 e0       	ldi	r23, 0x00	; 0
    1562:	02 c0       	rjmp	.+4      	; 0x1568 <vfprintf+0x1ac>
    1564:	6f ef       	ldi	r22, 0xFF	; 255
    1566:	7f ef       	ldi	r23, 0xFF	; 255
    1568:	c4 01       	movw	r24, r8
    156a:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <strnlen_P>
    156e:	6c 01       	movw	r12, r24
    1570:	10 68       	ori	r17, 0x80	; 128
    1572:	51 01       	movw	r10, r2
    1574:	13 fd       	sbrc	r17, 3
    1576:	1c c0       	rjmp	.+56     	; 0x15b0 <vfprintf+0x1f4>
    1578:	06 c0       	rjmp	.+12     	; 0x1586 <vfprintf+0x1ca>
    157a:	80 e2       	ldi	r24, 0x20	; 32
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	b3 01       	movw	r22, r6
    1580:	0e 94 3b 0c 	call	0x1876	; 0x1876 <fputc>
    1584:	ea 94       	dec	r14
    1586:	8e 2d       	mov	r24, r14
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	c8 16       	cp	r12, r24
    158c:	d9 06       	cpc	r13, r25
    158e:	a8 f3       	brcs	.-22     	; 0x157a <vfprintf+0x1be>
    1590:	0f c0       	rjmp	.+30     	; 0x15b0 <vfprintf+0x1f4>
    1592:	f4 01       	movw	r30, r8
    1594:	17 fd       	sbrc	r17, 7
    1596:	85 91       	lpm	r24, Z+
    1598:	17 ff       	sbrs	r17, 7
    159a:	81 91       	ld	r24, Z+
    159c:	4f 01       	movw	r8, r30
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	b3 01       	movw	r22, r6
    15a2:	0e 94 3b 0c 	call	0x1876	; 0x1876 <fputc>
    15a6:	e1 10       	cpse	r14, r1
    15a8:	ea 94       	dec	r14
    15aa:	08 94       	sec
    15ac:	c1 08       	sbc	r12, r1
    15ae:	d1 08       	sbc	r13, r1
    15b0:	c1 14       	cp	r12, r1
    15b2:	d1 04       	cpc	r13, r1
    15b4:	71 f7       	brne	.-36     	; 0x1592 <vfprintf+0x1d6>
    15b6:	e7 c0       	rjmp	.+462    	; 0x1786 <vfprintf+0x3ca>
    15b8:	84 36       	cpi	r24, 0x64	; 100
    15ba:	11 f0       	breq	.+4      	; 0x15c0 <vfprintf+0x204>
    15bc:	89 36       	cpi	r24, 0x69	; 105
    15be:	51 f5       	brne	.+84     	; 0x1614 <vfprintf+0x258>
    15c0:	f5 01       	movw	r30, r10
    15c2:	17 ff       	sbrs	r17, 7
    15c4:	07 c0       	rjmp	.+14     	; 0x15d4 <vfprintf+0x218>
    15c6:	80 81       	ld	r24, Z
    15c8:	91 81       	ldd	r25, Z+1	; 0x01
    15ca:	a2 81       	ldd	r26, Z+2	; 0x02
    15cc:	b3 81       	ldd	r27, Z+3	; 0x03
    15ce:	24 e0       	ldi	r18, 0x04	; 4
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	08 c0       	rjmp	.+16     	; 0x15e4 <vfprintf+0x228>
    15d4:	80 81       	ld	r24, Z
    15d6:	91 81       	ldd	r25, Z+1	; 0x01
    15d8:	aa 27       	eor	r26, r26
    15da:	97 fd       	sbrc	r25, 7
    15dc:	a0 95       	com	r26
    15de:	ba 2f       	mov	r27, r26
    15e0:	22 e0       	ldi	r18, 0x02	; 2
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	a2 0e       	add	r10, r18
    15e6:	b3 1e       	adc	r11, r19
    15e8:	01 2f       	mov	r16, r17
    15ea:	0f 76       	andi	r16, 0x6F	; 111
    15ec:	b7 ff       	sbrs	r27, 7
    15ee:	08 c0       	rjmp	.+16     	; 0x1600 <vfprintf+0x244>
    15f0:	b0 95       	com	r27
    15f2:	a0 95       	com	r26
    15f4:	90 95       	com	r25
    15f6:	81 95       	neg	r24
    15f8:	9f 4f       	sbci	r25, 0xFF	; 255
    15fa:	af 4f       	sbci	r26, 0xFF	; 255
    15fc:	bf 4f       	sbci	r27, 0xFF	; 255
    15fe:	00 68       	ori	r16, 0x80	; 128
    1600:	bc 01       	movw	r22, r24
    1602:	cd 01       	movw	r24, r26
    1604:	a2 01       	movw	r20, r4
    1606:	2a e0       	ldi	r18, 0x0A	; 10
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	0e 94 67 0c 	call	0x18ce	; 0x18ce <__ultoa_invert>
    160e:	d8 2e       	mov	r13, r24
    1610:	d4 18       	sub	r13, r4
    1612:	3f c0       	rjmp	.+126    	; 0x1692 <vfprintf+0x2d6>
    1614:	85 37       	cpi	r24, 0x75	; 117
    1616:	21 f4       	brne	.+8      	; 0x1620 <vfprintf+0x264>
    1618:	1f 7e       	andi	r17, 0xEF	; 239
    161a:	2a e0       	ldi	r18, 0x0A	; 10
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	20 c0       	rjmp	.+64     	; 0x1660 <vfprintf+0x2a4>
    1620:	19 7f       	andi	r17, 0xF9	; 249
    1622:	8f 36       	cpi	r24, 0x6F	; 111
    1624:	a9 f0       	breq	.+42     	; 0x1650 <vfprintf+0x294>
    1626:	80 37       	cpi	r24, 0x70	; 112
    1628:	20 f4       	brcc	.+8      	; 0x1632 <vfprintf+0x276>
    162a:	88 35       	cpi	r24, 0x58	; 88
    162c:	09 f0       	breq	.+2      	; 0x1630 <vfprintf+0x274>
    162e:	ae c0       	rjmp	.+348    	; 0x178c <vfprintf+0x3d0>
    1630:	0b c0       	rjmp	.+22     	; 0x1648 <vfprintf+0x28c>
    1632:	80 37       	cpi	r24, 0x70	; 112
    1634:	21 f0       	breq	.+8      	; 0x163e <vfprintf+0x282>
    1636:	88 37       	cpi	r24, 0x78	; 120
    1638:	09 f0       	breq	.+2      	; 0x163c <vfprintf+0x280>
    163a:	a8 c0       	rjmp	.+336    	; 0x178c <vfprintf+0x3d0>
    163c:	01 c0       	rjmp	.+2      	; 0x1640 <vfprintf+0x284>
    163e:	10 61       	ori	r17, 0x10	; 16
    1640:	14 ff       	sbrs	r17, 4
    1642:	09 c0       	rjmp	.+18     	; 0x1656 <vfprintf+0x29a>
    1644:	14 60       	ori	r17, 0x04	; 4
    1646:	07 c0       	rjmp	.+14     	; 0x1656 <vfprintf+0x29a>
    1648:	14 ff       	sbrs	r17, 4
    164a:	08 c0       	rjmp	.+16     	; 0x165c <vfprintf+0x2a0>
    164c:	16 60       	ori	r17, 0x06	; 6
    164e:	06 c0       	rjmp	.+12     	; 0x165c <vfprintf+0x2a0>
    1650:	28 e0       	ldi	r18, 0x08	; 8
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	05 c0       	rjmp	.+10     	; 0x1660 <vfprintf+0x2a4>
    1656:	20 e1       	ldi	r18, 0x10	; 16
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	02 c0       	rjmp	.+4      	; 0x1660 <vfprintf+0x2a4>
    165c:	20 e1       	ldi	r18, 0x10	; 16
    165e:	32 e0       	ldi	r19, 0x02	; 2
    1660:	f5 01       	movw	r30, r10
    1662:	17 ff       	sbrs	r17, 7
    1664:	07 c0       	rjmp	.+14     	; 0x1674 <vfprintf+0x2b8>
    1666:	60 81       	ld	r22, Z
    1668:	71 81       	ldd	r23, Z+1	; 0x01
    166a:	82 81       	ldd	r24, Z+2	; 0x02
    166c:	93 81       	ldd	r25, Z+3	; 0x03
    166e:	44 e0       	ldi	r20, 0x04	; 4
    1670:	50 e0       	ldi	r21, 0x00	; 0
    1672:	06 c0       	rjmp	.+12     	; 0x1680 <vfprintf+0x2c4>
    1674:	60 81       	ld	r22, Z
    1676:	71 81       	ldd	r23, Z+1	; 0x01
    1678:	80 e0       	ldi	r24, 0x00	; 0
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	42 e0       	ldi	r20, 0x02	; 2
    167e:	50 e0       	ldi	r21, 0x00	; 0
    1680:	a4 0e       	add	r10, r20
    1682:	b5 1e       	adc	r11, r21
    1684:	a2 01       	movw	r20, r4
    1686:	0e 94 67 0c 	call	0x18ce	; 0x18ce <__ultoa_invert>
    168a:	d8 2e       	mov	r13, r24
    168c:	d4 18       	sub	r13, r4
    168e:	01 2f       	mov	r16, r17
    1690:	0f 77       	andi	r16, 0x7F	; 127
    1692:	06 ff       	sbrs	r16, 6
    1694:	09 c0       	rjmp	.+18     	; 0x16a8 <vfprintf+0x2ec>
    1696:	0e 7f       	andi	r16, 0xFE	; 254
    1698:	df 14       	cp	r13, r15
    169a:	30 f4       	brcc	.+12     	; 0x16a8 <vfprintf+0x2ec>
    169c:	04 ff       	sbrs	r16, 4
    169e:	06 c0       	rjmp	.+12     	; 0x16ac <vfprintf+0x2f0>
    16a0:	02 fd       	sbrc	r16, 2
    16a2:	04 c0       	rjmp	.+8      	; 0x16ac <vfprintf+0x2f0>
    16a4:	0f 7e       	andi	r16, 0xEF	; 239
    16a6:	02 c0       	rjmp	.+4      	; 0x16ac <vfprintf+0x2f0>
    16a8:	1d 2d       	mov	r17, r13
    16aa:	01 c0       	rjmp	.+2      	; 0x16ae <vfprintf+0x2f2>
    16ac:	1f 2d       	mov	r17, r15
    16ae:	80 2f       	mov	r24, r16
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	04 ff       	sbrs	r16, 4
    16b4:	0c c0       	rjmp	.+24     	; 0x16ce <vfprintf+0x312>
    16b6:	fe 01       	movw	r30, r28
    16b8:	ed 0d       	add	r30, r13
    16ba:	f1 1d       	adc	r31, r1
    16bc:	20 81       	ld	r18, Z
    16be:	20 33       	cpi	r18, 0x30	; 48
    16c0:	11 f4       	brne	.+4      	; 0x16c6 <vfprintf+0x30a>
    16c2:	09 7e       	andi	r16, 0xE9	; 233
    16c4:	09 c0       	rjmp	.+18     	; 0x16d8 <vfprintf+0x31c>
    16c6:	02 ff       	sbrs	r16, 2
    16c8:	06 c0       	rjmp	.+12     	; 0x16d6 <vfprintf+0x31a>
    16ca:	1e 5f       	subi	r17, 0xFE	; 254
    16cc:	05 c0       	rjmp	.+10     	; 0x16d8 <vfprintf+0x31c>
    16ce:	86 78       	andi	r24, 0x86	; 134
    16d0:	90 70       	andi	r25, 0x00	; 0
    16d2:	00 97       	sbiw	r24, 0x00	; 0
    16d4:	09 f0       	breq	.+2      	; 0x16d8 <vfprintf+0x31c>
    16d6:	1f 5f       	subi	r17, 0xFF	; 255
    16d8:	80 2e       	mov	r8, r16
    16da:	99 24       	eor	r9, r9
    16dc:	03 fd       	sbrc	r16, 3
    16de:	12 c0       	rjmp	.+36     	; 0x1704 <vfprintf+0x348>
    16e0:	00 ff       	sbrs	r16, 0
    16e2:	0d c0       	rjmp	.+26     	; 0x16fe <vfprintf+0x342>
    16e4:	fd 2c       	mov	r15, r13
    16e6:	1e 15       	cp	r17, r14
    16e8:	50 f4       	brcc	.+20     	; 0x16fe <vfprintf+0x342>
    16ea:	fe 0c       	add	r15, r14
    16ec:	f1 1a       	sub	r15, r17
    16ee:	1e 2d       	mov	r17, r14
    16f0:	06 c0       	rjmp	.+12     	; 0x16fe <vfprintf+0x342>
    16f2:	80 e2       	ldi	r24, 0x20	; 32
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	b3 01       	movw	r22, r6
    16f8:	0e 94 3b 0c 	call	0x1876	; 0x1876 <fputc>
    16fc:	1f 5f       	subi	r17, 0xFF	; 255
    16fe:	1e 15       	cp	r17, r14
    1700:	c0 f3       	brcs	.-16     	; 0x16f2 <vfprintf+0x336>
    1702:	04 c0       	rjmp	.+8      	; 0x170c <vfprintf+0x350>
    1704:	1e 15       	cp	r17, r14
    1706:	10 f4       	brcc	.+4      	; 0x170c <vfprintf+0x350>
    1708:	e1 1a       	sub	r14, r17
    170a:	01 c0       	rjmp	.+2      	; 0x170e <vfprintf+0x352>
    170c:	ee 24       	eor	r14, r14
    170e:	84 fe       	sbrs	r8, 4
    1710:	0f c0       	rjmp	.+30     	; 0x1730 <vfprintf+0x374>
    1712:	80 e3       	ldi	r24, 0x30	; 48
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	b3 01       	movw	r22, r6
    1718:	0e 94 3b 0c 	call	0x1876	; 0x1876 <fputc>
    171c:	82 fe       	sbrs	r8, 2
    171e:	1f c0       	rjmp	.+62     	; 0x175e <vfprintf+0x3a2>
    1720:	81 fe       	sbrs	r8, 1
    1722:	03 c0       	rjmp	.+6      	; 0x172a <vfprintf+0x36e>
    1724:	88 e5       	ldi	r24, 0x58	; 88
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	10 c0       	rjmp	.+32     	; 0x174a <vfprintf+0x38e>
    172a:	88 e7       	ldi	r24, 0x78	; 120
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	0d c0       	rjmp	.+26     	; 0x174a <vfprintf+0x38e>
    1730:	c4 01       	movw	r24, r8
    1732:	86 78       	andi	r24, 0x86	; 134
    1734:	90 70       	andi	r25, 0x00	; 0
    1736:	00 97       	sbiw	r24, 0x00	; 0
    1738:	91 f0       	breq	.+36     	; 0x175e <vfprintf+0x3a2>
    173a:	81 fc       	sbrc	r8, 1
    173c:	02 c0       	rjmp	.+4      	; 0x1742 <vfprintf+0x386>
    173e:	80 e2       	ldi	r24, 0x20	; 32
    1740:	01 c0       	rjmp	.+2      	; 0x1744 <vfprintf+0x388>
    1742:	8b e2       	ldi	r24, 0x2B	; 43
    1744:	07 fd       	sbrc	r16, 7
    1746:	8d e2       	ldi	r24, 0x2D	; 45
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	b3 01       	movw	r22, r6
    174c:	0e 94 3b 0c 	call	0x1876	; 0x1876 <fputc>
    1750:	06 c0       	rjmp	.+12     	; 0x175e <vfprintf+0x3a2>
    1752:	80 e3       	ldi	r24, 0x30	; 48
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	b3 01       	movw	r22, r6
    1758:	0e 94 3b 0c 	call	0x1876	; 0x1876 <fputc>
    175c:	fa 94       	dec	r15
    175e:	df 14       	cp	r13, r15
    1760:	c0 f3       	brcs	.-16     	; 0x1752 <vfprintf+0x396>
    1762:	da 94       	dec	r13
    1764:	f2 01       	movw	r30, r4
    1766:	ed 0d       	add	r30, r13
    1768:	f1 1d       	adc	r31, r1
    176a:	80 81       	ld	r24, Z
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	b3 01       	movw	r22, r6
    1770:	0e 94 3b 0c 	call	0x1876	; 0x1876 <fputc>
    1774:	dd 20       	and	r13, r13
    1776:	a9 f7       	brne	.-22     	; 0x1762 <vfprintf+0x3a6>
    1778:	06 c0       	rjmp	.+12     	; 0x1786 <vfprintf+0x3ca>
    177a:	80 e2       	ldi	r24, 0x20	; 32
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	b3 01       	movw	r22, r6
    1780:	0e 94 3b 0c 	call	0x1876	; 0x1876 <fputc>
    1784:	ea 94       	dec	r14
    1786:	ee 20       	and	r14, r14
    1788:	c1 f7       	brne	.-16     	; 0x177a <vfprintf+0x3be>
    178a:	40 ce       	rjmp	.-896    	; 0x140c <vfprintf+0x50>
    178c:	f3 01       	movw	r30, r6
    178e:	86 81       	ldd	r24, Z+6	; 0x06
    1790:	97 81       	ldd	r25, Z+7	; 0x07
    1792:	02 c0       	rjmp	.+4      	; 0x1798 <vfprintf+0x3dc>
    1794:	8f ef       	ldi	r24, 0xFF	; 255
    1796:	9f ef       	ldi	r25, 0xFF	; 255
    1798:	2d 96       	adiw	r28, 0x0d	; 13
    179a:	0f b6       	in	r0, 0x3f	; 63
    179c:	f8 94       	cli
    179e:	de bf       	out	0x3e, r29	; 62
    17a0:	0f be       	out	0x3f, r0	; 63
    17a2:	cd bf       	out	0x3d, r28	; 61
    17a4:	df 91       	pop	r29
    17a6:	cf 91       	pop	r28
    17a8:	1f 91       	pop	r17
    17aa:	0f 91       	pop	r16
    17ac:	ff 90       	pop	r15
    17ae:	ef 90       	pop	r14
    17b0:	df 90       	pop	r13
    17b2:	cf 90       	pop	r12
    17b4:	bf 90       	pop	r11
    17b6:	af 90       	pop	r10
    17b8:	9f 90       	pop	r9
    17ba:	8f 90       	pop	r8
    17bc:	7f 90       	pop	r7
    17be:	6f 90       	pop	r6
    17c0:	5f 90       	pop	r5
    17c2:	4f 90       	pop	r4
    17c4:	3f 90       	pop	r3
    17c6:	2f 90       	pop	r2
    17c8:	08 95       	ret

000017ca <strnlen_P>:
    17ca:	fc 01       	movw	r30, r24
    17cc:	05 90       	lpm	r0, Z+
    17ce:	61 50       	subi	r22, 0x01	; 1
    17d0:	70 40       	sbci	r23, 0x00	; 0
    17d2:	01 10       	cpse	r0, r1
    17d4:	d8 f7       	brcc	.-10     	; 0x17cc <strnlen_P+0x2>
    17d6:	80 95       	com	r24
    17d8:	90 95       	com	r25
    17da:	8e 0f       	add	r24, r30
    17dc:	9f 1f       	adc	r25, r31
    17de:	08 95       	ret

000017e0 <strnlen>:
    17e0:	fc 01       	movw	r30, r24
    17e2:	61 50       	subi	r22, 0x01	; 1
    17e4:	70 40       	sbci	r23, 0x00	; 0
    17e6:	01 90       	ld	r0, Z+
    17e8:	01 10       	cpse	r0, r1
    17ea:	d8 f7       	brcc	.-10     	; 0x17e2 <strnlen+0x2>
    17ec:	80 95       	com	r24
    17ee:	90 95       	com	r25
    17f0:	8e 0f       	add	r24, r30
    17f2:	9f 1f       	adc	r25, r31
    17f4:	08 95       	ret

000017f6 <fgetc>:
    17f6:	cf 93       	push	r28
    17f8:	df 93       	push	r29
    17fa:	ec 01       	movw	r28, r24
    17fc:	2b 81       	ldd	r18, Y+3	; 0x03
    17fe:	20 ff       	sbrs	r18, 0
    1800:	35 c0       	rjmp	.+106    	; 0x186c <fgetc+0x76>
    1802:	26 ff       	sbrs	r18, 6
    1804:	09 c0       	rjmp	.+18     	; 0x1818 <fgetc+0x22>
    1806:	2f 7b       	andi	r18, 0xBF	; 191
    1808:	2b 83       	std	Y+3, r18	; 0x03
    180a:	8e 81       	ldd	r24, Y+6	; 0x06
    180c:	9f 81       	ldd	r25, Y+7	; 0x07
    180e:	01 96       	adiw	r24, 0x01	; 1
    1810:	9f 83       	std	Y+7, r25	; 0x07
    1812:	8e 83       	std	Y+6, r24	; 0x06
    1814:	8a 81       	ldd	r24, Y+2	; 0x02
    1816:	28 c0       	rjmp	.+80     	; 0x1868 <fgetc+0x72>
    1818:	22 ff       	sbrs	r18, 2
    181a:	0f c0       	rjmp	.+30     	; 0x183a <fgetc+0x44>
    181c:	e8 81       	ld	r30, Y
    181e:	f9 81       	ldd	r31, Y+1	; 0x01
    1820:	80 81       	ld	r24, Z
    1822:	99 27       	eor	r25, r25
    1824:	87 fd       	sbrc	r24, 7
    1826:	90 95       	com	r25
    1828:	00 97       	sbiw	r24, 0x00	; 0
    182a:	19 f4       	brne	.+6      	; 0x1832 <fgetc+0x3c>
    182c:	20 62       	ori	r18, 0x20	; 32
    182e:	2b 83       	std	Y+3, r18	; 0x03
    1830:	1d c0       	rjmp	.+58     	; 0x186c <fgetc+0x76>
    1832:	31 96       	adiw	r30, 0x01	; 1
    1834:	f9 83       	std	Y+1, r31	; 0x01
    1836:	e8 83       	st	Y, r30
    1838:	11 c0       	rjmp	.+34     	; 0x185c <fgetc+0x66>
    183a:	ea 85       	ldd	r30, Y+10	; 0x0a
    183c:	fb 85       	ldd	r31, Y+11	; 0x0b
    183e:	ce 01       	movw	r24, r28
    1840:	19 95       	eicall
    1842:	97 ff       	sbrs	r25, 7
    1844:	0b c0       	rjmp	.+22     	; 0x185c <fgetc+0x66>
    1846:	2b 81       	ldd	r18, Y+3	; 0x03
    1848:	3f ef       	ldi	r19, 0xFF	; 255
    184a:	8f 3f       	cpi	r24, 0xFF	; 255
    184c:	93 07       	cpc	r25, r19
    184e:	11 f4       	brne	.+4      	; 0x1854 <fgetc+0x5e>
    1850:	80 e1       	ldi	r24, 0x10	; 16
    1852:	01 c0       	rjmp	.+2      	; 0x1856 <fgetc+0x60>
    1854:	80 e2       	ldi	r24, 0x20	; 32
    1856:	82 2b       	or	r24, r18
    1858:	8b 83       	std	Y+3, r24	; 0x03
    185a:	08 c0       	rjmp	.+16     	; 0x186c <fgetc+0x76>
    185c:	2e 81       	ldd	r18, Y+6	; 0x06
    185e:	3f 81       	ldd	r19, Y+7	; 0x07
    1860:	2f 5f       	subi	r18, 0xFF	; 255
    1862:	3f 4f       	sbci	r19, 0xFF	; 255
    1864:	3f 83       	std	Y+7, r19	; 0x07
    1866:	2e 83       	std	Y+6, r18	; 0x06
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	02 c0       	rjmp	.+4      	; 0x1870 <fgetc+0x7a>
    186c:	8f ef       	ldi	r24, 0xFF	; 255
    186e:	9f ef       	ldi	r25, 0xFF	; 255
    1870:	df 91       	pop	r29
    1872:	cf 91       	pop	r28
    1874:	08 95       	ret

00001876 <fputc>:
    1876:	0f 93       	push	r16
    1878:	1f 93       	push	r17
    187a:	cf 93       	push	r28
    187c:	df 93       	push	r29
    187e:	8c 01       	movw	r16, r24
    1880:	eb 01       	movw	r28, r22
    1882:	8b 81       	ldd	r24, Y+3	; 0x03
    1884:	81 ff       	sbrs	r24, 1
    1886:	1b c0       	rjmp	.+54     	; 0x18be <fputc+0x48>
    1888:	82 ff       	sbrs	r24, 2
    188a:	0d c0       	rjmp	.+26     	; 0x18a6 <fputc+0x30>
    188c:	2e 81       	ldd	r18, Y+6	; 0x06
    188e:	3f 81       	ldd	r19, Y+7	; 0x07
    1890:	8c 81       	ldd	r24, Y+4	; 0x04
    1892:	9d 81       	ldd	r25, Y+5	; 0x05
    1894:	28 17       	cp	r18, r24
    1896:	39 07       	cpc	r19, r25
    1898:	64 f4       	brge	.+24     	; 0x18b2 <fputc+0x3c>
    189a:	e8 81       	ld	r30, Y
    189c:	f9 81       	ldd	r31, Y+1	; 0x01
    189e:	01 93       	st	Z+, r16
    18a0:	f9 83       	std	Y+1, r31	; 0x01
    18a2:	e8 83       	st	Y, r30
    18a4:	06 c0       	rjmp	.+12     	; 0x18b2 <fputc+0x3c>
    18a6:	e8 85       	ldd	r30, Y+8	; 0x08
    18a8:	f9 85       	ldd	r31, Y+9	; 0x09
    18aa:	80 2f       	mov	r24, r16
    18ac:	19 95       	eicall
    18ae:	00 97       	sbiw	r24, 0x00	; 0
    18b0:	31 f4       	brne	.+12     	; 0x18be <fputc+0x48>
    18b2:	8e 81       	ldd	r24, Y+6	; 0x06
    18b4:	9f 81       	ldd	r25, Y+7	; 0x07
    18b6:	01 96       	adiw	r24, 0x01	; 1
    18b8:	9f 83       	std	Y+7, r25	; 0x07
    18ba:	8e 83       	std	Y+6, r24	; 0x06
    18bc:	02 c0       	rjmp	.+4      	; 0x18c2 <fputc+0x4c>
    18be:	0f ef       	ldi	r16, 0xFF	; 255
    18c0:	1f ef       	ldi	r17, 0xFF	; 255
    18c2:	c8 01       	movw	r24, r16
    18c4:	df 91       	pop	r29
    18c6:	cf 91       	pop	r28
    18c8:	1f 91       	pop	r17
    18ca:	0f 91       	pop	r16
    18cc:	08 95       	ret

000018ce <__ultoa_invert>:
    18ce:	fa 01       	movw	r30, r20
    18d0:	aa 27       	eor	r26, r26
    18d2:	28 30       	cpi	r18, 0x08	; 8
    18d4:	51 f1       	breq	.+84     	; 0x192a <__ultoa_invert+0x5c>
    18d6:	20 31       	cpi	r18, 0x10	; 16
    18d8:	81 f1       	breq	.+96     	; 0x193a <__ultoa_invert+0x6c>
    18da:	e8 94       	clt
    18dc:	6f 93       	push	r22
    18de:	6e 7f       	andi	r22, 0xFE	; 254
    18e0:	6e 5f       	subi	r22, 0xFE	; 254
    18e2:	7f 4f       	sbci	r23, 0xFF	; 255
    18e4:	8f 4f       	sbci	r24, 0xFF	; 255
    18e6:	9f 4f       	sbci	r25, 0xFF	; 255
    18e8:	af 4f       	sbci	r26, 0xFF	; 255
    18ea:	b1 e0       	ldi	r27, 0x01	; 1
    18ec:	3e d0       	rcall	.+124    	; 0x196a <__ultoa_invert+0x9c>
    18ee:	b4 e0       	ldi	r27, 0x04	; 4
    18f0:	3c d0       	rcall	.+120    	; 0x196a <__ultoa_invert+0x9c>
    18f2:	67 0f       	add	r22, r23
    18f4:	78 1f       	adc	r23, r24
    18f6:	89 1f       	adc	r24, r25
    18f8:	9a 1f       	adc	r25, r26
    18fa:	a1 1d       	adc	r26, r1
    18fc:	68 0f       	add	r22, r24
    18fe:	79 1f       	adc	r23, r25
    1900:	8a 1f       	adc	r24, r26
    1902:	91 1d       	adc	r25, r1
    1904:	a1 1d       	adc	r26, r1
    1906:	6a 0f       	add	r22, r26
    1908:	71 1d       	adc	r23, r1
    190a:	81 1d       	adc	r24, r1
    190c:	91 1d       	adc	r25, r1
    190e:	a1 1d       	adc	r26, r1
    1910:	20 d0       	rcall	.+64     	; 0x1952 <__ultoa_invert+0x84>
    1912:	09 f4       	brne	.+2      	; 0x1916 <__ultoa_invert+0x48>
    1914:	68 94       	set
    1916:	3f 91       	pop	r19
    1918:	2a e0       	ldi	r18, 0x0A	; 10
    191a:	26 9f       	mul	r18, r22
    191c:	11 24       	eor	r1, r1
    191e:	30 19       	sub	r19, r0
    1920:	30 5d       	subi	r19, 0xD0	; 208
    1922:	31 93       	st	Z+, r19
    1924:	de f6       	brtc	.-74     	; 0x18dc <__ultoa_invert+0xe>
    1926:	cf 01       	movw	r24, r30
    1928:	08 95       	ret
    192a:	46 2f       	mov	r20, r22
    192c:	47 70       	andi	r20, 0x07	; 7
    192e:	40 5d       	subi	r20, 0xD0	; 208
    1930:	41 93       	st	Z+, r20
    1932:	b3 e0       	ldi	r27, 0x03	; 3
    1934:	0f d0       	rcall	.+30     	; 0x1954 <__ultoa_invert+0x86>
    1936:	c9 f7       	brne	.-14     	; 0x192a <__ultoa_invert+0x5c>
    1938:	f6 cf       	rjmp	.-20     	; 0x1926 <__ultoa_invert+0x58>
    193a:	46 2f       	mov	r20, r22
    193c:	4f 70       	andi	r20, 0x0F	; 15
    193e:	40 5d       	subi	r20, 0xD0	; 208
    1940:	4a 33       	cpi	r20, 0x3A	; 58
    1942:	18 f0       	brcs	.+6      	; 0x194a <__ultoa_invert+0x7c>
    1944:	49 5d       	subi	r20, 0xD9	; 217
    1946:	31 fd       	sbrc	r19, 1
    1948:	40 52       	subi	r20, 0x20	; 32
    194a:	41 93       	st	Z+, r20
    194c:	02 d0       	rcall	.+4      	; 0x1952 <__ultoa_invert+0x84>
    194e:	a9 f7       	brne	.-22     	; 0x193a <__ultoa_invert+0x6c>
    1950:	ea cf       	rjmp	.-44     	; 0x1926 <__ultoa_invert+0x58>
    1952:	b4 e0       	ldi	r27, 0x04	; 4
    1954:	a6 95       	lsr	r26
    1956:	97 95       	ror	r25
    1958:	87 95       	ror	r24
    195a:	77 95       	ror	r23
    195c:	67 95       	ror	r22
    195e:	ba 95       	dec	r27
    1960:	c9 f7       	brne	.-14     	; 0x1954 <__ultoa_invert+0x86>
    1962:	00 97       	sbiw	r24, 0x00	; 0
    1964:	61 05       	cpc	r22, r1
    1966:	71 05       	cpc	r23, r1
    1968:	08 95       	ret
    196a:	9b 01       	movw	r18, r22
    196c:	ac 01       	movw	r20, r24
    196e:	0a 2e       	mov	r0, r26
    1970:	06 94       	lsr	r0
    1972:	57 95       	ror	r21
    1974:	47 95       	ror	r20
    1976:	37 95       	ror	r19
    1978:	27 95       	ror	r18
    197a:	ba 95       	dec	r27
    197c:	c9 f7       	brne	.-14     	; 0x1970 <__ultoa_invert+0xa2>
    197e:	62 0f       	add	r22, r18
    1980:	73 1f       	adc	r23, r19
    1982:	84 1f       	adc	r24, r20
    1984:	95 1f       	adc	r25, r21
    1986:	a0 1d       	adc	r26, r0
    1988:	08 95       	ret

0000198a <_exit>:
    198a:	f8 94       	cli

0000198c <__stop_program>:
    198c:	ff cf       	rjmp	.-2      	; 0x198c <__stop_program>
