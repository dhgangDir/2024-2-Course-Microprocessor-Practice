
Pjt14_I2C_TCN75.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000003e6  00800200  00002f16  00002faa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002f16  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000145  008005e6  008005e6  00003390  2**0
                  ALLOC
  3 .stab         0000117c  00000000  00000000  00003390  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000039d  00000000  00000000  0000450c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000620  00000000  00000000  000048b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005f41  00000000  00000000  00004ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002c87  00000000  00000000  0000ae11  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002b62  00000000  00000000  0000da98  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ef4  00000000  00000000  000105fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000da8  00000000  00000000  000114f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000036d6  00000000  00000000  00012298  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  0001596e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      3c:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__vector_15>
      40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      5c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      60:	0c 94 a1 04 	jmp	0x942	; 0x942 <__vector_24>
      64:	0c 94 84 08 	jmp	0x1108	; 0x1108 <__vector_25>
      68:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      6c:	0c 94 55 08 	jmp	0x10aa	; 0x10aa <__vector_27>
      70:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      74:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__vector_29>
      78:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      7c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      80:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      84:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      88:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      8c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      90:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      94:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      98:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      9c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      ac:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      bc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      cc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      dc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      e0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	15 e0       	ldi	r17, 0x05	; 5
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e6 e1       	ldi	r30, 0x16	; 22
      fc:	ff e2       	ldi	r31, 0x2F	; 47
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a6 3e       	cpi	r26, 0xE6	; 230
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
     10e:	1b be       	out	0x3b, r1	; 59

00000110 <__do_clear_bss>:
     110:	17 e0       	ldi	r17, 0x07	; 7
     112:	a6 ee       	ldi	r26, 0xE6	; 230
     114:	b5 e0       	ldi	r27, 0x05	; 5
     116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
     118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
     11a:	ab 32       	cpi	r26, 0x2B	; 43
     11c:	b1 07       	cpc	r27, r17
     11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
     120:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <main>
     124:	0c 94 89 17 	jmp	0x2f12	; 0x2f12 <_exit>

00000128 <__bad_interrupt>:
     128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <adc_init>:
#include <compat/deprecated.h>
#include <util/delay.h>
#include "adc_tc1047.h"

void adc_init() {
	cbi(DDRF, PF0);
     12c:	80 98       	cbi	0x10, 0	; 16
	ADMUX = 0x80 | 0x00;
     12e:	80 e8       	ldi	r24, 0x80	; 128
     130:	80 93 7c 00 	sts	0x007C, r24
}
     134:	08 95       	ret

00000136 <adc_start>:

void adc_start() {
	sbi(ADCSRA, ADEN);
     136:	ea e7       	ldi	r30, 0x7A	; 122
     138:	f0 e0       	ldi	r31, 0x00	; 0
     13a:	80 81       	ld	r24, Z
     13c:	80 68       	ori	r24, 0x80	; 128
     13e:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     140:	8d ed       	ldi	r24, 0xDD	; 221
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	01 97       	sbiw	r24, 0x01	; 1
     146:	f1 f7       	brne	.-4      	; 0x144 <adc_start+0xe>
	_delay_us(120);
	sbi(ADCSRA, ADIE);
     148:	80 81       	ld	r24, Z
     14a:	88 60       	ori	r24, 0x08	; 8
     14c:	80 83       	st	Z, r24
	sbi(ADCSRA, ADSC);
     14e:	80 81       	ld	r24, Z
     150:	80 64       	ori	r24, 0x40	; 64
     152:	80 83       	st	Z, r24
}
     154:	08 95       	ret

00000156 <task_tc1047>:

void task_tc1047(char *arg) {
	static int value;
	static int volatile in_adc = 0;

	if(!strcmp(arg, "")) {
     156:	fc 01       	movw	r30, r24
     158:	20 81       	ld	r18, Z
     15a:	22 23       	and	r18, r18
     15c:	19 f5       	brne	.+70     	; 0x1a4 <task_tc1047+0x4e>
		adc_start(); in_adc = 1; while(in_adc);
     15e:	0e 94 9b 00 	call	0x136	; 0x136 <adc_start>
     162:	81 e0       	ldi	r24, 0x01	; 1
     164:	90 e0       	ldi	r25, 0x00	; 0
     166:	90 93 e7 05 	sts	0x05E7, r25
     16a:	80 93 e6 05 	sts	0x05E6, r24
     16e:	80 91 e6 05 	lds	r24, 0x05E6
     172:	90 91 e7 05 	lds	r25, 0x05E7
     176:	00 97       	sbiw	r24, 0x00	; 0
     178:	d1 f7       	brne	.-12     	; 0x16e <task_tc1047+0x18>
		printf("Currrent temperture is %d degree.\n", value);
     17a:	00 d0       	rcall	.+0      	; 0x17c <task_tc1047+0x26>
     17c:	0f 92       	push	r0
     17e:	80 e0       	ldi	r24, 0x00	; 0
     180:	92 e0       	ldi	r25, 0x02	; 2
     182:	ed b7       	in	r30, 0x3d	; 61
     184:	fe b7       	in	r31, 0x3e	; 62
     186:	92 83       	std	Z+2, r25	; 0x02
     188:	81 83       	std	Z+1, r24	; 0x01
     18a:	80 91 e8 05 	lds	r24, 0x05E8
     18e:	90 91 e9 05 	lds	r25, 0x05E9
     192:	94 83       	std	Z+4, r25	; 0x04
     194:	83 83       	std	Z+3, r24	; 0x03
     196:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <printf>
     19a:	0f 90       	pop	r0
     19c:	0f 90       	pop	r0
     19e:	0f 90       	pop	r0
     1a0:	0f 90       	pop	r0
     1a2:	08 95       	ret
	} else {
		value = atoi(arg) * (1.1/1023) * 1000;
     1a4:	0e 94 14 13 	call	0x2628	; 0x2628 <atoi>
     1a8:	9c 01       	movw	r18, r24
     1aa:	b9 01       	movw	r22, r18
     1ac:	88 27       	eor	r24, r24
     1ae:	77 fd       	sbrc	r23, 7
     1b0:	80 95       	com	r24
     1b2:	98 2f       	mov	r25, r24
     1b4:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <__floatsisf>
     1b8:	29 e0       	ldi	r18, 0x09	; 9
     1ba:	30 ef       	ldi	r19, 0xF0	; 240
     1bc:	4c e8       	ldi	r20, 0x8C	; 140
     1be:	5a e3       	ldi	r21, 0x3A	; 58
     1c0:	0e 94 8a 0c 	call	0x1914	; 0x1914 <__mulsf3>
     1c4:	20 e0       	ldi	r18, 0x00	; 0
     1c6:	30 e0       	ldi	r19, 0x00	; 0
     1c8:	4a e7       	ldi	r20, 0x7A	; 122
     1ca:	54 e4       	ldi	r21, 0x44	; 68
     1cc:	0e 94 8a 0c 	call	0x1914	; 0x1914 <__mulsf3>
     1d0:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <__fixsfsi>
     1d4:	dc 01       	movw	r26, r24
     1d6:	cb 01       	movw	r24, r22
		value = (value - 500) / 10;
     1d8:	84 5f       	subi	r24, 0xF4	; 244
     1da:	91 40       	sbci	r25, 0x01	; 1
     1dc:	6a e0       	ldi	r22, 0x0A	; 10
     1de:	70 e0       	ldi	r23, 0x00	; 0
     1e0:	0e 94 22 11 	call	0x2244	; 0x2244 <__divmodhi4>
     1e4:	70 93 e9 05 	sts	0x05E9, r23
     1e8:	60 93 e8 05 	sts	0x05E8, r22
		in_adc = 0;
     1ec:	10 92 e7 05 	sts	0x05E7, r1
     1f0:	10 92 e6 05 	sts	0x05E6, r1
     1f4:	08 95       	ret

000001f6 <__vector_29>:
	_delay_us(120);
	sbi(ADCSRA, ADIE);
	sbi(ADCSRA, ADSC);
}

ISR(ADC_vect) {
     1f6:	1f 92       	push	r1
     1f8:	0f 92       	push	r0
     1fa:	0f b6       	in	r0, 0x3f	; 63
     1fc:	0f 92       	push	r0
     1fe:	0b b6       	in	r0, 0x3b	; 59
     200:	0f 92       	push	r0
     202:	11 24       	eor	r1, r1
     204:	0f 93       	push	r16
     206:	1f 93       	push	r17
     208:	2f 93       	push	r18
     20a:	3f 93       	push	r19
     20c:	4f 93       	push	r20
     20e:	5f 93       	push	r21
     210:	6f 93       	push	r22
     212:	7f 93       	push	r23
     214:	8f 93       	push	r24
     216:	9f 93       	push	r25
     218:	af 93       	push	r26
     21a:	bf 93       	push	r27
     21c:	ef 93       	push	r30
     21e:	ff 93       	push	r31
     220:	cf 93       	push	r28
     222:	df 93       	push	r29
     224:	cd b7       	in	r28, 0x3d	; 61
     226:	de b7       	in	r29, 0x3e	; 62
     228:	28 97       	sbiw	r28, 0x08	; 8
     22a:	de bf       	out	0x3e, r29	; 62
     22c:	cd bf       	out	0x3d, r28	; 61
	uint16_t data;
	char arg[8];

	data = ADCW & 0x03ff;
     22e:	80 91 78 00 	lds	r24, 0x0078
     232:	90 91 79 00 	lds	r25, 0x0079
	cbi(ADCSRA, ADEN);
     236:	ea e7       	ldi	r30, 0x7A	; 122
     238:	f0 e0       	ldi	r31, 0x00	; 0
     23a:	20 81       	ld	r18, Z
     23c:	2f 77       	andi	r18, 0x7F	; 127
     23e:	20 83       	st	Z, r18

	sprintf(arg, "%d", data);
     240:	00 d0       	rcall	.+0      	; 0x242 <__vector_29+0x4c>
     242:	00 d0       	rcall	.+0      	; 0x244 <__vector_29+0x4e>
     244:	ed b7       	in	r30, 0x3d	; 61
     246:	fe b7       	in	r31, 0x3e	; 62
     248:	31 96       	adiw	r30, 0x01	; 1
     24a:	8e 01       	movw	r16, r28
     24c:	0f 5f       	subi	r16, 0xFF	; 255
     24e:	1f 4f       	sbci	r17, 0xFF	; 255
     250:	ad b7       	in	r26, 0x3d	; 61
     252:	be b7       	in	r27, 0x3e	; 62
     254:	12 96       	adiw	r26, 0x02	; 2
     256:	1c 93       	st	X, r17
     258:	0e 93       	st	-X, r16
     25a:	11 97       	sbiw	r26, 0x01	; 1
     25c:	23 e2       	ldi	r18, 0x23	; 35
     25e:	32 e0       	ldi	r19, 0x02	; 2
     260:	33 83       	std	Z+3, r19	; 0x03
     262:	22 83       	std	Z+2, r18	; 0x02

ISR(ADC_vect) {
	uint16_t data;
	char arg[8];

	data = ADCW & 0x03ff;
     264:	93 70       	andi	r25, 0x03	; 3
	cbi(ADCSRA, ADEN);

	sprintf(arg, "%d", data);
     266:	95 83       	std	Z+5, r25	; 0x05
     268:	84 83       	std	Z+4, r24	; 0x04
     26a:	0e 94 17 14 	call	0x282e	; 0x282e <sprintf>
	task_tc1047(arg);
     26e:	8d b7       	in	r24, 0x3d	; 61
     270:	9e b7       	in	r25, 0x3e	; 62
     272:	06 96       	adiw	r24, 0x06	; 6
     274:	0f b6       	in	r0, 0x3f	; 63
     276:	f8 94       	cli
     278:	9e bf       	out	0x3e, r25	; 62
     27a:	0f be       	out	0x3f, r0	; 63
     27c:	8d bf       	out	0x3d, r24	; 61
     27e:	c8 01       	movw	r24, r16
     280:	0e 94 ab 00 	call	0x156	; 0x156 <task_tc1047>
}
     284:	28 96       	adiw	r28, 0x08	; 8
     286:	de bf       	out	0x3e, r29	; 62
     288:	cd bf       	out	0x3d, r28	; 61
     28a:	df 91       	pop	r29
     28c:	cf 91       	pop	r28
     28e:	ff 91       	pop	r31
     290:	ef 91       	pop	r30
     292:	bf 91       	pop	r27
     294:	af 91       	pop	r26
     296:	9f 91       	pop	r25
     298:	8f 91       	pop	r24
     29a:	7f 91       	pop	r23
     29c:	6f 91       	pop	r22
     29e:	5f 91       	pop	r21
     2a0:	4f 91       	pop	r20
     2a2:	3f 91       	pop	r19
     2a4:	2f 91       	pop	r18
     2a6:	1f 91       	pop	r17
     2a8:	0f 91       	pop	r16
     2aa:	0f 90       	pop	r0
     2ac:	0b be       	out	0x3b, r0	; 59
     2ae:	0f 90       	pop	r0
     2b0:	0f be       	out	0x3f, r0	; 63
     2b2:	0f 90       	pop	r0
     2b4:	1f 90       	pop	r1
     2b6:	18 95       	reti

000002b8 <app_list>:
#include <stdio.h>
#include <stdlib.h>
#include "linked_list.h"
#include "uart.h"

void app_list(char *ap) {
     2b8:	cf 92       	push	r12
     2ba:	df 92       	push	r13
     2bc:	ff 92       	push	r15
     2be:	0f 93       	push	r16
     2c0:	1f 93       	push	r17
     2c2:	cf 93       	push	r28
     2c4:	df 93       	push	r29
     2c6:	cd b7       	in	r28, 0x3d	; 61
     2c8:	de b7       	in	r29, 0x3e	; 62
     2ca:	28 97       	sbiw	r28, 0x08	; 8
     2cc:	0f b6       	in	r0, 0x3f	; 63
     2ce:	f8 94       	cli
     2d0:	de bf       	out	0x3e, r29	; 62
     2d2:	0f be       	out	0x3f, r0	; 63
     2d4:	cd bf       	out	0x3d, r28	; 61
	char buf[8], how = 'a';
	struct node *np;

	if (ap) how = *ap;
     2d6:	00 97       	sbiw	r24, 0x00	; 0
     2d8:	19 f0       	breq	.+6      	; 0x2e0 <app_list+0x28>
     2da:	fc 01       	movw	r30, r24
     2dc:	f0 80       	ld	r15, Z
     2de:	02 c0       	rjmp	.+4      	; 0x2e4 <app_list+0x2c>
#include <stdlib.h>
#include "linked_list.h"
#include "uart.h"

void app_list(char *ap) {
	char buf[8], how = 'a';
     2e0:	91 e6       	ldi	r25, 0x61	; 97
     2e2:	f9 2e       	mov	r15, r25
	struct node *np;

	if (ap) how = *ap;
	while(1) {
		printf("> ");
     2e4:	86 e2       	ldi	r24, 0x26	; 38
     2e6:	c8 2e       	mov	r12, r24
     2e8:	82 e0       	ldi	r24, 0x02	; 2
     2ea:	d8 2e       	mov	r13, r24
     2ec:	0f 92       	push	r0
     2ee:	0f 92       	push	r0
     2f0:	ed b7       	in	r30, 0x3d	; 61
     2f2:	fe b7       	in	r31, 0x3e	; 62
     2f4:	d2 82       	std	Z+2, r13	; 0x02
     2f6:	c1 82       	std	Z+1, r12	; 0x01
     2f8:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <printf>
		if (fgets(buf, 8, stdin) == NULL)
     2fc:	0f 90       	pop	r0
     2fe:	0f 90       	pop	r0
     300:	40 91 25 07 	lds	r20, 0x0725
     304:	50 91 26 07 	lds	r21, 0x0726
     308:	ce 01       	movw	r24, r28
     30a:	01 96       	adiw	r24, 0x01	; 1
     30c:	68 e0       	ldi	r22, 0x08	; 8
     30e:	70 e0       	ldi	r23, 0x00	; 0
     310:	0e 94 76 13 	call	0x26ec	; 0x26ec <fgets>
     314:	00 97       	sbiw	r24, 0x00	; 0
     316:	e9 f0       	breq	.+58     	; 0x352 <app_list+0x9a>
			break;
		np = get_node();
     318:	0e 94 87 03 	call	0x70e	; 0x70e <get_node>
     31c:	8c 01       	movw	r16, r24
		np->data = atoi(buf);
     31e:	ce 01       	movw	r24, r28
     320:	01 96       	adiw	r24, 0x01	; 1
     322:	0e 94 14 13 	call	0x2628	; 0x2628 <atoi>
     326:	f8 01       	movw	r30, r16
     328:	91 83       	std	Z+1, r25	; 0x01
     32a:	80 83       	st	Z, r24
		switch(how) {
     32c:	f8 e6       	ldi	r31, 0x68	; 104
     32e:	ff 16       	cp	r15, r31
     330:	21 f0       	breq	.+8      	; 0x33a <app_list+0x82>
     332:	84 e7       	ldi	r24, 0x74	; 116
     334:	f8 16       	cp	r15, r24
     336:	49 f4       	brne	.+18     	; 0x34a <app_list+0x92>
     338:	04 c0       	rjmp	.+8      	; 0x342 <app_list+0x8a>
			case 'h' : insert_node_head(np); break;
     33a:	c8 01       	movw	r24, r16
     33c:	0e 94 8f 03 	call	0x71e	; 0x71e <insert_node_head>
     340:	d5 cf       	rjmp	.-86     	; 0x2ec <app_list+0x34>
			case 't' : insert_node_tail(np); break;
     342:	c8 01       	movw	r24, r16
     344:	0e 94 a4 03 	call	0x748	; 0x748 <insert_node_tail>
     348:	d1 cf       	rjmp	.-94     	; 0x2ec <app_list+0x34>
			default  : insert_node_ascn(np);
     34a:	c8 01       	movw	r24, r16
     34c:	0e 94 b8 03 	call	0x770	; 0x770 <insert_node_ascn>
     350:	cd cf       	rjmp	.-102    	; 0x2ec <app_list+0x34>
		}
	}
	tour_list();
     352:	0e 94 ef 03 	call	0x7de	; 0x7de <tour_list>
	free_list();
     356:	0e 94 1c 04 	call	0x838	; 0x838 <free_list>
}
     35a:	28 96       	adiw	r28, 0x08	; 8
     35c:	0f b6       	in	r0, 0x3f	; 63
     35e:	f8 94       	cli
     360:	de bf       	out	0x3e, r29	; 62
     362:	0f be       	out	0x3f, r0	; 63
     364:	cd bf       	out	0x3d, r28	; 61
     366:	df 91       	pop	r29
     368:	cf 91       	pop	r28
     36a:	1f 91       	pop	r17
     36c:	0f 91       	pop	r16
     36e:	ff 90       	pop	r15
     370:	df 90       	pop	r13
     372:	cf 90       	pop	r12
     374:	08 95       	ret

00000376 <is_prime>:
// app_prime.c
#include <stdio.h>
#include <stdlib.h>
#include "app_prime.h"

int is_prime(int n) {
     376:	cf 93       	push	r28
     378:	df 93       	push	r29
     37a:	fc 01       	movw	r30, r24
    int i;
	for(i = 2; i <= n/2; i++){
     37c:	62 e0       	ldi	r22, 0x02	; 2
     37e:	70 e0       	ldi	r23, 0x00	; 0
     380:	0e 94 22 11 	call	0x2244	; 0x2244 <__divmodhi4>
     384:	eb 01       	movw	r28, r22
     386:	22 e0       	ldi	r18, 0x02	; 2
     388:	30 e0       	ldi	r19, 0x00	; 0
     38a:	08 c0       	rjmp	.+16     	; 0x39c <is_prime+0x26>
		if((n % i) == 0) 
     38c:	cf 01       	movw	r24, r30
     38e:	b9 01       	movw	r22, r18
     390:	0e 94 22 11 	call	0x2244	; 0x2244 <__divmodhi4>
     394:	00 97       	sbiw	r24, 0x00	; 0
     396:	41 f0       	breq	.+16     	; 0x3a8 <is_prime+0x32>
#include <stdlib.h>
#include "app_prime.h"

int is_prime(int n) {
    int i;
	for(i = 2; i <= n/2; i++){
     398:	2f 5f       	subi	r18, 0xFF	; 255
     39a:	3f 4f       	sbci	r19, 0xFF	; 255
     39c:	c2 17       	cp	r28, r18
     39e:	d3 07       	cpc	r29, r19
     3a0:	ac f7       	brge	.-22     	; 0x38c <is_prime+0x16>
		if((n % i) == 0) 
			return(0);
	}
	return(1);
     3a2:	81 e0       	ldi	r24, 0x01	; 1
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	02 c0       	rjmp	.+4      	; 0x3ac <is_prime+0x36>

int is_prime(int n) {
    int i;
	for(i = 2; i <= n/2; i++){
		if((n % i) == 0) 
			return(0);
     3a8:	80 e0       	ldi	r24, 0x00	; 0
     3aa:	90 e0       	ldi	r25, 0x00	; 0
	}
	return(1);
}
     3ac:	df 91       	pop	r29
     3ae:	cf 91       	pop	r28
     3b0:	08 95       	ret

000003b2 <app_prime>:

void app_prime(char *ap) {
     3b2:	cf 92       	push	r12
     3b4:	df 92       	push	r13
     3b6:	ef 92       	push	r14
     3b8:	ff 92       	push	r15
     3ba:	0f 93       	push	r16
     3bc:	1f 93       	push	r17
     3be:	cf 93       	push	r28
     3c0:	df 93       	push	r29
    int t = 2000, count = 0, n;

	if(ap) t = atoi(ap);
     3c2:	00 97       	sbiw	r24, 0x00	; 0
     3c4:	21 f0       	breq	.+8      	; 0x3ce <app_prime+0x1c>
     3c6:	0e 94 14 13 	call	0x2628	; 0x2628 <atoi>
     3ca:	7c 01       	movw	r14, r24
     3cc:	04 c0       	rjmp	.+8      	; 0x3d6 <app_prime+0x24>
	}
	return(1);
}

void app_prime(char *ap) {
    int t = 2000, count = 0, n;
     3ce:	90 ed       	ldi	r25, 0xD0	; 208
     3d0:	e9 2e       	mov	r14, r25
     3d2:	97 e0       	ldi	r25, 0x07	; 7
     3d4:	f9 2e       	mov	r15, r25

	if(ap) t = atoi(ap);

	for (n = 2; n <= t; n++){
     3d6:	c2 e0       	ldi	r28, 0x02	; 2
     3d8:	d0 e0       	ldi	r29, 0x00	; 0
	}
	return(1);
}

void app_prime(char *ap) {
    int t = 2000, count = 0, n;
     3da:	00 e0       	ldi	r16, 0x00	; 0
     3dc:	10 e0       	ldi	r17, 0x00	; 0
	if(ap) t = atoi(ap);

	for (n = 2; n <= t; n++){
		if(is_prime(n)) {
		    count++;
			printf("%d is a prime number!!!\n", n);
     3de:	89 e2       	ldi	r24, 0x29	; 41
     3e0:	c8 2e       	mov	r12, r24
     3e2:	82 e0       	ldi	r24, 0x02	; 2
     3e4:	d8 2e       	mov	r13, r24
void app_prime(char *ap) {
    int t = 2000, count = 0, n;

	if(ap) t = atoi(ap);

	for (n = 2; n <= t; n++){
     3e6:	16 c0       	rjmp	.+44     	; 0x414 <app_prime+0x62>
		if(is_prime(n)) {
     3e8:	ce 01       	movw	r24, r28
     3ea:	0e 94 bb 01 	call	0x376	; 0x376 <is_prime>
     3ee:	00 97       	sbiw	r24, 0x00	; 0
     3f0:	81 f0       	breq	.+32     	; 0x412 <app_prime+0x60>
		    count++;
     3f2:	0f 5f       	subi	r16, 0xFF	; 255
     3f4:	1f 4f       	sbci	r17, 0xFF	; 255
			printf("%d is a prime number!!!\n", n);
     3f6:	00 d0       	rcall	.+0      	; 0x3f8 <app_prime+0x46>
     3f8:	0f 92       	push	r0
     3fa:	ed b7       	in	r30, 0x3d	; 61
     3fc:	fe b7       	in	r31, 0x3e	; 62
     3fe:	d2 82       	std	Z+2, r13	; 0x02
     400:	c1 82       	std	Z+1, r12	; 0x01
     402:	d4 83       	std	Z+4, r29	; 0x04
     404:	c3 83       	std	Z+3, r28	; 0x03
     406:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <printf>
     40a:	0f 90       	pop	r0
     40c:	0f 90       	pop	r0
     40e:	0f 90       	pop	r0
     410:	0f 90       	pop	r0
void app_prime(char *ap) {
    int t = 2000, count = 0, n;

	if(ap) t = atoi(ap);

	for (n = 2; n <= t; n++){
     412:	21 96       	adiw	r28, 0x01	; 1
     414:	ec 16       	cp	r14, r28
     416:	fd 06       	cpc	r15, r29
     418:	3c f7       	brge	.-50     	; 0x3e8 <app_prime+0x36>
		if(is_prime(n)) {
		    count++;
			printf("%d is a prime number!!!\n", n);
		}
	}
	printf("count=%d\n", count);
     41a:	00 d0       	rcall	.+0      	; 0x41c <app_prime+0x6a>
     41c:	0f 92       	push	r0
     41e:	82 e4       	ldi	r24, 0x42	; 66
     420:	92 e0       	ldi	r25, 0x02	; 2
     422:	ed b7       	in	r30, 0x3d	; 61
     424:	fe b7       	in	r31, 0x3e	; 62
     426:	92 83       	std	Z+2, r25	; 0x02
     428:	81 83       	std	Z+1, r24	; 0x01
     42a:	14 83       	std	Z+4, r17	; 0x04
     42c:	03 83       	std	Z+3, r16	; 0x03
     42e:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <printf>
     432:	0f 90       	pop	r0
     434:	0f 90       	pop	r0
     436:	0f 90       	pop	r0
     438:	0f 90       	pop	r0
}
     43a:	df 91       	pop	r29
     43c:	cf 91       	pop	r28
     43e:	1f 91       	pop	r17
     440:	0f 91       	pop	r16
     442:	ff 90       	pop	r15
     444:	ef 90       	pop	r14
     446:	df 90       	pop	r13
     448:	cf 90       	pop	r12
     44a:	08 95       	ret

0000044c <task_prime>:

void task_prime(char *ap) {
     44c:	cf 92       	push	r12
     44e:	df 92       	push	r13
     450:	ef 92       	push	r14
     452:	ff 92       	push	r15
     454:	0f 93       	push	r16
     456:	1f 93       	push	r17
     458:	cf 93       	push	r28
     45a:	df 93       	push	r29
	int n, t = 2000, count = 0;

	if (ap && *ap) t = atoi(ap);
     45c:	00 97       	sbiw	r24, 0x00	; 0
     45e:	41 f0       	breq	.+16     	; 0x470 <task_prime+0x24>
     460:	fc 01       	movw	r30, r24
     462:	20 81       	ld	r18, Z
     464:	22 23       	and	r18, r18
     466:	21 f0       	breq	.+8      	; 0x470 <task_prime+0x24>
     468:	0e 94 14 13 	call	0x2628	; 0x2628 <atoi>
     46c:	8c 01       	movw	r16, r24
     46e:	02 c0       	rjmp	.+4      	; 0x474 <task_prime+0x28>
	}
	printf("count=%d\n", count);
}

void task_prime(char *ap) {
	int n, t = 2000, count = 0;
     470:	00 ed       	ldi	r16, 0xD0	; 208
     472:	17 e0       	ldi	r17, 0x07	; 7
     474:	ee 24       	eor	r14, r14
     476:	ff 24       	eor	r15, r15

	if (ap && *ap) t = atoi(ap);
	for (n = 2; n <= t; n++){
     478:	c2 e0       	ldi	r28, 0x02	; 2
     47a:	d0 e0       	ldi	r29, 0x00	; 0
		if(is_prime(n)) {
		    count++;
			printf("%d is a prime number!!!\n", n);
     47c:	29 e2       	ldi	r18, 0x29	; 41
     47e:	c2 2e       	mov	r12, r18
     480:	22 e0       	ldi	r18, 0x02	; 2
     482:	d2 2e       	mov	r13, r18

void task_prime(char *ap) {
	int n, t = 2000, count = 0;

	if (ap && *ap) t = atoi(ap);
	for (n = 2; n <= t; n++){
     484:	17 c0       	rjmp	.+46     	; 0x4b4 <task_prime+0x68>
		if(is_prime(n)) {
     486:	ce 01       	movw	r24, r28
     488:	0e 94 bb 01 	call	0x376	; 0x376 <is_prime>
     48c:	00 97       	sbiw	r24, 0x00	; 0
     48e:	89 f0       	breq	.+34     	; 0x4b2 <task_prime+0x66>
		    count++;
     490:	08 94       	sec
     492:	e1 1c       	adc	r14, r1
     494:	f1 1c       	adc	r15, r1
			printf("%d is a prime number!!!\n", n);
     496:	00 d0       	rcall	.+0      	; 0x498 <task_prime+0x4c>
     498:	0f 92       	push	r0
     49a:	ed b7       	in	r30, 0x3d	; 61
     49c:	fe b7       	in	r31, 0x3e	; 62
     49e:	d2 82       	std	Z+2, r13	; 0x02
     4a0:	c1 82       	std	Z+1, r12	; 0x01
     4a2:	d4 83       	std	Z+4, r29	; 0x04
     4a4:	c3 83       	std	Z+3, r28	; 0x03
     4a6:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <printf>
     4aa:	0f 90       	pop	r0
     4ac:	0f 90       	pop	r0
     4ae:	0f 90       	pop	r0
     4b0:	0f 90       	pop	r0

void task_prime(char *ap) {
	int n, t = 2000, count = 0;

	if (ap && *ap) t = atoi(ap);
	for (n = 2; n <= t; n++){
     4b2:	21 96       	adiw	r28, 0x01	; 1
     4b4:	0c 17       	cp	r16, r28
     4b6:	1d 07       	cpc	r17, r29
     4b8:	34 f7       	brge	.-52     	; 0x486 <task_prime+0x3a>
		if(is_prime(n)) {
		    count++;
			printf("%d is a prime number!!!\n", n);
		}
	}
	printf("count=%d\n", count);
     4ba:	00 d0       	rcall	.+0      	; 0x4bc <task_prime+0x70>
     4bc:	0f 92       	push	r0
     4be:	82 e4       	ldi	r24, 0x42	; 66
     4c0:	92 e0       	ldi	r25, 0x02	; 2
     4c2:	ed b7       	in	r30, 0x3d	; 61
     4c4:	fe b7       	in	r31, 0x3e	; 62
     4c6:	92 83       	std	Z+2, r25	; 0x02
     4c8:	81 83       	std	Z+1, r24	; 0x01
     4ca:	f4 82       	std	Z+4, r15	; 0x04
     4cc:	e3 82       	std	Z+3, r14	; 0x03
     4ce:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <printf>
	printf("$ ");
     4d2:	0f 90       	pop	r0
     4d4:	0f 90       	pop	r0
     4d6:	8c e4       	ldi	r24, 0x4C	; 76
     4d8:	92 e0       	ldi	r25, 0x02	; 2
     4da:	ed b7       	in	r30, 0x3d	; 61
     4dc:	fe b7       	in	r31, 0x3e	; 62
     4de:	92 83       	std	Z+2, r25	; 0x02
     4e0:	81 83       	std	Z+1, r24	; 0x01
     4e2:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <printf>
     4e6:	0f 90       	pop	r0
     4e8:	0f 90       	pop	r0
}
     4ea:	df 91       	pop	r29
     4ec:	cf 91       	pop	r28
     4ee:	1f 91       	pop	r17
     4f0:	0f 91       	pop	r16
     4f2:	ff 90       	pop	r15
     4f4:	ef 90       	pop	r14
     4f6:	df 90       	pop	r13
     4f8:	cf 90       	pop	r12
     4fa:	08 95       	ret

000004fc <app_sum>:
#include "app_sum.h"

void app_sum(char *ap) {
	int t = 100, sum = 0;

	if (ap && *ap) t = atoi(ap);
     4fc:	00 97       	sbiw	r24, 0x00	; 0
     4fe:	41 f0       	breq	.+16     	; 0x510 <app_sum+0x14>
     500:	fc 01       	movw	r30, r24
     502:	20 81       	ld	r18, Z
     504:	22 23       	and	r18, r18
     506:	21 f0       	breq	.+8      	; 0x510 <app_sum+0x14>
     508:	0e 94 14 13 	call	0x2628	; 0x2628 <atoi>
     50c:	9c 01       	movw	r18, r24
     50e:	02 c0       	rjmp	.+4      	; 0x514 <app_sum+0x18>
#include <stdio.h>
#include <stdlib.h>
#include "app_sum.h"

void app_sum(char *ap) {
	int t = 100, sum = 0;
     510:	24 e6       	ldi	r18, 0x64	; 100
     512:	30 e0       	ldi	r19, 0x00	; 0

	if (ap && *ap) t = atoi(ap);
	sum = ((t + 1) * (t)) / 2;
	printf("sum=%d\n", sum);
     514:	00 d0       	rcall	.+0      	; 0x516 <app_sum+0x1a>
     516:	0f 92       	push	r0
     518:	8f e4       	ldi	r24, 0x4F	; 79
     51a:	92 e0       	ldi	r25, 0x02	; 2
     51c:	ed b7       	in	r30, 0x3d	; 61
     51e:	fe b7       	in	r31, 0x3e	; 62
     520:	92 83       	std	Z+2, r25	; 0x02
     522:	81 83       	std	Z+1, r24	; 0x01

void app_sum(char *ap) {
	int t = 100, sum = 0;

	if (ap && *ap) t = atoi(ap);
	sum = ((t + 1) * (t)) / 2;
     524:	a9 01       	movw	r20, r18
     526:	4f 5f       	subi	r20, 0xFF	; 255
     528:	5f 4f       	sbci	r21, 0xFF	; 255
     52a:	42 9f       	mul	r20, r18
     52c:	c0 01       	movw	r24, r0
     52e:	43 9f       	mul	r20, r19
     530:	90 0d       	add	r25, r0
     532:	52 9f       	mul	r21, r18
     534:	90 0d       	add	r25, r0
     536:	11 24       	eor	r1, r1
     538:	62 e0       	ldi	r22, 0x02	; 2
     53a:	70 e0       	ldi	r23, 0x00	; 0
     53c:	0e 94 22 11 	call	0x2244	; 0x2244 <__divmodhi4>
	printf("sum=%d\n", sum);
     540:	74 83       	std	Z+4, r23	; 0x04
     542:	63 83       	std	Z+3, r22	; 0x03
     544:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <printf>
     548:	0f 90       	pop	r0
     54a:	0f 90       	pop	r0
     54c:	0f 90       	pop	r0
     54e:	0f 90       	pop	r0
}
     550:	08 95       	ret

00000552 <q_init>:
#include "cir_queue.h"

char qi[QI_SIZE], qo[QO_SIZE];
int fi, ri, fo, ro;
void q_init(void) {
	fi = ri = fo = ro = 0;
     552:	10 92 39 06 	sts	0x0639, r1
     556:	10 92 38 06 	sts	0x0638, r1
     55a:	10 92 37 06 	sts	0x0637, r1
     55e:	10 92 36 06 	sts	0x0636, r1
     562:	10 92 3b 06 	sts	0x063B, r1
     566:	10 92 3a 06 	sts	0x063A, r1
     56a:	10 92 f5 05 	sts	0x05F5, r1
     56e:	10 92 f4 05 	sts	0x05F4, r1
}
     572:	08 95       	ret

00000574 <qi_insert>:
int qi_insert(char ch) {
     574:	48 2f       	mov	r20, r24
	if((ri + 1) % QI_SIZE == fi)
     576:	20 91 3a 06 	lds	r18, 0x063A
     57a:	30 91 3b 06 	lds	r19, 0x063B
     57e:	2f 5f       	subi	r18, 0xFF	; 255
     580:	3f 4f       	sbci	r19, 0xFF	; 255
     582:	c9 01       	movw	r24, r18
     584:	60 e4       	ldi	r22, 0x40	; 64
     586:	70 e0       	ldi	r23, 0x00	; 0
     588:	0e 94 22 11 	call	0x2244	; 0x2244 <__divmodhi4>
     58c:	9c 01       	movw	r18, r24
     58e:	80 91 f4 05 	lds	r24, 0x05F4
     592:	90 91 f5 05 	lds	r25, 0x05F5
     596:	28 17       	cp	r18, r24
     598:	39 07       	cpc	r19, r25
     59a:	59 f0       	breq	.+22     	; 0x5b2 <qi_insert+0x3e>
		return (0);
	ri = (ri + 1) % QI_SIZE;
     59c:	30 93 3b 06 	sts	0x063B, r19
     5a0:	20 93 3a 06 	sts	0x063A, r18
	qi[ri] = ch;
     5a4:	24 5c       	subi	r18, 0xC4	; 196
     5a6:	39 4f       	sbci	r19, 0xF9	; 249
     5a8:	f9 01       	movw	r30, r18
     5aa:	40 83       	st	Z, r20
	return(1);
     5ac:	81 e0       	ldi	r24, 0x01	; 1
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	08 95       	ret
void q_init(void) {
	fi = ri = fo = ro = 0;
}
int qi_insert(char ch) {
	if((ri + 1) % QI_SIZE == fi)
		return (0);
     5b2:	80 e0       	ldi	r24, 0x00	; 0
     5b4:	90 e0       	ldi	r25, 0x00	; 0
	ri = (ri + 1) % QI_SIZE;
	qi[ri] = ch;
	return(1);
}
     5b6:	08 95       	ret

000005b8 <qi_delete>:
int qi_delete(void) {
	if( ri == fi)
     5b8:	80 91 f4 05 	lds	r24, 0x05F4
     5bc:	90 91 f5 05 	lds	r25, 0x05F5
     5c0:	20 91 3a 06 	lds	r18, 0x063A
     5c4:	30 91 3b 06 	lds	r19, 0x063B
     5c8:	28 17       	cp	r18, r24
     5ca:	39 07       	cpc	r19, r25
     5cc:	79 f0       	breq	.+30     	; 0x5ec <qi_delete+0x34>
		return(0);
    fi = (fi+1) % QI_SIZE;
     5ce:	01 96       	adiw	r24, 0x01	; 1
     5d0:	60 e4       	ldi	r22, 0x40	; 64
     5d2:	70 e0       	ldi	r23, 0x00	; 0
     5d4:	0e 94 22 11 	call	0x2244	; 0x2244 <__divmodhi4>
     5d8:	90 93 f5 05 	sts	0x05F5, r25
     5dc:	80 93 f4 05 	sts	0x05F4, r24
	return(qi[fi]);
     5e0:	84 5c       	subi	r24, 0xC4	; 196
     5e2:	99 4f       	sbci	r25, 0xF9	; 249
     5e4:	fc 01       	movw	r30, r24
     5e6:	80 81       	ld	r24, Z
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	08 95       	ret
	qi[ri] = ch;
	return(1);
}
int qi_delete(void) {
	if( ri == fi)
		return(0);
     5ec:	80 e0       	ldi	r24, 0x00	; 0
     5ee:	90 e0       	ldi	r25, 0x00	; 0
    fi = (fi+1) % QI_SIZE;
	return(qi[fi]);
}
     5f0:	08 95       	ret

000005f2 <qo_insert>:
int qo_insert(char ch) {
     5f2:	48 2f       	mov	r20, r24
	if((ro + 1) % QO_SIZE == fo)
     5f4:	20 91 38 06 	lds	r18, 0x0638
     5f8:	30 91 39 06 	lds	r19, 0x0639
     5fc:	2f 5f       	subi	r18, 0xFF	; 255
     5fe:	3f 4f       	sbci	r19, 0xFF	; 255
     600:	c9 01       	movw	r24, r18
     602:	60 e4       	ldi	r22, 0x40	; 64
     604:	70 e0       	ldi	r23, 0x00	; 0
     606:	0e 94 22 11 	call	0x2244	; 0x2244 <__divmodhi4>
     60a:	9c 01       	movw	r18, r24
     60c:	80 91 36 06 	lds	r24, 0x0636
     610:	90 91 37 06 	lds	r25, 0x0637
     614:	28 17       	cp	r18, r24
     616:	39 07       	cpc	r19, r25
     618:	59 f0       	breq	.+22     	; 0x630 <qo_insert+0x3e>
		return (0);
	ro = (ro + 1) % QO_SIZE;
     61a:	30 93 39 06 	sts	0x0639, r19
     61e:	20 93 38 06 	sts	0x0638, r18
	qo[ro] = ch;
     622:	2a 50       	subi	r18, 0x0A	; 10
     624:	3a 4f       	sbci	r19, 0xFA	; 250
     626:	f9 01       	movw	r30, r18
     628:	40 83       	st	Z, r20
	return(1);
     62a:	81 e0       	ldi	r24, 0x01	; 1
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	08 95       	ret
    fi = (fi+1) % QI_SIZE;
	return(qi[fi]);
}
int qo_insert(char ch) {
	if((ro + 1) % QO_SIZE == fo)
		return (0);
     630:	80 e0       	ldi	r24, 0x00	; 0
     632:	90 e0       	ldi	r25, 0x00	; 0
	ro = (ro + 1) % QO_SIZE;
	qo[ro] = ch;
	return(1);
}
     634:	08 95       	ret

00000636 <qo_delete>:
int qo_delete(void) {
	if( ro == fo)
     636:	80 91 36 06 	lds	r24, 0x0636
     63a:	90 91 37 06 	lds	r25, 0x0637
     63e:	20 91 38 06 	lds	r18, 0x0638
     642:	30 91 39 06 	lds	r19, 0x0639
     646:	28 17       	cp	r18, r24
     648:	39 07       	cpc	r19, r25
     64a:	79 f0       	breq	.+30     	; 0x66a <qo_delete+0x34>
		return(0);
    fo = (fo+1) % QO_SIZE;
     64c:	01 96       	adiw	r24, 0x01	; 1
     64e:	60 e4       	ldi	r22, 0x40	; 64
     650:	70 e0       	ldi	r23, 0x00	; 0
     652:	0e 94 22 11 	call	0x2244	; 0x2244 <__divmodhi4>
     656:	90 93 37 06 	sts	0x0637, r25
     65a:	80 93 36 06 	sts	0x0636, r24
	return(qo[fo]);
     65e:	8a 50       	subi	r24, 0x0A	; 10
     660:	9a 4f       	sbci	r25, 0xFA	; 250
     662:	fc 01       	movw	r30, r24
     664:	80 81       	ld	r24, Z
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	08 95       	ret
	qo[ro] = ch;
	return(1);
}
int qo_delete(void) {
	if( ro == fo)
		return(0);
     66a:	80 e0       	ldi	r24, 0x00	; 0
     66c:	90 e0       	ldi	r25, 0x00	; 0
    fo = (fo+1) % QO_SIZE;
	return(qo[fo]);
}
     66e:	08 95       	ret

00000670 <qi_peek>:

int qi_peek() {
	if (fi == ri) return 0;
     670:	80 91 f4 05 	lds	r24, 0x05F4
     674:	90 91 f5 05 	lds	r25, 0x05F5
     678:	20 91 3a 06 	lds	r18, 0x063A
     67c:	30 91 3b 06 	lds	r19, 0x063B
     680:	82 17       	cp	r24, r18
     682:	93 07       	cpc	r25, r19
     684:	59 f0       	breq	.+22     	; 0x69c <qi_peek+0x2c>
	else 
		return (qi[(fi + 1) % QI_SIZE]);
     686:	01 96       	adiw	r24, 0x01	; 1
     688:	60 e4       	ldi	r22, 0x40	; 64
     68a:	70 e0       	ldi	r23, 0x00	; 0
     68c:	0e 94 22 11 	call	0x2244	; 0x2244 <__divmodhi4>
     690:	84 5c       	subi	r24, 0xC4	; 196
     692:	99 4f       	sbci	r25, 0xF9	; 249
     694:	fc 01       	movw	r30, r24
     696:	80 81       	ld	r24, Z
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	08 95       	ret
    fo = (fo+1) % QO_SIZE;
	return(qo[fo]);
}

int qi_peek() {
	if (fi == ri) return 0;
     69c:	80 e0       	ldi	r24, 0x00	; 0
     69e:	90 e0       	ldi	r25, 0x00	; 0
	else 
		return (qi[(fi + 1) % QI_SIZE]);
}
     6a0:	08 95       	ret

000006a2 <led_init>:
#include "led.h"

static uint8_t Leds;

void led_init(void) {
    DDRL = PORTL = 0xff;
     6a2:	8f ef       	ldi	r24, 0xFF	; 255
     6a4:	80 93 0b 01 	sts	0x010B, r24
     6a8:	80 93 0a 01 	sts	0x010A, r24
} 
     6ac:	08 95       	ret

000006ae <led_on_all>:
void led_on_all(void) {
    Leds = PORTL = 0x00;
     6ae:	10 92 0b 01 	sts	0x010B, r1
     6b2:	10 92 ea 05 	sts	0x05EA, r1
}
     6b6:	08 95       	ret

000006b8 <led_off_all>:
void led_off_all(void) {
    Leds = PORTL = 0xff;
     6b8:	8f ef       	ldi	r24, 0xFF	; 255
     6ba:	80 93 0b 01 	sts	0x010B, r24
     6be:	80 93 ea 05 	sts	0x05EA, r24
}
     6c2:	08 95       	ret

000006c4 <led_on>:
void led_on(uint8_t led_no) {
    Leds &= ~(1 << led_no);
     6c4:	21 e0       	ldi	r18, 0x01	; 1
     6c6:	30 e0       	ldi	r19, 0x00	; 0
     6c8:	02 c0       	rjmp	.+4      	; 0x6ce <led_on+0xa>
     6ca:	22 0f       	add	r18, r18
     6cc:	33 1f       	adc	r19, r19
     6ce:	8a 95       	dec	r24
     6d0:	e2 f7       	brpl	.-8      	; 0x6ca <led_on+0x6>
     6d2:	20 95       	com	r18
     6d4:	80 91 ea 05 	lds	r24, 0x05EA
     6d8:	28 23       	and	r18, r24
     6da:	20 93 ea 05 	sts	0x05EA, r18
	PORTL = Leds;
     6de:	20 93 0b 01 	sts	0x010B, r18
}
     6e2:	08 95       	ret

000006e4 <led_off>:
void led_off(uint8_t led_no) {
	Leds |= (1 << led_no);
     6e4:	21 e0       	ldi	r18, 0x01	; 1
     6e6:	30 e0       	ldi	r19, 0x00	; 0
     6e8:	02 c0       	rjmp	.+4      	; 0x6ee <led_off+0xa>
     6ea:	22 0f       	add	r18, r18
     6ec:	33 1f       	adc	r19, r19
     6ee:	8a 95       	dec	r24
     6f0:	e2 f7       	brpl	.-8      	; 0x6ea <led_off+0x6>
     6f2:	80 91 ea 05 	lds	r24, 0x05EA
     6f6:	82 2b       	or	r24, r18
     6f8:	80 93 ea 05 	sts	0x05EA, r24
	PORTL = Leds;
     6fc:	80 93 0b 01 	sts	0x010B, r24
}
     700:	08 95       	ret

00000702 <led_set>:
void led_set(uint8_t led_mask) {
    Leds = ~led_mask;
     702:	80 95       	com	r24
     704:	80 93 ea 05 	sts	0x05EA, r24
	PORTL = Leds;
     708:	80 93 0b 01 	sts	0x010B, r24
}
     70c:	08 95       	ret

0000070e <get_node>:
struct node *Head = NULL;

struct node *get_node() {
	struct node *cp;
	
	cp = (struct node *)malloc(sizeof(struct node));
     70e:	84 e0       	ldi	r24, 0x04	; 4
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	0e 94 80 11 	call	0x2300	; 0x2300 <malloc>
	return cp;
}
     716:	08 95       	ret

00000718 <free_node>:

void free_node(struct node *np) {
	free(np);
     718:	0e 94 16 12 	call	0x242c	; 0x242c <free>
	np = NULL;
}
     71c:	08 95       	ret

0000071e <insert_node_head>:

void insert_node_head(struct node *np) {
     71e:	fc 01       	movw	r30, r24
	if(!Head) {
     720:	80 91 eb 05 	lds	r24, 0x05EB
     724:	90 91 ec 05 	lds	r25, 0x05EC
     728:	00 97       	sbiw	r24, 0x00	; 0
     72a:	39 f4       	brne	.+14     	; 0x73a <insert_node_head+0x1c>
		Head = np;
     72c:	f0 93 ec 05 	sts	0x05EC, r31
     730:	e0 93 eb 05 	sts	0x05EB, r30
		np->link = NULL;
     734:	13 82       	std	Z+3, r1	; 0x03
     736:	12 82       	std	Z+2, r1	; 0x02
     738:	08 95       	ret
	} else {
		np->link = Head;
     73a:	93 83       	std	Z+3, r25	; 0x03
     73c:	82 83       	std	Z+2, r24	; 0x02
		Head = np;
     73e:	f0 93 ec 05 	sts	0x05EC, r31
     742:	e0 93 eb 05 	sts	0x05EB, r30
     746:	08 95       	ret

00000748 <insert_node_tail>:
	}
}
void insert_node_tail(struct node *np){
	struct node *cp;
	if(!Head)
     748:	e0 91 eb 05 	lds	r30, 0x05EB
     74c:	f0 91 ec 05 	lds	r31, 0x05EC
     750:	30 97       	sbiw	r30, 0x00	; 0
     752:	31 f4       	brne	.+12     	; 0x760 <insert_node_tail+0x18>
		Head = np;
     754:	90 93 ec 05 	sts	0x05EC, r25
     758:	80 93 eb 05 	sts	0x05EB, r24
     75c:	08 95       	ret
	else {
		for (cp = Head; cp->link != NULL; cp = cp->link);
     75e:	f9 01       	movw	r30, r18
     760:	22 81       	ldd	r18, Z+2	; 0x02
     762:	33 81       	ldd	r19, Z+3	; 0x03
     764:	21 15       	cp	r18, r1
     766:	31 05       	cpc	r19, r1
     768:	d1 f7       	brne	.-12     	; 0x75e <insert_node_tail+0x16>
		cp->link = np;
     76a:	93 83       	std	Z+3, r25	; 0x03
     76c:	82 83       	std	Z+2, r24	; 0x02
     76e:	08 95       	ret

00000770 <insert_node_ascn>:
	}
}
void insert_node_ascn(struct node *np) {
     770:	cf 93       	push	r28
     772:	df 93       	push	r29
     774:	fc 01       	movw	r30, r24
	struct node *cp, *pp;
	if(!Head) {
     776:	20 91 eb 05 	lds	r18, 0x05EB
     77a:	30 91 ec 05 	lds	r19, 0x05EC
     77e:	21 15       	cp	r18, r1
     780:	31 05       	cpc	r19, r1
     782:	31 f0       	breq	.+12     	; 0x790 <insert_node_ascn+0x20>
		Head = np;
		np->link = NULL;
	} else {
		for (cp = Head, pp = NULL; cp != NULL && cp->data < np->data;
     784:	40 81       	ld	r20, Z
     786:	51 81       	ldd	r21, Z+1	; 0x01
     788:	d9 01       	movw	r26, r18
     78a:	c0 e0       	ldi	r28, 0x00	; 0
     78c:	d0 e0       	ldi	r29, 0x00	; 0
     78e:	0f c0       	rjmp	.+30     	; 0x7ae <insert_node_ascn+0x3e>
	}
}
void insert_node_ascn(struct node *np) {
	struct node *cp, *pp;
	if(!Head) {
		Head = np;
     790:	90 93 ec 05 	sts	0x05EC, r25
     794:	80 93 eb 05 	sts	0x05EB, r24
		np->link = NULL;
     798:	13 82       	std	Z+3, r1	; 0x03
     79a:	12 82       	std	Z+2, r1	; 0x02
     79c:	1d c0       	rjmp	.+58     	; 0x7d8 <insert_node_ascn+0x68>
	} else {
		for (cp = Head, pp = NULL; cp != NULL && cp->data < np->data;
												pp = cp, cp = cp->link);
     79e:	12 96       	adiw	r26, 0x02	; 2
     7a0:	8d 91       	ld	r24, X+
     7a2:	9c 91       	ld	r25, X
     7a4:	13 97       	sbiw	r26, 0x03	; 3
	struct node *cp, *pp;
	if(!Head) {
		Head = np;
		np->link = NULL;
	} else {
		for (cp = Head, pp = NULL; cp != NULL && cp->data < np->data;
     7a6:	ed 01       	movw	r28, r26
     7a8:	00 97       	sbiw	r24, 0x00	; 0
     7aa:	39 f0       	breq	.+14     	; 0x7ba <insert_node_ascn+0x4a>
												pp = cp, cp = cp->link);
     7ac:	dc 01       	movw	r26, r24
	struct node *cp, *pp;
	if(!Head) {
		Head = np;
		np->link = NULL;
	} else {
		for (cp = Head, pp = NULL; cp != NULL && cp->data < np->data;
     7ae:	8d 91       	ld	r24, X+
     7b0:	9c 91       	ld	r25, X
     7b2:	11 97       	sbiw	r26, 0x01	; 1
     7b4:	84 17       	cp	r24, r20
     7b6:	95 07       	cpc	r25, r21
     7b8:	94 f3       	brlt	.-28     	; 0x79e <insert_node_ascn+0x2e>
												pp = cp, cp = cp->link);
		
		if(pp == NULL) {
     7ba:	20 97       	sbiw	r28, 0x00	; 0
     7bc:	39 f4       	brne	.+14     	; 0x7cc <insert_node_ascn+0x5c>
			np->link = Head;
     7be:	33 83       	std	Z+3, r19	; 0x03
     7c0:	22 83       	std	Z+2, r18	; 0x02
			Head = np;
     7c2:	f0 93 ec 05 	sts	0x05EC, r31
     7c6:	e0 93 eb 05 	sts	0x05EB, r30
     7ca:	06 c0       	rjmp	.+12     	; 0x7d8 <insert_node_ascn+0x68>
		} else {
			np->link = pp->link;
     7cc:	8a 81       	ldd	r24, Y+2	; 0x02
     7ce:	9b 81       	ldd	r25, Y+3	; 0x03
     7d0:	93 83       	std	Z+3, r25	; 0x03
     7d2:	82 83       	std	Z+2, r24	; 0x02
			pp->link = np;
     7d4:	fb 83       	std	Y+3, r31	; 0x03
     7d6:	ea 83       	std	Y+2, r30	; 0x02
		}
	}
}
     7d8:	df 91       	pop	r29
     7da:	cf 91       	pop	r28
     7dc:	08 95       	ret

000007de <tour_list>:

void tour_list() {
     7de:	0f 93       	push	r16
     7e0:	1f 93       	push	r17
     7e2:	cf 93       	push	r28
     7e4:	df 93       	push	r29
	struct node *cp;

	printf("\n");
     7e6:	8a e0       	ldi	r24, 0x0A	; 10
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <putchar>
	for (cp = Head; cp !=NULL; cp = cp->link)
     7ee:	c0 91 eb 05 	lds	r28, 0x05EB
     7f2:	d0 91 ec 05 	lds	r29, 0x05EC
		printf("-->%d ", cp->data);
     7f6:	07 e5       	ldi	r16, 0x57	; 87
     7f8:	12 e0       	ldi	r17, 0x02	; 2

void tour_list() {
	struct node *cp;

	printf("\n");
	for (cp = Head; cp !=NULL; cp = cp->link)
     7fa:	13 c0       	rjmp	.+38     	; 0x822 <tour_list+0x44>
		printf("-->%d ", cp->data);
     7fc:	00 d0       	rcall	.+0      	; 0x7fe <tour_list+0x20>
     7fe:	0f 92       	push	r0
     800:	ed b7       	in	r30, 0x3d	; 61
     802:	fe b7       	in	r31, 0x3e	; 62
     804:	12 83       	std	Z+2, r17	; 0x02
     806:	01 83       	std	Z+1, r16	; 0x01
     808:	88 81       	ld	r24, Y
     80a:	99 81       	ldd	r25, Y+1	; 0x01
     80c:	94 83       	std	Z+4, r25	; 0x04
     80e:	83 83       	std	Z+3, r24	; 0x03
     810:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <printf>

void tour_list() {
	struct node *cp;

	printf("\n");
	for (cp = Head; cp !=NULL; cp = cp->link)
     814:	0a 80       	ldd	r0, Y+2	; 0x02
     816:	db 81       	ldd	r29, Y+3	; 0x03
     818:	c0 2d       	mov	r28, r0
     81a:	0f 90       	pop	r0
     81c:	0f 90       	pop	r0
     81e:	0f 90       	pop	r0
     820:	0f 90       	pop	r0
     822:	20 97       	sbiw	r28, 0x00	; 0
     824:	59 f7       	brne	.-42     	; 0x7fc <tour_list+0x1e>
		printf("-->%d ", cp->data);
	printf("\n");
     826:	8a e0       	ldi	r24, 0x0A	; 10
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <putchar>
}
     82e:	df 91       	pop	r29
     830:	cf 91       	pop	r28
     832:	1f 91       	pop	r17
     834:	0f 91       	pop	r16
     836:	08 95       	ret

00000838 <free_list>:

void free_list() {
	struct node *cp;

	for( ; Head != NULL; ) {
     838:	09 c0       	rjmp	.+18     	; 0x84c <free_list+0x14>
		cp = Head;
		Head = cp->link;
     83a:	fc 01       	movw	r30, r24
     83c:	22 81       	ldd	r18, Z+2	; 0x02
     83e:	33 81       	ldd	r19, Z+3	; 0x03
     840:	30 93 ec 05 	sts	0x05EC, r19
     844:	20 93 eb 05 	sts	0x05EB, r18
	cp = (struct node *)malloc(sizeof(struct node));
	return cp;
}

void free_node(struct node *np) {
	free(np);
     848:	0e 94 16 12 	call	0x242c	; 0x242c <free>
}

void free_list() {
	struct node *cp;

	for( ; Head != NULL; ) {
     84c:	80 91 eb 05 	lds	r24, 0x05EB
     850:	90 91 ec 05 	lds	r25, 0x05EC
     854:	00 97       	sbiw	r24, 0x00	; 0
     856:	89 f7       	brne	.-30     	; 0x83a <free_list+0x2>
		cp = Head;
		Head = cp->link;
		free_node(cp);
	}
}
     858:	08 95       	ret

0000085a <spi_init>:
#include "spi_tc77.h"
#include "task.h"
#include "timer_linked_list.h"

void spi_init() {
	sbi(DDRB, 0);
     85a:	20 9a       	sbi	0x04, 0	; 4
	sbi(DDRB, 1);
     85c:	21 9a       	sbi	0x04, 1	; 4
	sbi(DDRB, 2);
     85e:	22 9a       	sbi	0x04, 2	; 4
	cbi(DDRB, 3);
     860:	23 98       	cbi	0x04, 3	; 4

	sbi(SPSR, SPI2X);
     862:	8d b5       	in	r24, 0x2d	; 45
     864:	81 60       	ori	r24, 0x01	; 1
     866:	8d bd       	out	0x2d, r24	; 45
	SPCR = ((1 << MSTR) | (1 << SPE) | (1 << SPIE));
     868:	80 ed       	ldi	r24, 0xD0	; 208
     86a:	8c bd       	out	0x2c, r24	; 44

}
     86c:	08 95       	ret

0000086e <spi_select>:

void spi_select() {
	cbi(PORTB, 0);
     86e:	28 98       	cbi	0x05, 0	; 5
}
     870:	08 95       	ret

00000872 <spi_release>:

void spi_release() {
	sbi(PORTB, 0);
     872:	28 9a       	sbi	0x05, 0	; 5
}
     874:	08 95       	ret

00000876 <task_tc77>:

void spi_write(uint8_t data) {
	SPDR = data;
}

void task_tc77(void *arg) {
     876:	cf 92       	push	r12
     878:	df 92       	push	r13
     87a:	ef 92       	push	r14
     87c:	ff 92       	push	r15
	static uint8_t state;
	static uint16_t value;

	if (!strcmp(arg, "")) {
     87e:	dc 01       	movw	r26, r24
     880:	2c 91       	ld	r18, X
     882:	22 23       	and	r18, r18
     884:	31 f4       	brne	.+12     	; 0x892 <task_tc77+0x1c>
		state = TC77_WAIT_HI;
     886:	81 e0       	ldi	r24, 0x01	; 1
     888:	80 93 ed 05 	sts	0x05ED, r24
		spi_select();
     88c:	0e 94 37 04 	call	0x86e	; 0x86e <spi_select>
     890:	11 c0       	rjmp	.+34     	; 0x8b4 <task_tc77+0x3e>
		spi_write(0x00);
	} else {
		switch(state) {
     892:	20 91 ed 05 	lds	r18, 0x05ED
     896:	21 30       	cpi	r18, 0x01	; 1
     898:	21 f0       	breq	.+8      	; 0x8a2 <task_tc77+0x2c>
     89a:	22 30       	cpi	r18, 0x02	; 2
     89c:	09 f0       	breq	.+2      	; 0x8a0 <task_tc77+0x2a>
     89e:	44 c0       	rjmp	.+136    	; 0x928 <task_tc77+0xb2>
     8a0:	0b c0       	rjmp	.+22     	; 0x8b8 <task_tc77+0x42>
			case TC77_WAIT_HI:
				value = atoi(arg) << 8;
     8a2:	0e 94 14 13 	call	0x2628	; 0x2628 <atoi>
     8a6:	10 92 ee 05 	sts	0x05EE, r1
     8aa:	80 93 ef 05 	sts	0x05EF, r24
				state = TC77_WAIT_LO;
     8ae:	82 e0       	ldi	r24, 0x02	; 2
     8b0:	80 93 ed 05 	sts	0x05ED, r24
void spi_release() {
	sbi(PORTB, 0);
}

void spi_write(uint8_t data) {
	SPDR = data;
     8b4:	1e bc       	out	0x2e, r1	; 46
     8b6:	3e c0       	rjmp	.+124    	; 0x934 <task_tc77+0xbe>
				value = atoi(arg) << 8;
				state = TC77_WAIT_LO;
				spi_write(0x00);
				break;
			case TC77_WAIT_LO:
				value |= atoi(arg);
     8b8:	c0 90 ee 05 	lds	r12, 0x05EE
     8bc:	d0 90 ef 05 	lds	r13, 0x05EF
     8c0:	0e 94 14 13 	call	0x2628	; 0x2628 <atoi>
     8c4:	c8 2a       	or	r12, r24
     8c6:	d9 2a       	or	r13, r25
				value = (value >> 3) * 0.0625;
     8c8:	23 e0       	ldi	r18, 0x03	; 3
     8ca:	d6 94       	lsr	r13
     8cc:	c7 94       	ror	r12
     8ce:	2a 95       	dec	r18
     8d0:	e1 f7       	brne	.-8      	; 0x8ca <task_tc77+0x54>
     8d2:	b6 01       	movw	r22, r12
     8d4:	80 e0       	ldi	r24, 0x00	; 0
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <__floatunsisf>
     8dc:	20 e0       	ldi	r18, 0x00	; 0
     8de:	30 e0       	ldi	r19, 0x00	; 0
     8e0:	40 e8       	ldi	r20, 0x80	; 128
     8e2:	5d e3       	ldi	r21, 0x3D	; 61
     8e4:	0e 94 8a 0c 	call	0x1914	; 0x1914 <__mulsf3>
     8e8:	0e 94 9d 0a 	call	0x153a	; 0x153a <__fixunssfsi>
     8ec:	6b 01       	movw	r12, r22
     8ee:	7c 01       	movw	r14, r24
     8f0:	70 93 ef 05 	sts	0x05EF, r23
     8f4:	60 93 ee 05 	sts	0x05EE, r22
				spi_release();
     8f8:	0e 94 39 04 	call	0x872	; 0x872 <spi_release>
				printf("task_tc77() : crrent_temperatur -> %d degree.\n", value);
     8fc:	00 d0       	rcall	.+0      	; 0x8fe <task_tc77+0x88>
     8fe:	0f 92       	push	r0
     900:	ed b7       	in	r30, 0x3d	; 61
     902:	fe b7       	in	r31, 0x3e	; 62
     904:	31 96       	adiw	r30, 0x01	; 1
     906:	81 e6       	ldi	r24, 0x61	; 97
     908:	92 e0       	ldi	r25, 0x02	; 2
     90a:	ad b7       	in	r26, 0x3d	; 61
     90c:	be b7       	in	r27, 0x3e	; 62
     90e:	12 96       	adiw	r26, 0x02	; 2
     910:	9c 93       	st	X, r25
     912:	8e 93       	st	-X, r24
     914:	11 97       	sbiw	r26, 0x01	; 1
     916:	d3 82       	std	Z+3, r13	; 0x03
     918:	c2 82       	std	Z+2, r12	; 0x02
     91a:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <printf>
     91e:	0f 90       	pop	r0
     920:	0f 90       	pop	r0
     922:	0f 90       	pop	r0
     924:	0f 90       	pop	r0
     926:	06 c0       	rjmp	.+12     	; 0x934 <task_tc77+0xbe>
				break;
			default:
				spi_release();
     928:	0e 94 39 04 	call	0x872	; 0x872 <spi_release>
				printf("task_tc77() : unecpecetd state task_tc77...\n"); 
     92c:	80 e9       	ldi	r24, 0x90	; 144
     92e:	92 e0       	ldi	r25, 0x02	; 2
     930:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <puts>
		}
	}
}
     934:	ff 90       	pop	r15
     936:	ef 90       	pop	r14
     938:	df 90       	pop	r13
     93a:	cf 90       	pop	r12
     93c:	08 95       	ret

0000093e <spi_write>:
void spi_release() {
	sbi(PORTB, 0);
}

void spi_write(uint8_t data) {
	SPDR = data;
     93e:	8e bd       	out	0x2e, r24	; 46
}
     940:	08 95       	ret

00000942 <__vector_24>:
				printf("task_tc77() : unecpecetd state task_tc77...\n"); 
		}
	}
}

ISR(SPI_STC_vect) {
     942:	1f 92       	push	r1
     944:	0f 92       	push	r0
     946:	0f b6       	in	r0, 0x3f	; 63
     948:	0f 92       	push	r0
     94a:	0b b6       	in	r0, 0x3b	; 59
     94c:	0f 92       	push	r0
     94e:	11 24       	eor	r1, r1
     950:	2f 93       	push	r18
     952:	3f 93       	push	r19
     954:	4f 93       	push	r20
     956:	5f 93       	push	r21
     958:	6f 93       	push	r22
     95a:	7f 93       	push	r23
     95c:	8f 93       	push	r24
     95e:	9f 93       	push	r25
     960:	af 93       	push	r26
     962:	bf 93       	push	r27
     964:	ef 93       	push	r30
     966:	ff 93       	push	r31
     968:	cf 93       	push	r28
     96a:	df 93       	push	r29
     96c:	cd b7       	in	r28, 0x3d	; 61
     96e:	de b7       	in	r29, 0x3e	; 62
     970:	2a 97       	sbiw	r28, 0x0a	; 10
     972:	de bf       	out	0x3e, r29	; 62
     974:	cd bf       	out	0x3d, r28	; 61
	struct task task;
	uint8_t     data;
	data = SPDR;
     976:	2e b5       	in	r18, 0x2e	; 46
	task.fun = task_tc77;
     978:	8b e3       	ldi	r24, 0x3B	; 59
     97a:	94 e0       	ldi	r25, 0x04	; 4
     97c:	9a 83       	std	Y+2, r25	; 0x02
     97e:	89 83       	std	Y+1, r24	; 0x01
	sprintf(task.arg, "%d", data);
     980:	00 d0       	rcall	.+0      	; 0x982 <__vector_24+0x40>
     982:	00 d0       	rcall	.+0      	; 0x984 <__vector_24+0x42>
     984:	ed b7       	in	r30, 0x3d	; 61
     986:	fe b7       	in	r31, 0x3e	; 62
     988:	31 96       	adiw	r30, 0x01	; 1
     98a:	ce 01       	movw	r24, r28
     98c:	03 96       	adiw	r24, 0x03	; 3
     98e:	ad b7       	in	r26, 0x3d	; 61
     990:	be b7       	in	r27, 0x3e	; 62
     992:	12 96       	adiw	r26, 0x02	; 2
     994:	9c 93       	st	X, r25
     996:	8e 93       	st	-X, r24
     998:	11 97       	sbiw	r26, 0x01	; 1
     99a:	8c eb       	ldi	r24, 0xBC	; 188
     99c:	92 e0       	ldi	r25, 0x02	; 2
     99e:	93 83       	std	Z+3, r25	; 0x03
     9a0:	82 83       	std	Z+2, r24	; 0x02
     9a2:	24 83       	std	Z+4, r18	; 0x04
     9a4:	15 82       	std	Z+5, r1	; 0x05
     9a6:	0e 94 17 14 	call	0x282e	; 0x282e <sprintf>
	task_insert(&task);
     9aa:	8d b7       	in	r24, 0x3d	; 61
     9ac:	9e b7       	in	r25, 0x3e	; 62
     9ae:	06 96       	adiw	r24, 0x06	; 6
     9b0:	0f b6       	in	r0, 0x3f	; 63
     9b2:	f8 94       	cli
     9b4:	9e bf       	out	0x3e, r25	; 62
     9b6:	0f be       	out	0x3f, r0	; 63
     9b8:	8d bf       	out	0x3d, r24	; 61
     9ba:	ce 01       	movw	r24, r28
     9bc:	01 96       	adiw	r24, 0x01	; 1
     9be:	0e 94 02 05 	call	0xa04	; 0xa04 <task_insert>
}
     9c2:	2a 96       	adiw	r28, 0x0a	; 10
     9c4:	de bf       	out	0x3e, r29	; 62
     9c6:	cd bf       	out	0x3d, r28	; 61
     9c8:	df 91       	pop	r29
     9ca:	cf 91       	pop	r28
     9cc:	ff 91       	pop	r31
     9ce:	ef 91       	pop	r30
     9d0:	bf 91       	pop	r27
     9d2:	af 91       	pop	r26
     9d4:	9f 91       	pop	r25
     9d6:	8f 91       	pop	r24
     9d8:	7f 91       	pop	r23
     9da:	6f 91       	pop	r22
     9dc:	5f 91       	pop	r21
     9de:	4f 91       	pop	r20
     9e0:	3f 91       	pop	r19
     9e2:	2f 91       	pop	r18
     9e4:	0f 90       	pop	r0
     9e6:	0b be       	out	0x3b, r0	; 59
     9e8:	0f 90       	pop	r0
     9ea:	0f be       	out	0x3f, r0	; 63
     9ec:	0f 90       	pop	r0
     9ee:	1f 90       	pop	r1
     9f0:	18 95       	reti

000009f2 <task_init>:
};

int Task_cnt = sizeof(Task_tab) / sizeof(struct task_tab);

void task_init() {
	Task_f = Task_r = 0;
     9f2:	10 92 7d 06 	sts	0x067D, r1
     9f6:	10 92 7c 06 	sts	0x067C, r1
     9fa:	10 92 1f 07 	sts	0x071F, r1
     9fe:	10 92 1e 07 	sts	0x071E, r1
}
     a02:	08 95       	ret

00000a04 <task_insert>:

int task_insert(struct task *tskp) {
     a04:	cf 93       	push	r28
     a06:	df 93       	push	r29
     a08:	48 2f       	mov	r20, r24
     a0a:	e9 2f       	mov	r30, r25
	if ((Task_r + 1) % MAX_TASK == Task_f)
     a0c:	80 91 7c 06 	lds	r24, 0x067C
     a10:	90 91 7d 06 	lds	r25, 0x067D
     a14:	c0 91 1e 07 	lds	r28, 0x071E
     a18:	d0 91 1f 07 	lds	r29, 0x071F
     a1c:	01 96       	adiw	r24, 0x01	; 1
     a1e:	20 e1       	ldi	r18, 0x10	; 16
     a20:	30 e0       	ldi	r19, 0x00	; 0
     a22:	b9 01       	movw	r22, r18
     a24:	0e 94 22 11 	call	0x2244	; 0x2244 <__divmodhi4>
     a28:	8c 17       	cp	r24, r28
     a2a:	9d 07       	cpc	r25, r29
     a2c:	31 f1       	breq	.+76     	; 0xa7a <task_insert+0x76>
		return (0);
	Task_r = (Task_r + 1) % MAX_TASK;
     a2e:	80 91 7c 06 	lds	r24, 0x067C
     a32:	90 91 7d 06 	lds	r25, 0x067D
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	b9 01       	movw	r22, r18
     a3a:	0e 94 22 11 	call	0x2244	; 0x2244 <__divmodhi4>
     a3e:	90 93 7d 06 	sts	0x067D, r25
     a42:	80 93 7c 06 	sts	0x067C, r24
	Task_q[Task_r] = *tskp;
     a46:	80 91 7c 06 	lds	r24, 0x067C
     a4a:	90 91 7d 06 	lds	r25, 0x067D
     a4e:	dc 01       	movw	r26, r24
     a50:	aa 0f       	add	r26, r26
     a52:	bb 1f       	adc	r27, r27
     a54:	63 e0       	ldi	r22, 0x03	; 3
     a56:	88 0f       	add	r24, r24
     a58:	99 1f       	adc	r25, r25
     a5a:	6a 95       	dec	r22
     a5c:	e1 f7       	brne	.-8      	; 0xa56 <task_insert+0x52>
     a5e:	a8 0f       	add	r26, r24
     a60:	b9 1f       	adc	r27, r25
     a62:	a2 58       	subi	r26, 0x82	; 130
     a64:	b9 4f       	sbci	r27, 0xF9	; 249
     a66:	c4 2f       	mov	r28, r20
     a68:	de 2f       	mov	r29, r30
     a6a:	8a e0       	ldi	r24, 0x0A	; 10
     a6c:	09 90       	ld	r0, Y+
     a6e:	0d 92       	st	X+, r0
     a70:	81 50       	subi	r24, 0x01	; 1
     a72:	e1 f7       	brne	.-8      	; 0xa6c <task_insert+0x68>
	return (1);
     a74:	81 e0       	ldi	r24, 0x01	; 1
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	02 c0       	rjmp	.+4      	; 0xa7e <task_insert+0x7a>
	Task_f = Task_r = 0;
}

int task_insert(struct task *tskp) {
	if ((Task_r + 1) % MAX_TASK == Task_f)
		return (0);
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
	Task_r = (Task_r + 1) % MAX_TASK;
	Task_q[Task_r] = *tskp;
	return (1);
}
     a7e:	df 91       	pop	r29
     a80:	cf 91       	pop	r28
     a82:	08 95       	ret

00000a84 <task_delete>:

int task_delete(struct task *tskp) {
     a84:	9c 01       	movw	r18, r24
	if (Task_r == Task_f)
     a86:	40 91 7c 06 	lds	r20, 0x067C
     a8a:	50 91 7d 06 	lds	r21, 0x067D
     a8e:	80 91 1e 07 	lds	r24, 0x071E
     a92:	90 91 1f 07 	lds	r25, 0x071F
     a96:	48 17       	cp	r20, r24
     a98:	59 07       	cpc	r21, r25
     a9a:	31 f1       	breq	.+76     	; 0xae8 <task_delete+0x64>
		return(0);
	Task_f = (Task_f + 1) % MAX_TASK;
     a9c:	80 91 1e 07 	lds	r24, 0x071E
     aa0:	90 91 1f 07 	lds	r25, 0x071F
     aa4:	01 96       	adiw	r24, 0x01	; 1
     aa6:	60 e1       	ldi	r22, 0x10	; 16
     aa8:	70 e0       	ldi	r23, 0x00	; 0
     aaa:	0e 94 22 11 	call	0x2244	; 0x2244 <__divmodhi4>
     aae:	90 93 1f 07 	sts	0x071F, r25
     ab2:	80 93 1e 07 	sts	0x071E, r24
	*tskp = Task_q[Task_f];
     ab6:	80 91 1e 07 	lds	r24, 0x071E
     aba:	90 91 1f 07 	lds	r25, 0x071F
     abe:	fc 01       	movw	r30, r24
     ac0:	ee 0f       	add	r30, r30
     ac2:	ff 1f       	adc	r31, r31
     ac4:	a3 e0       	ldi	r26, 0x03	; 3
     ac6:	88 0f       	add	r24, r24
     ac8:	99 1f       	adc	r25, r25
     aca:	aa 95       	dec	r26
     acc:	e1 f7       	brne	.-8      	; 0xac6 <task_delete+0x42>
     ace:	e8 0f       	add	r30, r24
     ad0:	f9 1f       	adc	r31, r25
     ad2:	d9 01       	movw	r26, r18
     ad4:	e2 58       	subi	r30, 0x82	; 130
     ad6:	f9 4f       	sbci	r31, 0xF9	; 249
     ad8:	8a e0       	ldi	r24, 0x0A	; 10
     ada:	01 90       	ld	r0, Z+
     adc:	0d 92       	st	X+, r0
     ade:	81 50       	subi	r24, 0x01	; 1
     ae0:	e1 f7       	brne	.-8      	; 0xada <task_delete+0x56>
	return (1);
     ae2:	81 e0       	ldi	r24, 0x01	; 1
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	08 95       	ret
	return (1);
}

int task_delete(struct task *tskp) {
	if (Task_r == Task_f)
		return(0);
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	90 e0       	ldi	r25, 0x00	; 0
	Task_f = (Task_f + 1) % MAX_TASK;
	*tskp = Task_q[Task_f];
	return (1);
}
     aec:	08 95       	ret

00000aee <what_task>:

struct task_tab *what_task(char *name) {
     aee:	ef 92       	push	r14
     af0:	ff 92       	push	r15
     af2:	0f 93       	push	r16
     af4:	1f 93       	push	r17
     af6:	cf 93       	push	r28
     af8:	df 93       	push	r29
     afa:	7c 01       	movw	r14, r24
	int i;
	for (i = 0; i < Task_cnt; i++)
     afc:	00 e0       	ldi	r16, 0x00	; 0
     afe:	10 e0       	ldi	r17, 0x00	; 0
     b00:	17 c0       	rjmp	.+46     	; 0xb30 <what_task+0x42>
		if(!strcmp(name, Task_tab[i].task_name))
     b02:	e8 01       	movw	r28, r16
     b04:	cc 0f       	add	r28, r28
     b06:	dd 1f       	adc	r29, r29
     b08:	c8 01       	movw	r24, r16
     b0a:	25 e0       	ldi	r18, 0x05	; 5
     b0c:	88 0f       	add	r24, r24
     b0e:	99 1f       	adc	r25, r25
     b10:	2a 95       	dec	r18
     b12:	e1 f7       	brne	.-8      	; 0xb0c <what_task+0x1e>
     b14:	c8 0f       	add	r28, r24
     b16:	d9 1f       	adc	r29, r25
     b18:	c0 50       	subi	r28, 0x00	; 0
     b1a:	dd 4f       	sbci	r29, 0xFD	; 253
     b1c:	c7 01       	movw	r24, r14
     b1e:	be 01       	movw	r22, r28
     b20:	0e 94 37 13 	call	0x266e	; 0x266e <strcmp>
     b24:	00 97       	sbiw	r24, 0x00	; 0
     b26:	11 f4       	brne	.+4      	; 0xb2c <what_task+0x3e>
			return (&Task_tab[i]);
     b28:	ce 01       	movw	r24, r28
     b2a:	0b c0       	rjmp	.+22     	; 0xb42 <what_task+0x54>
	return (1);
}

struct task_tab *what_task(char *name) {
	int i;
	for (i = 0; i < Task_cnt; i++)
     b2c:	0f 5f       	subi	r16, 0xFF	; 255
     b2e:	1f 4f       	sbci	r17, 0xFF	; 255
     b30:	80 91 fe 02 	lds	r24, 0x02FE
     b34:	90 91 ff 02 	lds	r25, 0x02FF
     b38:	08 17       	cp	r16, r24
     b3a:	19 07       	cpc	r17, r25
     b3c:	14 f3       	brlt	.-60     	; 0xb02 <what_task+0x14>
		if(!strcmp(name, Task_tab[i].task_name))
			return (&Task_tab[i]);
	return (NULL);
     b3e:	80 e0       	ldi	r24, 0x00	; 0
     b40:	90 e0       	ldi	r25, 0x00	; 0
}
     b42:	df 91       	pop	r29
     b44:	cf 91       	pop	r28
     b46:	1f 91       	pop	r17
     b48:	0f 91       	pop	r16
     b4a:	ff 90       	pop	r15
     b4c:	ef 90       	pop	r14
     b4e:	08 95       	ret

00000b50 <task_cmd>:

void task_cmd(char *arg) {
     b50:	af 92       	push	r10
     b52:	bf 92       	push	r11
     b54:	cf 92       	push	r12
     b56:	df 92       	push	r13
     b58:	ef 92       	push	r14
     b5a:	ff 92       	push	r15
     b5c:	0f 93       	push	r16
     b5e:	1f 93       	push	r17
     b60:	cf 93       	push	r28
     b62:	df 93       	push	r29
     b64:	cd b7       	in	r28, 0x3d	; 61
     b66:	de b7       	in	r29, 0x3e	; 62
     b68:	ca 54       	subi	r28, 0x4A	; 74
     b6a:	d0 40       	sbci	r29, 0x00	; 0
     b6c:	0f b6       	in	r0, 0x3f	; 63
     b6e:	f8 94       	cli
     b70:	de bf       	out	0x3e, r29	; 62
     b72:	0f be       	out	0x3f, r0	; 63
     b74:	cd bf       	out	0x3d, r28	; 61
	char buf[64], *cp0, *cp1, *cp2, *cp3;
	struct task task;
	struct task_tab *ptt;
	int ms;

	if (!uart_peek()) return ;
     b76:	0e 94 52 08 	call	0x10a4	; 0x10a4 <uart_peek>
     b7a:	00 97       	sbiw	r24, 0x00	; 0
     b7c:	09 f4       	brne	.+2      	; 0xb80 <task_cmd+0x30>
     b7e:	91 c0       	rjmp	.+290    	; 0xca2 <task_cmd+0x152>

	if (gets(buf) == NULL) {
     b80:	ce 01       	movw	r24, r28
     b82:	0b 96       	adiw	r24, 0x0b	; 11
     b84:	0e 94 aa 13 	call	0x2754	; 0x2754 <gets>
     b88:	00 97       	sbiw	r24, 0x00	; 0
     b8a:	29 f4       	brne	.+10     	; 0xb96 <task_cmd+0x46>
		printf("logout, good bye !!!\n");
     b8c:	8f eb       	ldi	r24, 0xBF	; 191
     b8e:	92 e0       	ldi	r25, 0x02	; 2
     b90:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <puts>
     b94:	ff cf       	rjmp	.-2      	; 0xb94 <task_cmd+0x44>
		while(1);
	}

	cp0 = strtok(buf, " \t\n\r");
     b96:	ce 01       	movw	r24, r28
     b98:	0b 96       	adiw	r24, 0x0b	; 11
     b9a:	64 ed       	ldi	r22, 0xD4	; 212
     b9c:	72 e0       	ldi	r23, 0x02	; 2
     b9e:	0e 94 32 13 	call	0x2664	; 0x2664 <strtok>
     ba2:	8c 01       	movw	r16, r24
	cp1 = strtok(NULL, " \t\n\r");
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	64 ed       	ldi	r22, 0xD4	; 212
     baa:	72 e0       	ldi	r23, 0x02	; 2
     bac:	0e 94 32 13 	call	0x2664	; 0x2664 <strtok>
     bb0:	7c 01       	movw	r14, r24
	cp2 = strtok(NULL, " \t\n\r");
     bb2:	80 e0       	ldi	r24, 0x00	; 0
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	64 ed       	ldi	r22, 0xD4	; 212
     bb8:	72 e0       	ldi	r23, 0x02	; 2
     bba:	0e 94 32 13 	call	0x2664	; 0x2664 <strtok>
     bbe:	6c 01       	movw	r12, r24
	cp3 = strtok(NULL, " \t\n\r");
     bc0:	80 e0       	ldi	r24, 0x00	; 0
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	64 ed       	ldi	r22, 0xD4	; 212
     bc6:	72 e0       	ldi	r23, 0x02	; 2
     bc8:	0e 94 32 13 	call	0x2664	; 0x2664 <strtok>
     bcc:	5c 01       	movw	r10, r24

	if (cp0 == NULL) {
     bce:	01 15       	cp	r16, r1
     bd0:	11 05       	cpc	r17, r1
     bd2:	59 f4       	brne	.+22     	; 0xbea <task_cmd+0x9a>
		printf("$ "); return ;
     bd4:	0f 92       	push	r0
     bd6:	0f 92       	push	r0
     bd8:	89 ed       	ldi	r24, 0xD9	; 217
     bda:	92 e0       	ldi	r25, 0x02	; 2
     bdc:	ad b7       	in	r26, 0x3d	; 61
     bde:	be b7       	in	r27, 0x3e	; 62
     be0:	12 96       	adiw	r26, 0x02	; 2
     be2:	9c 93       	st	X, r25
     be4:	8e 93       	st	-X, r24
     be6:	11 97       	sbiw	r26, 0x01	; 1
     be8:	58 c0       	rjmp	.+176    	; 0xc9a <task_cmd+0x14a>
	}

	if (!strcmp(cp0, "timer")) {
     bea:	c8 01       	movw	r24, r16
     bec:	6c ed       	ldi	r22, 0xDC	; 220
     bee:	72 e0       	ldi	r23, 0x02	; 2
     bf0:	0e 94 37 13 	call	0x266e	; 0x266e <strcmp>
     bf4:	00 97       	sbiw	r24, 0x00	; 0
     bf6:	91 f5       	brne	.+100    	; 0xc5c <task_cmd+0x10c>
		if (!cp1 || !cp2) {
     bf8:	e1 14       	cp	r14, r1
     bfa:	f1 04       	cpc	r15, r1
     bfc:	19 f0       	breq	.+6      	; 0xc04 <task_cmd+0xb4>
     bfe:	c1 14       	cp	r12, r1
     c00:	d1 04       	cpc	r13, r1
     c02:	29 f4       	brne	.+10     	; 0xc0e <task_cmd+0xbe>
			printf("!!!-222\n");
     c04:	82 ee       	ldi	r24, 0xE2	; 226
     c06:	92 e0       	ldi	r25, 0x02	; 2
     c08:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <puts>
     c0c:	3e c0       	rjmp	.+124    	; 0xc8a <task_cmd+0x13a>
			printf("$ ");
			return ;
		}
		ms = atoi(cp1) / 256;
     c0e:	c7 01       	movw	r24, r14
     c10:	0e 94 14 13 	call	0x2628	; 0x2628 <atoi>
     c14:	8c 01       	movw	r16, r24

		if (!(ptt = what_task(cp2))) {
     c16:	c6 01       	movw	r24, r12
     c18:	0e 94 77 05 	call	0xaee	; 0xaee <what_task>
     c1c:	00 97       	sbiw	r24, 0x00	; 0
     c1e:	19 f1       	breq	.+70     	; 0xc66 <task_cmd+0x116>
			printf("Unknown command...\n");
			return ;
		}

		task.fun = ptt->task_fun;
     c20:	dc 01       	movw	r26, r24
     c22:	90 96       	adiw	r26, 0x20	; 32
     c24:	8d 91       	ld	r24, X+
     c26:	9c 91       	ld	r25, X
     c28:	91 97       	sbiw	r26, 0x21	; 33
     c2a:	9a 83       	std	Y+2, r25	; 0x02
     c2c:	89 83       	std	Y+1, r24	; 0x01
		if (cp3) strcpy(task.arg, cp3);
     c2e:	ce 01       	movw	r24, r28
     c30:	03 96       	adiw	r24, 0x03	; 3
     c32:	a1 14       	cp	r10, r1
     c34:	b1 04       	cpc	r11, r1
     c36:	11 f0       	breq	.+4      	; 0xc3c <task_cmd+0xec>
     c38:	b5 01       	movw	r22, r10
     c3a:	02 c0       	rjmp	.+4      	; 0xc40 <task_cmd+0xf0>
		else 	 strcpy(task.arg, "");
     c3c:	6d ef       	ldi	r22, 0xFD	; 253
     c3e:	72 e0       	ldi	r23, 0x02	; 2
     c40:	0e 94 40 13 	call	0x2680	; 0x2680 <strcpy>
		cli();
     c44:	f8 94       	cli
		if (!cp1 || !cp2) {
			printf("!!!-222\n");
			printf("$ ");
			return ;
		}
		ms = atoi(cp1) / 256;
     c46:	c8 01       	movw	r24, r16
     c48:	60 e0       	ldi	r22, 0x00	; 0
     c4a:	71 e0       	ldi	r23, 0x01	; 1
     c4c:	0e 94 22 11 	call	0x2244	; 0x2244 <__divmodhi4>

		task.fun = ptt->task_fun;
		if (cp3) strcpy(task.arg, cp3);
		else 	 strcpy(task.arg, "");
		cli();
		insert_timer(&task,ms);
     c50:	ce 01       	movw	r24, r28
     c52:	01 96       	adiw	r24, 0x01	; 1
     c54:	0e 94 9a 06 	call	0xd34	; 0xd34 <insert_timer>
		sei();
     c58:	78 94       	sei
     c5a:	17 c0       	rjmp	.+46     	; 0xc8a <task_cmd+0x13a>
			cli();
			insert_timer(&task,ms);
			sei();
		*/
		} else {
			if (!(ptt = what_task(cp0))) {
     c5c:	c8 01       	movw	r24, r16
     c5e:	0e 94 77 05 	call	0xaee	; 0xaee <what_task>
     c62:	00 97       	sbiw	r24, 0x00	; 0
     c64:	29 f4       	brne	.+10     	; 0xc70 <task_cmd+0x120>
				printf("Unknown command...\n");
     c66:	8a ee       	ldi	r24, 0xEA	; 234
     c68:	92 e0       	ldi	r25, 0x02	; 2
     c6a:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <puts>
				return ;
     c6e:	19 c0       	rjmp	.+50     	; 0xca2 <task_cmd+0x152>
     c70:	dc 01       	movw	r26, r24
     c72:	90 96       	adiw	r26, 0x20	; 32
     c74:	ed 91       	ld	r30, X+
     c76:	fc 91       	ld	r31, X
     c78:	91 97       	sbiw	r26, 0x21	; 33
			}

			if (cp2)
     c7a:	c1 14       	cp	r12, r1
     c7c:	d1 04       	cpc	r13, r1
     c7e:	11 f0       	breq	.+4      	; 0xc84 <task_cmd+0x134>
				(*ptt->task_fun)(cp1);
     c80:	c7 01       	movw	r24, r14
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <task_cmd+0x138>
			else
				(*ptt->task_fun)("");
     c84:	8d ef       	ldi	r24, 0xFD	; 253
     c86:	92 e0       	ldi	r25, 0x02	; 2
     c88:	19 95       	eicall
		}
	printf("$ ");
     c8a:	0f 92       	push	r0
     c8c:	0f 92       	push	r0
     c8e:	89 ed       	ldi	r24, 0xD9	; 217
     c90:	92 e0       	ldi	r25, 0x02	; 2
     c92:	ed b7       	in	r30, 0x3d	; 61
     c94:	fe b7       	in	r31, 0x3e	; 62
     c96:	92 83       	std	Z+2, r25	; 0x02
     c98:	81 83       	std	Z+1, r24	; 0x01
     c9a:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <printf>
     c9e:	0f 90       	pop	r0
     ca0:	0f 90       	pop	r0
}
     ca2:	c6 5b       	subi	r28, 0xB6	; 182
     ca4:	df 4f       	sbci	r29, 0xFF	; 255
     ca6:	0f b6       	in	r0, 0x3f	; 63
     ca8:	f8 94       	cli
     caa:	de bf       	out	0x3e, r29	; 62
     cac:	0f be       	out	0x3f, r0	; 63
     cae:	cd bf       	out	0x3d, r28	; 61
     cb0:	df 91       	pop	r29
     cb2:	cf 91       	pop	r28
     cb4:	1f 91       	pop	r17
     cb6:	0f 91       	pop	r16
     cb8:	ff 90       	pop	r15
     cba:	ef 90       	pop	r14
     cbc:	df 90       	pop	r13
     cbe:	cf 90       	pop	r12
     cc0:	bf 90       	pop	r11
     cc2:	af 90       	pop	r10
     cc4:	08 95       	ret

00000cc6 <timer_init>:

struct timer *Thead = NULL;


void timer_init() {
	TCNT2 = 0;
     cc6:	10 92 b2 00 	sts	0x00B2, r1
	sbi(ASSR, AS2);
     cca:	e6 eb       	ldi	r30, 0xB6	; 182
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	80 81       	ld	r24, Z
     cd0:	80 62       	ori	r24, 0x20	; 32
     cd2:	80 83       	st	Z, r24
	sbi(TIMSK2, TOIE2);
     cd4:	e0 e7       	ldi	r30, 0x70	; 112
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	81 60       	ori	r24, 0x01	; 1
     cdc:	80 83       	st	Z, r24
	sbi(TCCR2B, CS20); sbi(TCCR2B, CS21);
     cde:	e1 eb       	ldi	r30, 0xB1	; 177
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	80 81       	ld	r24, Z
     ce4:	81 60       	ori	r24, 0x01	; 1
     ce6:	80 83       	st	Z, r24
     ce8:	80 81       	ld	r24, Z
     cea:	82 60       	ori	r24, 0x02	; 2
     cec:	80 83       	st	Z, r24
}
     cee:	08 95       	ret

00000cf0 <timer_expire>:

void timer_expire(void) {
     cf0:	cf 93       	push	r28
     cf2:	df 93       	push	r29
	struct timer *tp;

	for ( ; Thead != NULL && !Thead->time; ) {
     cf4:	0d c0       	rjmp	.+26     	; 0xd10 <timer_expire+0x20>
		tp = Thead, Thead = tp->link;
     cf6:	8c 85       	ldd	r24, Y+12	; 0x0c
     cf8:	9d 85       	ldd	r25, Y+13	; 0x0d
     cfa:	90 93 f1 05 	sts	0x05F1, r25
     cfe:	80 93 f0 05 	sts	0x05F0, r24

		task_insert(&tp->task);
     d02:	ce 01       	movw	r24, r28
     d04:	02 96       	adiw	r24, 0x02	; 2
     d06:	0e 94 02 05 	call	0xa04	; 0xa04 <task_insert>
		free(tp);
     d0a:	ce 01       	movw	r24, r28
     d0c:	0e 94 16 12 	call	0x242c	; 0x242c <free>
}

void timer_expire(void) {
	struct timer *tp;

	for ( ; Thead != NULL && !Thead->time; ) {
     d10:	c0 91 f0 05 	lds	r28, 0x05F0
     d14:	d0 91 f1 05 	lds	r29, 0x05F1
     d18:	20 97       	sbiw	r28, 0x00	; 0
     d1a:	21 f0       	breq	.+8      	; 0xd24 <timer_expire+0x34>
     d1c:	88 81       	ld	r24, Y
     d1e:	99 81       	ldd	r25, Y+1	; 0x01
     d20:	00 97       	sbiw	r24, 0x00	; 0
     d22:	49 f3       	breq	.-46     	; 0xcf6 <timer_expire+0x6>
		tp = Thead, Thead = tp->link;

		task_insert(&tp->task);
		free(tp);
	}
}
     d24:	df 91       	pop	r29
     d26:	cf 91       	pop	r28
     d28:	08 95       	ret

00000d2a <get_timer>:

struct timer *get_timer() {
	struct timer *tp;

	tp = (struct timer *) malloc(sizeof(*tp));
     d2a:	8e e0       	ldi	r24, 0x0E	; 14
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	0e 94 80 11 	call	0x2300	; 0x2300 <malloc>
	return(tp);
}
     d32:	08 95       	ret

00000d34 <insert_timer>:

void insert_timer(struct task *tskp, int ms) {
     d34:	ef 92       	push	r14
     d36:	ff 92       	push	r15
     d38:	0f 93       	push	r16
     d3a:	1f 93       	push	r17
     d3c:	cf 93       	push	r28
     d3e:	df 93       	push	r29
     d40:	f8 2e       	mov	r15, r24
     d42:	e9 2e       	mov	r14, r25
     d44:	8b 01       	movw	r16, r22
	int total;
	struct timer *tp, *cp, *pp;
	
	tp = get_timer();
     d46:	0e 94 95 06 	call	0xd2a	; 0xd2a <get_timer>
     d4a:	ec 01       	movw	r28, r24
	tp->task = *tskp;
     d4c:	dc 01       	movw	r26, r24
     d4e:	12 96       	adiw	r26, 0x02	; 2
     d50:	ef 2d       	mov	r30, r15
     d52:	fe 2d       	mov	r31, r14
     d54:	8a e0       	ldi	r24, 0x0A	; 10
     d56:	01 90       	ld	r0, Z+
     d58:	0d 92       	st	X+, r0
     d5a:	81 50       	subi	r24, 0x01	; 1
     d5c:	e1 f7       	brne	.-8      	; 0xd56 <insert_timer+0x22>
	tp->time = ms;
     d5e:	19 83       	std	Y+1, r17	; 0x01
     d60:	08 83       	st	Y, r16

	if (Thead == NULL) {
     d62:	e0 91 f0 05 	lds	r30, 0x05F0
     d66:	f0 91 f1 05 	lds	r31, 0x05F1
     d6a:	30 97       	sbiw	r30, 0x00	; 0
     d6c:	29 f4       	brne	.+10     	; 0xd78 <insert_timer+0x44>
		Thead = tp, tp->link =NULL;
     d6e:	d0 93 f1 05 	sts	0x05F1, r29
     d72:	c0 93 f0 05 	sts	0x05F0, r28
     d76:	2f c0       	rjmp	.+94     	; 0xdd6 <insert_timer+0xa2>
	
	tp = get_timer();
	tp->task = *tskp;
	tp->time = ms;

	if (Thead == NULL) {
     d78:	40 e0       	ldi	r20, 0x00	; 0
     d7a:	50 e0       	ldi	r21, 0x00	; 0
     d7c:	20 e0       	ldi	r18, 0x00	; 0
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	01 c0       	rjmp	.+2      	; 0xd84 <insert_timer+0x50>
		Thead = tp, tp->link =NULL;
		return ;
	}

	pp = NULL, total = 0;
	for (cp = Thead; cp; cp = cp->link) {
     d82:	fd 01       	movw	r30, r26
		total += cp->time;
     d84:	80 81       	ld	r24, Z
     d86:	91 81       	ldd	r25, Z+1	; 0x01
     d88:	28 0f       	add	r18, r24
     d8a:	39 1f       	adc	r19, r25
		if (total >= ms) break;
     d8c:	20 17       	cp	r18, r16
     d8e:	31 07       	cpc	r19, r17
     d90:	34 f4       	brge	.+12     	; 0xd9e <insert_timer+0x6a>
		Thead = tp, tp->link =NULL;
		return ;
	}

	pp = NULL, total = 0;
	for (cp = Thead; cp; cp = cp->link) {
     d92:	a4 85       	ldd	r26, Z+12	; 0x0c
     d94:	b5 85       	ldd	r27, Z+13	; 0x0d
     d96:	af 01       	movw	r20, r30
     d98:	10 97       	sbiw	r26, 0x00	; 0
     d9a:	99 f7       	brne	.-26     	; 0xd82 <insert_timer+0x4e>
     d9c:	01 c0       	rjmp	.+2      	; 0xda0 <insert_timer+0x6c>
		total += cp->time;
		if (total >= ms) break;
     d9e:	df 01       	movw	r26, r30
		pp = cp;
	}

	if (pp == NULL) {
     da0:	41 15       	cp	r20, r1
     da2:	51 05       	cpc	r21, r1
     da4:	79 f4       	brne	.+30     	; 0xdc4 <insert_timer+0x90>
		cp->time -= tp->time;
     da6:	8d 91       	ld	r24, X+
     da8:	9c 91       	ld	r25, X
     daa:	11 97       	sbiw	r26, 0x01	; 1
     dac:	80 1b       	sub	r24, r16
     dae:	91 0b       	sbc	r25, r17
     db0:	11 96       	adiw	r26, 0x01	; 1
     db2:	9c 93       	st	X, r25
     db4:	8e 93       	st	-X, r24
		tp->link = cp, Thead = tp;
     db6:	bd 87       	std	Y+13, r27	; 0x0d
     db8:	ac 87       	std	Y+12, r26	; 0x0c
     dba:	d0 93 f1 05 	sts	0x05F1, r29
     dbe:	c0 93 f0 05 	sts	0x05F0, r28
     dc2:	24 c0       	rjmp	.+72     	; 0xe0c <insert_timer+0xd8>
	} else if (cp == NULL) {
     dc4:	10 97       	sbiw	r26, 0x00	; 0
     dc6:	51 f4       	brne	.+20     	; 0xddc <insert_timer+0xa8>
		tp->time -= total;
     dc8:	02 1b       	sub	r16, r18
     dca:	13 0b       	sbc	r17, r19
     dcc:	19 83       	std	Y+1, r17	; 0x01
     dce:	08 83       	st	Y, r16
		pp->link = tp;
     dd0:	fa 01       	movw	r30, r20
     dd2:	d5 87       	std	Z+13, r29	; 0x0d
     dd4:	c4 87       	std	Z+12, r28	; 0x0c
		tp->link = NULL;
     dd6:	1d 86       	std	Y+13, r1	; 0x0d
     dd8:	1c 86       	std	Y+12, r1	; 0x0c
     dda:	18 c0       	rjmp	.+48     	; 0xe0c <insert_timer+0xd8>
	} else {
		total -= cp->time;
     ddc:	8d 91       	ld	r24, X+
     dde:	9c 91       	ld	r25, X
     de0:	11 97       	sbiw	r26, 0x01	; 1
     de2:	b9 01       	movw	r22, r18
     de4:	68 1b       	sub	r22, r24
     de6:	79 0b       	sbc	r23, r25
		tp->time -= total;
     de8:	98 01       	movw	r18, r16
     dea:	26 1b       	sub	r18, r22
     dec:	37 0b       	sbc	r19, r23
     dee:	39 83       	std	Y+1, r19	; 0x01
     df0:	28 83       	st	Y, r18
		cp->time -= tp->time;
     df2:	8d 91       	ld	r24, X+
     df4:	9c 91       	ld	r25, X
     df6:	11 97       	sbiw	r26, 0x01	; 1
     df8:	82 1b       	sub	r24, r18
     dfa:	93 0b       	sbc	r25, r19
     dfc:	11 96       	adiw	r26, 0x01	; 1
     dfe:	9c 93       	st	X, r25
     e00:	8e 93       	st	-X, r24
		pp->link = tp;
     e02:	fa 01       	movw	r30, r20
     e04:	d5 87       	std	Z+13, r29	; 0x0d
     e06:	c4 87       	std	Z+12, r28	; 0x0c
		tp->link = cp;
     e08:	bd 87       	std	Y+13, r27	; 0x0d
     e0a:	ac 87       	std	Y+12, r26	; 0x0c
	}
}
     e0c:	df 91       	pop	r29
     e0e:	cf 91       	pop	r28
     e10:	1f 91       	pop	r17
     e12:	0f 91       	pop	r16
     e14:	ff 90       	pop	r15
     e16:	ef 90       	pop	r14
     e18:	08 95       	ret

00000e1a <tour_timer>:

void tour_timer() {
     e1a:	ef 92       	push	r14
     e1c:	ff 92       	push	r15
     e1e:	0f 93       	push	r16
     e20:	1f 93       	push	r17
     e22:	cf 93       	push	r28
     e24:	df 93       	push	r29
	struct timer *cp;
	int total = 0;

	printf("\n");
     e26:	8a e0       	ldi	r24, 0x0A	; 10
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <putchar>
	for (cp = Thead; cp != NULL; cp = cp->link) {
     e2e:	c0 91 f0 05 	lds	r28, 0x05F0
     e32:	d0 91 f1 05 	lds	r29, 0x05F1
	}
}

void tour_timer() {
	struct timer *cp;
	int total = 0;
     e36:	00 e0       	ldi	r16, 0x00	; 0
     e38:	10 e0       	ldi	r17, 0x00	; 0

	printf("\n");
	for (cp = Thead; cp != NULL; cp = cp->link) {
		total += cp->time;
		printf("-->%d(%d) ", cp->time, total);
     e3a:	8e ee       	ldi	r24, 0xEE	; 238
     e3c:	e8 2e       	mov	r14, r24
     e3e:	83 e0       	ldi	r24, 0x03	; 3
     e40:	f8 2e       	mov	r15, r24
void tour_timer() {
	struct timer *cp;
	int total = 0;

	printf("\n");
	for (cp = Thead; cp != NULL; cp = cp->link) {
     e42:	20 c0       	rjmp	.+64     	; 0xe84 <tour_timer+0x6a>
		total += cp->time;
     e44:	88 81       	ld	r24, Y
     e46:	99 81       	ldd	r25, Y+1	; 0x01
     e48:	08 0f       	add	r16, r24
     e4a:	19 1f       	adc	r17, r25
		printf("-->%d(%d) ", cp->time, total);
     e4c:	00 d0       	rcall	.+0      	; 0xe4e <tour_timer+0x34>
     e4e:	00 d0       	rcall	.+0      	; 0xe50 <tour_timer+0x36>
     e50:	ed b7       	in	r30, 0x3d	; 61
     e52:	fe b7       	in	r31, 0x3e	; 62
     e54:	31 96       	adiw	r30, 0x01	; 1
     e56:	ad b7       	in	r26, 0x3d	; 61
     e58:	be b7       	in	r27, 0x3e	; 62
     e5a:	12 96       	adiw	r26, 0x02	; 2
     e5c:	fc 92       	st	X, r15
     e5e:	ee 92       	st	-X, r14
     e60:	11 97       	sbiw	r26, 0x01	; 1
     e62:	93 83       	std	Z+3, r25	; 0x03
     e64:	82 83       	std	Z+2, r24	; 0x02
     e66:	15 83       	std	Z+5, r17	; 0x05
     e68:	04 83       	std	Z+4, r16	; 0x04
     e6a:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <printf>
void tour_timer() {
	struct timer *cp;
	int total = 0;

	printf("\n");
	for (cp = Thead; cp != NULL; cp = cp->link) {
     e6e:	0c 84       	ldd	r0, Y+12	; 0x0c
     e70:	dd 85       	ldd	r29, Y+13	; 0x0d
     e72:	c0 2d       	mov	r28, r0
     e74:	8d b7       	in	r24, 0x3d	; 61
     e76:	9e b7       	in	r25, 0x3e	; 62
     e78:	06 96       	adiw	r24, 0x06	; 6
     e7a:	0f b6       	in	r0, 0x3f	; 63
     e7c:	f8 94       	cli
     e7e:	9e bf       	out	0x3e, r25	; 62
     e80:	0f be       	out	0x3f, r0	; 63
     e82:	8d bf       	out	0x3d, r24	; 61
     e84:	20 97       	sbiw	r28, 0x00	; 0
     e86:	f1 f6       	brne	.-68     	; 0xe44 <tour_timer+0x2a>
		total += cp->time;
		printf("-->%d(%d) ", cp->time, total);
	}
	printf("\n");
     e88:	8a e0       	ldi	r24, 0x0A	; 10
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <putchar>
}
     e90:	df 91       	pop	r29
     e92:	cf 91       	pop	r28
     e94:	1f 91       	pop	r17
     e96:	0f 91       	pop	r16
     e98:	ff 90       	pop	r15
     e9a:	ef 90       	pop	r14
     e9c:	08 95       	ret

00000e9e <free_timer>:

void free_timer() {
	struct timer *cp;

	for (  ; Thead != NULL;  ) {
     e9e:	09 c0       	rjmp	.+18     	; 0xeb2 <free_timer+0x14>
		cp = Thead;
		Thead = cp->link;
     ea0:	fc 01       	movw	r30, r24
     ea2:	24 85       	ldd	r18, Z+12	; 0x0c
     ea4:	35 85       	ldd	r19, Z+13	; 0x0d
     ea6:	30 93 f1 05 	sts	0x05F1, r19
     eaa:	20 93 f0 05 	sts	0x05F0, r18
		free(cp);
     eae:	0e 94 16 12 	call	0x242c	; 0x242c <free>
}

void free_timer() {
	struct timer *cp;

	for (  ; Thead != NULL;  ) {
     eb2:	80 91 f0 05 	lds	r24, 0x05F0
     eb6:	90 91 f1 05 	lds	r25, 0x05F1
     eba:	00 97       	sbiw	r24, 0x00	; 0
     ebc:	89 f7       	brne	.-30     	; 0xea0 <free_timer+0x2>
		cp = Thead;
		Thead = cp->link;
		free(cp);
	}
}
     ebe:	08 95       	ret

00000ec0 <app_timer>:

void app_timer(char *ap) {
     ec0:	0f 93       	push	r16
     ec2:	1f 93       	push	r17
     ec4:	cf 93       	push	r28
     ec6:	df 93       	push	r29
     ec8:	cd b7       	in	r28, 0x3d	; 61
     eca:	de b7       	in	r29, 0x3e	; 62
     ecc:	62 97       	sbiw	r28, 0x12	; 18
     ece:	0f b6       	in	r0, 0x3f	; 63
     ed0:	f8 94       	cli
     ed2:	de bf       	out	0x3e, r29	; 62
     ed4:	0f be       	out	0x3f, r0	; 63
     ed6:	cd bf       	out	0x3d, r28	; 61
	char buf[8];
	int ms;
	struct task tsk;

	while(1) {
		printf(">> ");
     ed8:	09 ef       	ldi	r16, 0xF9	; 249
     eda:	13 e0       	ldi	r17, 0x03	; 3
     edc:	0f 92       	push	r0
     ede:	0f 92       	push	r0
     ee0:	ed b7       	in	r30, 0x3d	; 61
     ee2:	fe b7       	in	r31, 0x3e	; 62
     ee4:	12 83       	std	Z+2, r17	; 0x02
     ee6:	01 83       	std	Z+1, r16	; 0x01
     ee8:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <printf>
		if (fgets(buf, 8, stdin) == NULL || (ms = atoi(buf)) == 0)
     eec:	0f 90       	pop	r0
     eee:	0f 90       	pop	r0
     ef0:	40 91 25 07 	lds	r20, 0x0725
     ef4:	50 91 26 07 	lds	r21, 0x0726
     ef8:	ce 01       	movw	r24, r28
     efa:	01 96       	adiw	r24, 0x01	; 1
     efc:	68 e0       	ldi	r22, 0x08	; 8
     efe:	70 e0       	ldi	r23, 0x00	; 0
     f00:	0e 94 76 13 	call	0x26ec	; 0x26ec <fgets>
     f04:	00 97       	sbiw	r24, 0x00	; 0
     f06:	61 f0       	breq	.+24     	; 0xf20 <app_timer+0x60>
     f08:	ce 01       	movw	r24, r28
     f0a:	01 96       	adiw	r24, 0x01	; 1
     f0c:	0e 94 14 13 	call	0x2628	; 0x2628 <atoi>
     f10:	bc 01       	movw	r22, r24
     f12:	00 97       	sbiw	r24, 0x00	; 0
     f14:	29 f0       	breq	.+10     	; 0xf20 <app_timer+0x60>
			break;
		
		insert_timer(&tsk, ms);
     f16:	ce 01       	movw	r24, r28
     f18:	09 96       	adiw	r24, 0x09	; 9
     f1a:	0e 94 9a 06 	call	0xd34	; 0xd34 <insert_timer>
	}
     f1e:	de cf       	rjmp	.-68     	; 0xedc <app_timer+0x1c>
	tour_timer();
     f20:	0e 94 0d 07 	call	0xe1a	; 0xe1a <tour_timer>
	free_timer();
     f24:	0e 94 4f 07 	call	0xe9e	; 0xe9e <free_timer>
}
     f28:	62 96       	adiw	r28, 0x12	; 18
     f2a:	0f b6       	in	r0, 0x3f	; 63
     f2c:	f8 94       	cli
     f2e:	de bf       	out	0x3e, r29	; 62
     f30:	0f be       	out	0x3f, r0	; 63
     f32:	cd bf       	out	0x3d, r28	; 61
     f34:	df 91       	pop	r29
     f36:	cf 91       	pop	r28
     f38:	1f 91       	pop	r17
     f3a:	0f 91       	pop	r16
     f3c:	08 95       	ret

00000f3e <__vector_15>:

ISR(TIMER2_OVF_vect) {
     f3e:	1f 92       	push	r1
     f40:	0f 92       	push	r0
     f42:	0f b6       	in	r0, 0x3f	; 63
     f44:	0f 92       	push	r0
     f46:	0b b6       	in	r0, 0x3b	; 59
     f48:	0f 92       	push	r0
     f4a:	11 24       	eor	r1, r1
     f4c:	2f 93       	push	r18
     f4e:	3f 93       	push	r19
     f50:	4f 93       	push	r20
     f52:	5f 93       	push	r21
     f54:	6f 93       	push	r22
     f56:	7f 93       	push	r23
     f58:	8f 93       	push	r24
     f5a:	9f 93       	push	r25
     f5c:	af 93       	push	r26
     f5e:	bf 93       	push	r27
     f60:	ef 93       	push	r30
     f62:	ff 93       	push	r31
	if (!Thead)
     f64:	e0 91 f0 05 	lds	r30, 0x05F0
     f68:	f0 91 f1 05 	lds	r31, 0x05F1
     f6c:	30 97       	sbiw	r30, 0x00	; 0
     f6e:	49 f0       	breq	.+18     	; 0xf82 <__vector_15+0x44>
		return ;
	if (--Thead->time == 0)
     f70:	80 81       	ld	r24, Z
     f72:	91 81       	ldd	r25, Z+1	; 0x01
     f74:	01 97       	sbiw	r24, 0x01	; 1
     f76:	91 83       	std	Z+1, r25	; 0x01
     f78:	80 83       	st	Z, r24
     f7a:	00 97       	sbiw	r24, 0x00	; 0
     f7c:	11 f4       	brne	.+4      	; 0xf82 <__vector_15+0x44>
		timer_expire();
     f7e:	0e 94 78 06 	call	0xcf0	; 0xcf0 <timer_expire>
}
     f82:	ff 91       	pop	r31
     f84:	ef 91       	pop	r30
     f86:	bf 91       	pop	r27
     f88:	af 91       	pop	r26
     f8a:	9f 91       	pop	r25
     f8c:	8f 91       	pop	r24
     f8e:	7f 91       	pop	r23
     f90:	6f 91       	pop	r22
     f92:	5f 91       	pop	r21
     f94:	4f 91       	pop	r20
     f96:	3f 91       	pop	r19
     f98:	2f 91       	pop	r18
     f9a:	0f 90       	pop	r0
     f9c:	0b be       	out	0x3b, r0	; 59
     f9e:	0f 90       	pop	r0
     fa0:	0f be       	out	0x3f, r0	; 63
     fa2:	0f 90       	pop	r0
     fa4:	1f 90       	pop	r1
     fa6:	18 95       	reti

00000fa8 <uart_getchar>:

int uart_getchar(FILE *stream) {
	char ch;

	do {
		cli();
     fa8:	f8 94       	cli
		ch = qi_delete();
     faa:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <qi_delete>
		sei();
     fae:	78 94       	sei
	} while (ch == 0);
     fb0:	88 23       	and	r24, r24
     fb2:	d1 f3       	breq	.-12     	; 0xfa8 <uart_getchar>

	if (ch == EOT) return(-1);
     fb4:	84 30       	cpi	r24, 0x04	; 4
     fb6:	11 f0       	breq	.+4      	; 0xfbc <uart_getchar+0x14>
	else 		   return(ch);
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	08 95       	ret
		cli();
		ch = qi_delete();
		sei();
	} while (ch == 0);

	if (ch == EOT) return(-1);
     fbc:	8f ef       	ldi	r24, 0xFF	; 255
     fbe:	9f ef       	ldi	r25, 0xFF	; 255
	else 		   return(ch);
}
     fc0:	08 95       	ret

00000fc2 <uart_putchar>:
	sbi(UCSR0B, TXCIE0);
	sbi(UCSR0B, RXEN0);
	sbi(UCSR0B, RXCIE0);
}

int uart_putchar(char ch, FILE *stream){
     fc2:	cf 93       	push	r28
     fc4:	c8 2f       	mov	r28, r24
    if(ch == '\n') 
     fc6:	8a 30       	cpi	r24, 0x0A	; 10
     fc8:	19 f4       	brne	.+6      	; 0xfd0 <uart_putchar+0xe>
	    uart_putchar('\r', stream);
     fca:	8d e0       	ldi	r24, 0x0D	; 13
     fcc:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <uart_putchar>

	cli();
     fd0:	f8 94       	cli
	
	if(!uart_busy) {
     fd2:	80 91 20 07 	lds	r24, 0x0720
     fd6:	88 23       	and	r24, r24
     fd8:	59 f4       	brne	.+22     	; 0xff0 <uart_putchar+0x2e>
	    UDR0 = ch;
     fda:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy = 1;
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	80 93 20 07 	sts	0x0720, r24
     fe4:	0a c0       	rjmp	.+20     	; 0xffa <uart_putchar+0x38>
	} else {
		while(qo_insert(ch) == 0) {
		    sei();
     fe6:	78 94       	sei
     fe8:	86 ef       	ldi	r24, 0xF6	; 246
     fea:	8a 95       	dec	r24
     fec:	f1 f7       	brne	.-4      	; 0xfea <uart_putchar+0x28>
			_delay_us(100);
			cli();
     fee:	f8 94       	cli
	
	if(!uart_busy) {
	    UDR0 = ch;
		uart_busy = 1;
	} else {
		while(qo_insert(ch) == 0) {
     ff0:	8c 2f       	mov	r24, r28
     ff2:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <qo_insert>
     ff6:	00 97       	sbiw	r24, 0x00	; 0
     ff8:	b1 f3       	breq	.-20     	; 0xfe6 <uart_putchar+0x24>
		    sei();
			_delay_us(100);
			cli();
		}
	}
	sei();
     ffa:	78 94       	sei
	return (1);
}
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	cf 91       	pop	r28
    1002:	08 95       	ret

00001004 <uart_init>:
char uart_busy;

static int echo_mode = 1;

void uart_init() {
	stdin = &Mystdin; stdout = &Mystdout;
    1004:	8e ef       	ldi	r24, 0xFE	; 254
    1006:	93 e0       	ldi	r25, 0x03	; 3
    1008:	90 93 26 07 	sts	0x0726, r25
    100c:	80 93 25 07 	sts	0x0725, r24
    1010:	8c e0       	ldi	r24, 0x0C	; 12
    1012:	94 e0       	ldi	r25, 0x04	; 4
    1014:	90 93 28 07 	sts	0x0728, r25
    1018:	80 93 27 07 	sts	0x0727, r24
	uart_busy = 0;
    101c:	10 92 20 07 	sts	0x0720, r1
	q_init();
    1020:	0e 94 a9 02 	call	0x552	; 0x552 <q_init>
    UBRR0H = 0x00; UBRR0L = 0x07;
    1024:	10 92 c5 00 	sts	0x00C5, r1
    1028:	87 e0       	ldi	r24, 0x07	; 7
    102a:	80 93 c4 00 	sts	0x00C4, r24
	sbi(UCSR0A, U2X0);
    102e:	e0 ec       	ldi	r30, 0xC0	; 192
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	82 60       	ori	r24, 0x02	; 2
    1036:	80 83       	st	Z, r24
	sbi(UCSR0B, TXEN0);
    1038:	e1 ec       	ldi	r30, 0xC1	; 193
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	88 60       	ori	r24, 0x08	; 8
    1040:	80 83       	st	Z, r24
	sbi(UCSR0B, TXCIE0);
    1042:	80 81       	ld	r24, Z
    1044:	80 64       	ori	r24, 0x40	; 64
    1046:	80 83       	st	Z, r24
	sbi(UCSR0B, RXEN0);
    1048:	80 81       	ld	r24, Z
    104a:	80 61       	ori	r24, 0x10	; 16
    104c:	80 83       	st	Z, r24
	sbi(UCSR0B, RXCIE0);
    104e:	80 81       	ld	r24, Z
    1050:	80 68       	ori	r24, 0x80	; 128
    1052:	80 83       	st	Z, r24
}
    1054:	08 95       	ret

00001056 <uart_putchar_1>:
void uart_putstr(char *sp){
    for(; *sp; sp++)
	    uart_putchar(*sp);
}
*/
int uart_putchar_1(char ch, FILE *stream) {
    1056:	cf 93       	push	r28
    1058:	c8 2f       	mov	r28, r24
    if(ch == '\n')
    105a:	8a 30       	cpi	r24, 0x0A	; 10
    105c:	19 f4       	brne	.+6      	; 0x1064 <uart_putchar_1+0xe>
	    uart_putchar_1('\r', stream);
    105e:	8d e0       	ldi	r24, 0x0D	; 13
    1060:	0e 94 2b 08 	call	0x1056	; 0x1056 <uart_putchar_1>
    //_delay_ms(10);
	while(1) {
	    if((UCSR0A & (1 << UDRE0)) != 0 )
    1064:	80 91 c0 00 	lds	r24, 0x00C0
    1068:	85 ff       	sbrs	r24, 5
    106a:	fc cf       	rjmp	.-8      	; 0x1064 <uart_putchar_1+0xe>
		    break;
	}
	UDR0 = ch;
    106c:	c0 93 c6 00 	sts	0x00C6, r28
	return (1);
}
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	cf 91       	pop	r28
    1076:	08 95       	ret

00001078 <uart_echo>:

	if (ch == EOT) return(-1);
	else 		   return(ch);
}

void uart_echo(char ch) {
    1078:	cf 93       	push	r28
    107a:	c8 2f       	mov	r28, r24
	if(ch == '\n') uart_echo('\r');
    107c:	8a 30       	cpi	r24, 0x0A	; 10
    107e:	19 f4       	brne	.+6      	; 0x1086 <uart_echo+0xe>
    1080:	8d e0       	ldi	r24, 0x0D	; 13
    1082:	0e 94 3c 08 	call	0x1078	; 0x1078 <uart_echo>
	if(!uart_busy) {
    1086:	80 91 20 07 	lds	r24, 0x0720
    108a:	88 23       	and	r24, r24
    108c:	31 f4       	brne	.+12     	; 0x109a <uart_echo+0x22>
		UDR0 = ch;
    108e:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy = 1;
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	80 93 20 07 	sts	0x0720, r24
    1098:	03 c0       	rjmp	.+6      	; 0x10a0 <uart_echo+0x28>
	}
	else
		qo_insert(ch);
    109a:	8c 2f       	mov	r24, r28
    109c:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <qo_insert>
}
    10a0:	cf 91       	pop	r28
    10a2:	08 95       	ret

000010a4 <uart_peek>:

int uart_peek() {
	return (qi_peek());
    10a4:	0e 94 38 03 	call	0x670	; 0x670 <qi_peek>
}
    10a8:	08 95       	ret

000010aa <__vector_27>:


ISR(USART0_TX_vect){
    10aa:	1f 92       	push	r1
    10ac:	0f 92       	push	r0
    10ae:	0f b6       	in	r0, 0x3f	; 63
    10b0:	0f 92       	push	r0
    10b2:	0b b6       	in	r0, 0x3b	; 59
    10b4:	0f 92       	push	r0
    10b6:	11 24       	eor	r1, r1
    10b8:	2f 93       	push	r18
    10ba:	3f 93       	push	r19
    10bc:	4f 93       	push	r20
    10be:	5f 93       	push	r21
    10c0:	6f 93       	push	r22
    10c2:	7f 93       	push	r23
    10c4:	8f 93       	push	r24
    10c6:	9f 93       	push	r25
    10c8:	af 93       	push	r26
    10ca:	bf 93       	push	r27
    10cc:	ef 93       	push	r30
    10ce:	ff 93       	push	r31
	char ch;

	if((ch = qo_delete()) == 0)
    10d0:	0e 94 1b 03 	call	0x636	; 0x636 <qo_delete>
    10d4:	88 23       	and	r24, r24
    10d6:	19 f4       	brne	.+6      	; 0x10de <__vector_27+0x34>
		uart_busy = 0;
    10d8:	10 92 20 07 	sts	0x0720, r1
    10dc:	02 c0       	rjmp	.+4      	; 0x10e2 <__vector_27+0x38>
	else 
		UDR0 = ch;
    10de:	80 93 c6 00 	sts	0x00C6, r24
}
    10e2:	ff 91       	pop	r31
    10e4:	ef 91       	pop	r30
    10e6:	bf 91       	pop	r27
    10e8:	af 91       	pop	r26
    10ea:	9f 91       	pop	r25
    10ec:	8f 91       	pop	r24
    10ee:	7f 91       	pop	r23
    10f0:	6f 91       	pop	r22
    10f2:	5f 91       	pop	r21
    10f4:	4f 91       	pop	r20
    10f6:	3f 91       	pop	r19
    10f8:	2f 91       	pop	r18
    10fa:	0f 90       	pop	r0
    10fc:	0b be       	out	0x3b, r0	; 59
    10fe:	0f 90       	pop	r0
    1100:	0f be       	out	0x3f, r0	; 63
    1102:	0f 90       	pop	r0
    1104:	1f 90       	pop	r1
    1106:	18 95       	reti

00001108 <__vector_25>:

ISR(USART0_RX_vect) {
    1108:	1f 92       	push	r1
    110a:	0f 92       	push	r0
    110c:	0f b6       	in	r0, 0x3f	; 63
    110e:	0f 92       	push	r0
    1110:	0b b6       	in	r0, 0x3b	; 59
    1112:	0f 92       	push	r0
    1114:	11 24       	eor	r1, r1
    1116:	1f 93       	push	r17
    1118:	2f 93       	push	r18
    111a:	3f 93       	push	r19
    111c:	4f 93       	push	r20
    111e:	5f 93       	push	r21
    1120:	6f 93       	push	r22
    1122:	7f 93       	push	r23
    1124:	8f 93       	push	r24
    1126:	9f 93       	push	r25
    1128:	af 93       	push	r26
    112a:	bf 93       	push	r27
    112c:	ef 93       	push	r30
    112e:	ff 93       	push	r31
    1130:	cf 93       	push	r28
    1132:	df 93       	push	r29
    1134:	cd b7       	in	r28, 0x3d	; 61
    1136:	de b7       	in	r29, 0x3e	; 62
    1138:	2a 97       	sbiw	r28, 0x0a	; 10
    113a:	de bf       	out	0x3e, r29	; 62
    113c:	cd bf       	out	0x3d, r28	; 61
	struct task task;
	char ch;
	ch = UDR0;
    113e:	10 91 c6 00 	lds	r17, 0x00C6
	if (ch == ESC) {
    1142:	1b 31       	cpi	r17, 0x1B	; 27
    1144:	61 f4       	brne	.+24     	; 0x115e <__vector_25+0x56>
		echo_mode = (echo_mode + 1) & 0x01;
    1146:	80 91 1a 04 	lds	r24, 0x041A
    114a:	90 91 1b 04 	lds	r25, 0x041B
    114e:	01 96       	adiw	r24, 0x01	; 1
    1150:	81 70       	andi	r24, 0x01	; 1
    1152:	90 70       	andi	r25, 0x00	; 0
    1154:	90 93 1b 04 	sts	0x041B, r25
    1158:	80 93 1a 04 	sts	0x041A, r24
		return ;
    115c:	24 c0       	rjmp	.+72     	; 0x11a6 <__vector_25+0x9e>
	}

	if(ch != EOT) {
    115e:	14 30       	cpi	r17, 0x04	; 4
    1160:	69 f0       	breq	.+26     	; 0x117c <__vector_25+0x74>
		if (ch == '\r')  ch = '\n';
    1162:	1d 30       	cpi	r17, 0x0D	; 13
    1164:	09 f4       	brne	.+2      	; 0x1168 <__vector_25+0x60>
    1166:	1a e0       	ldi	r17, 0x0A	; 10
		if (echo_mode)	uart_echo(ch);
    1168:	20 91 1a 04 	lds	r18, 0x041A
    116c:	30 91 1b 04 	lds	r19, 0x041B
    1170:	21 15       	cp	r18, r1
    1172:	31 05       	cpc	r19, r1
    1174:	19 f0       	breq	.+6      	; 0x117c <__vector_25+0x74>
    1176:	81 2f       	mov	r24, r17
    1178:	0e 94 3c 08 	call	0x1078	; 0x1078 <uart_echo>
	}
	qi_insert(ch);
    117c:	81 2f       	mov	r24, r17
    117e:	0e 94 ba 02 	call	0x574	; 0x574 <qi_insert>
	if (ch == EOT || ch == '\n') {
    1182:	14 30       	cpi	r17, 0x04	; 4
    1184:	11 f0       	breq	.+4      	; 0x118a <__vector_25+0x82>
    1186:	1a 30       	cpi	r17, 0x0A	; 10
    1188:	71 f4       	brne	.+28     	; 0x11a6 <__vector_25+0x9e>
		task.fun = task_cmd;
    118a:	88 ea       	ldi	r24, 0xA8	; 168
    118c:	95 e0       	ldi	r25, 0x05	; 5
    118e:	9a 83       	std	Y+2, r25	; 0x02
    1190:	89 83       	std	Y+1, r24	; 0x01
		strcpy(task.arg, "");
    1192:	ce 01       	movw	r24, r28
    1194:	03 96       	adiw	r24, 0x03	; 3
    1196:	6d ef       	ldi	r22, 0xFD	; 253
    1198:	73 e0       	ldi	r23, 0x03	; 3
    119a:	0e 94 40 13 	call	0x2680	; 0x2680 <strcpy>
		task_insert(&task);
    119e:	ce 01       	movw	r24, r28
    11a0:	01 96       	adiw	r24, 0x01	; 1
    11a2:	0e 94 02 05 	call	0xa04	; 0xa04 <task_insert>
	}
}
    11a6:	2a 96       	adiw	r28, 0x0a	; 10
    11a8:	de bf       	out	0x3e, r29	; 62
    11aa:	cd bf       	out	0x3d, r28	; 61
    11ac:	df 91       	pop	r29
    11ae:	cf 91       	pop	r28
    11b0:	ff 91       	pop	r31
    11b2:	ef 91       	pop	r30
    11b4:	bf 91       	pop	r27
    11b6:	af 91       	pop	r26
    11b8:	9f 91       	pop	r25
    11ba:	8f 91       	pop	r24
    11bc:	7f 91       	pop	r23
    11be:	6f 91       	pop	r22
    11c0:	5f 91       	pop	r21
    11c2:	4f 91       	pop	r20
    11c4:	3f 91       	pop	r19
    11c6:	2f 91       	pop	r18
    11c8:	1f 91       	pop	r17
    11ca:	0f 90       	pop	r0
    11cc:	0b be       	out	0x3b, r0	; 59
    11ce:	0f 90       	pop	r0
    11d0:	0f be       	out	0x3f, r0	; 63
    11d2:	0f 90       	pop	r0
    11d4:	1f 90       	pop	r1
    11d6:	18 95       	reti

000011d8 <tcn75_i2c_init>:
#include <compat/deprecated.h>
#include <avr/interrupt.h>
#include "i2c_tcn75.h"

void tcn75_i2c_init() {
	sbi(DDRD, SDA);	sbi(PORTD, SDA);
    11d8:	51 9a       	sbi	0x0a, 1	; 10
    11da:	59 9a       	sbi	0x0b, 1	; 11
	sbi(DDRD, SCL); sbi(PORTD, SCL);
    11dc:	50 9a       	sbi	0x0a, 0	; 10
    11de:	58 9a       	sbi	0x0b, 0	; 11
}
    11e0:	08 95       	ret

000011e2 <task_tcn75_i2c>:

inline void i2c_tcn75_trans_start() {
	cbi(PORTD, SCL);
    11e2:	58 98       	cbi	0x0b, 0	; 11
	sbi(PORTD, SDA); delay_2nop();
    11e4:	59 9a       	sbi	0x0b, 1	; 11
    11e6:	00 00       	nop
    11e8:	00 00       	nop
	sbi(PORTD, SCL); delay_2nop();
    11ea:	58 9a       	sbi	0x0b, 0	; 11
    11ec:	00 00       	nop
    11ee:	00 00       	nop
	cbi(PORTD, SDA); delay_us(1);
    11f0:	59 98       	cbi	0x0b, 1	; 11
    11f2:	22 e0       	ldi	r18, 0x02	; 2
    11f4:	2a 95       	dec	r18
    11f6:	f1 f7       	brne	.-4      	; 0x11f4 <task_tcn75_i2c+0x12>
    11f8:	00 c0       	rjmp	.+0      	; 0x11fa <task_tcn75_i2c+0x18>
	sbi(PORTD, SDA); delay_us(1);
}

inline uint8_t i2c_tcn75_write_one_byte(uint8_t data) {
	uint8_t mask, ack;
	sbi(DDRD, SDA);
    11fa:	51 9a       	sbi	0x0a, 1	; 10
    11fc:	88 e0       	ldi	r24, 0x08	; 8
    11fe:	90 e0       	ldi	r25, 0x00	; 0

	for (mask = 0x80; mask; mask = mask >> 1) {
    1200:	20 e8       	ldi	r18, 0x80	; 128
		cbi(PORTD, SCL); delay_2nop();
    1202:	58 98       	cbi	0x0b, 0	; 11
    1204:	00 00       	nop
    1206:	00 00       	nop
		if (mask & data) sbi(PORTD, SDA);
    1208:	32 2f       	mov	r19, r18
    120a:	30 79       	andi	r19, 0x90	; 144
    120c:	11 f0       	breq	.+4      	; 0x1212 <task_tcn75_i2c+0x30>
    120e:	59 9a       	sbi	0x0b, 1	; 11
    1210:	01 c0       	rjmp	.+2      	; 0x1214 <task_tcn75_i2c+0x32>
		else 			 cbi(PORTD, SDA);
    1212:	59 98       	cbi	0x0b, 1	; 11
    1214:	32 e0       	ldi	r19, 0x02	; 2
    1216:	3a 95       	dec	r19
    1218:	f1 f7       	brne	.-4      	; 0x1216 <task_tcn75_i2c+0x34>
    121a:	00 c0       	rjmp	.+0      	; 0x121c <task_tcn75_i2c+0x3a>
		delay_us(1);
		sbi(PORTD, SCL); delay_us(1);
    121c:	58 9a       	sbi	0x0b, 0	; 11
    121e:	42 e0       	ldi	r20, 0x02	; 2
    1220:	4a 95       	dec	r20
    1222:	f1 f7       	brne	.-4      	; 0x1220 <task_tcn75_i2c+0x3e>
    1224:	00 c0       	rjmp	.+0      	; 0x1226 <task_tcn75_i2c+0x44>

inline uint8_t i2c_tcn75_write_one_byte(uint8_t data) {
	uint8_t mask, ack;
	sbi(DDRD, SDA);

	for (mask = 0x80; mask; mask = mask >> 1) {
    1226:	26 95       	lsr	r18
    1228:	01 97       	sbiw	r24, 0x01	; 1
    122a:	59 f7       	brne	.-42     	; 0x1202 <task_tcn75_i2c+0x20>
		if (mask & data) sbi(PORTD, SDA);
		else 			 cbi(PORTD, SDA);
		delay_us(1);
		sbi(PORTD, SCL); delay_us(1);
	}
	cbi(DDRD, SDA);
    122c:	51 98       	cbi	0x0a, 1	; 10
	cbi(PORTD, SCL); delay_us(1);
    122e:	58 98       	cbi	0x0b, 0	; 11
    1230:	82 e0       	ldi	r24, 0x02	; 2
    1232:	8a 95       	dec	r24
    1234:	f1 f7       	brne	.-4      	; 0x1232 <task_tcn75_i2c+0x50>
    1236:	00 c0       	rjmp	.+0      	; 0x1238 <task_tcn75_i2c+0x56>
	sbi(PORTD, SCL); delay_us(1);
    1238:	58 9a       	sbi	0x0b, 0	; 11
    123a:	92 e0       	ldi	r25, 0x02	; 2
    123c:	9a 95       	dec	r25
    123e:	f1 f7       	brne	.-4      	; 0x123c <task_tcn75_i2c+0x5a>
    1240:	00 c0       	rjmp	.+0      	; 0x1242 <task_tcn75_i2c+0x60>
	ack = PIND & (1 << SDA);
    1242:	89 b1       	in	r24, 0x09	; 9
}

void task_tcn75_i2c(void *arg) {
	uint16_t value;
	i2c_tcn75_trans_start();
	if (i2c_tcn75_write_one_byte(0x90) != 0) {
    1244:	81 ff       	sbrs	r24, 1
    1246:	0f c0       	rjmp	.+30     	; 0x1266 <task_tcn75_i2c+0x84>
	sbi(PORTD, SCL); delay_2nop();
	cbi(PORTD, SDA); delay_us(1);
}

inline void i2c_tcn75_trans_stop() {
	cbi(PORTD, SCL);
    1248:	58 98       	cbi	0x0b, 0	; 11
	cbi(PORTD, SDA); delay_2nop();
    124a:	59 98       	cbi	0x0b, 1	; 11
    124c:	00 00       	nop
    124e:	00 00       	nop
	sbi(PORTD, SCL); delay_2nop();
    1250:	58 9a       	sbi	0x0b, 0	; 11
    1252:	00 00       	nop
    1254:	00 00       	nop
	sbi(PORTD, SDA); delay_us(1);
    1256:	59 9a       	sbi	0x0b, 1	; 11
    1258:	e2 e0       	ldi	r30, 0x02	; 2
    125a:	ea 95       	dec	r30
    125c:	f1 f7       	brne	.-4      	; 0x125a <task_tcn75_i2c+0x78>
    125e:	00 c0       	rjmp	.+0      	; 0x1260 <task_tcn75_i2c+0x7e>
void task_tcn75_i2c(void *arg) {
	uint16_t value;
	i2c_tcn75_trans_start();
	if (i2c_tcn75_write_one_byte(0x90) != 0) {
		i2c_tcn75_trans_stop();
		printf("task_tcn75_i2c() : SLA+W write fail...\n");
    1260:	8c e1       	ldi	r24, 0x1C	; 28
    1262:	94 e0       	ldi	r25, 0x04	; 4
    1264:	6f c0       	rjmp	.+222    	; 0x1344 <task_tcn75_i2c+0x162>
	sbi(PORTD, SDA); delay_us(1);
}

inline uint8_t i2c_tcn75_write_one_byte(uint8_t data) {
	uint8_t mask, ack;
	sbi(DDRD, SDA);
    1266:	51 9a       	sbi	0x0a, 1	; 10
    1268:	88 e0       	ldi	r24, 0x08	; 8
    126a:	90 e0       	ldi	r25, 0x00	; 0

	for (mask = 0x80; mask; mask = mask >> 1) {
		cbi(PORTD, SCL); delay_2nop();
    126c:	58 98       	cbi	0x0b, 0	; 11
    126e:	00 00       	nop
    1270:	00 00       	nop
		if (mask & data) sbi(PORTD, SDA);
		else 			 cbi(PORTD, SDA);
    1272:	59 98       	cbi	0x0b, 1	; 11
    1274:	f2 e0       	ldi	r31, 0x02	; 2
    1276:	fa 95       	dec	r31
    1278:	f1 f7       	brne	.-4      	; 0x1276 <task_tcn75_i2c+0x94>
    127a:	00 c0       	rjmp	.+0      	; 0x127c <task_tcn75_i2c+0x9a>
		delay_us(1);
		sbi(PORTD, SCL); delay_us(1);
    127c:	58 9a       	sbi	0x0b, 0	; 11
    127e:	22 e0       	ldi	r18, 0x02	; 2
    1280:	2a 95       	dec	r18
    1282:	f1 f7       	brne	.-4      	; 0x1280 <task_tcn75_i2c+0x9e>
    1284:	00 c0       	rjmp	.+0      	; 0x1286 <task_tcn75_i2c+0xa4>
    1286:	01 97       	sbiw	r24, 0x01	; 1

inline uint8_t i2c_tcn75_write_one_byte(uint8_t data) {
	uint8_t mask, ack;
	sbi(DDRD, SDA);

	for (mask = 0x80; mask; mask = mask >> 1) {
    1288:	89 f7       	brne	.-30     	; 0x126c <task_tcn75_i2c+0x8a>
		if (mask & data) sbi(PORTD, SDA);
		else 			 cbi(PORTD, SDA);
		delay_us(1);
		sbi(PORTD, SCL); delay_us(1);
	}
	cbi(DDRD, SDA);
    128a:	51 98       	cbi	0x0a, 1	; 10
	cbi(PORTD, SCL); delay_us(1);
    128c:	58 98       	cbi	0x0b, 0	; 11
    128e:	32 e0       	ldi	r19, 0x02	; 2
    1290:	3a 95       	dec	r19
    1292:	f1 f7       	brne	.-4      	; 0x1290 <task_tcn75_i2c+0xae>
    1294:	00 c0       	rjmp	.+0      	; 0x1296 <task_tcn75_i2c+0xb4>
	sbi(PORTD, SCL); delay_us(1);
    1296:	58 9a       	sbi	0x0b, 0	; 11
    1298:	42 e0       	ldi	r20, 0x02	; 2
    129a:	4a 95       	dec	r20
    129c:	f1 f7       	brne	.-4      	; 0x129a <task_tcn75_i2c+0xb8>
    129e:	00 c0       	rjmp	.+0      	; 0x12a0 <task_tcn75_i2c+0xbe>
	ack = PIND & (1 << SDA);
    12a0:	89 b1       	in	r24, 0x09	; 9
	sbi(PORTD, SCL); delay_2nop();
	cbi(PORTD, SDA); delay_us(1);
}

inline void i2c_tcn75_trans_stop() {
	cbi(PORTD, SCL);
    12a2:	58 98       	cbi	0x0b, 0	; 11
		i2c_tcn75_trans_stop();
		printf("task_tcn75_i2c() : SLA+W write fail...\n");
		return ;
	}

	if (i2c_tcn75_write_one_byte(0x00) != 0) {
    12a4:	81 ff       	sbrs	r24, 1
    12a6:	0e c0       	rjmp	.+28     	; 0x12c4 <task_tcn75_i2c+0xe2>
	cbi(PORTD, SDA); delay_us(1);
}

inline void i2c_tcn75_trans_stop() {
	cbi(PORTD, SCL);
	cbi(PORTD, SDA); delay_2nop();
    12a8:	59 98       	cbi	0x0b, 1	; 11
    12aa:	00 00       	nop
    12ac:	00 00       	nop
	sbi(PORTD, SCL); delay_2nop();
    12ae:	58 9a       	sbi	0x0b, 0	; 11
    12b0:	00 00       	nop
    12b2:	00 00       	nop
	sbi(PORTD, SDA); delay_us(1);
    12b4:	59 9a       	sbi	0x0b, 1	; 11
    12b6:	82 e0       	ldi	r24, 0x02	; 2
    12b8:	8a 95       	dec	r24
    12ba:	f1 f7       	brne	.-4      	; 0x12b8 <task_tcn75_i2c+0xd6>
    12bc:	00 c0       	rjmp	.+0      	; 0x12be <task_tcn75_i2c+0xdc>
		return ;
	}

	if (i2c_tcn75_write_one_byte(0x00) != 0) {
		i2c_tcn75_trans_stop(); 
		printf("task_tcn75_i2c() : pointer write fail...\n");
    12be:	83 e4       	ldi	r24, 0x43	; 67
    12c0:	94 e0       	ldi	r25, 0x04	; 4
    12c2:	40 c0       	rjmp	.+128    	; 0x1344 <task_tcn75_i2c+0x162>
	sbi(DDRD, SCL); sbi(PORTD, SCL);
}

inline void i2c_tcn75_trans_start() {
	cbi(PORTD, SCL);
	sbi(PORTD, SDA); delay_2nop();
    12c4:	59 9a       	sbi	0x0b, 1	; 11
    12c6:	00 00       	nop
    12c8:	00 00       	nop
	sbi(PORTD, SCL); delay_2nop();
    12ca:	58 9a       	sbi	0x0b, 0	; 11
    12cc:	00 00       	nop
    12ce:	00 00       	nop
	cbi(PORTD, SDA); delay_us(1);
    12d0:	59 98       	cbi	0x0b, 1	; 11
    12d2:	92 e0       	ldi	r25, 0x02	; 2
    12d4:	9a 95       	dec	r25
    12d6:	f1 f7       	brne	.-4      	; 0x12d4 <task_tcn75_i2c+0xf2>
    12d8:	00 c0       	rjmp	.+0      	; 0x12da <task_tcn75_i2c+0xf8>
	sbi(PORTD, SDA); delay_us(1);
}

inline uint8_t i2c_tcn75_write_one_byte(uint8_t data) {
	uint8_t mask, ack;
	sbi(DDRD, SDA);
    12da:	51 9a       	sbi	0x0a, 1	; 10
    12dc:	88 e0       	ldi	r24, 0x08	; 8
    12de:	90 e0       	ldi	r25, 0x00	; 0

	for (mask = 0x80; mask; mask = mask >> 1) {
    12e0:	20 e8       	ldi	r18, 0x80	; 128
		cbi(PORTD, SCL); delay_2nop();
    12e2:	58 98       	cbi	0x0b, 0	; 11
    12e4:	00 00       	nop
    12e6:	00 00       	nop
		if (mask & data) sbi(PORTD, SDA);
    12e8:	32 2f       	mov	r19, r18
    12ea:	31 79       	andi	r19, 0x91	; 145
    12ec:	11 f0       	breq	.+4      	; 0x12f2 <task_tcn75_i2c+0x110>
    12ee:	59 9a       	sbi	0x0b, 1	; 11
    12f0:	01 c0       	rjmp	.+2      	; 0x12f4 <task_tcn75_i2c+0x112>
		else 			 cbi(PORTD, SDA);
    12f2:	59 98       	cbi	0x0b, 1	; 11
    12f4:	e2 e0       	ldi	r30, 0x02	; 2
    12f6:	ea 95       	dec	r30
    12f8:	f1 f7       	brne	.-4      	; 0x12f6 <task_tcn75_i2c+0x114>
    12fa:	00 c0       	rjmp	.+0      	; 0x12fc <task_tcn75_i2c+0x11a>
		delay_us(1);
		sbi(PORTD, SCL); delay_us(1);
    12fc:	58 9a       	sbi	0x0b, 0	; 11
    12fe:	f2 e0       	ldi	r31, 0x02	; 2
    1300:	fa 95       	dec	r31
    1302:	f1 f7       	brne	.-4      	; 0x1300 <task_tcn75_i2c+0x11e>
    1304:	00 c0       	rjmp	.+0      	; 0x1306 <task_tcn75_i2c+0x124>

inline uint8_t i2c_tcn75_write_one_byte(uint8_t data) {
	uint8_t mask, ack;
	sbi(DDRD, SDA);

	for (mask = 0x80; mask; mask = mask >> 1) {
    1306:	26 95       	lsr	r18
    1308:	01 97       	sbiw	r24, 0x01	; 1
    130a:	59 f7       	brne	.-42     	; 0x12e2 <task_tcn75_i2c+0x100>
		if (mask & data) sbi(PORTD, SDA);
		else 			 cbi(PORTD, SDA);
		delay_us(1);
		sbi(PORTD, SCL); delay_us(1);
	}
	cbi(DDRD, SDA);
    130c:	51 98       	cbi	0x0a, 1	; 10
	cbi(PORTD, SCL); delay_us(1);
    130e:	58 98       	cbi	0x0b, 0	; 11
    1310:	22 e0       	ldi	r18, 0x02	; 2
    1312:	2a 95       	dec	r18
    1314:	f1 f7       	brne	.-4      	; 0x1312 <task_tcn75_i2c+0x130>
    1316:	00 c0       	rjmp	.+0      	; 0x1318 <task_tcn75_i2c+0x136>
	sbi(PORTD, SCL); delay_us(1);
    1318:	58 9a       	sbi	0x0b, 0	; 11
    131a:	32 e0       	ldi	r19, 0x02	; 2
    131c:	3a 95       	dec	r19
    131e:	f1 f7       	brne	.-4      	; 0x131c <task_tcn75_i2c+0x13a>
    1320:	00 c0       	rjmp	.+0      	; 0x1322 <task_tcn75_i2c+0x140>
	ack = PIND & (1 << SDA);
    1322:	89 b1       	in	r24, 0x09	; 9
		printf("task_tcn75_i2c() : pointer write fail...\n");
		return ;
	}
	
	i2c_tcn75_trans_start();
	if (i2c_tcn75_write_one_byte(0x91) != 0) {
    1324:	81 ff       	sbrs	r24, 1
    1326:	11 c0       	rjmp	.+34     	; 0x134a <task_tcn75_i2c+0x168>
	sbi(PORTD, SCL); delay_2nop();
	cbi(PORTD, SDA); delay_us(1);
}

inline void i2c_tcn75_trans_stop() {
	cbi(PORTD, SCL);
    1328:	58 98       	cbi	0x0b, 0	; 11
	cbi(PORTD, SDA); delay_2nop();
    132a:	59 98       	cbi	0x0b, 1	; 11
    132c:	00 00       	nop
    132e:	00 00       	nop
	sbi(PORTD, SCL); delay_2nop();
    1330:	58 9a       	sbi	0x0b, 0	; 11
    1332:	00 00       	nop
    1334:	00 00       	nop
	sbi(PORTD, SDA); delay_us(1);
    1336:	59 9a       	sbi	0x0b, 1	; 11
    1338:	42 e0       	ldi	r20, 0x02	; 2
    133a:	4a 95       	dec	r20
    133c:	f1 f7       	brne	.-4      	; 0x133a <task_tcn75_i2c+0x158>
    133e:	00 c0       	rjmp	.+0      	; 0x1340 <task_tcn75_i2c+0x15e>
	}
	
	i2c_tcn75_trans_start();
	if (i2c_tcn75_write_one_byte(0x91) != 0) {
		i2c_tcn75_trans_stop(); 
		printf("task_tcn75_i2c() : SLA+R write fail...\n");
    1340:	8c e6       	ldi	r24, 0x6C	; 108
    1342:	94 e0       	ldi	r25, 0x04	; 4
    1344:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <puts>
		return ;
    1348:	08 95       	ret
	return (ack);
}

inline uint8_t i2c_tcn75_read_one_byte(uint8_t ack) {
	uint8_t i, data = 0;
	cbi(DDRD, SDA);
    134a:	51 98       	cbi	0x0a, 1	; 10
    134c:	98 e0       	ldi	r25, 0x08	; 8
	
	return (ack);
}

inline uint8_t i2c_tcn75_read_one_byte(uint8_t ack) {
	uint8_t i, data = 0;
    134e:	80 e0       	ldi	r24, 0x00	; 0
	cbi(DDRD, SDA);
	for (i = 0; i < 8; i++) {
		cbi(PORTD, SCL); delay_us(1);
    1350:	58 98       	cbi	0x0b, 0	; 11
    1352:	e2 e0       	ldi	r30, 0x02	; 2
    1354:	ea 95       	dec	r30
    1356:	f1 f7       	brne	.-4      	; 0x1354 <task_tcn75_i2c+0x172>
    1358:	00 c0       	rjmp	.+0      	; 0x135a <task_tcn75_i2c+0x178>
		sbi(PORTD, SCL); delay_us(1);
    135a:	58 9a       	sbi	0x0b, 0	; 11
    135c:	f2 e0       	ldi	r31, 0x02	; 2
    135e:	fa 95       	dec	r31
    1360:	f1 f7       	brne	.-4      	; 0x135e <task_tcn75_i2c+0x17c>
    1362:	00 c0       	rjmp	.+0      	; 0x1364 <task_tcn75_i2c+0x182>
		data = (data << 1);
    1364:	88 0f       	add	r24, r24
		if (PIND & (1 << SDA)) data = data | 0x01;
    1366:	49 99       	sbic	0x09, 1	; 9
    1368:	81 60       	ori	r24, 0x01	; 1
    136a:	91 50       	subi	r25, 0x01	; 1
}

inline uint8_t i2c_tcn75_read_one_byte(uint8_t ack) {
	uint8_t i, data = 0;
	cbi(DDRD, SDA);
	for (i = 0; i < 8; i++) {
    136c:	89 f7       	brne	.-30     	; 0x1350 <task_tcn75_i2c+0x16e>
		sbi(PORTD, SCL); delay_us(1);
		data = (data << 1);
		if (PIND & (1 << SDA)) data = data | 0x01;
	}	
	
	sbi(DDRD, SDA);
    136e:	51 9a       	sbi	0x0a, 1	; 10
	cbi(PORTD, SCL); delay_2nop();
    1370:	58 98       	cbi	0x0b, 0	; 11
    1372:	00 00       	nop
    1374:	00 00       	nop

	if (ack) sbi(PORTD, SDA);
	else	 cbi(PORTD, SDA);
    1376:	59 98       	cbi	0x0b, 1	; 11
    1378:	22 e0       	ldi	r18, 0x02	; 2
    137a:	2a 95       	dec	r18
    137c:	f1 f7       	brne	.-4      	; 0x137a <task_tcn75_i2c+0x198>
    137e:	00 c0       	rjmp	.+0      	; 0x1380 <task_tcn75_i2c+0x19e>
	delay_us(1);
	sbi(PORTD, SCL); delay_us(1);
    1380:	58 9a       	sbi	0x0b, 0	; 11
    1382:	32 e0       	ldi	r19, 0x02	; 2
    1384:	3a 95       	dec	r19
    1386:	f1 f7       	brne	.-4      	; 0x1384 <task_tcn75_i2c+0x1a2>
    1388:	00 c0       	rjmp	.+0      	; 0x138a <task_tcn75_i2c+0x1a8>
		i2c_tcn75_trans_stop(); 
		printf("task_tcn75_i2c() : SLA+R write fail...\n");
		return ;
	}

	value = ((i2c_tcn75_read_one_byte(0) << 8) | i2c_tcn75_read_one_byte(1)) >> 7;
    138a:	38 2f       	mov	r19, r24
    138c:	20 e0       	ldi	r18, 0x00	; 0
	return (ack);
}

inline uint8_t i2c_tcn75_read_one_byte(uint8_t ack) {
	uint8_t i, data = 0;
	cbi(DDRD, SDA);
    138e:	51 98       	cbi	0x0a, 1	; 10
    1390:	98 e0       	ldi	r25, 0x08	; 8
	
	return (ack);
}

inline uint8_t i2c_tcn75_read_one_byte(uint8_t ack) {
	uint8_t i, data = 0;
    1392:	80 e0       	ldi	r24, 0x00	; 0
	cbi(DDRD, SDA);
	for (i = 0; i < 8; i++) {
		cbi(PORTD, SCL); delay_us(1);
    1394:	58 98       	cbi	0x0b, 0	; 11
    1396:	42 e0       	ldi	r20, 0x02	; 2
    1398:	4a 95       	dec	r20
    139a:	f1 f7       	brne	.-4      	; 0x1398 <task_tcn75_i2c+0x1b6>
    139c:	00 c0       	rjmp	.+0      	; 0x139e <task_tcn75_i2c+0x1bc>
		sbi(PORTD, SCL); delay_us(1);
    139e:	58 9a       	sbi	0x0b, 0	; 11
    13a0:	e2 e0       	ldi	r30, 0x02	; 2
    13a2:	ea 95       	dec	r30
    13a4:	f1 f7       	brne	.-4      	; 0x13a2 <task_tcn75_i2c+0x1c0>
    13a6:	00 c0       	rjmp	.+0      	; 0x13a8 <task_tcn75_i2c+0x1c6>
		data = (data << 1);
    13a8:	88 0f       	add	r24, r24
		if (PIND & (1 << SDA)) data = data | 0x01;
    13aa:	49 99       	sbic	0x09, 1	; 9
    13ac:	81 60       	ori	r24, 0x01	; 1
    13ae:	91 50       	subi	r25, 0x01	; 1
}

inline uint8_t i2c_tcn75_read_one_byte(uint8_t ack) {
	uint8_t i, data = 0;
	cbi(DDRD, SDA);
	for (i = 0; i < 8; i++) {
    13b0:	89 f7       	brne	.-30     	; 0x1394 <task_tcn75_i2c+0x1b2>
		sbi(PORTD, SCL); delay_us(1);
		data = (data << 1);
		if (PIND & (1 << SDA)) data = data | 0x01;
	}	
	
	sbi(DDRD, SDA);
    13b2:	51 9a       	sbi	0x0a, 1	; 10
	cbi(PORTD, SCL); delay_2nop();
    13b4:	58 98       	cbi	0x0b, 0	; 11
    13b6:	00 00       	nop
    13b8:	00 00       	nop

	if (ack) sbi(PORTD, SDA);
    13ba:	59 9a       	sbi	0x0b, 1	; 11
    13bc:	f2 e0       	ldi	r31, 0x02	; 2
    13be:	fa 95       	dec	r31
    13c0:	f1 f7       	brne	.-4      	; 0x13be <task_tcn75_i2c+0x1dc>
    13c2:	00 c0       	rjmp	.+0      	; 0x13c4 <task_tcn75_i2c+0x1e2>
	else	 cbi(PORTD, SDA);
	delay_us(1);
	sbi(PORTD, SCL); delay_us(1);
    13c4:	58 9a       	sbi	0x0b, 0	; 11
    13c6:	42 e0       	ldi	r20, 0x02	; 2
    13c8:	4a 95       	dec	r20
    13ca:	f1 f7       	brne	.-4      	; 0x13c8 <task_tcn75_i2c+0x1e6>
    13cc:	00 c0       	rjmp	.+0      	; 0x13ce <task_tcn75_i2c+0x1ec>
		i2c_tcn75_trans_stop(); 
		printf("task_tcn75_i2c() : SLA+R write fail...\n");
		return ;
	}

	value = ((i2c_tcn75_read_one_byte(0) << 8) | i2c_tcn75_read_one_byte(1)) >> 7;
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	82 2b       	or	r24, r18
    13d2:	93 2b       	or	r25, r19
    13d4:	88 0f       	add	r24, r24
    13d6:	89 2f       	mov	r24, r25
    13d8:	88 1f       	adc	r24, r24
    13da:	99 0b       	sbc	r25, r25
	sbi(PORTD, SCL); delay_2nop();
	cbi(PORTD, SDA); delay_us(1);
}

inline void i2c_tcn75_trans_stop() {
	cbi(PORTD, SCL);
    13dc:	58 98       	cbi	0x0b, 0	; 11
	cbi(PORTD, SDA); delay_2nop();
    13de:	59 98       	cbi	0x0b, 1	; 11
    13e0:	00 00       	nop
    13e2:	00 00       	nop
	sbi(PORTD, SCL); delay_2nop();
    13e4:	58 9a       	sbi	0x0b, 0	; 11
    13e6:	00 00       	nop
    13e8:	00 00       	nop
	sbi(PORTD, SDA); delay_us(1);
    13ea:	59 9a       	sbi	0x0b, 1	; 11
    13ec:	e2 e0       	ldi	r30, 0x02	; 2
    13ee:	ea 95       	dec	r30
    13f0:	f1 f7       	brne	.-4      	; 0x13ee <task_tcn75_i2c+0x20c>
    13f2:	00 c0       	rjmp	.+0      	; 0x13f4 <task_tcn75_i2c+0x212>
	}

	value = ((i2c_tcn75_read_one_byte(0) << 8) | i2c_tcn75_read_one_byte(1)) >> 7;
	i2c_tcn75_trans_stop(); 
	value = value >> 1;
	printf("task_tcn75_i2c() : current_temperature -> %d degree. \n", value);
    13f4:	00 d0       	rcall	.+0      	; 0x13f6 <task_tcn75_i2c+0x214>
    13f6:	0f 92       	push	r0
    13f8:	23 e9       	ldi	r18, 0x93	; 147
    13fa:	34 e0       	ldi	r19, 0x04	; 4
    13fc:	ed b7       	in	r30, 0x3d	; 61
    13fe:	fe b7       	in	r31, 0x3e	; 62
    1400:	32 83       	std	Z+2, r19	; 0x02
    1402:	21 83       	std	Z+1, r18	; 0x01
		return ;
	}

	value = ((i2c_tcn75_read_one_byte(0) << 8) | i2c_tcn75_read_one_byte(1)) >> 7;
	i2c_tcn75_trans_stop(); 
	value = value >> 1;
    1404:	96 95       	lsr	r25
    1406:	87 95       	ror	r24
	printf("task_tcn75_i2c() : current_temperature -> %d degree. \n", value);
    1408:	94 83       	std	Z+4, r25	; 0x04
    140a:	83 83       	std	Z+3, r24	; 0x03
    140c:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <printf>
    1410:	0f 90       	pop	r0
    1412:	0f 90       	pop	r0
    1414:	0f 90       	pop	r0
    1416:	0f 90       	pop	r0
    1418:	08 95       	ret

0000141a <task_watch>:
#include "app_watch.h"
#include "task.h"
#include "timer_linked_list.h"
#include "app_prime.h"

void task_watch(char *ap) {
    141a:	0f 93       	push	r16
    141c:	1f 93       	push	r17
    141e:	cf 93       	push	r28
    1420:	df 93       	push	r29
    1422:	cd b7       	in	r28, 0x3d	; 61
    1424:	de b7       	in	r29, 0x3e	; 62
    1426:	2c 97       	sbiw	r28, 0x0c	; 12
    1428:	0f b6       	in	r0, 0x3f	; 63
    142a:	f8 94       	cli
    142c:	de bf       	out	0x3e, r29	; 62
    142e:	0f be       	out	0x3f, r0	; 63
    1430:	cd bf       	out	0x3d, r28	; 61
	int cnt = 0;
	struct task watch;
	char cnt_ch[2];

	if (ap && *ap) cnt = atoi(ap);
    1432:	00 97       	sbiw	r24, 0x00	; 0
    1434:	39 f0       	breq	.+14     	; 0x1444 <task_watch+0x2a>
    1436:	fc 01       	movw	r30, r24
    1438:	20 81       	ld	r18, Z
    143a:	22 23       	and	r18, r18
    143c:	19 f0       	breq	.+6      	; 0x1444 <task_watch+0x2a>
    143e:	0e 94 14 13 	call	0x2628	; 0x2628 <atoi>
    1442:	02 c0       	rjmp	.+4      	; 0x1448 <task_watch+0x2e>
#include "task.h"
#include "timer_linked_list.h"
#include "app_prime.h"

void task_watch(char *ap) {
	int cnt = 0;
    1444:	80 e0       	ldi	r24, 0x00	; 0
    1446:	90 e0       	ldi	r25, 0x00	; 0
	struct task watch;
	char cnt_ch[2];

	if (ap && *ap) cnt = atoi(ap);
	printf("%d\n", cnt++);
    1448:	8c 01       	movw	r16, r24
    144a:	0f 5f       	subi	r16, 0xFF	; 255
    144c:	1f 4f       	sbci	r17, 0xFF	; 255
    144e:	00 d0       	rcall	.+0      	; 0x1450 <task_watch+0x36>
    1450:	0f 92       	push	r0
    1452:	2a ec       	ldi	r18, 0xCA	; 202
    1454:	34 e0       	ldi	r19, 0x04	; 4
    1456:	ed b7       	in	r30, 0x3d	; 61
    1458:	fe b7       	in	r31, 0x3e	; 62
    145a:	32 83       	std	Z+2, r19	; 0x02
    145c:	21 83       	std	Z+1, r18	; 0x01
    145e:	94 83       	std	Z+4, r25	; 0x04
    1460:	83 83       	std	Z+3, r24	; 0x03
    1462:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <printf>
	
	if (cnt < 10) {
    1466:	0f 90       	pop	r0
    1468:	0f 90       	pop	r0
    146a:	0f 90       	pop	r0
    146c:	0f 90       	pop	r0
    146e:	0a 30       	cpi	r16, 0x0A	; 10
    1470:	11 05       	cpc	r17, r1
    1472:	b4 f4       	brge	.+44     	; 0x14a0 <task_watch+0x86>
		cnt_ch[0] = '0' + cnt;
    1474:	00 5d       	subi	r16, 0xD0	; 208
    1476:	09 83       	std	Y+1, r16	; 0x01
		cnt_ch[1] = '\0';
    1478:	1a 82       	std	Y+2, r1	; 0x02
		watch.fun = task_watch;
    147a:	8d e0       	ldi	r24, 0x0D	; 13
    147c:	9a e0       	ldi	r25, 0x0A	; 10
    147e:	9c 83       	std	Y+4, r25	; 0x04
    1480:	8b 83       	std	Y+3, r24	; 0x03
		strcpy(watch.arg, cnt_ch);
    1482:	ce 01       	movw	r24, r28
    1484:	05 96       	adiw	r24, 0x05	; 5
    1486:	be 01       	movw	r22, r28
    1488:	6f 5f       	subi	r22, 0xFF	; 255
    148a:	7f 4f       	sbci	r23, 0xFF	; 255
    148c:	0e 94 40 13 	call	0x2680	; 0x2680 <strcpy>
		cli();
    1490:	f8 94       	cli
		insert_timer(&watch, (2000/256));
    1492:	ce 01       	movw	r24, r28
    1494:	03 96       	adiw	r24, 0x03	; 3
    1496:	67 e0       	ldi	r22, 0x07	; 7
    1498:	70 e0       	ldi	r23, 0x00	; 0
    149a:	0e 94 9a 06 	call	0xd34	; 0xd34 <insert_timer>
		sei();
    149e:	78 94       	sei
	}
}
    14a0:	2c 96       	adiw	r28, 0x0c	; 12
    14a2:	0f b6       	in	r0, 0x3f	; 63
    14a4:	f8 94       	cli
    14a6:	de bf       	out	0x3e, r29	; 62
    14a8:	0f be       	out	0x3f, r0	; 63
    14aa:	cd bf       	out	0x3d, r28	; 61
    14ac:	df 91       	pop	r29
    14ae:	cf 91       	pop	r28
    14b0:	1f 91       	pop	r17
    14b2:	0f 91       	pop	r16
    14b4:	08 95       	ret

000014b6 <task_rand>:
#include <avr/interrupt.h>
#include "task.h"
#include "timer_linked_list.h"
#include "app_rand.h"

void task_rand(char *ap) {
    14b6:	cf 93       	push	r28
    14b8:	df 93       	push	r29
    14ba:	cd b7       	in	r28, 0x3d	; 61
    14bc:	de b7       	in	r29, 0x3e	; 62
    14be:	2a 97       	sbiw	r28, 0x0a	; 10
    14c0:	0f b6       	in	r0, 0x3f	; 63
    14c2:	f8 94       	cli
    14c4:	de bf       	out	0x3e, r29	; 62
    14c6:	0f be       	out	0x3f, r0	; 63
    14c8:	cd bf       	out	0x3d, r28	; 61
	struct task task;
	// struct task rnd;

	if (Thead) {
    14ca:	80 91 f0 05 	lds	r24, 0x05F0
    14ce:	90 91 f1 05 	lds	r25, 0x05F1
    14d2:	00 97       	sbiw	r24, 0x00	; 0
    14d4:	99 f0       	breq	.+38     	; 0x14fc <task_rand+0x46>
		printf("%d\n", rand());
    14d6:	0e 94 04 13 	call	0x2608	; 0x2608 <rand>
    14da:	00 d0       	rcall	.+0      	; 0x14dc <task_rand+0x26>
    14dc:	0f 92       	push	r0
    14de:	2e ec       	ldi	r18, 0xCE	; 206
    14e0:	34 e0       	ldi	r19, 0x04	; 4
    14e2:	ed b7       	in	r30, 0x3d	; 61
    14e4:	fe b7       	in	r31, 0x3e	; 62
    14e6:	32 83       	std	Z+2, r19	; 0x02
    14e8:	21 83       	std	Z+1, r18	; 0x01
    14ea:	94 83       	std	Z+4, r25	; 0x04
    14ec:	83 83       	std	Z+3, r24	; 0x03
    14ee:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <printf>
		task_rand("");
    14f2:	0f 90       	pop	r0
    14f4:	0f 90       	pop	r0
    14f6:	0f 90       	pop	r0
    14f8:	0f 90       	pop	r0
    14fa:	12 c0       	rjmp	.+36     	; 0x1520 <task_rand+0x6a>
	} else {
		task.fun = task_cmd;
    14fc:	88 ea       	ldi	r24, 0xA8	; 168
    14fe:	95 e0       	ldi	r25, 0x05	; 5
    1500:	9a 83       	std	Y+2, r25	; 0x02
    1502:	89 83       	std	Y+1, r24	; 0x01
		strcpy(task.arg, "");
    1504:	ce 01       	movw	r24, r28
    1506:	03 96       	adiw	r24, 0x03	; 3
    1508:	62 ed       	ldi	r22, 0xD2	; 210
    150a:	74 e0       	ldi	r23, 0x04	; 4
    150c:	0e 94 40 13 	call	0x2680	; 0x2680 <strcpy>
		cli();
    1510:	f8 94       	cli
		insert_timer(&task, (10000/256));
    1512:	ce 01       	movw	r24, r28
    1514:	01 96       	adiw	r24, 0x01	; 1
    1516:	67 e2       	ldi	r22, 0x27	; 39
    1518:	70 e0       	ldi	r23, 0x00	; 0
    151a:	0e 94 9a 06 	call	0xd34	; 0xd34 <insert_timer>
		sei();
    151e:	78 94       	sei
		task_rand("");
    1520:	82 ed       	ldi	r24, 0xD2	; 210
    1522:	94 e0       	ldi	r25, 0x04	; 4
    1524:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <task_rand>
	}
}
    1528:	2a 96       	adiw	r28, 0x0a	; 10
    152a:	0f b6       	in	r0, 0x3f	; 63
    152c:	f8 94       	cli
    152e:	de bf       	out	0x3e, r29	; 62
    1530:	0f be       	out	0x3f, r0	; 63
    1532:	cd bf       	out	0x3d, r28	; 61
    1534:	df 91       	pop	r29
    1536:	cf 91       	pop	r28
    1538:	08 95       	ret

0000153a <__fixunssfsi>:
    153a:	cf 92       	push	r12
    153c:	df 92       	push	r13
    153e:	ef 92       	push	r14
    1540:	ff 92       	push	r15
    1542:	0f 93       	push	r16
    1544:	1f 93       	push	r17
    1546:	6b 01       	movw	r12, r22
    1548:	7c 01       	movw	r14, r24
    154a:	20 e0       	ldi	r18, 0x00	; 0
    154c:	30 e0       	ldi	r19, 0x00	; 0
    154e:	40 e0       	ldi	r20, 0x00	; 0
    1550:	5f e4       	ldi	r21, 0x4F	; 79
    1552:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <__gesf2>
    1556:	87 fd       	sbrc	r24, 7
    1558:	11 c0       	rjmp	.+34     	; 0x157c <__fixunssfsi+0x42>
    155a:	c7 01       	movw	r24, r14
    155c:	b6 01       	movw	r22, r12
    155e:	20 e0       	ldi	r18, 0x00	; 0
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	40 e0       	ldi	r20, 0x00	; 0
    1564:	5f e4       	ldi	r21, 0x4F	; 79
    1566:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <__subsf3>
    156a:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <__fixsfsi>
    156e:	8b 01       	movw	r16, r22
    1570:	9c 01       	movw	r18, r24
    1572:	00 50       	subi	r16, 0x00	; 0
    1574:	10 40       	sbci	r17, 0x00	; 0
    1576:	20 40       	sbci	r18, 0x00	; 0
    1578:	30 48       	sbci	r19, 0x80	; 128
    157a:	06 c0       	rjmp	.+12     	; 0x1588 <__fixunssfsi+0x4e>
    157c:	c7 01       	movw	r24, r14
    157e:	b6 01       	movw	r22, r12
    1580:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <__fixsfsi>
    1584:	8b 01       	movw	r16, r22
    1586:	9c 01       	movw	r18, r24
    1588:	b8 01       	movw	r22, r16
    158a:	c9 01       	movw	r24, r18
    158c:	1f 91       	pop	r17
    158e:	0f 91       	pop	r16
    1590:	ff 90       	pop	r15
    1592:	ef 90       	pop	r14
    1594:	df 90       	pop	r13
    1596:	cf 90       	pop	r12
    1598:	08 95       	ret

0000159a <_fpadd_parts>:
    159a:	a0 e0       	ldi	r26, 0x00	; 0
    159c:	b0 e0       	ldi	r27, 0x00	; 0
    159e:	e3 ed       	ldi	r30, 0xD3	; 211
    15a0:	fa e0       	ldi	r31, 0x0A	; 10
    15a2:	0c 94 4b 11 	jmp	0x2296	; 0x2296 <__prologue_saves__+0x4>
    15a6:	ec 01       	movw	r28, r24
    15a8:	4b 01       	movw	r8, r22
    15aa:	fa 01       	movw	r30, r20
    15ac:	88 81       	ld	r24, Y
    15ae:	82 30       	cpi	r24, 0x02	; 2
    15b0:	08 f4       	brcc	.+2      	; 0x15b4 <_fpadd_parts+0x1a>
    15b2:	3e c1       	rjmp	.+636    	; 0x1830 <_fpadd_parts+0x296>
    15b4:	db 01       	movw	r26, r22
    15b6:	9c 91       	ld	r25, X
    15b8:	92 30       	cpi	r25, 0x02	; 2
    15ba:	08 f4       	brcc	.+2      	; 0x15be <_fpadd_parts+0x24>
    15bc:	36 c1       	rjmp	.+620    	; 0x182a <_fpadd_parts+0x290>
    15be:	84 30       	cpi	r24, 0x04	; 4
    15c0:	59 f4       	brne	.+22     	; 0x15d8 <_fpadd_parts+0x3e>
    15c2:	94 30       	cpi	r25, 0x04	; 4
    15c4:	09 f0       	breq	.+2      	; 0x15c8 <_fpadd_parts+0x2e>
    15c6:	34 c1       	rjmp	.+616    	; 0x1830 <_fpadd_parts+0x296>
    15c8:	99 81       	ldd	r25, Y+1	; 0x01
    15ca:	11 96       	adiw	r26, 0x01	; 1
    15cc:	8c 91       	ld	r24, X
    15ce:	11 97       	sbiw	r26, 0x01	; 1
    15d0:	98 17       	cp	r25, r24
    15d2:	09 f0       	breq	.+2      	; 0x15d6 <_fpadd_parts+0x3c>
    15d4:	27 c1       	rjmp	.+590    	; 0x1824 <_fpadd_parts+0x28a>
    15d6:	2c c1       	rjmp	.+600    	; 0x1830 <_fpadd_parts+0x296>
    15d8:	94 30       	cpi	r25, 0x04	; 4
    15da:	09 f4       	brne	.+2      	; 0x15de <_fpadd_parts+0x44>
    15dc:	26 c1       	rjmp	.+588    	; 0x182a <_fpadd_parts+0x290>
    15de:	92 30       	cpi	r25, 0x02	; 2
    15e0:	a9 f4       	brne	.+42     	; 0x160c <_fpadd_parts+0x72>
    15e2:	82 30       	cpi	r24, 0x02	; 2
    15e4:	09 f0       	breq	.+2      	; 0x15e8 <_fpadd_parts+0x4e>
    15e6:	24 c1       	rjmp	.+584    	; 0x1830 <_fpadd_parts+0x296>
    15e8:	ce 01       	movw	r24, r28
    15ea:	28 e0       	ldi	r18, 0x08	; 8
    15ec:	dc 01       	movw	r26, r24
    15ee:	0d 90       	ld	r0, X+
    15f0:	cd 01       	movw	r24, r26
    15f2:	da 01       	movw	r26, r20
    15f4:	0d 92       	st	X+, r0
    15f6:	ad 01       	movw	r20, r26
    15f8:	21 50       	subi	r18, 0x01	; 1
    15fa:	c1 f7       	brne	.-16     	; 0x15ec <_fpadd_parts+0x52>
    15fc:	d4 01       	movw	r26, r8
    15fe:	11 96       	adiw	r26, 0x01	; 1
    1600:	8c 91       	ld	r24, X
    1602:	11 97       	sbiw	r26, 0x01	; 1
    1604:	99 81       	ldd	r25, Y+1	; 0x01
    1606:	89 23       	and	r24, r25
    1608:	81 83       	std	Z+1, r24	; 0x01
    160a:	11 c1       	rjmp	.+546    	; 0x182e <_fpadd_parts+0x294>
    160c:	82 30       	cpi	r24, 0x02	; 2
    160e:	09 f4       	brne	.+2      	; 0x1612 <_fpadd_parts+0x78>
    1610:	0c c1       	rjmp	.+536    	; 0x182a <_fpadd_parts+0x290>
    1612:	aa 80       	ldd	r10, Y+2	; 0x02
    1614:	bb 80       	ldd	r11, Y+3	; 0x03
    1616:	db 01       	movw	r26, r22
    1618:	12 96       	adiw	r26, 0x02	; 2
    161a:	4d 91       	ld	r20, X+
    161c:	5c 91       	ld	r21, X
    161e:	13 97       	sbiw	r26, 0x03	; 3
    1620:	cc 80       	ldd	r12, Y+4	; 0x04
    1622:	dd 80       	ldd	r13, Y+5	; 0x05
    1624:	ee 80       	ldd	r14, Y+6	; 0x06
    1626:	ff 80       	ldd	r15, Y+7	; 0x07
    1628:	14 96       	adiw	r26, 0x04	; 4
    162a:	0d 91       	ld	r16, X+
    162c:	1d 91       	ld	r17, X+
    162e:	2d 91       	ld	r18, X+
    1630:	3c 91       	ld	r19, X
    1632:	17 97       	sbiw	r26, 0x07	; 7
    1634:	c5 01       	movw	r24, r10
    1636:	84 1b       	sub	r24, r20
    1638:	95 0b       	sbc	r25, r21
    163a:	dc 01       	movw	r26, r24
    163c:	97 ff       	sbrs	r25, 7
    163e:	04 c0       	rjmp	.+8      	; 0x1648 <_fpadd_parts+0xae>
    1640:	aa 27       	eor	r26, r26
    1642:	bb 27       	eor	r27, r27
    1644:	a8 1b       	sub	r26, r24
    1646:	b9 0b       	sbc	r27, r25
    1648:	a0 32       	cpi	r26, 0x20	; 32
    164a:	b1 05       	cpc	r27, r1
    164c:	0c f0       	brlt	.+2      	; 0x1650 <_fpadd_parts+0xb6>
    164e:	67 c0       	rjmp	.+206    	; 0x171e <_fpadd_parts+0x184>
    1650:	18 16       	cp	r1, r24
    1652:	19 06       	cpc	r1, r25
    1654:	84 f5       	brge	.+96     	; 0x16b6 <_fpadd_parts+0x11c>
    1656:	28 01       	movw	r4, r16
    1658:	39 01       	movw	r6, r18
    165a:	0a 2e       	mov	r0, r26
    165c:	04 c0       	rjmp	.+8      	; 0x1666 <_fpadd_parts+0xcc>
    165e:	76 94       	lsr	r7
    1660:	67 94       	ror	r6
    1662:	57 94       	ror	r5
    1664:	47 94       	ror	r4
    1666:	0a 94       	dec	r0
    1668:	d2 f7       	brpl	.-12     	; 0x165e <_fpadd_parts+0xc4>
    166a:	41 e0       	ldi	r20, 0x01	; 1
    166c:	50 e0       	ldi	r21, 0x00	; 0
    166e:	60 e0       	ldi	r22, 0x00	; 0
    1670:	70 e0       	ldi	r23, 0x00	; 0
    1672:	04 c0       	rjmp	.+8      	; 0x167c <_fpadd_parts+0xe2>
    1674:	44 0f       	add	r20, r20
    1676:	55 1f       	adc	r21, r21
    1678:	66 1f       	adc	r22, r22
    167a:	77 1f       	adc	r23, r23
    167c:	aa 95       	dec	r26
    167e:	d2 f7       	brpl	.-12     	; 0x1674 <_fpadd_parts+0xda>
    1680:	41 50       	subi	r20, 0x01	; 1
    1682:	50 40       	sbci	r21, 0x00	; 0
    1684:	60 40       	sbci	r22, 0x00	; 0
    1686:	70 40       	sbci	r23, 0x00	; 0
    1688:	40 23       	and	r20, r16
    168a:	51 23       	and	r21, r17
    168c:	62 23       	and	r22, r18
    168e:	73 23       	and	r23, r19
    1690:	81 e0       	ldi	r24, 0x01	; 1
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	a0 e0       	ldi	r26, 0x00	; 0
    1696:	b0 e0       	ldi	r27, 0x00	; 0
    1698:	41 15       	cp	r20, r1
    169a:	51 05       	cpc	r21, r1
    169c:	61 05       	cpc	r22, r1
    169e:	71 05       	cpc	r23, r1
    16a0:	19 f4       	brne	.+6      	; 0x16a8 <_fpadd_parts+0x10e>
    16a2:	80 e0       	ldi	r24, 0x00	; 0
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	dc 01       	movw	r26, r24
    16a8:	8c 01       	movw	r16, r24
    16aa:	9d 01       	movw	r18, r26
    16ac:	04 29       	or	r16, r4
    16ae:	15 29       	or	r17, r5
    16b0:	26 29       	or	r18, r6
    16b2:	37 29       	or	r19, r7
    16b4:	3f c0       	rjmp	.+126    	; 0x1734 <_fpadd_parts+0x19a>
    16b6:	00 97       	sbiw	r24, 0x00	; 0
    16b8:	e9 f1       	breq	.+122    	; 0x1734 <_fpadd_parts+0x19a>
    16ba:	aa 0e       	add	r10, r26
    16bc:	bb 1e       	adc	r11, r27
    16be:	26 01       	movw	r4, r12
    16c0:	37 01       	movw	r6, r14
    16c2:	0a 2e       	mov	r0, r26
    16c4:	04 c0       	rjmp	.+8      	; 0x16ce <_fpadd_parts+0x134>
    16c6:	76 94       	lsr	r7
    16c8:	67 94       	ror	r6
    16ca:	57 94       	ror	r5
    16cc:	47 94       	ror	r4
    16ce:	0a 94       	dec	r0
    16d0:	d2 f7       	brpl	.-12     	; 0x16c6 <_fpadd_parts+0x12c>
    16d2:	41 e0       	ldi	r20, 0x01	; 1
    16d4:	50 e0       	ldi	r21, 0x00	; 0
    16d6:	60 e0       	ldi	r22, 0x00	; 0
    16d8:	70 e0       	ldi	r23, 0x00	; 0
    16da:	04 c0       	rjmp	.+8      	; 0x16e4 <_fpadd_parts+0x14a>
    16dc:	44 0f       	add	r20, r20
    16de:	55 1f       	adc	r21, r21
    16e0:	66 1f       	adc	r22, r22
    16e2:	77 1f       	adc	r23, r23
    16e4:	aa 95       	dec	r26
    16e6:	d2 f7       	brpl	.-12     	; 0x16dc <_fpadd_parts+0x142>
    16e8:	41 50       	subi	r20, 0x01	; 1
    16ea:	50 40       	sbci	r21, 0x00	; 0
    16ec:	60 40       	sbci	r22, 0x00	; 0
    16ee:	70 40       	sbci	r23, 0x00	; 0
    16f0:	4c 21       	and	r20, r12
    16f2:	5d 21       	and	r21, r13
    16f4:	6e 21       	and	r22, r14
    16f6:	7f 21       	and	r23, r15
    16f8:	81 e0       	ldi	r24, 0x01	; 1
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	a0 e0       	ldi	r26, 0x00	; 0
    16fe:	b0 e0       	ldi	r27, 0x00	; 0
    1700:	41 15       	cp	r20, r1
    1702:	51 05       	cpc	r21, r1
    1704:	61 05       	cpc	r22, r1
    1706:	71 05       	cpc	r23, r1
    1708:	19 f4       	brne	.+6      	; 0x1710 <_fpadd_parts+0x176>
    170a:	80 e0       	ldi	r24, 0x00	; 0
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	dc 01       	movw	r26, r24
    1710:	6c 01       	movw	r12, r24
    1712:	7d 01       	movw	r14, r26
    1714:	c4 28       	or	r12, r4
    1716:	d5 28       	or	r13, r5
    1718:	e6 28       	or	r14, r6
    171a:	f7 28       	or	r15, r7
    171c:	0b c0       	rjmp	.+22     	; 0x1734 <_fpadd_parts+0x19a>
    171e:	4a 15       	cp	r20, r10
    1720:	5b 05       	cpc	r21, r11
    1722:	24 f4       	brge	.+8      	; 0x172c <_fpadd_parts+0x192>
    1724:	00 e0       	ldi	r16, 0x00	; 0
    1726:	10 e0       	ldi	r17, 0x00	; 0
    1728:	98 01       	movw	r18, r16
    172a:	04 c0       	rjmp	.+8      	; 0x1734 <_fpadd_parts+0x19a>
    172c:	5a 01       	movw	r10, r20
    172e:	cc 24       	eor	r12, r12
    1730:	dd 24       	eor	r13, r13
    1732:	76 01       	movw	r14, r12
    1734:	89 81       	ldd	r24, Y+1	; 0x01
    1736:	d4 01       	movw	r26, r8
    1738:	11 96       	adiw	r26, 0x01	; 1
    173a:	9c 91       	ld	r25, X
    173c:	11 97       	sbiw	r26, 0x01	; 1
    173e:	89 17       	cp	r24, r25
    1740:	09 f4       	brne	.+2      	; 0x1744 <_fpadd_parts+0x1aa>
    1742:	45 c0       	rjmp	.+138    	; 0x17ce <_fpadd_parts+0x234>
    1744:	88 23       	and	r24, r24
    1746:	29 f0       	breq	.+10     	; 0x1752 <_fpadd_parts+0x1b8>
    1748:	0c 19       	sub	r16, r12
    174a:	1d 09       	sbc	r17, r13
    174c:	2e 09       	sbc	r18, r14
    174e:	3f 09       	sbc	r19, r15
    1750:	08 c0       	rjmp	.+16     	; 0x1762 <_fpadd_parts+0x1c8>
    1752:	d7 01       	movw	r26, r14
    1754:	c6 01       	movw	r24, r12
    1756:	80 1b       	sub	r24, r16
    1758:	91 0b       	sbc	r25, r17
    175a:	a2 0b       	sbc	r26, r18
    175c:	b3 0b       	sbc	r27, r19
    175e:	8c 01       	movw	r16, r24
    1760:	9d 01       	movw	r18, r26
    1762:	37 fd       	sbrc	r19, 7
    1764:	04 c0       	rjmp	.+8      	; 0x176e <_fpadd_parts+0x1d4>
    1766:	11 82       	std	Z+1, r1	; 0x01
    1768:	b3 82       	std	Z+3, r11	; 0x03
    176a:	a2 82       	std	Z+2, r10	; 0x02
    176c:	0b c0       	rjmp	.+22     	; 0x1784 <_fpadd_parts+0x1ea>
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	81 83       	std	Z+1, r24	; 0x01
    1772:	b3 82       	std	Z+3, r11	; 0x03
    1774:	a2 82       	std	Z+2, r10	; 0x02
    1776:	30 95       	com	r19
    1778:	20 95       	com	r18
    177a:	10 95       	com	r17
    177c:	01 95       	neg	r16
    177e:	1f 4f       	sbci	r17, 0xFF	; 255
    1780:	2f 4f       	sbci	r18, 0xFF	; 255
    1782:	3f 4f       	sbci	r19, 0xFF	; 255
    1784:	04 83       	std	Z+4, r16	; 0x04
    1786:	15 83       	std	Z+5, r17	; 0x05
    1788:	26 83       	std	Z+6, r18	; 0x06
    178a:	37 83       	std	Z+7, r19	; 0x07
    178c:	0d c0       	rjmp	.+26     	; 0x17a8 <_fpadd_parts+0x20e>
    178e:	88 0f       	add	r24, r24
    1790:	99 1f       	adc	r25, r25
    1792:	aa 1f       	adc	r26, r26
    1794:	bb 1f       	adc	r27, r27
    1796:	84 83       	std	Z+4, r24	; 0x04
    1798:	95 83       	std	Z+5, r25	; 0x05
    179a:	a6 83       	std	Z+6, r26	; 0x06
    179c:	b7 83       	std	Z+7, r27	; 0x07
    179e:	82 81       	ldd	r24, Z+2	; 0x02
    17a0:	93 81       	ldd	r25, Z+3	; 0x03
    17a2:	01 97       	sbiw	r24, 0x01	; 1
    17a4:	93 83       	std	Z+3, r25	; 0x03
    17a6:	82 83       	std	Z+2, r24	; 0x02
    17a8:	84 81       	ldd	r24, Z+4	; 0x04
    17aa:	95 81       	ldd	r25, Z+5	; 0x05
    17ac:	a6 81       	ldd	r26, Z+6	; 0x06
    17ae:	b7 81       	ldd	r27, Z+7	; 0x07
    17b0:	ac 01       	movw	r20, r24
    17b2:	bd 01       	movw	r22, r26
    17b4:	41 50       	subi	r20, 0x01	; 1
    17b6:	50 40       	sbci	r21, 0x00	; 0
    17b8:	60 40       	sbci	r22, 0x00	; 0
    17ba:	70 40       	sbci	r23, 0x00	; 0
    17bc:	4f 3f       	cpi	r20, 0xFF	; 255
    17be:	2f ef       	ldi	r18, 0xFF	; 255
    17c0:	52 07       	cpc	r21, r18
    17c2:	2f ef       	ldi	r18, 0xFF	; 255
    17c4:	62 07       	cpc	r22, r18
    17c6:	2f e3       	ldi	r18, 0x3F	; 63
    17c8:	72 07       	cpc	r23, r18
    17ca:	08 f3       	brcs	.-62     	; 0x178e <_fpadd_parts+0x1f4>
    17cc:	0b c0       	rjmp	.+22     	; 0x17e4 <_fpadd_parts+0x24a>
    17ce:	81 83       	std	Z+1, r24	; 0x01
    17d0:	b3 82       	std	Z+3, r11	; 0x03
    17d2:	a2 82       	std	Z+2, r10	; 0x02
    17d4:	0c 0d       	add	r16, r12
    17d6:	1d 1d       	adc	r17, r13
    17d8:	2e 1d       	adc	r18, r14
    17da:	3f 1d       	adc	r19, r15
    17dc:	04 83       	std	Z+4, r16	; 0x04
    17de:	15 83       	std	Z+5, r17	; 0x05
    17e0:	26 83       	std	Z+6, r18	; 0x06
    17e2:	37 83       	std	Z+7, r19	; 0x07
    17e4:	83 e0       	ldi	r24, 0x03	; 3
    17e6:	80 83       	st	Z, r24
    17e8:	44 81       	ldd	r20, Z+4	; 0x04
    17ea:	55 81       	ldd	r21, Z+5	; 0x05
    17ec:	66 81       	ldd	r22, Z+6	; 0x06
    17ee:	77 81       	ldd	r23, Z+7	; 0x07
    17f0:	77 ff       	sbrs	r23, 7
    17f2:	1d c0       	rjmp	.+58     	; 0x182e <_fpadd_parts+0x294>
    17f4:	db 01       	movw	r26, r22
    17f6:	ca 01       	movw	r24, r20
    17f8:	81 70       	andi	r24, 0x01	; 1
    17fa:	90 70       	andi	r25, 0x00	; 0
    17fc:	a0 70       	andi	r26, 0x00	; 0
    17fe:	b0 70       	andi	r27, 0x00	; 0
    1800:	76 95       	lsr	r23
    1802:	67 95       	ror	r22
    1804:	57 95       	ror	r21
    1806:	47 95       	ror	r20
    1808:	84 2b       	or	r24, r20
    180a:	95 2b       	or	r25, r21
    180c:	a6 2b       	or	r26, r22
    180e:	b7 2b       	or	r27, r23
    1810:	84 83       	std	Z+4, r24	; 0x04
    1812:	95 83       	std	Z+5, r25	; 0x05
    1814:	a6 83       	std	Z+6, r26	; 0x06
    1816:	b7 83       	std	Z+7, r27	; 0x07
    1818:	82 81       	ldd	r24, Z+2	; 0x02
    181a:	93 81       	ldd	r25, Z+3	; 0x03
    181c:	01 96       	adiw	r24, 0x01	; 1
    181e:	93 83       	std	Z+3, r25	; 0x03
    1820:	82 83       	std	Z+2, r24	; 0x02
    1822:	05 c0       	rjmp	.+10     	; 0x182e <_fpadd_parts+0x294>
    1824:	c3 ed       	ldi	r28, 0xD3	; 211
    1826:	d4 e0       	ldi	r29, 0x04	; 4
    1828:	03 c0       	rjmp	.+6      	; 0x1830 <_fpadd_parts+0x296>
    182a:	e4 01       	movw	r28, r8
    182c:	01 c0       	rjmp	.+2      	; 0x1830 <_fpadd_parts+0x296>
    182e:	ef 01       	movw	r28, r30
    1830:	ce 01       	movw	r24, r28
    1832:	cd b7       	in	r28, 0x3d	; 61
    1834:	de b7       	in	r29, 0x3e	; 62
    1836:	e0 e1       	ldi	r30, 0x10	; 16
    1838:	0c 94 67 11 	jmp	0x22ce	; 0x22ce <__epilogue_restores__+0x4>

0000183c <__addsf3>:
    183c:	a0 e2       	ldi	r26, 0x20	; 32
    183e:	b0 e0       	ldi	r27, 0x00	; 0
    1840:	e4 e2       	ldi	r30, 0x24	; 36
    1842:	fc e0       	ldi	r31, 0x0C	; 12
    1844:	0c 94 59 11 	jmp	0x22b2	; 0x22b2 <__prologue_saves__+0x20>
    1848:	dc 01       	movw	r26, r24
    184a:	cb 01       	movw	r24, r22
    184c:	8d 83       	std	Y+5, r24	; 0x05
    184e:	9e 83       	std	Y+6, r25	; 0x06
    1850:	af 83       	std	Y+7, r26	; 0x07
    1852:	b8 87       	std	Y+8, r27	; 0x08
    1854:	29 83       	std	Y+1, r18	; 0x01
    1856:	3a 83       	std	Y+2, r19	; 0x02
    1858:	4b 83       	std	Y+3, r20	; 0x03
    185a:	5c 83       	std	Y+4, r21	; 0x04
    185c:	ce 01       	movw	r24, r28
    185e:	05 96       	adiw	r24, 0x05	; 5
    1860:	be 01       	movw	r22, r28
    1862:	67 5e       	subi	r22, 0xE7	; 231
    1864:	7f 4f       	sbci	r23, 0xFF	; 255
    1866:	0e 94 2b 10 	call	0x2056	; 0x2056 <__unpack_f>
    186a:	ce 01       	movw	r24, r28
    186c:	01 96       	adiw	r24, 0x01	; 1
    186e:	be 01       	movw	r22, r28
    1870:	6f 5e       	subi	r22, 0xEF	; 239
    1872:	7f 4f       	sbci	r23, 0xFF	; 255
    1874:	0e 94 2b 10 	call	0x2056	; 0x2056 <__unpack_f>
    1878:	ce 01       	movw	r24, r28
    187a:	49 96       	adiw	r24, 0x19	; 25
    187c:	be 01       	movw	r22, r28
    187e:	6f 5e       	subi	r22, 0xEF	; 239
    1880:	7f 4f       	sbci	r23, 0xFF	; 255
    1882:	ae 01       	movw	r20, r28
    1884:	47 5f       	subi	r20, 0xF7	; 247
    1886:	5f 4f       	sbci	r21, 0xFF	; 255
    1888:	0e 94 cd 0a 	call	0x159a	; 0x159a <_fpadd_parts>
    188c:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <__pack_f>
    1890:	46 2f       	mov	r20, r22
    1892:	57 2f       	mov	r21, r23
    1894:	68 2f       	mov	r22, r24
    1896:	79 2f       	mov	r23, r25
    1898:	cb 01       	movw	r24, r22
    189a:	ba 01       	movw	r22, r20
    189c:	a0 96       	adiw	r28, 0x20	; 32
    189e:	e2 e0       	ldi	r30, 0x02	; 2
    18a0:	0c 94 75 11 	jmp	0x22ea	; 0x22ea <__epilogue_restores__+0x20>

000018a4 <__subsf3>:
    18a4:	a0 e2       	ldi	r26, 0x20	; 32
    18a6:	b0 e0       	ldi	r27, 0x00	; 0
    18a8:	e8 e5       	ldi	r30, 0x58	; 88
    18aa:	fc e0       	ldi	r31, 0x0C	; 12
    18ac:	0c 94 59 11 	jmp	0x22b2	; 0x22b2 <__prologue_saves__+0x20>
    18b0:	dc 01       	movw	r26, r24
    18b2:	cb 01       	movw	r24, r22
    18b4:	8d 83       	std	Y+5, r24	; 0x05
    18b6:	9e 83       	std	Y+6, r25	; 0x06
    18b8:	af 83       	std	Y+7, r26	; 0x07
    18ba:	b8 87       	std	Y+8, r27	; 0x08
    18bc:	29 83       	std	Y+1, r18	; 0x01
    18be:	3a 83       	std	Y+2, r19	; 0x02
    18c0:	4b 83       	std	Y+3, r20	; 0x03
    18c2:	5c 83       	std	Y+4, r21	; 0x04
    18c4:	ce 01       	movw	r24, r28
    18c6:	05 96       	adiw	r24, 0x05	; 5
    18c8:	be 01       	movw	r22, r28
    18ca:	67 5e       	subi	r22, 0xE7	; 231
    18cc:	7f 4f       	sbci	r23, 0xFF	; 255
    18ce:	0e 94 2b 10 	call	0x2056	; 0x2056 <__unpack_f>
    18d2:	ce 01       	movw	r24, r28
    18d4:	01 96       	adiw	r24, 0x01	; 1
    18d6:	be 01       	movw	r22, r28
    18d8:	6f 5e       	subi	r22, 0xEF	; 239
    18da:	7f 4f       	sbci	r23, 0xFF	; 255
    18dc:	0e 94 2b 10 	call	0x2056	; 0x2056 <__unpack_f>
    18e0:	8a 89       	ldd	r24, Y+18	; 0x12
    18e2:	91 e0       	ldi	r25, 0x01	; 1
    18e4:	89 27       	eor	r24, r25
    18e6:	8a 8b       	std	Y+18, r24	; 0x12
    18e8:	ce 01       	movw	r24, r28
    18ea:	49 96       	adiw	r24, 0x19	; 25
    18ec:	be 01       	movw	r22, r28
    18ee:	6f 5e       	subi	r22, 0xEF	; 239
    18f0:	7f 4f       	sbci	r23, 0xFF	; 255
    18f2:	ae 01       	movw	r20, r28
    18f4:	47 5f       	subi	r20, 0xF7	; 247
    18f6:	5f 4f       	sbci	r21, 0xFF	; 255
    18f8:	0e 94 cd 0a 	call	0x159a	; 0x159a <_fpadd_parts>
    18fc:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <__pack_f>
    1900:	46 2f       	mov	r20, r22
    1902:	57 2f       	mov	r21, r23
    1904:	68 2f       	mov	r22, r24
    1906:	79 2f       	mov	r23, r25
    1908:	cb 01       	movw	r24, r22
    190a:	ba 01       	movw	r22, r20
    190c:	a0 96       	adiw	r28, 0x20	; 32
    190e:	e2 e0       	ldi	r30, 0x02	; 2
    1910:	0c 94 75 11 	jmp	0x22ea	; 0x22ea <__epilogue_restores__+0x20>

00001914 <__mulsf3>:
    1914:	a0 e2       	ldi	r26, 0x20	; 32
    1916:	b0 e0       	ldi	r27, 0x00	; 0
    1918:	e0 e9       	ldi	r30, 0x90	; 144
    191a:	fc e0       	ldi	r31, 0x0C	; 12
    191c:	0c 94 4b 11 	jmp	0x2296	; 0x2296 <__prologue_saves__+0x4>
    1920:	dc 01       	movw	r26, r24
    1922:	cb 01       	movw	r24, r22
    1924:	8d 83       	std	Y+5, r24	; 0x05
    1926:	9e 83       	std	Y+6, r25	; 0x06
    1928:	af 83       	std	Y+7, r26	; 0x07
    192a:	b8 87       	std	Y+8, r27	; 0x08
    192c:	29 83       	std	Y+1, r18	; 0x01
    192e:	3a 83       	std	Y+2, r19	; 0x02
    1930:	4b 83       	std	Y+3, r20	; 0x03
    1932:	5c 83       	std	Y+4, r21	; 0x04
    1934:	ce 01       	movw	r24, r28
    1936:	05 96       	adiw	r24, 0x05	; 5
    1938:	be 01       	movw	r22, r28
    193a:	67 5e       	subi	r22, 0xE7	; 231
    193c:	7f 4f       	sbci	r23, 0xFF	; 255
    193e:	0e 94 2b 10 	call	0x2056	; 0x2056 <__unpack_f>
    1942:	ce 01       	movw	r24, r28
    1944:	01 96       	adiw	r24, 0x01	; 1
    1946:	be 01       	movw	r22, r28
    1948:	6f 5e       	subi	r22, 0xEF	; 239
    194a:	7f 4f       	sbci	r23, 0xFF	; 255
    194c:	0e 94 2b 10 	call	0x2056	; 0x2056 <__unpack_f>
    1950:	99 8d       	ldd	r25, Y+25	; 0x19
    1952:	92 30       	cpi	r25, 0x02	; 2
    1954:	78 f0       	brcs	.+30     	; 0x1974 <__mulsf3+0x60>
    1956:	89 89       	ldd	r24, Y+17	; 0x11
    1958:	82 30       	cpi	r24, 0x02	; 2
    195a:	c0 f0       	brcs	.+48     	; 0x198c <__mulsf3+0x78>
    195c:	94 30       	cpi	r25, 0x04	; 4
    195e:	19 f4       	brne	.+6      	; 0x1966 <__mulsf3+0x52>
    1960:	82 30       	cpi	r24, 0x02	; 2
    1962:	41 f4       	brne	.+16     	; 0x1974 <__mulsf3+0x60>
    1964:	ca c0       	rjmp	.+404    	; 0x1afa <__mulsf3+0x1e6>
    1966:	84 30       	cpi	r24, 0x04	; 4
    1968:	19 f4       	brne	.+6      	; 0x1970 <__mulsf3+0x5c>
    196a:	92 30       	cpi	r25, 0x02	; 2
    196c:	79 f4       	brne	.+30     	; 0x198c <__mulsf3+0x78>
    196e:	c5 c0       	rjmp	.+394    	; 0x1afa <__mulsf3+0x1e6>
    1970:	92 30       	cpi	r25, 0x02	; 2
    1972:	51 f4       	brne	.+20     	; 0x1988 <__mulsf3+0x74>
    1974:	81 e0       	ldi	r24, 0x01	; 1
    1976:	2a 8d       	ldd	r18, Y+26	; 0x1a
    1978:	9a 89       	ldd	r25, Y+18	; 0x12
    197a:	29 17       	cp	r18, r25
    197c:	09 f4       	brne	.+2      	; 0x1980 <__mulsf3+0x6c>
    197e:	80 e0       	ldi	r24, 0x00	; 0
    1980:	8a 8f       	std	Y+26, r24	; 0x1a
    1982:	ce 01       	movw	r24, r28
    1984:	49 96       	adiw	r24, 0x19	; 25
    1986:	bb c0       	rjmp	.+374    	; 0x1afe <__mulsf3+0x1ea>
    1988:	82 30       	cpi	r24, 0x02	; 2
    198a:	51 f4       	brne	.+20     	; 0x19a0 <__mulsf3+0x8c>
    198c:	81 e0       	ldi	r24, 0x01	; 1
    198e:	2a 8d       	ldd	r18, Y+26	; 0x1a
    1990:	9a 89       	ldd	r25, Y+18	; 0x12
    1992:	29 17       	cp	r18, r25
    1994:	09 f4       	brne	.+2      	; 0x1998 <__mulsf3+0x84>
    1996:	80 e0       	ldi	r24, 0x00	; 0
    1998:	8a 8b       	std	Y+18, r24	; 0x12
    199a:	ce 01       	movw	r24, r28
    199c:	41 96       	adiw	r24, 0x11	; 17
    199e:	af c0       	rjmp	.+350    	; 0x1afe <__mulsf3+0x1ea>
    19a0:	4d 8c       	ldd	r4, Y+29	; 0x1d
    19a2:	5e 8c       	ldd	r5, Y+30	; 0x1e
    19a4:	6f 8c       	ldd	r6, Y+31	; 0x1f
    19a6:	78 a0       	lds	r23, 0x88
    19a8:	0d 89       	ldd	r16, Y+21	; 0x15
    19aa:	1e 89       	ldd	r17, Y+22	; 0x16
    19ac:	2f 89       	ldd	r18, Y+23	; 0x17
    19ae:	38 8d       	ldd	r19, Y+24	; 0x18
    19b0:	e0 e2       	ldi	r30, 0x20	; 32
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	40 e0       	ldi	r20, 0x00	; 0
    19b6:	50 e0       	ldi	r21, 0x00	; 0
    19b8:	ba 01       	movw	r22, r20
    19ba:	88 24       	eor	r8, r8
    19bc:	99 24       	eor	r9, r9
    19be:	54 01       	movw	r10, r8
    19c0:	cc 24       	eor	r12, r12
    19c2:	dd 24       	eor	r13, r13
    19c4:	76 01       	movw	r14, r12
    19c6:	c2 01       	movw	r24, r4
    19c8:	81 70       	andi	r24, 0x01	; 1
    19ca:	90 70       	andi	r25, 0x00	; 0
    19cc:	00 97       	sbiw	r24, 0x00	; 0
    19ce:	d1 f0       	breq	.+52     	; 0x1a04 <__mulsf3+0xf0>
    19d0:	c0 0e       	add	r12, r16
    19d2:	d1 1e       	adc	r13, r17
    19d4:	e2 1e       	adc	r14, r18
    19d6:	f3 1e       	adc	r15, r19
    19d8:	db 01       	movw	r26, r22
    19da:	ca 01       	movw	r24, r20
    19dc:	88 0d       	add	r24, r8
    19de:	99 1d       	adc	r25, r9
    19e0:	aa 1d       	adc	r26, r10
    19e2:	bb 1d       	adc	r27, r11
    19e4:	41 e0       	ldi	r20, 0x01	; 1
    19e6:	50 e0       	ldi	r21, 0x00	; 0
    19e8:	60 e0       	ldi	r22, 0x00	; 0
    19ea:	70 e0       	ldi	r23, 0x00	; 0
    19ec:	c0 16       	cp	r12, r16
    19ee:	d1 06       	cpc	r13, r17
    19f0:	e2 06       	cpc	r14, r18
    19f2:	f3 06       	cpc	r15, r19
    19f4:	18 f0       	brcs	.+6      	; 0x19fc <__mulsf3+0xe8>
    19f6:	40 e0       	ldi	r20, 0x00	; 0
    19f8:	50 e0       	ldi	r21, 0x00	; 0
    19fa:	ba 01       	movw	r22, r20
    19fc:	48 0f       	add	r20, r24
    19fe:	59 1f       	adc	r21, r25
    1a00:	6a 1f       	adc	r22, r26
    1a02:	7b 1f       	adc	r23, r27
    1a04:	88 0c       	add	r8, r8
    1a06:	99 1c       	adc	r9, r9
    1a08:	aa 1c       	adc	r10, r10
    1a0a:	bb 1c       	adc	r11, r11
    1a0c:	37 ff       	sbrs	r19, 7
    1a0e:	08 c0       	rjmp	.+16     	; 0x1a20 <__mulsf3+0x10c>
    1a10:	81 e0       	ldi	r24, 0x01	; 1
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	a0 e0       	ldi	r26, 0x00	; 0
    1a16:	b0 e0       	ldi	r27, 0x00	; 0
    1a18:	88 2a       	or	r8, r24
    1a1a:	99 2a       	or	r9, r25
    1a1c:	aa 2a       	or	r10, r26
    1a1e:	bb 2a       	or	r11, r27
    1a20:	00 0f       	add	r16, r16
    1a22:	11 1f       	adc	r17, r17
    1a24:	22 1f       	adc	r18, r18
    1a26:	33 1f       	adc	r19, r19
    1a28:	76 94       	lsr	r7
    1a2a:	67 94       	ror	r6
    1a2c:	57 94       	ror	r5
    1a2e:	47 94       	ror	r4
    1a30:	31 97       	sbiw	r30, 0x01	; 1
    1a32:	49 f6       	brne	.-110    	; 0x19c6 <__mulsf3+0xb2>
    1a34:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a36:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a38:	2b 89       	ldd	r18, Y+19	; 0x13
    1a3a:	3c 89       	ldd	r19, Y+20	; 0x14
    1a3c:	82 0f       	add	r24, r18
    1a3e:	93 1f       	adc	r25, r19
    1a40:	02 96       	adiw	r24, 0x02	; 2
    1a42:	9c 87       	std	Y+12, r25	; 0x0c
    1a44:	8b 87       	std	Y+11, r24	; 0x0b
    1a46:	81 e0       	ldi	r24, 0x01	; 1
    1a48:	2a 8d       	ldd	r18, Y+26	; 0x1a
    1a4a:	9a 89       	ldd	r25, Y+18	; 0x12
    1a4c:	29 17       	cp	r18, r25
    1a4e:	09 f4       	brne	.+2      	; 0x1a52 <__mulsf3+0x13e>
    1a50:	80 e0       	ldi	r24, 0x00	; 0
    1a52:	8a 87       	std	Y+10, r24	; 0x0a
    1a54:	2b 85       	ldd	r18, Y+11	; 0x0b
    1a56:	3c 85       	ldd	r19, Y+12	; 0x0c
    1a58:	17 c0       	rjmp	.+46     	; 0x1a88 <__mulsf3+0x174>
    1a5a:	ca 01       	movw	r24, r20
    1a5c:	81 70       	andi	r24, 0x01	; 1
    1a5e:	90 70       	andi	r25, 0x00	; 0
    1a60:	00 97       	sbiw	r24, 0x00	; 0
    1a62:	61 f0       	breq	.+24     	; 0x1a7c <__mulsf3+0x168>
    1a64:	f6 94       	lsr	r15
    1a66:	e7 94       	ror	r14
    1a68:	d7 94       	ror	r13
    1a6a:	c7 94       	ror	r12
    1a6c:	80 e0       	ldi	r24, 0x00	; 0
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	a0 e0       	ldi	r26, 0x00	; 0
    1a72:	b0 e8       	ldi	r27, 0x80	; 128
    1a74:	c8 2a       	or	r12, r24
    1a76:	d9 2a       	or	r13, r25
    1a78:	ea 2a       	or	r14, r26
    1a7a:	fb 2a       	or	r15, r27
    1a7c:	76 95       	lsr	r23
    1a7e:	67 95       	ror	r22
    1a80:	57 95       	ror	r21
    1a82:	47 95       	ror	r20
    1a84:	2f 5f       	subi	r18, 0xFF	; 255
    1a86:	3f 4f       	sbci	r19, 0xFF	; 255
    1a88:	77 fd       	sbrc	r23, 7
    1a8a:	e7 cf       	rjmp	.-50     	; 0x1a5a <__mulsf3+0x146>
    1a8c:	c9 01       	movw	r24, r18
    1a8e:	0b c0       	rjmp	.+22     	; 0x1aa6 <__mulsf3+0x192>
    1a90:	44 0f       	add	r20, r20
    1a92:	55 1f       	adc	r21, r21
    1a94:	66 1f       	adc	r22, r22
    1a96:	77 1f       	adc	r23, r23
    1a98:	f7 fc       	sbrc	r15, 7
    1a9a:	41 60       	ori	r20, 0x01	; 1
    1a9c:	cc 0c       	add	r12, r12
    1a9e:	dd 1c       	adc	r13, r13
    1aa0:	ee 1c       	adc	r14, r14
    1aa2:	ff 1c       	adc	r15, r15
    1aa4:	01 97       	sbiw	r24, 0x01	; 1
    1aa6:	40 30       	cpi	r20, 0x00	; 0
    1aa8:	a0 e0       	ldi	r26, 0x00	; 0
    1aaa:	5a 07       	cpc	r21, r26
    1aac:	a0 e0       	ldi	r26, 0x00	; 0
    1aae:	6a 07       	cpc	r22, r26
    1ab0:	a0 e4       	ldi	r26, 0x40	; 64
    1ab2:	7a 07       	cpc	r23, r26
    1ab4:	68 f3       	brcs	.-38     	; 0x1a90 <__mulsf3+0x17c>
    1ab6:	8b 87       	std	Y+11, r24	; 0x0b
    1ab8:	9c 87       	std	Y+12, r25	; 0x0c
    1aba:	db 01       	movw	r26, r22
    1abc:	ca 01       	movw	r24, r20
    1abe:	8f 77       	andi	r24, 0x7F	; 127
    1ac0:	90 70       	andi	r25, 0x00	; 0
    1ac2:	a0 70       	andi	r26, 0x00	; 0
    1ac4:	b0 70       	andi	r27, 0x00	; 0
    1ac6:	80 34       	cpi	r24, 0x40	; 64
    1ac8:	91 05       	cpc	r25, r1
    1aca:	a1 05       	cpc	r26, r1
    1acc:	b1 05       	cpc	r27, r1
    1ace:	61 f4       	brne	.+24     	; 0x1ae8 <__mulsf3+0x1d4>
    1ad0:	47 fd       	sbrc	r20, 7
    1ad2:	0a c0       	rjmp	.+20     	; 0x1ae8 <__mulsf3+0x1d4>
    1ad4:	c1 14       	cp	r12, r1
    1ad6:	d1 04       	cpc	r13, r1
    1ad8:	e1 04       	cpc	r14, r1
    1ada:	f1 04       	cpc	r15, r1
    1adc:	29 f0       	breq	.+10     	; 0x1ae8 <__mulsf3+0x1d4>
    1ade:	40 5c       	subi	r20, 0xC0	; 192
    1ae0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ae2:	6f 4f       	sbci	r22, 0xFF	; 255
    1ae4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ae6:	40 78       	andi	r20, 0x80	; 128
    1ae8:	4d 87       	std	Y+13, r20	; 0x0d
    1aea:	5e 87       	std	Y+14, r21	; 0x0e
    1aec:	6f 87       	std	Y+15, r22	; 0x0f
    1aee:	78 8b       	std	Y+16, r23	; 0x10
    1af0:	83 e0       	ldi	r24, 0x03	; 3
    1af2:	89 87       	std	Y+9, r24	; 0x09
    1af4:	ce 01       	movw	r24, r28
    1af6:	09 96       	adiw	r24, 0x09	; 9
    1af8:	02 c0       	rjmp	.+4      	; 0x1afe <__mulsf3+0x1ea>
    1afa:	83 ed       	ldi	r24, 0xD3	; 211
    1afc:	94 e0       	ldi	r25, 0x04	; 4
    1afe:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <__pack_f>
    1b02:	46 2f       	mov	r20, r22
    1b04:	57 2f       	mov	r21, r23
    1b06:	68 2f       	mov	r22, r24
    1b08:	79 2f       	mov	r23, r25
    1b0a:	cb 01       	movw	r24, r22
    1b0c:	ba 01       	movw	r22, r20
    1b0e:	a0 96       	adiw	r28, 0x20	; 32
    1b10:	e0 e1       	ldi	r30, 0x10	; 16
    1b12:	0c 94 67 11 	jmp	0x22ce	; 0x22ce <__epilogue_restores__+0x4>

00001b16 <__gesf2>:
    1b16:	a8 e1       	ldi	r26, 0x18	; 24
    1b18:	b0 e0       	ldi	r27, 0x00	; 0
    1b1a:	e1 e9       	ldi	r30, 0x91	; 145
    1b1c:	fd e0       	ldi	r31, 0x0D	; 13
    1b1e:	0c 94 59 11 	jmp	0x22b2	; 0x22b2 <__prologue_saves__+0x20>
    1b22:	dc 01       	movw	r26, r24
    1b24:	cb 01       	movw	r24, r22
    1b26:	8d 83       	std	Y+5, r24	; 0x05
    1b28:	9e 83       	std	Y+6, r25	; 0x06
    1b2a:	af 83       	std	Y+7, r26	; 0x07
    1b2c:	b8 87       	std	Y+8, r27	; 0x08
    1b2e:	29 83       	std	Y+1, r18	; 0x01
    1b30:	3a 83       	std	Y+2, r19	; 0x02
    1b32:	4b 83       	std	Y+3, r20	; 0x03
    1b34:	5c 83       	std	Y+4, r21	; 0x04
    1b36:	ce 01       	movw	r24, r28
    1b38:	05 96       	adiw	r24, 0x05	; 5
    1b3a:	be 01       	movw	r22, r28
    1b3c:	6f 5e       	subi	r22, 0xEF	; 239
    1b3e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b40:	0e 94 2b 10 	call	0x2056	; 0x2056 <__unpack_f>
    1b44:	ce 01       	movw	r24, r28
    1b46:	01 96       	adiw	r24, 0x01	; 1
    1b48:	be 01       	movw	r22, r28
    1b4a:	67 5f       	subi	r22, 0xF7	; 247
    1b4c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b4e:	0e 94 2b 10 	call	0x2056	; 0x2056 <__unpack_f>
    1b52:	89 89       	ldd	r24, Y+17	; 0x11
    1b54:	82 30       	cpi	r24, 0x02	; 2
    1b56:	58 f0       	brcs	.+22     	; 0x1b6e <__gesf2+0x58>
    1b58:	89 85       	ldd	r24, Y+9	; 0x09
    1b5a:	82 30       	cpi	r24, 0x02	; 2
    1b5c:	40 f0       	brcs	.+16     	; 0x1b6e <__gesf2+0x58>
    1b5e:	ce 01       	movw	r24, r28
    1b60:	41 96       	adiw	r24, 0x11	; 17
    1b62:	be 01       	movw	r22, r28
    1b64:	67 5f       	subi	r22, 0xF7	; 247
    1b66:	7f 4f       	sbci	r23, 0xFF	; 255
    1b68:	0e 94 94 10 	call	0x2128	; 0x2128 <__fpcmp_parts_f>
    1b6c:	01 c0       	rjmp	.+2      	; 0x1b70 <__gesf2+0x5a>
    1b6e:	8f ef       	ldi	r24, 0xFF	; 255
    1b70:	68 96       	adiw	r28, 0x18	; 24
    1b72:	e2 e0       	ldi	r30, 0x02	; 2
    1b74:	0c 94 75 11 	jmp	0x22ea	; 0x22ea <__epilogue_restores__+0x20>

00001b78 <__floatsisf>:
    1b78:	cf 92       	push	r12
    1b7a:	df 92       	push	r13
    1b7c:	ef 92       	push	r14
    1b7e:	ff 92       	push	r15
    1b80:	cf 93       	push	r28
    1b82:	df 93       	push	r29
    1b84:	cd b7       	in	r28, 0x3d	; 61
    1b86:	de b7       	in	r29, 0x3e	; 62
    1b88:	28 97       	sbiw	r28, 0x08	; 8
    1b8a:	0f b6       	in	r0, 0x3f	; 63
    1b8c:	f8 94       	cli
    1b8e:	de bf       	out	0x3e, r29	; 62
    1b90:	0f be       	out	0x3f, r0	; 63
    1b92:	cd bf       	out	0x3d, r28	; 61
    1b94:	6b 01       	movw	r12, r22
    1b96:	7c 01       	movw	r14, r24
    1b98:	83 e0       	ldi	r24, 0x03	; 3
    1b9a:	89 83       	std	Y+1, r24	; 0x01
    1b9c:	d7 01       	movw	r26, r14
    1b9e:	c6 01       	movw	r24, r12
    1ba0:	88 27       	eor	r24, r24
    1ba2:	b7 fd       	sbrc	r27, 7
    1ba4:	83 95       	inc	r24
    1ba6:	99 27       	eor	r25, r25
    1ba8:	aa 27       	eor	r26, r26
    1baa:	bb 27       	eor	r27, r27
    1bac:	28 2f       	mov	r18, r24
    1bae:	8a 83       	std	Y+2, r24	; 0x02
    1bb0:	c1 14       	cp	r12, r1
    1bb2:	d1 04       	cpc	r13, r1
    1bb4:	e1 04       	cpc	r14, r1
    1bb6:	f1 04       	cpc	r15, r1
    1bb8:	19 f4       	brne	.+6      	; 0x1bc0 <__floatsisf+0x48>
    1bba:	82 e0       	ldi	r24, 0x02	; 2
    1bbc:	89 83       	std	Y+1, r24	; 0x01
    1bbe:	35 c0       	rjmp	.+106    	; 0x1c2a <__floatsisf+0xb2>
    1bc0:	8e e1       	ldi	r24, 0x1E	; 30
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	9c 83       	std	Y+4, r25	; 0x04
    1bc6:	8b 83       	std	Y+3, r24	; 0x03
    1bc8:	22 23       	and	r18, r18
    1bca:	89 f0       	breq	.+34     	; 0x1bee <__floatsisf+0x76>
    1bcc:	80 e0       	ldi	r24, 0x00	; 0
    1bce:	c8 16       	cp	r12, r24
    1bd0:	80 e0       	ldi	r24, 0x00	; 0
    1bd2:	d8 06       	cpc	r13, r24
    1bd4:	80 e0       	ldi	r24, 0x00	; 0
    1bd6:	e8 06       	cpc	r14, r24
    1bd8:	80 e8       	ldi	r24, 0x80	; 128
    1bda:	f8 06       	cpc	r15, r24
    1bdc:	59 f1       	breq	.+86     	; 0x1c34 <__floatsisf+0xbc>
    1bde:	f0 94       	com	r15
    1be0:	e0 94       	com	r14
    1be2:	d0 94       	com	r13
    1be4:	c0 94       	com	r12
    1be6:	c1 1c       	adc	r12, r1
    1be8:	d1 1c       	adc	r13, r1
    1bea:	e1 1c       	adc	r14, r1
    1bec:	f1 1c       	adc	r15, r1
    1bee:	cd 82       	std	Y+5, r12	; 0x05
    1bf0:	de 82       	std	Y+6, r13	; 0x06
    1bf2:	ef 82       	std	Y+7, r14	; 0x07
    1bf4:	f8 86       	std	Y+8, r15	; 0x08
    1bf6:	c7 01       	movw	r24, r14
    1bf8:	b6 01       	movw	r22, r12
    1bfa:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <__clzsi2>
    1bfe:	01 97       	sbiw	r24, 0x01	; 1
    1c00:	18 16       	cp	r1, r24
    1c02:	19 06       	cpc	r1, r25
    1c04:	94 f4       	brge	.+36     	; 0x1c2a <__floatsisf+0xb2>
    1c06:	08 2e       	mov	r0, r24
    1c08:	04 c0       	rjmp	.+8      	; 0x1c12 <__floatsisf+0x9a>
    1c0a:	cc 0c       	add	r12, r12
    1c0c:	dd 1c       	adc	r13, r13
    1c0e:	ee 1c       	adc	r14, r14
    1c10:	ff 1c       	adc	r15, r15
    1c12:	0a 94       	dec	r0
    1c14:	d2 f7       	brpl	.-12     	; 0x1c0a <__floatsisf+0x92>
    1c16:	cd 82       	std	Y+5, r12	; 0x05
    1c18:	de 82       	std	Y+6, r13	; 0x06
    1c1a:	ef 82       	std	Y+7, r14	; 0x07
    1c1c:	f8 86       	std	Y+8, r15	; 0x08
    1c1e:	2e e1       	ldi	r18, 0x1E	; 30
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	28 1b       	sub	r18, r24
    1c24:	39 0b       	sbc	r19, r25
    1c26:	3c 83       	std	Y+4, r19	; 0x04
    1c28:	2b 83       	std	Y+3, r18	; 0x03
    1c2a:	ce 01       	movw	r24, r28
    1c2c:	01 96       	adiw	r24, 0x01	; 1
    1c2e:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <__pack_f>
    1c32:	04 c0       	rjmp	.+8      	; 0x1c3c <__floatsisf+0xc4>
    1c34:	60 e0       	ldi	r22, 0x00	; 0
    1c36:	70 e0       	ldi	r23, 0x00	; 0
    1c38:	80 e0       	ldi	r24, 0x00	; 0
    1c3a:	9f ec       	ldi	r25, 0xCF	; 207
    1c3c:	38 2f       	mov	r19, r24
    1c3e:	29 2f       	mov	r18, r25
    1c40:	86 2f       	mov	r24, r22
    1c42:	97 2f       	mov	r25, r23
    1c44:	a3 2f       	mov	r26, r19
    1c46:	b2 2f       	mov	r27, r18
    1c48:	bc 01       	movw	r22, r24
    1c4a:	cd 01       	movw	r24, r26
    1c4c:	28 96       	adiw	r28, 0x08	; 8
    1c4e:	0f b6       	in	r0, 0x3f	; 63
    1c50:	f8 94       	cli
    1c52:	de bf       	out	0x3e, r29	; 62
    1c54:	0f be       	out	0x3f, r0	; 63
    1c56:	cd bf       	out	0x3d, r28	; 61
    1c58:	df 91       	pop	r29
    1c5a:	cf 91       	pop	r28
    1c5c:	ff 90       	pop	r15
    1c5e:	ef 90       	pop	r14
    1c60:	df 90       	pop	r13
    1c62:	cf 90       	pop	r12
    1c64:	08 95       	ret

00001c66 <__fixsfsi>:
    1c66:	ac e0       	ldi	r26, 0x0C	; 12
    1c68:	b0 e0       	ldi	r27, 0x00	; 0
    1c6a:	e9 e3       	ldi	r30, 0x39	; 57
    1c6c:	fe e0       	ldi	r31, 0x0E	; 14
    1c6e:	0c 94 57 11 	jmp	0x22ae	; 0x22ae <__prologue_saves__+0x1c>
    1c72:	dc 01       	movw	r26, r24
    1c74:	cb 01       	movw	r24, r22
    1c76:	89 83       	std	Y+1, r24	; 0x01
    1c78:	9a 83       	std	Y+2, r25	; 0x02
    1c7a:	ab 83       	std	Y+3, r26	; 0x03
    1c7c:	bc 83       	std	Y+4, r27	; 0x04
    1c7e:	ce 01       	movw	r24, r28
    1c80:	01 96       	adiw	r24, 0x01	; 1
    1c82:	be 01       	movw	r22, r28
    1c84:	6b 5f       	subi	r22, 0xFB	; 251
    1c86:	7f 4f       	sbci	r23, 0xFF	; 255
    1c88:	0e 94 2b 10 	call	0x2056	; 0x2056 <__unpack_f>
    1c8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c8e:	82 30       	cpi	r24, 0x02	; 2
    1c90:	69 f1       	breq	.+90     	; 0x1cec <__fixsfsi+0x86>
    1c92:	82 30       	cpi	r24, 0x02	; 2
    1c94:	58 f1       	brcs	.+86     	; 0x1cec <__fixsfsi+0x86>
    1c96:	84 30       	cpi	r24, 0x04	; 4
    1c98:	39 f0       	breq	.+14     	; 0x1ca8 <__fixsfsi+0x42>
    1c9a:	2f 81       	ldd	r18, Y+7	; 0x07
    1c9c:	38 85       	ldd	r19, Y+8	; 0x08
    1c9e:	37 fd       	sbrc	r19, 7
    1ca0:	25 c0       	rjmp	.+74     	; 0x1cec <__fixsfsi+0x86>
    1ca2:	2f 31       	cpi	r18, 0x1F	; 31
    1ca4:	31 05       	cpc	r19, r1
    1ca6:	44 f0       	brlt	.+16     	; 0x1cb8 <__fixsfsi+0x52>
    1ca8:	8e 81       	ldd	r24, Y+6	; 0x06
    1caa:	88 23       	and	r24, r24
    1cac:	19 f1       	breq	.+70     	; 0x1cf4 <__fixsfsi+0x8e>
    1cae:	00 e0       	ldi	r16, 0x00	; 0
    1cb0:	10 e0       	ldi	r17, 0x00	; 0
    1cb2:	20 e0       	ldi	r18, 0x00	; 0
    1cb4:	30 e8       	ldi	r19, 0x80	; 128
    1cb6:	22 c0       	rjmp	.+68     	; 0x1cfc <__fixsfsi+0x96>
    1cb8:	8e e1       	ldi	r24, 0x1E	; 30
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	82 1b       	sub	r24, r18
    1cbe:	93 0b       	sbc	r25, r19
    1cc0:	09 85       	ldd	r16, Y+9	; 0x09
    1cc2:	1a 85       	ldd	r17, Y+10	; 0x0a
    1cc4:	2b 85       	ldd	r18, Y+11	; 0x0b
    1cc6:	3c 85       	ldd	r19, Y+12	; 0x0c
    1cc8:	04 c0       	rjmp	.+8      	; 0x1cd2 <__fixsfsi+0x6c>
    1cca:	36 95       	lsr	r19
    1ccc:	27 95       	ror	r18
    1cce:	17 95       	ror	r17
    1cd0:	07 95       	ror	r16
    1cd2:	8a 95       	dec	r24
    1cd4:	d2 f7       	brpl	.-12     	; 0x1cca <__fixsfsi+0x64>
    1cd6:	8e 81       	ldd	r24, Y+6	; 0x06
    1cd8:	88 23       	and	r24, r24
    1cda:	81 f0       	breq	.+32     	; 0x1cfc <__fixsfsi+0x96>
    1cdc:	30 95       	com	r19
    1cde:	20 95       	com	r18
    1ce0:	10 95       	com	r17
    1ce2:	01 95       	neg	r16
    1ce4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ce6:	2f 4f       	sbci	r18, 0xFF	; 255
    1ce8:	3f 4f       	sbci	r19, 0xFF	; 255
    1cea:	08 c0       	rjmp	.+16     	; 0x1cfc <__fixsfsi+0x96>
    1cec:	00 e0       	ldi	r16, 0x00	; 0
    1cee:	10 e0       	ldi	r17, 0x00	; 0
    1cf0:	98 01       	movw	r18, r16
    1cf2:	04 c0       	rjmp	.+8      	; 0x1cfc <__fixsfsi+0x96>
    1cf4:	0f ef       	ldi	r16, 0xFF	; 255
    1cf6:	1f ef       	ldi	r17, 0xFF	; 255
    1cf8:	2f ef       	ldi	r18, 0xFF	; 255
    1cfa:	3f e7       	ldi	r19, 0x7F	; 127
    1cfc:	b8 01       	movw	r22, r16
    1cfe:	c9 01       	movw	r24, r18
    1d00:	2c 96       	adiw	r28, 0x0c	; 12
    1d02:	e4 e0       	ldi	r30, 0x04	; 4
    1d04:	0c 94 73 11 	jmp	0x22e6	; 0x22e6 <__epilogue_restores__+0x1c>

00001d08 <__floatunsisf>:
    1d08:	a8 e0       	ldi	r26, 0x08	; 8
    1d0a:	b0 e0       	ldi	r27, 0x00	; 0
    1d0c:	ea e8       	ldi	r30, 0x8A	; 138
    1d0e:	fe e0       	ldi	r31, 0x0E	; 14
    1d10:	0c 94 53 11 	jmp	0x22a6	; 0x22a6 <__prologue_saves__+0x14>
    1d14:	6b 01       	movw	r12, r22
    1d16:	7c 01       	movw	r14, r24
    1d18:	1a 82       	std	Y+2, r1	; 0x02
    1d1a:	61 15       	cp	r22, r1
    1d1c:	71 05       	cpc	r23, r1
    1d1e:	81 05       	cpc	r24, r1
    1d20:	91 05       	cpc	r25, r1
    1d22:	19 f4       	brne	.+6      	; 0x1d2a <__floatunsisf+0x22>
    1d24:	82 e0       	ldi	r24, 0x02	; 2
    1d26:	89 83       	std	Y+1, r24	; 0x01
    1d28:	5e c0       	rjmp	.+188    	; 0x1de6 <__floatunsisf+0xde>
    1d2a:	83 e0       	ldi	r24, 0x03	; 3
    1d2c:	89 83       	std	Y+1, r24	; 0x01
    1d2e:	0e e1       	ldi	r16, 0x1E	; 30
    1d30:	10 e0       	ldi	r17, 0x00	; 0
    1d32:	1c 83       	std	Y+4, r17	; 0x04
    1d34:	0b 83       	std	Y+3, r16	; 0x03
    1d36:	cd 82       	std	Y+5, r12	; 0x05
    1d38:	de 82       	std	Y+6, r13	; 0x06
    1d3a:	ef 82       	std	Y+7, r14	; 0x07
    1d3c:	f8 86       	std	Y+8, r15	; 0x08
    1d3e:	c7 01       	movw	r24, r14
    1d40:	b6 01       	movw	r22, r12
    1d42:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <__clzsi2>
    1d46:	9c 01       	movw	r18, r24
    1d48:	21 50       	subi	r18, 0x01	; 1
    1d4a:	30 40       	sbci	r19, 0x00	; 0
    1d4c:	37 ff       	sbrs	r19, 7
    1d4e:	38 c0       	rjmp	.+112    	; 0x1dc0 <__floatunsisf+0xb8>
    1d50:	ee 27       	eor	r30, r30
    1d52:	ff 27       	eor	r31, r31
    1d54:	e2 1b       	sub	r30, r18
    1d56:	f3 0b       	sbc	r31, r19
    1d58:	81 e0       	ldi	r24, 0x01	; 1
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	a0 e0       	ldi	r26, 0x00	; 0
    1d5e:	b0 e0       	ldi	r27, 0x00	; 0
    1d60:	0e 2e       	mov	r0, r30
    1d62:	04 c0       	rjmp	.+8      	; 0x1d6c <__floatunsisf+0x64>
    1d64:	88 0f       	add	r24, r24
    1d66:	99 1f       	adc	r25, r25
    1d68:	aa 1f       	adc	r26, r26
    1d6a:	bb 1f       	adc	r27, r27
    1d6c:	0a 94       	dec	r0
    1d6e:	d2 f7       	brpl	.-12     	; 0x1d64 <__floatunsisf+0x5c>
    1d70:	01 97       	sbiw	r24, 0x01	; 1
    1d72:	a1 09       	sbc	r26, r1
    1d74:	b1 09       	sbc	r27, r1
    1d76:	8c 21       	and	r24, r12
    1d78:	9d 21       	and	r25, r13
    1d7a:	ae 21       	and	r26, r14
    1d7c:	bf 21       	and	r27, r15
    1d7e:	41 e0       	ldi	r20, 0x01	; 1
    1d80:	50 e0       	ldi	r21, 0x00	; 0
    1d82:	60 e0       	ldi	r22, 0x00	; 0
    1d84:	70 e0       	ldi	r23, 0x00	; 0
    1d86:	00 97       	sbiw	r24, 0x00	; 0
    1d88:	a1 05       	cpc	r26, r1
    1d8a:	b1 05       	cpc	r27, r1
    1d8c:	19 f4       	brne	.+6      	; 0x1d94 <__floatunsisf+0x8c>
    1d8e:	40 e0       	ldi	r20, 0x00	; 0
    1d90:	50 e0       	ldi	r21, 0x00	; 0
    1d92:	ba 01       	movw	r22, r20
    1d94:	04 c0       	rjmp	.+8      	; 0x1d9e <__floatunsisf+0x96>
    1d96:	f6 94       	lsr	r15
    1d98:	e7 94       	ror	r14
    1d9a:	d7 94       	ror	r13
    1d9c:	c7 94       	ror	r12
    1d9e:	ea 95       	dec	r30
    1da0:	d2 f7       	brpl	.-12     	; 0x1d96 <__floatunsisf+0x8e>
    1da2:	c4 2a       	or	r12, r20
    1da4:	d5 2a       	or	r13, r21
    1da6:	e6 2a       	or	r14, r22
    1da8:	f7 2a       	or	r15, r23
    1daa:	cd 82       	std	Y+5, r12	; 0x05
    1dac:	de 82       	std	Y+6, r13	; 0x06
    1dae:	ef 82       	std	Y+7, r14	; 0x07
    1db0:	f8 86       	std	Y+8, r15	; 0x08
    1db2:	8e e1       	ldi	r24, 0x1E	; 30
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	82 1b       	sub	r24, r18
    1db8:	93 0b       	sbc	r25, r19
    1dba:	9c 83       	std	Y+4, r25	; 0x04
    1dbc:	8b 83       	std	Y+3, r24	; 0x03
    1dbe:	13 c0       	rjmp	.+38     	; 0x1de6 <__floatunsisf+0xde>
    1dc0:	21 15       	cp	r18, r1
    1dc2:	31 05       	cpc	r19, r1
    1dc4:	81 f0       	breq	.+32     	; 0x1de6 <__floatunsisf+0xde>
    1dc6:	02 2e       	mov	r0, r18
    1dc8:	04 c0       	rjmp	.+8      	; 0x1dd2 <__floatunsisf+0xca>
    1dca:	cc 0c       	add	r12, r12
    1dcc:	dd 1c       	adc	r13, r13
    1dce:	ee 1c       	adc	r14, r14
    1dd0:	ff 1c       	adc	r15, r15
    1dd2:	0a 94       	dec	r0
    1dd4:	d2 f7       	brpl	.-12     	; 0x1dca <__floatunsisf+0xc2>
    1dd6:	cd 82       	std	Y+5, r12	; 0x05
    1dd8:	de 82       	std	Y+6, r13	; 0x06
    1dda:	ef 82       	std	Y+7, r14	; 0x07
    1ddc:	f8 86       	std	Y+8, r15	; 0x08
    1dde:	02 1b       	sub	r16, r18
    1de0:	13 0b       	sbc	r17, r19
    1de2:	1c 83       	std	Y+4, r17	; 0x04
    1de4:	0b 83       	std	Y+3, r16	; 0x03
    1de6:	ce 01       	movw	r24, r28
    1de8:	01 96       	adiw	r24, 0x01	; 1
    1dea:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <__pack_f>
    1dee:	46 2f       	mov	r20, r22
    1df0:	57 2f       	mov	r21, r23
    1df2:	68 2f       	mov	r22, r24
    1df4:	79 2f       	mov	r23, r25
    1df6:	cb 01       	movw	r24, r22
    1df8:	ba 01       	movw	r22, r20
    1dfa:	28 96       	adiw	r28, 0x08	; 8
    1dfc:	e8 e0       	ldi	r30, 0x08	; 8
    1dfe:	0c 94 6f 11 	jmp	0x22de	; 0x22de <__epilogue_restores__+0x14>

00001e02 <__clzsi2>:
    1e02:	cf 92       	push	r12
    1e04:	df 92       	push	r13
    1e06:	ef 92       	push	r14
    1e08:	ff 92       	push	r15
    1e0a:	0f 93       	push	r16
    1e0c:	1f 93       	push	r17
    1e0e:	8b 01       	movw	r16, r22
    1e10:	9c 01       	movw	r18, r24
    1e12:	00 30       	cpi	r16, 0x00	; 0
    1e14:	80 e0       	ldi	r24, 0x00	; 0
    1e16:	18 07       	cpc	r17, r24
    1e18:	81 e0       	ldi	r24, 0x01	; 1
    1e1a:	28 07       	cpc	r18, r24
    1e1c:	80 e0       	ldi	r24, 0x00	; 0
    1e1e:	38 07       	cpc	r19, r24
    1e20:	50 f4       	brcc	.+20     	; 0x1e36 <__clzsi2+0x34>
    1e22:	0f 3f       	cpi	r16, 0xFF	; 255
    1e24:	11 05       	cpc	r17, r1
    1e26:	21 05       	cpc	r18, r1
    1e28:	31 05       	cpc	r19, r1
    1e2a:	09 f0       	breq	.+2      	; 0x1e2e <__clzsi2+0x2c>
    1e2c:	88 f4       	brcc	.+34     	; 0x1e50 <__clzsi2+0x4e>
    1e2e:	80 e0       	ldi	r24, 0x00	; 0
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	dc 01       	movw	r26, r24
    1e34:	16 c0       	rjmp	.+44     	; 0x1e62 <__clzsi2+0x60>
    1e36:	00 30       	cpi	r16, 0x00	; 0
    1e38:	e0 e0       	ldi	r30, 0x00	; 0
    1e3a:	1e 07       	cpc	r17, r30
    1e3c:	e0 e0       	ldi	r30, 0x00	; 0
    1e3e:	2e 07       	cpc	r18, r30
    1e40:	e1 e0       	ldi	r30, 0x01	; 1
    1e42:	3e 07       	cpc	r19, r30
    1e44:	50 f4       	brcc	.+20     	; 0x1e5a <__clzsi2+0x58>
    1e46:	80 e1       	ldi	r24, 0x10	; 16
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	a0 e0       	ldi	r26, 0x00	; 0
    1e4c:	b0 e0       	ldi	r27, 0x00	; 0
    1e4e:	09 c0       	rjmp	.+18     	; 0x1e62 <__clzsi2+0x60>
    1e50:	88 e0       	ldi	r24, 0x08	; 8
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	a0 e0       	ldi	r26, 0x00	; 0
    1e56:	b0 e0       	ldi	r27, 0x00	; 0
    1e58:	04 c0       	rjmp	.+8      	; 0x1e62 <__clzsi2+0x60>
    1e5a:	88 e1       	ldi	r24, 0x18	; 24
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	a0 e0       	ldi	r26, 0x00	; 0
    1e60:	b0 e0       	ldi	r27, 0x00	; 0
    1e62:	40 e2       	ldi	r20, 0x20	; 32
    1e64:	50 e0       	ldi	r21, 0x00	; 0
    1e66:	60 e0       	ldi	r22, 0x00	; 0
    1e68:	70 e0       	ldi	r23, 0x00	; 0
    1e6a:	48 1b       	sub	r20, r24
    1e6c:	59 0b       	sbc	r21, r25
    1e6e:	6a 0b       	sbc	r22, r26
    1e70:	7b 0b       	sbc	r23, r27
    1e72:	68 01       	movw	r12, r16
    1e74:	79 01       	movw	r14, r18
    1e76:	04 c0       	rjmp	.+8      	; 0x1e80 <__clzsi2+0x7e>
    1e78:	f6 94       	lsr	r15
    1e7a:	e7 94       	ror	r14
    1e7c:	d7 94       	ror	r13
    1e7e:	c7 94       	ror	r12
    1e80:	8a 95       	dec	r24
    1e82:	d2 f7       	brpl	.-12     	; 0x1e78 <__clzsi2+0x76>
    1e84:	d7 01       	movw	r26, r14
    1e86:	c6 01       	movw	r24, r12
    1e88:	85 52       	subi	r24, 0x25	; 37
    1e8a:	9b 4f       	sbci	r25, 0xFB	; 251
    1e8c:	fc 01       	movw	r30, r24
    1e8e:	80 81       	ld	r24, Z
    1e90:	48 1b       	sub	r20, r24
    1e92:	51 09       	sbc	r21, r1
    1e94:	61 09       	sbc	r22, r1
    1e96:	71 09       	sbc	r23, r1
    1e98:	ca 01       	movw	r24, r20
    1e9a:	1f 91       	pop	r17
    1e9c:	0f 91       	pop	r16
    1e9e:	ff 90       	pop	r15
    1ea0:	ef 90       	pop	r14
    1ea2:	df 90       	pop	r13
    1ea4:	cf 90       	pop	r12
    1ea6:	08 95       	ret

00001ea8 <__pack_f>:
    1ea8:	cf 92       	push	r12
    1eaa:	df 92       	push	r13
    1eac:	ef 92       	push	r14
    1eae:	ff 92       	push	r15
    1eb0:	0f 93       	push	r16
    1eb2:	1f 93       	push	r17
    1eb4:	dc 01       	movw	r26, r24
    1eb6:	14 96       	adiw	r26, 0x04	; 4
    1eb8:	4d 91       	ld	r20, X+
    1eba:	5d 91       	ld	r21, X+
    1ebc:	6d 91       	ld	r22, X+
    1ebe:	7c 91       	ld	r23, X
    1ec0:	17 97       	sbiw	r26, 0x07	; 7
    1ec2:	11 96       	adiw	r26, 0x01	; 1
    1ec4:	ec 91       	ld	r30, X
    1ec6:	11 97       	sbiw	r26, 0x01	; 1
    1ec8:	8c 91       	ld	r24, X
    1eca:	82 30       	cpi	r24, 0x02	; 2
    1ecc:	20 f4       	brcc	.+8      	; 0x1ed6 <__pack_f+0x2e>
    1ece:	60 61       	ori	r22, 0x10	; 16
    1ed0:	8f ef       	ldi	r24, 0xFF	; 255
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	a5 c0       	rjmp	.+330    	; 0x2020 <__pack_f+0x178>
    1ed6:	84 30       	cpi	r24, 0x04	; 4
    1ed8:	09 f4       	brne	.+2      	; 0x1edc <__pack_f+0x34>
    1eda:	9d c0       	rjmp	.+314    	; 0x2016 <__pack_f+0x16e>
    1edc:	82 30       	cpi	r24, 0x02	; 2
    1ede:	09 f4       	brne	.+2      	; 0x1ee2 <__pack_f+0x3a>
    1ee0:	94 c0       	rjmp	.+296    	; 0x200a <__pack_f+0x162>
    1ee2:	41 15       	cp	r20, r1
    1ee4:	51 05       	cpc	r21, r1
    1ee6:	61 05       	cpc	r22, r1
    1ee8:	71 05       	cpc	r23, r1
    1eea:	09 f4       	brne	.+2      	; 0x1eee <__pack_f+0x46>
    1eec:	91 c0       	rjmp	.+290    	; 0x2010 <__pack_f+0x168>
    1eee:	12 96       	adiw	r26, 0x02	; 2
    1ef0:	8d 91       	ld	r24, X+
    1ef2:	9c 91       	ld	r25, X
    1ef4:	13 97       	sbiw	r26, 0x03	; 3
    1ef6:	2f ef       	ldi	r18, 0xFF	; 255
    1ef8:	82 38       	cpi	r24, 0x82	; 130
    1efa:	92 07       	cpc	r25, r18
    1efc:	0c f0       	brlt	.+2      	; 0x1f00 <__pack_f+0x58>
    1efe:	59 c0       	rjmp	.+178    	; 0x1fb2 <__pack_f+0x10a>
    1f00:	22 e8       	ldi	r18, 0x82	; 130
    1f02:	3f ef       	ldi	r19, 0xFF	; 255
    1f04:	28 1b       	sub	r18, r24
    1f06:	39 0b       	sbc	r19, r25
    1f08:	2a 31       	cpi	r18, 0x1A	; 26
    1f0a:	31 05       	cpc	r19, r1
    1f0c:	64 f5       	brge	.+88     	; 0x1f66 <__pack_f+0xbe>
    1f0e:	6a 01       	movw	r12, r20
    1f10:	7b 01       	movw	r14, r22
    1f12:	02 2e       	mov	r0, r18
    1f14:	04 c0       	rjmp	.+8      	; 0x1f1e <__pack_f+0x76>
    1f16:	f6 94       	lsr	r15
    1f18:	e7 94       	ror	r14
    1f1a:	d7 94       	ror	r13
    1f1c:	c7 94       	ror	r12
    1f1e:	0a 94       	dec	r0
    1f20:	d2 f7       	brpl	.-12     	; 0x1f16 <__pack_f+0x6e>
    1f22:	81 e0       	ldi	r24, 0x01	; 1
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	a0 e0       	ldi	r26, 0x00	; 0
    1f28:	b0 e0       	ldi	r27, 0x00	; 0
    1f2a:	04 c0       	rjmp	.+8      	; 0x1f34 <__pack_f+0x8c>
    1f2c:	88 0f       	add	r24, r24
    1f2e:	99 1f       	adc	r25, r25
    1f30:	aa 1f       	adc	r26, r26
    1f32:	bb 1f       	adc	r27, r27
    1f34:	2a 95       	dec	r18
    1f36:	d2 f7       	brpl	.-12     	; 0x1f2c <__pack_f+0x84>
    1f38:	01 97       	sbiw	r24, 0x01	; 1
    1f3a:	a1 09       	sbc	r26, r1
    1f3c:	b1 09       	sbc	r27, r1
    1f3e:	84 23       	and	r24, r20
    1f40:	95 23       	and	r25, r21
    1f42:	a6 23       	and	r26, r22
    1f44:	b7 23       	and	r27, r23
    1f46:	41 e0       	ldi	r20, 0x01	; 1
    1f48:	50 e0       	ldi	r21, 0x00	; 0
    1f4a:	60 e0       	ldi	r22, 0x00	; 0
    1f4c:	70 e0       	ldi	r23, 0x00	; 0
    1f4e:	00 97       	sbiw	r24, 0x00	; 0
    1f50:	a1 05       	cpc	r26, r1
    1f52:	b1 05       	cpc	r27, r1
    1f54:	19 f4       	brne	.+6      	; 0x1f5c <__pack_f+0xb4>
    1f56:	40 e0       	ldi	r20, 0x00	; 0
    1f58:	50 e0       	ldi	r21, 0x00	; 0
    1f5a:	ba 01       	movw	r22, r20
    1f5c:	4c 29       	or	r20, r12
    1f5e:	5d 29       	or	r21, r13
    1f60:	6e 29       	or	r22, r14
    1f62:	7f 29       	or	r23, r15
    1f64:	03 c0       	rjmp	.+6      	; 0x1f6c <__pack_f+0xc4>
    1f66:	40 e0       	ldi	r20, 0x00	; 0
    1f68:	50 e0       	ldi	r21, 0x00	; 0
    1f6a:	ba 01       	movw	r22, r20
    1f6c:	db 01       	movw	r26, r22
    1f6e:	ca 01       	movw	r24, r20
    1f70:	8f 77       	andi	r24, 0x7F	; 127
    1f72:	90 70       	andi	r25, 0x00	; 0
    1f74:	a0 70       	andi	r26, 0x00	; 0
    1f76:	b0 70       	andi	r27, 0x00	; 0
    1f78:	80 34       	cpi	r24, 0x40	; 64
    1f7a:	91 05       	cpc	r25, r1
    1f7c:	a1 05       	cpc	r26, r1
    1f7e:	b1 05       	cpc	r27, r1
    1f80:	39 f4       	brne	.+14     	; 0x1f90 <__pack_f+0xe8>
    1f82:	47 ff       	sbrs	r20, 7
    1f84:	09 c0       	rjmp	.+18     	; 0x1f98 <__pack_f+0xf0>
    1f86:	40 5c       	subi	r20, 0xC0	; 192
    1f88:	5f 4f       	sbci	r21, 0xFF	; 255
    1f8a:	6f 4f       	sbci	r22, 0xFF	; 255
    1f8c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f8e:	04 c0       	rjmp	.+8      	; 0x1f98 <__pack_f+0xf0>
    1f90:	41 5c       	subi	r20, 0xC1	; 193
    1f92:	5f 4f       	sbci	r21, 0xFF	; 255
    1f94:	6f 4f       	sbci	r22, 0xFF	; 255
    1f96:	7f 4f       	sbci	r23, 0xFF	; 255
    1f98:	81 e0       	ldi	r24, 0x01	; 1
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	40 30       	cpi	r20, 0x00	; 0
    1f9e:	20 e0       	ldi	r18, 0x00	; 0
    1fa0:	52 07       	cpc	r21, r18
    1fa2:	20 e0       	ldi	r18, 0x00	; 0
    1fa4:	62 07       	cpc	r22, r18
    1fa6:	20 e4       	ldi	r18, 0x40	; 64
    1fa8:	72 07       	cpc	r23, r18
    1faa:	38 f5       	brcc	.+78     	; 0x1ffa <__pack_f+0x152>
    1fac:	80 e0       	ldi	r24, 0x00	; 0
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	24 c0       	rjmp	.+72     	; 0x1ffa <__pack_f+0x152>
    1fb2:	80 38       	cpi	r24, 0x80	; 128
    1fb4:	91 05       	cpc	r25, r1
    1fb6:	7c f5       	brge	.+94     	; 0x2016 <__pack_f+0x16e>
    1fb8:	8a 01       	movw	r16, r20
    1fba:	9b 01       	movw	r18, r22
    1fbc:	0f 77       	andi	r16, 0x7F	; 127
    1fbe:	10 70       	andi	r17, 0x00	; 0
    1fc0:	20 70       	andi	r18, 0x00	; 0
    1fc2:	30 70       	andi	r19, 0x00	; 0
    1fc4:	00 34       	cpi	r16, 0x40	; 64
    1fc6:	11 05       	cpc	r17, r1
    1fc8:	21 05       	cpc	r18, r1
    1fca:	31 05       	cpc	r19, r1
    1fcc:	39 f4       	brne	.+14     	; 0x1fdc <__pack_f+0x134>
    1fce:	47 ff       	sbrs	r20, 7
    1fd0:	09 c0       	rjmp	.+18     	; 0x1fe4 <__pack_f+0x13c>
    1fd2:	40 5c       	subi	r20, 0xC0	; 192
    1fd4:	5f 4f       	sbci	r21, 0xFF	; 255
    1fd6:	6f 4f       	sbci	r22, 0xFF	; 255
    1fd8:	7f 4f       	sbci	r23, 0xFF	; 255
    1fda:	04 c0       	rjmp	.+8      	; 0x1fe4 <__pack_f+0x13c>
    1fdc:	41 5c       	subi	r20, 0xC1	; 193
    1fde:	5f 4f       	sbci	r21, 0xFF	; 255
    1fe0:	6f 4f       	sbci	r22, 0xFF	; 255
    1fe2:	7f 4f       	sbci	r23, 0xFF	; 255
    1fe4:	77 fd       	sbrc	r23, 7
    1fe6:	03 c0       	rjmp	.+6      	; 0x1fee <__pack_f+0x146>
    1fe8:	81 58       	subi	r24, 0x81	; 129
    1fea:	9f 4f       	sbci	r25, 0xFF	; 255
    1fec:	06 c0       	rjmp	.+12     	; 0x1ffa <__pack_f+0x152>
    1fee:	76 95       	lsr	r23
    1ff0:	67 95       	ror	r22
    1ff2:	57 95       	ror	r21
    1ff4:	47 95       	ror	r20
    1ff6:	80 58       	subi	r24, 0x80	; 128
    1ff8:	9f 4f       	sbci	r25, 0xFF	; 255
    1ffa:	97 e0       	ldi	r25, 0x07	; 7
    1ffc:	76 95       	lsr	r23
    1ffe:	67 95       	ror	r22
    2000:	57 95       	ror	r21
    2002:	47 95       	ror	r20
    2004:	9a 95       	dec	r25
    2006:	d1 f7       	brne	.-12     	; 0x1ffc <__pack_f+0x154>
    2008:	0b c0       	rjmp	.+22     	; 0x2020 <__pack_f+0x178>
    200a:	80 e0       	ldi	r24, 0x00	; 0
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	05 c0       	rjmp	.+10     	; 0x201a <__pack_f+0x172>
    2010:	80 e0       	ldi	r24, 0x00	; 0
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	05 c0       	rjmp	.+10     	; 0x2020 <__pack_f+0x178>
    2016:	8f ef       	ldi	r24, 0xFF	; 255
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	40 e0       	ldi	r20, 0x00	; 0
    201c:	50 e0       	ldi	r21, 0x00	; 0
    201e:	ba 01       	movw	r22, r20
    2020:	98 2f       	mov	r25, r24
    2022:	97 95       	ror	r25
    2024:	99 27       	eor	r25, r25
    2026:	97 95       	ror	r25
    2028:	a6 2f       	mov	r26, r22
    202a:	af 77       	andi	r26, 0x7F	; 127
    202c:	e7 95       	ror	r30
    202e:	ee 27       	eor	r30, r30
    2030:	e7 95       	ror	r30
    2032:	86 95       	lsr	r24
    2034:	3a 2f       	mov	r19, r26
    2036:	39 2b       	or	r19, r25
    2038:	28 2f       	mov	r18, r24
    203a:	2e 2b       	or	r18, r30
    203c:	84 2f       	mov	r24, r20
    203e:	95 2f       	mov	r25, r21
    2040:	a3 2f       	mov	r26, r19
    2042:	b2 2f       	mov	r27, r18
    2044:	bc 01       	movw	r22, r24
    2046:	cd 01       	movw	r24, r26
    2048:	1f 91       	pop	r17
    204a:	0f 91       	pop	r16
    204c:	ff 90       	pop	r15
    204e:	ef 90       	pop	r14
    2050:	df 90       	pop	r13
    2052:	cf 90       	pop	r12
    2054:	08 95       	ret

00002056 <__unpack_f>:
    2056:	dc 01       	movw	r26, r24
    2058:	fb 01       	movw	r30, r22
    205a:	4c 91       	ld	r20, X
    205c:	11 96       	adiw	r26, 0x01	; 1
    205e:	5c 91       	ld	r21, X
    2060:	11 97       	sbiw	r26, 0x01	; 1
    2062:	12 96       	adiw	r26, 0x02	; 2
    2064:	8c 91       	ld	r24, X
    2066:	12 97       	sbiw	r26, 0x02	; 2
    2068:	68 2f       	mov	r22, r24
    206a:	6f 77       	andi	r22, 0x7F	; 127
    206c:	70 e0       	ldi	r23, 0x00	; 0
    206e:	98 2f       	mov	r25, r24
    2070:	99 1f       	adc	r25, r25
    2072:	99 27       	eor	r25, r25
    2074:	99 1f       	adc	r25, r25
    2076:	13 96       	adiw	r26, 0x03	; 3
    2078:	2c 91       	ld	r18, X
    207a:	13 97       	sbiw	r26, 0x03	; 3
    207c:	82 2f       	mov	r24, r18
    207e:	88 0f       	add	r24, r24
    2080:	89 2b       	or	r24, r25
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	22 1f       	adc	r18, r18
    2086:	22 27       	eor	r18, r18
    2088:	22 1f       	adc	r18, r18
    208a:	21 83       	std	Z+1, r18	; 0x01
    208c:	00 97       	sbiw	r24, 0x00	; 0
    208e:	39 f5       	brne	.+78     	; 0x20de <__unpack_f+0x88>
    2090:	41 15       	cp	r20, r1
    2092:	51 05       	cpc	r21, r1
    2094:	61 05       	cpc	r22, r1
    2096:	71 05       	cpc	r23, r1
    2098:	11 f4       	brne	.+4      	; 0x209e <__unpack_f+0x48>
    209a:	82 e0       	ldi	r24, 0x02	; 2
    209c:	29 c0       	rjmp	.+82     	; 0x20f0 <__unpack_f+0x9a>
    209e:	82 e8       	ldi	r24, 0x82	; 130
    20a0:	9f ef       	ldi	r25, 0xFF	; 255
    20a2:	93 83       	std	Z+3, r25	; 0x03
    20a4:	82 83       	std	Z+2, r24	; 0x02
    20a6:	27 e0       	ldi	r18, 0x07	; 7
    20a8:	44 0f       	add	r20, r20
    20aa:	55 1f       	adc	r21, r21
    20ac:	66 1f       	adc	r22, r22
    20ae:	77 1f       	adc	r23, r23
    20b0:	2a 95       	dec	r18
    20b2:	d1 f7       	brne	.-12     	; 0x20a8 <__unpack_f+0x52>
    20b4:	83 e0       	ldi	r24, 0x03	; 3
    20b6:	80 83       	st	Z, r24
    20b8:	09 c0       	rjmp	.+18     	; 0x20cc <__unpack_f+0x76>
    20ba:	44 0f       	add	r20, r20
    20bc:	55 1f       	adc	r21, r21
    20be:	66 1f       	adc	r22, r22
    20c0:	77 1f       	adc	r23, r23
    20c2:	82 81       	ldd	r24, Z+2	; 0x02
    20c4:	93 81       	ldd	r25, Z+3	; 0x03
    20c6:	01 97       	sbiw	r24, 0x01	; 1
    20c8:	93 83       	std	Z+3, r25	; 0x03
    20ca:	82 83       	std	Z+2, r24	; 0x02
    20cc:	40 30       	cpi	r20, 0x00	; 0
    20ce:	80 e0       	ldi	r24, 0x00	; 0
    20d0:	58 07       	cpc	r21, r24
    20d2:	80 e0       	ldi	r24, 0x00	; 0
    20d4:	68 07       	cpc	r22, r24
    20d6:	80 e4       	ldi	r24, 0x40	; 64
    20d8:	78 07       	cpc	r23, r24
    20da:	78 f3       	brcs	.-34     	; 0x20ba <__unpack_f+0x64>
    20dc:	20 c0       	rjmp	.+64     	; 0x211e <__unpack_f+0xc8>
    20de:	8f 3f       	cpi	r24, 0xFF	; 255
    20e0:	91 05       	cpc	r25, r1
    20e2:	79 f4       	brne	.+30     	; 0x2102 <__unpack_f+0xac>
    20e4:	41 15       	cp	r20, r1
    20e6:	51 05       	cpc	r21, r1
    20e8:	61 05       	cpc	r22, r1
    20ea:	71 05       	cpc	r23, r1
    20ec:	19 f4       	brne	.+6      	; 0x20f4 <__unpack_f+0x9e>
    20ee:	84 e0       	ldi	r24, 0x04	; 4
    20f0:	80 83       	st	Z, r24
    20f2:	08 95       	ret
    20f4:	64 ff       	sbrs	r22, 4
    20f6:	03 c0       	rjmp	.+6      	; 0x20fe <__unpack_f+0xa8>
    20f8:	81 e0       	ldi	r24, 0x01	; 1
    20fa:	80 83       	st	Z, r24
    20fc:	10 c0       	rjmp	.+32     	; 0x211e <__unpack_f+0xc8>
    20fe:	10 82       	st	Z, r1
    2100:	0e c0       	rjmp	.+28     	; 0x211e <__unpack_f+0xc8>
    2102:	8f 57       	subi	r24, 0x7F	; 127
    2104:	90 40       	sbci	r25, 0x00	; 0
    2106:	93 83       	std	Z+3, r25	; 0x03
    2108:	82 83       	std	Z+2, r24	; 0x02
    210a:	83 e0       	ldi	r24, 0x03	; 3
    210c:	80 83       	st	Z, r24
    210e:	87 e0       	ldi	r24, 0x07	; 7
    2110:	44 0f       	add	r20, r20
    2112:	55 1f       	adc	r21, r21
    2114:	66 1f       	adc	r22, r22
    2116:	77 1f       	adc	r23, r23
    2118:	8a 95       	dec	r24
    211a:	d1 f7       	brne	.-12     	; 0x2110 <__unpack_f+0xba>
    211c:	70 64       	ori	r23, 0x40	; 64
    211e:	44 83       	std	Z+4, r20	; 0x04
    2120:	55 83       	std	Z+5, r21	; 0x05
    2122:	66 83       	std	Z+6, r22	; 0x06
    2124:	77 83       	std	Z+7, r23	; 0x07
    2126:	08 95       	ret

00002128 <__fpcmp_parts_f>:
    2128:	cf 93       	push	r28
    212a:	fc 01       	movw	r30, r24
    212c:	db 01       	movw	r26, r22
    212e:	90 81       	ld	r25, Z
    2130:	92 30       	cpi	r25, 0x02	; 2
    2132:	08 f4       	brcc	.+2      	; 0x2136 <__fpcmp_parts_f+0xe>
    2134:	4c c0       	rjmp	.+152    	; 0x21ce <__fpcmp_parts_f+0xa6>
    2136:	8c 91       	ld	r24, X
    2138:	82 30       	cpi	r24, 0x02	; 2
    213a:	08 f4       	brcc	.+2      	; 0x213e <__fpcmp_parts_f+0x16>
    213c:	48 c0       	rjmp	.+144    	; 0x21ce <__fpcmp_parts_f+0xa6>
    213e:	94 30       	cpi	r25, 0x04	; 4
    2140:	69 f4       	brne	.+26     	; 0x215c <__fpcmp_parts_f+0x34>
    2142:	21 81       	ldd	r18, Z+1	; 0x01
    2144:	84 30       	cpi	r24, 0x04	; 4
    2146:	39 f4       	brne	.+14     	; 0x2156 <__fpcmp_parts_f+0x2e>
    2148:	11 96       	adiw	r26, 0x01	; 1
    214a:	8c 91       	ld	r24, X
    214c:	11 97       	sbiw	r26, 0x01	; 1
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	82 1b       	sub	r24, r18
    2152:	91 09       	sbc	r25, r1
    2154:	44 c0       	rjmp	.+136    	; 0x21de <__fpcmp_parts_f+0xb6>
    2156:	22 23       	and	r18, r18
    2158:	d1 f1       	breq	.+116    	; 0x21ce <__fpcmp_parts_f+0xa6>
    215a:	3f c0       	rjmp	.+126    	; 0x21da <__fpcmp_parts_f+0xb2>
    215c:	84 30       	cpi	r24, 0x04	; 4
    215e:	21 f0       	breq	.+8      	; 0x2168 <__fpcmp_parts_f+0x40>
    2160:	92 30       	cpi	r25, 0x02	; 2
    2162:	41 f4       	brne	.+16     	; 0x2174 <__fpcmp_parts_f+0x4c>
    2164:	82 30       	cpi	r24, 0x02	; 2
    2166:	b1 f1       	breq	.+108    	; 0x21d4 <__fpcmp_parts_f+0xac>
    2168:	11 96       	adiw	r26, 0x01	; 1
    216a:	8c 91       	ld	r24, X
    216c:	11 97       	sbiw	r26, 0x01	; 1
    216e:	88 23       	and	r24, r24
    2170:	a1 f1       	breq	.+104    	; 0x21da <__fpcmp_parts_f+0xb2>
    2172:	2d c0       	rjmp	.+90     	; 0x21ce <__fpcmp_parts_f+0xa6>
    2174:	c1 81       	ldd	r28, Z+1	; 0x01
    2176:	82 30       	cpi	r24, 0x02	; 2
    2178:	01 f1       	breq	.+64     	; 0x21ba <__fpcmp_parts_f+0x92>
    217a:	11 96       	adiw	r26, 0x01	; 1
    217c:	8c 91       	ld	r24, X
    217e:	11 97       	sbiw	r26, 0x01	; 1
    2180:	c8 17       	cp	r28, r24
    2182:	d9 f4       	brne	.+54     	; 0x21ba <__fpcmp_parts_f+0x92>
    2184:	82 81       	ldd	r24, Z+2	; 0x02
    2186:	93 81       	ldd	r25, Z+3	; 0x03
    2188:	12 96       	adiw	r26, 0x02	; 2
    218a:	2d 91       	ld	r18, X+
    218c:	3c 91       	ld	r19, X
    218e:	13 97       	sbiw	r26, 0x03	; 3
    2190:	28 17       	cp	r18, r24
    2192:	39 07       	cpc	r19, r25
    2194:	94 f0       	brlt	.+36     	; 0x21ba <__fpcmp_parts_f+0x92>
    2196:	82 17       	cp	r24, r18
    2198:	93 07       	cpc	r25, r19
    219a:	bc f0       	brlt	.+46     	; 0x21ca <__fpcmp_parts_f+0xa2>
    219c:	44 81       	ldd	r20, Z+4	; 0x04
    219e:	55 81       	ldd	r21, Z+5	; 0x05
    21a0:	66 81       	ldd	r22, Z+6	; 0x06
    21a2:	77 81       	ldd	r23, Z+7	; 0x07
    21a4:	14 96       	adiw	r26, 0x04	; 4
    21a6:	8d 91       	ld	r24, X+
    21a8:	9d 91       	ld	r25, X+
    21aa:	0d 90       	ld	r0, X+
    21ac:	bc 91       	ld	r27, X
    21ae:	a0 2d       	mov	r26, r0
    21b0:	84 17       	cp	r24, r20
    21b2:	95 07       	cpc	r25, r21
    21b4:	a6 07       	cpc	r26, r22
    21b6:	b7 07       	cpc	r27, r23
    21b8:	18 f4       	brcc	.+6      	; 0x21c0 <__fpcmp_parts_f+0x98>
    21ba:	cc 23       	and	r28, r28
    21bc:	41 f0       	breq	.+16     	; 0x21ce <__fpcmp_parts_f+0xa6>
    21be:	0d c0       	rjmp	.+26     	; 0x21da <__fpcmp_parts_f+0xb2>
    21c0:	48 17       	cp	r20, r24
    21c2:	59 07       	cpc	r21, r25
    21c4:	6a 07       	cpc	r22, r26
    21c6:	7b 07       	cpc	r23, r27
    21c8:	28 f4       	brcc	.+10     	; 0x21d4 <__fpcmp_parts_f+0xac>
    21ca:	cc 23       	and	r28, r28
    21cc:	31 f0       	breq	.+12     	; 0x21da <__fpcmp_parts_f+0xb2>
    21ce:	81 e0       	ldi	r24, 0x01	; 1
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	05 c0       	rjmp	.+10     	; 0x21de <__fpcmp_parts_f+0xb6>
    21d4:	80 e0       	ldi	r24, 0x00	; 0
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	02 c0       	rjmp	.+4      	; 0x21de <__fpcmp_parts_f+0xb6>
    21da:	8f ef       	ldi	r24, 0xFF	; 255
    21dc:	9f ef       	ldi	r25, 0xFF	; 255
    21de:	cf 91       	pop	r28
    21e0:	08 95       	ret

000021e2 <main>:
#include "adc_tc1047.h"
#include "spi_tc77.h"
#include "i2c_tcn75.h"

int main()
{
    21e2:	cf 93       	push	r28
    21e4:	df 93       	push	r29
    21e6:	cd b7       	in	r28, 0x3d	; 61
    21e8:	de b7       	in	r29, 0x3e	; 62
    21ea:	2a 97       	sbiw	r28, 0x0a	; 10
    21ec:	0f b6       	in	r0, 0x3f	; 63
    21ee:	f8 94       	cli
    21f0:	de bf       	out	0x3e, r29	; 62
    21f2:	0f be       	out	0x3f, r0	; 63
    21f4:	cd bf       	out	0x3d, r28	; 61
	int tag;	
	struct task task;

	sei();
    21f6:	78 94       	sei
	uart_init();
    21f8:	0e 94 02 08 	call	0x1004	; 0x1004 <uart_init>
	task_init();
    21fc:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <task_init>
	timer_init();
    2200:	0e 94 63 06 	call	0xcc6	; 0xcc6 <timer_init>
	adc_init();
    2204:	0e 94 96 00 	call	0x12c	; 0x12c <adc_init>
	spi_init();
    2208:	0e 94 2d 04 	call	0x85a	; 0x85a <spi_init>
	tcn75_i2c_init();
    220c:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <tcn75_i2c_init>
	printf("$ ");
    2210:	0f 92       	push	r0
    2212:	0f 92       	push	r0
    2214:	8e e5       	ldi	r24, 0x5E	; 94
    2216:	92 e0       	ldi	r25, 0x02	; 2
    2218:	ed b7       	in	r30, 0x3d	; 61
    221a:	fe b7       	in	r31, 0x3e	; 62
    221c:	92 83       	std	Z+2, r25	; 0x02
    221e:	81 83       	std	Z+1, r24	; 0x01
    2220:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <printf>
    2224:	0f 90       	pop	r0
    2226:	0f 90       	pop	r0

	while(1) {
		cli();
    2228:	f8 94       	cli
		tag = task_delete(&task);
    222a:	ce 01       	movw	r24, r28
    222c:	01 96       	adiw	r24, 0x01	; 1
    222e:	0e 94 42 05 	call	0xa84	; 0xa84 <task_delete>
		sei();
    2232:	78 94       	sei
		if (tag)
    2234:	00 97       	sbiw	r24, 0x00	; 0
    2236:	c1 f3       	breq	.-16     	; 0x2228 <__stack+0x29>
			(*(task.fun))(task.arg);
    2238:	e9 81       	ldd	r30, Y+1	; 0x01
    223a:	fa 81       	ldd	r31, Y+2	; 0x02
    223c:	ce 01       	movw	r24, r28
    223e:	03 96       	adiw	r24, 0x03	; 3
    2240:	19 95       	eicall
    2242:	f2 cf       	rjmp	.-28     	; 0x2228 <__stack+0x29>

00002244 <__divmodhi4>:
    2244:	97 fb       	bst	r25, 7
    2246:	09 2e       	mov	r0, r25
    2248:	07 26       	eor	r0, r23
    224a:	0a d0       	rcall	.+20     	; 0x2260 <__divmodhi4_neg1>
    224c:	77 fd       	sbrc	r23, 7
    224e:	04 d0       	rcall	.+8      	; 0x2258 <__divmodhi4_neg2>
    2250:	0c d0       	rcall	.+24     	; 0x226a <__udivmodhi4>
    2252:	06 d0       	rcall	.+12     	; 0x2260 <__divmodhi4_neg1>
    2254:	00 20       	and	r0, r0
    2256:	1a f4       	brpl	.+6      	; 0x225e <__divmodhi4_exit>

00002258 <__divmodhi4_neg2>:
    2258:	70 95       	com	r23
    225a:	61 95       	neg	r22
    225c:	7f 4f       	sbci	r23, 0xFF	; 255

0000225e <__divmodhi4_exit>:
    225e:	08 95       	ret

00002260 <__divmodhi4_neg1>:
    2260:	f6 f7       	brtc	.-4      	; 0x225e <__divmodhi4_exit>
    2262:	90 95       	com	r25
    2264:	81 95       	neg	r24
    2266:	9f 4f       	sbci	r25, 0xFF	; 255
    2268:	08 95       	ret

0000226a <__udivmodhi4>:
    226a:	aa 1b       	sub	r26, r26
    226c:	bb 1b       	sub	r27, r27
    226e:	51 e1       	ldi	r21, 0x11	; 17
    2270:	07 c0       	rjmp	.+14     	; 0x2280 <__udivmodhi4_ep>

00002272 <__udivmodhi4_loop>:
    2272:	aa 1f       	adc	r26, r26
    2274:	bb 1f       	adc	r27, r27
    2276:	a6 17       	cp	r26, r22
    2278:	b7 07       	cpc	r27, r23
    227a:	10 f0       	brcs	.+4      	; 0x2280 <__udivmodhi4_ep>
    227c:	a6 1b       	sub	r26, r22
    227e:	b7 0b       	sbc	r27, r23

00002280 <__udivmodhi4_ep>:
    2280:	88 1f       	adc	r24, r24
    2282:	99 1f       	adc	r25, r25
    2284:	5a 95       	dec	r21
    2286:	a9 f7       	brne	.-22     	; 0x2272 <__udivmodhi4_loop>
    2288:	80 95       	com	r24
    228a:	90 95       	com	r25
    228c:	bc 01       	movw	r22, r24
    228e:	cd 01       	movw	r24, r26
    2290:	08 95       	ret

00002292 <__prologue_saves__>:
    2292:	2f 92       	push	r2
    2294:	3f 92       	push	r3
    2296:	4f 92       	push	r4
    2298:	5f 92       	push	r5
    229a:	6f 92       	push	r6
    229c:	7f 92       	push	r7
    229e:	8f 92       	push	r8
    22a0:	9f 92       	push	r9
    22a2:	af 92       	push	r10
    22a4:	bf 92       	push	r11
    22a6:	cf 92       	push	r12
    22a8:	df 92       	push	r13
    22aa:	ef 92       	push	r14
    22ac:	ff 92       	push	r15
    22ae:	0f 93       	push	r16
    22b0:	1f 93       	push	r17
    22b2:	cf 93       	push	r28
    22b4:	df 93       	push	r29
    22b6:	cd b7       	in	r28, 0x3d	; 61
    22b8:	de b7       	in	r29, 0x3e	; 62
    22ba:	ca 1b       	sub	r28, r26
    22bc:	db 0b       	sbc	r29, r27
    22be:	0f b6       	in	r0, 0x3f	; 63
    22c0:	f8 94       	cli
    22c2:	de bf       	out	0x3e, r29	; 62
    22c4:	0f be       	out	0x3f, r0	; 63
    22c6:	cd bf       	out	0x3d, r28	; 61
    22c8:	19 94       	eijmp

000022ca <__epilogue_restores__>:
    22ca:	2a 88       	ldd	r2, Y+18	; 0x12
    22cc:	39 88       	ldd	r3, Y+17	; 0x11
    22ce:	48 88       	ldd	r4, Y+16	; 0x10
    22d0:	5f 84       	ldd	r5, Y+15	; 0x0f
    22d2:	6e 84       	ldd	r6, Y+14	; 0x0e
    22d4:	7d 84       	ldd	r7, Y+13	; 0x0d
    22d6:	8c 84       	ldd	r8, Y+12	; 0x0c
    22d8:	9b 84       	ldd	r9, Y+11	; 0x0b
    22da:	aa 84       	ldd	r10, Y+10	; 0x0a
    22dc:	b9 84       	ldd	r11, Y+9	; 0x09
    22de:	c8 84       	ldd	r12, Y+8	; 0x08
    22e0:	df 80       	ldd	r13, Y+7	; 0x07
    22e2:	ee 80       	ldd	r14, Y+6	; 0x06
    22e4:	fd 80       	ldd	r15, Y+5	; 0x05
    22e6:	0c 81       	ldd	r16, Y+4	; 0x04
    22e8:	1b 81       	ldd	r17, Y+3	; 0x03
    22ea:	aa 81       	ldd	r26, Y+2	; 0x02
    22ec:	b9 81       	ldd	r27, Y+1	; 0x01
    22ee:	ce 0f       	add	r28, r30
    22f0:	d1 1d       	adc	r29, r1
    22f2:	0f b6       	in	r0, 0x3f	; 63
    22f4:	f8 94       	cli
    22f6:	de bf       	out	0x3e, r29	; 62
    22f8:	0f be       	out	0x3f, r0	; 63
    22fa:	cd bf       	out	0x3d, r28	; 61
    22fc:	ed 01       	movw	r28, r26
    22fe:	08 95       	ret

00002300 <malloc>:
    2300:	cf 93       	push	r28
    2302:	df 93       	push	r29
    2304:	ac 01       	movw	r20, r24
    2306:	82 30       	cpi	r24, 0x02	; 2
    2308:	91 05       	cpc	r25, r1
    230a:	10 f4       	brcc	.+4      	; 0x2310 <malloc+0x10>
    230c:	42 e0       	ldi	r20, 0x02	; 2
    230e:	50 e0       	ldi	r21, 0x00	; 0
    2310:	e0 91 23 07 	lds	r30, 0x0723
    2314:	f0 91 24 07 	lds	r31, 0x0724
    2318:	20 e0       	ldi	r18, 0x00	; 0
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	a0 e0       	ldi	r26, 0x00	; 0
    231e:	b0 e0       	ldi	r27, 0x00	; 0
    2320:	24 c0       	rjmp	.+72     	; 0x236a <malloc+0x6a>
    2322:	80 81       	ld	r24, Z
    2324:	91 81       	ldd	r25, Z+1	; 0x01
    2326:	84 17       	cp	r24, r20
    2328:	95 07       	cpc	r25, r21
    232a:	d0 f0       	brcs	.+52     	; 0x2360 <malloc+0x60>
    232c:	84 17       	cp	r24, r20
    232e:	95 07       	cpc	r25, r21
    2330:	71 f4       	brne	.+28     	; 0x234e <malloc+0x4e>
    2332:	82 81       	ldd	r24, Z+2	; 0x02
    2334:	93 81       	ldd	r25, Z+3	; 0x03
    2336:	10 97       	sbiw	r26, 0x00	; 0
    2338:	29 f0       	breq	.+10     	; 0x2344 <malloc+0x44>
    233a:	13 96       	adiw	r26, 0x03	; 3
    233c:	9c 93       	st	X, r25
    233e:	8e 93       	st	-X, r24
    2340:	12 97       	sbiw	r26, 0x02	; 2
    2342:	2c c0       	rjmp	.+88     	; 0x239c <malloc+0x9c>
    2344:	90 93 24 07 	sts	0x0724, r25
    2348:	80 93 23 07 	sts	0x0723, r24
    234c:	27 c0       	rjmp	.+78     	; 0x239c <malloc+0x9c>
    234e:	21 15       	cp	r18, r1
    2350:	31 05       	cpc	r19, r1
    2352:	19 f0       	breq	.+6      	; 0x235a <malloc+0x5a>
    2354:	82 17       	cp	r24, r18
    2356:	93 07       	cpc	r25, r19
    2358:	18 f4       	brcc	.+6      	; 0x2360 <malloc+0x60>
    235a:	9c 01       	movw	r18, r24
    235c:	bd 01       	movw	r22, r26
    235e:	ef 01       	movw	r28, r30
    2360:	92 81       	ldd	r25, Z+2	; 0x02
    2362:	83 81       	ldd	r24, Z+3	; 0x03
    2364:	df 01       	movw	r26, r30
    2366:	e9 2f       	mov	r30, r25
    2368:	f8 2f       	mov	r31, r24
    236a:	30 97       	sbiw	r30, 0x00	; 0
    236c:	d1 f6       	brne	.-76     	; 0x2322 <malloc+0x22>
    236e:	21 15       	cp	r18, r1
    2370:	31 05       	cpc	r19, r1
    2372:	f9 f0       	breq	.+62     	; 0x23b2 <malloc+0xb2>
    2374:	c9 01       	movw	r24, r18
    2376:	84 1b       	sub	r24, r20
    2378:	95 0b       	sbc	r25, r21
    237a:	84 30       	cpi	r24, 0x04	; 4
    237c:	91 05       	cpc	r25, r1
    237e:	80 f4       	brcc	.+32     	; 0x23a0 <malloc+0xa0>
    2380:	8a 81       	ldd	r24, Y+2	; 0x02
    2382:	9b 81       	ldd	r25, Y+3	; 0x03
    2384:	61 15       	cp	r22, r1
    2386:	71 05       	cpc	r23, r1
    2388:	21 f0       	breq	.+8      	; 0x2392 <malloc+0x92>
    238a:	fb 01       	movw	r30, r22
    238c:	93 83       	std	Z+3, r25	; 0x03
    238e:	82 83       	std	Z+2, r24	; 0x02
    2390:	04 c0       	rjmp	.+8      	; 0x239a <malloc+0x9a>
    2392:	90 93 24 07 	sts	0x0724, r25
    2396:	80 93 23 07 	sts	0x0723, r24
    239a:	fe 01       	movw	r30, r28
    239c:	32 96       	adiw	r30, 0x02	; 2
    239e:	42 c0       	rjmp	.+132    	; 0x2424 <malloc+0x124>
    23a0:	fe 01       	movw	r30, r28
    23a2:	e8 0f       	add	r30, r24
    23a4:	f9 1f       	adc	r31, r25
    23a6:	41 93       	st	Z+, r20
    23a8:	51 93       	st	Z+, r21
    23aa:	02 97       	sbiw	r24, 0x02	; 2
    23ac:	99 83       	std	Y+1, r25	; 0x01
    23ae:	88 83       	st	Y, r24
    23b0:	39 c0       	rjmp	.+114    	; 0x2424 <malloc+0x124>
    23b2:	80 91 21 07 	lds	r24, 0x0721
    23b6:	90 91 22 07 	lds	r25, 0x0722
    23ba:	00 97       	sbiw	r24, 0x00	; 0
    23bc:	41 f4       	brne	.+16     	; 0x23ce <malloc+0xce>
    23be:	80 91 dd 05 	lds	r24, 0x05DD
    23c2:	90 91 de 05 	lds	r25, 0x05DE
    23c6:	90 93 22 07 	sts	0x0722, r25
    23ca:	80 93 21 07 	sts	0x0721, r24
    23ce:	20 91 db 05 	lds	r18, 0x05DB
    23d2:	30 91 dc 05 	lds	r19, 0x05DC
    23d6:	21 15       	cp	r18, r1
    23d8:	31 05       	cpc	r19, r1
    23da:	41 f4       	brne	.+16     	; 0x23ec <malloc+0xec>
    23dc:	2d b7       	in	r18, 0x3d	; 61
    23de:	3e b7       	in	r19, 0x3e	; 62
    23e0:	80 91 df 05 	lds	r24, 0x05DF
    23e4:	90 91 e0 05 	lds	r25, 0x05E0
    23e8:	28 1b       	sub	r18, r24
    23ea:	39 0b       	sbc	r19, r25
    23ec:	e0 91 21 07 	lds	r30, 0x0721
    23f0:	f0 91 22 07 	lds	r31, 0x0722
    23f4:	e2 17       	cp	r30, r18
    23f6:	f3 07       	cpc	r31, r19
    23f8:	98 f4       	brcc	.+38     	; 0x2420 <malloc+0x120>
    23fa:	2e 1b       	sub	r18, r30
    23fc:	3f 0b       	sbc	r19, r31
    23fe:	24 17       	cp	r18, r20
    2400:	35 07       	cpc	r19, r21
    2402:	70 f0       	brcs	.+28     	; 0x2420 <malloc+0x120>
    2404:	ca 01       	movw	r24, r20
    2406:	02 96       	adiw	r24, 0x02	; 2
    2408:	28 17       	cp	r18, r24
    240a:	39 07       	cpc	r19, r25
    240c:	48 f0       	brcs	.+18     	; 0x2420 <malloc+0x120>
    240e:	8e 0f       	add	r24, r30
    2410:	9f 1f       	adc	r25, r31
    2412:	90 93 22 07 	sts	0x0722, r25
    2416:	80 93 21 07 	sts	0x0721, r24
    241a:	41 93       	st	Z+, r20
    241c:	51 93       	st	Z+, r21
    241e:	02 c0       	rjmp	.+4      	; 0x2424 <malloc+0x124>
    2420:	e0 e0       	ldi	r30, 0x00	; 0
    2422:	f0 e0       	ldi	r31, 0x00	; 0
    2424:	cf 01       	movw	r24, r30
    2426:	df 91       	pop	r29
    2428:	cf 91       	pop	r28
    242a:	08 95       	ret

0000242c <free>:
    242c:	0f 93       	push	r16
    242e:	1f 93       	push	r17
    2430:	cf 93       	push	r28
    2432:	df 93       	push	r29
    2434:	9c 01       	movw	r18, r24
    2436:	00 97       	sbiw	r24, 0x00	; 0
    2438:	09 f4       	brne	.+2      	; 0x243c <free+0x10>
    243a:	8c c0       	rjmp	.+280    	; 0x2554 <free+0x128>
    243c:	dc 01       	movw	r26, r24
    243e:	12 97       	sbiw	r26, 0x02	; 2
    2440:	13 96       	adiw	r26, 0x03	; 3
    2442:	1c 92       	st	X, r1
    2444:	1e 92       	st	-X, r1
    2446:	12 97       	sbiw	r26, 0x02	; 2
    2448:	60 91 23 07 	lds	r22, 0x0723
    244c:	70 91 24 07 	lds	r23, 0x0724
    2450:	61 15       	cp	r22, r1
    2452:	71 05       	cpc	r23, r1
    2454:	89 f4       	brne	.+34     	; 0x2478 <free+0x4c>
    2456:	8d 91       	ld	r24, X+
    2458:	9c 91       	ld	r25, X
    245a:	11 97       	sbiw	r26, 0x01	; 1
    245c:	82 0f       	add	r24, r18
    245e:	93 1f       	adc	r25, r19
    2460:	20 91 21 07 	lds	r18, 0x0721
    2464:	30 91 22 07 	lds	r19, 0x0722
    2468:	28 17       	cp	r18, r24
    246a:	39 07       	cpc	r19, r25
    246c:	69 f5       	brne	.+90     	; 0x24c8 <free+0x9c>
    246e:	b0 93 22 07 	sts	0x0722, r27
    2472:	a0 93 21 07 	sts	0x0721, r26
    2476:	6e c0       	rjmp	.+220    	; 0x2554 <free+0x128>
    2478:	fb 01       	movw	r30, r22
    247a:	40 e0       	ldi	r20, 0x00	; 0
    247c:	50 e0       	ldi	r21, 0x00	; 0
    247e:	01 c0       	rjmp	.+2      	; 0x2482 <free+0x56>
    2480:	fc 01       	movw	r30, r24
    2482:	ea 17       	cp	r30, r26
    2484:	fb 07       	cpc	r31, r27
    2486:	30 f4       	brcc	.+12     	; 0x2494 <free+0x68>
    2488:	82 81       	ldd	r24, Z+2	; 0x02
    248a:	93 81       	ldd	r25, Z+3	; 0x03
    248c:	af 01       	movw	r20, r30
    248e:	00 97       	sbiw	r24, 0x00	; 0
    2490:	b9 f7       	brne	.-18     	; 0x2480 <free+0x54>
    2492:	1f c0       	rjmp	.+62     	; 0x24d2 <free+0xa6>
    2494:	e9 01       	movw	r28, r18
    2496:	22 97       	sbiw	r28, 0x02	; 2
    2498:	fb 83       	std	Y+3, r31	; 0x03
    249a:	ea 83       	std	Y+2, r30	; 0x02
    249c:	08 81       	ld	r16, Y
    249e:	19 81       	ldd	r17, Y+1	; 0x01
    24a0:	c9 01       	movw	r24, r18
    24a2:	80 0f       	add	r24, r16
    24a4:	91 1f       	adc	r25, r17
    24a6:	8e 17       	cp	r24, r30
    24a8:	9f 07       	cpc	r25, r31
    24aa:	59 f4       	brne	.+22     	; 0x24c2 <free+0x96>
    24ac:	80 81       	ld	r24, Z
    24ae:	91 81       	ldd	r25, Z+1	; 0x01
    24b0:	80 0f       	add	r24, r16
    24b2:	91 1f       	adc	r25, r17
    24b4:	02 96       	adiw	r24, 0x02	; 2
    24b6:	99 83       	std	Y+1, r25	; 0x01
    24b8:	88 83       	st	Y, r24
    24ba:	82 81       	ldd	r24, Z+2	; 0x02
    24bc:	93 81       	ldd	r25, Z+3	; 0x03
    24be:	9b 83       	std	Y+3, r25	; 0x03
    24c0:	8a 83       	std	Y+2, r24	; 0x02
    24c2:	41 15       	cp	r20, r1
    24c4:	51 05       	cpc	r21, r1
    24c6:	29 f4       	brne	.+10     	; 0x24d2 <free+0xa6>
    24c8:	b0 93 24 07 	sts	0x0724, r27
    24cc:	a0 93 23 07 	sts	0x0723, r26
    24d0:	41 c0       	rjmp	.+130    	; 0x2554 <free+0x128>
    24d2:	fa 01       	movw	r30, r20
    24d4:	b3 83       	std	Z+3, r27	; 0x03
    24d6:	a2 83       	std	Z+2, r26	; 0x02
    24d8:	c1 91       	ld	r28, Z+
    24da:	d1 91       	ld	r29, Z+
    24dc:	ec 0f       	add	r30, r28
    24de:	fd 1f       	adc	r31, r29
    24e0:	ae 17       	cp	r26, r30
    24e2:	bf 07       	cpc	r27, r31
    24e4:	81 f4       	brne	.+32     	; 0x2506 <free+0xda>
    24e6:	f9 01       	movw	r30, r18
    24e8:	92 91       	ld	r25, -Z
    24ea:	82 91       	ld	r24, -Z
    24ec:	8c 0f       	add	r24, r28
    24ee:	9d 1f       	adc	r25, r29
    24f0:	02 96       	adiw	r24, 0x02	; 2
    24f2:	da 01       	movw	r26, r20
    24f4:	11 96       	adiw	r26, 0x01	; 1
    24f6:	9c 93       	st	X, r25
    24f8:	8e 93       	st	-X, r24
    24fa:	82 81       	ldd	r24, Z+2	; 0x02
    24fc:	93 81       	ldd	r25, Z+3	; 0x03
    24fe:	13 96       	adiw	r26, 0x03	; 3
    2500:	9c 93       	st	X, r25
    2502:	8e 93       	st	-X, r24
    2504:	12 97       	sbiw	r26, 0x02	; 2
    2506:	e0 e0       	ldi	r30, 0x00	; 0
    2508:	f0 e0       	ldi	r31, 0x00	; 0
    250a:	02 c0       	rjmp	.+4      	; 0x2510 <free+0xe4>
    250c:	fb 01       	movw	r30, r22
    250e:	bc 01       	movw	r22, r24
    2510:	db 01       	movw	r26, r22
    2512:	12 96       	adiw	r26, 0x02	; 2
    2514:	8d 91       	ld	r24, X+
    2516:	9c 91       	ld	r25, X
    2518:	13 97       	sbiw	r26, 0x03	; 3
    251a:	00 97       	sbiw	r24, 0x00	; 0
    251c:	b9 f7       	brne	.-18     	; 0x250c <free+0xe0>
    251e:	cb 01       	movw	r24, r22
    2520:	02 96       	adiw	r24, 0x02	; 2
    2522:	2d 91       	ld	r18, X+
    2524:	3c 91       	ld	r19, X
    2526:	11 97       	sbiw	r26, 0x01	; 1
    2528:	82 0f       	add	r24, r18
    252a:	93 1f       	adc	r25, r19
    252c:	20 91 21 07 	lds	r18, 0x0721
    2530:	30 91 22 07 	lds	r19, 0x0722
    2534:	28 17       	cp	r18, r24
    2536:	39 07       	cpc	r19, r25
    2538:	69 f4       	brne	.+26     	; 0x2554 <free+0x128>
    253a:	30 97       	sbiw	r30, 0x00	; 0
    253c:	29 f4       	brne	.+10     	; 0x2548 <free+0x11c>
    253e:	10 92 24 07 	sts	0x0724, r1
    2542:	10 92 23 07 	sts	0x0723, r1
    2546:	02 c0       	rjmp	.+4      	; 0x254c <free+0x120>
    2548:	13 82       	std	Z+3, r1	; 0x03
    254a:	12 82       	std	Z+2, r1	; 0x02
    254c:	70 93 22 07 	sts	0x0722, r23
    2550:	60 93 21 07 	sts	0x0721, r22
    2554:	df 91       	pop	r29
    2556:	cf 91       	pop	r28
    2558:	1f 91       	pop	r17
    255a:	0f 91       	pop	r16
    255c:	08 95       	ret

0000255e <do_rand>:
    255e:	8f 92       	push	r8
    2560:	9f 92       	push	r9
    2562:	af 92       	push	r10
    2564:	bf 92       	push	r11
    2566:	cf 92       	push	r12
    2568:	df 92       	push	r13
    256a:	ef 92       	push	r14
    256c:	ff 92       	push	r15
    256e:	cf 93       	push	r28
    2570:	df 93       	push	r29
    2572:	ec 01       	movw	r28, r24
    2574:	88 81       	ld	r24, Y
    2576:	99 81       	ldd	r25, Y+1	; 0x01
    2578:	aa 81       	ldd	r26, Y+2	; 0x02
    257a:	bb 81       	ldd	r27, Y+3	; 0x03
    257c:	00 97       	sbiw	r24, 0x00	; 0
    257e:	a1 05       	cpc	r26, r1
    2580:	b1 05       	cpc	r27, r1
    2582:	21 f4       	brne	.+8      	; 0x258c <do_rand+0x2e>
    2584:	84 e2       	ldi	r24, 0x24	; 36
    2586:	99 ed       	ldi	r25, 0xD9	; 217
    2588:	ab e5       	ldi	r26, 0x5B	; 91
    258a:	b7 e0       	ldi	r27, 0x07	; 7
    258c:	bc 01       	movw	r22, r24
    258e:	cd 01       	movw	r24, r26
    2590:	2d e1       	ldi	r18, 0x1D	; 29
    2592:	33 ef       	ldi	r19, 0xF3	; 243
    2594:	41 e0       	ldi	r20, 0x01	; 1
    2596:	50 e0       	ldi	r21, 0x00	; 0
    2598:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <__divmodsi4>
    259c:	49 01       	movw	r8, r18
    259e:	5a 01       	movw	r10, r20
    25a0:	27 ea       	ldi	r18, 0xA7	; 167
    25a2:	31 e4       	ldi	r19, 0x41	; 65
    25a4:	40 e0       	ldi	r20, 0x00	; 0
    25a6:	50 e0       	ldi	r21, 0x00	; 0
    25a8:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <__mulsi3>
    25ac:	6b 01       	movw	r12, r22
    25ae:	7c 01       	movw	r14, r24
    25b0:	c5 01       	movw	r24, r10
    25b2:	b4 01       	movw	r22, r8
    25b4:	2c ee       	ldi	r18, 0xEC	; 236
    25b6:	34 ef       	ldi	r19, 0xF4	; 244
    25b8:	4f ef       	ldi	r20, 0xFF	; 255
    25ba:	5f ef       	ldi	r21, 0xFF	; 255
    25bc:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <__mulsi3>
    25c0:	dc 01       	movw	r26, r24
    25c2:	cb 01       	movw	r24, r22
    25c4:	c8 0e       	add	r12, r24
    25c6:	d9 1e       	adc	r13, r25
    25c8:	ea 1e       	adc	r14, r26
    25ca:	fb 1e       	adc	r15, r27
    25cc:	f7 fe       	sbrs	r15, 7
    25ce:	08 c0       	rjmp	.+16     	; 0x25e0 <do_rand+0x82>
    25d0:	8f ef       	ldi	r24, 0xFF	; 255
    25d2:	9f ef       	ldi	r25, 0xFF	; 255
    25d4:	af ef       	ldi	r26, 0xFF	; 255
    25d6:	bf e7       	ldi	r27, 0x7F	; 127
    25d8:	c8 0e       	add	r12, r24
    25da:	d9 1e       	adc	r13, r25
    25dc:	ea 1e       	adc	r14, r26
    25de:	fb 1e       	adc	r15, r27
    25e0:	c8 82       	st	Y, r12
    25e2:	d9 82       	std	Y+1, r13	; 0x01
    25e4:	ea 82       	std	Y+2, r14	; 0x02
    25e6:	fb 82       	std	Y+3, r15	; 0x03
    25e8:	c6 01       	movw	r24, r12
    25ea:	9f 77       	andi	r25, 0x7F	; 127
    25ec:	df 91       	pop	r29
    25ee:	cf 91       	pop	r28
    25f0:	ff 90       	pop	r15
    25f2:	ef 90       	pop	r14
    25f4:	df 90       	pop	r13
    25f6:	cf 90       	pop	r12
    25f8:	bf 90       	pop	r11
    25fa:	af 90       	pop	r10
    25fc:	9f 90       	pop	r9
    25fe:	8f 90       	pop	r8
    2600:	08 95       	ret

00002602 <rand_r>:
    2602:	0e 94 af 12 	call	0x255e	; 0x255e <do_rand>
    2606:	08 95       	ret

00002608 <rand>:
    2608:	81 ee       	ldi	r24, 0xE1	; 225
    260a:	95 e0       	ldi	r25, 0x05	; 5
    260c:	0e 94 af 12 	call	0x255e	; 0x255e <do_rand>
    2610:	08 95       	ret

00002612 <srand>:
    2612:	a0 e0       	ldi	r26, 0x00	; 0
    2614:	b0 e0       	ldi	r27, 0x00	; 0
    2616:	80 93 e1 05 	sts	0x05E1, r24
    261a:	90 93 e2 05 	sts	0x05E2, r25
    261e:	a0 93 e3 05 	sts	0x05E3, r26
    2622:	b0 93 e4 05 	sts	0x05E4, r27
    2626:	08 95       	ret

00002628 <atoi>:
    2628:	fc 01       	movw	r30, r24
    262a:	88 27       	eor	r24, r24
    262c:	99 27       	eor	r25, r25
    262e:	e8 94       	clt
    2630:	21 91       	ld	r18, Z+
    2632:	20 32       	cpi	r18, 0x20	; 32
    2634:	e9 f3       	breq	.-6      	; 0x2630 <atoi+0x8>
    2636:	29 30       	cpi	r18, 0x09	; 9
    2638:	10 f0       	brcs	.+4      	; 0x263e <atoi+0x16>
    263a:	2e 30       	cpi	r18, 0x0E	; 14
    263c:	c8 f3       	brcs	.-14     	; 0x2630 <atoi+0x8>
    263e:	2b 32       	cpi	r18, 0x2B	; 43
    2640:	41 f0       	breq	.+16     	; 0x2652 <atoi+0x2a>
    2642:	2d 32       	cpi	r18, 0x2D	; 45
    2644:	39 f4       	brne	.+14     	; 0x2654 <atoi+0x2c>
    2646:	68 94       	set
    2648:	04 c0       	rjmp	.+8      	; 0x2652 <atoi+0x2a>
    264a:	0e 94 6e 13 	call	0x26dc	; 0x26dc <__mulhi_const_10>
    264e:	82 0f       	add	r24, r18
    2650:	91 1d       	adc	r25, r1
    2652:	21 91       	ld	r18, Z+
    2654:	20 53       	subi	r18, 0x30	; 48
    2656:	2a 30       	cpi	r18, 0x0A	; 10
    2658:	c0 f3       	brcs	.-16     	; 0x264a <atoi+0x22>
    265a:	1e f4       	brtc	.+6      	; 0x2662 <atoi+0x3a>
    265c:	90 95       	com	r25
    265e:	81 95       	neg	r24
    2660:	9f 4f       	sbci	r25, 0xFF	; 255
    2662:	08 95       	ret

00002664 <strtok>:
    2664:	42 ef       	ldi	r20, 0xF2	; 242
    2666:	55 e0       	ldi	r21, 0x05	; 5
    2668:	0e 94 47 13 	call	0x268e	; 0x268e <strtok_r>
    266c:	08 95       	ret

0000266e <strcmp>:
    266e:	fb 01       	movw	r30, r22
    2670:	dc 01       	movw	r26, r24
    2672:	8d 91       	ld	r24, X+
    2674:	01 90       	ld	r0, Z+
    2676:	80 19       	sub	r24, r0
    2678:	01 10       	cpse	r0, r1
    267a:	d9 f3       	breq	.-10     	; 0x2672 <strcmp+0x4>
    267c:	99 0b       	sbc	r25, r25
    267e:	08 95       	ret

00002680 <strcpy>:
    2680:	fb 01       	movw	r30, r22
    2682:	dc 01       	movw	r26, r24
    2684:	01 90       	ld	r0, Z+
    2686:	0d 92       	st	X+, r0
    2688:	00 20       	and	r0, r0
    268a:	e1 f7       	brne	.-8      	; 0x2684 <strcpy+0x4>
    268c:	08 95       	ret

0000268e <strtok_r>:
    268e:	fa 01       	movw	r30, r20
    2690:	a1 91       	ld	r26, Z+
    2692:	b0 81       	ld	r27, Z
    2694:	00 97       	sbiw	r24, 0x00	; 0
    2696:	19 f4       	brne	.+6      	; 0x269e <strtok_r+0x10>
    2698:	10 97       	sbiw	r26, 0x00	; 0
    269a:	e1 f0       	breq	.+56     	; 0x26d4 <strtok_r+0x46>
    269c:	cd 01       	movw	r24, r26
    269e:	dc 01       	movw	r26, r24
    26a0:	cd 01       	movw	r24, r26
    26a2:	0d 90       	ld	r0, X+
    26a4:	00 20       	and	r0, r0
    26a6:	11 f4       	brne	.+4      	; 0x26ac <strtok_r+0x1e>
    26a8:	c0 01       	movw	r24, r0
    26aa:	13 c0       	rjmp	.+38     	; 0x26d2 <strtok_r+0x44>
    26ac:	fb 01       	movw	r30, r22
    26ae:	21 91       	ld	r18, Z+
    26b0:	22 23       	and	r18, r18
    26b2:	19 f0       	breq	.+6      	; 0x26ba <strtok_r+0x2c>
    26b4:	20 15       	cp	r18, r0
    26b6:	d9 f7       	brne	.-10     	; 0x26ae <strtok_r+0x20>
    26b8:	f3 cf       	rjmp	.-26     	; 0x26a0 <strtok_r+0x12>
    26ba:	fb 01       	movw	r30, r22
    26bc:	21 91       	ld	r18, Z+
    26be:	20 15       	cp	r18, r0
    26c0:	19 f4       	brne	.+6      	; 0x26c8 <strtok_r+0x3a>
    26c2:	1e 92       	st	-X, r1
    26c4:	11 96       	adiw	r26, 0x01	; 1
    26c6:	06 c0       	rjmp	.+12     	; 0x26d4 <strtok_r+0x46>
    26c8:	22 23       	and	r18, r18
    26ca:	c1 f7       	brne	.-16     	; 0x26bc <strtok_r+0x2e>
    26cc:	0d 90       	ld	r0, X+
    26ce:	00 20       	and	r0, r0
    26d0:	a1 f7       	brne	.-24     	; 0x26ba <strtok_r+0x2c>
    26d2:	d0 01       	movw	r26, r0
    26d4:	fa 01       	movw	r30, r20
    26d6:	a1 93       	st	Z+, r26
    26d8:	b0 83       	st	Z, r27
    26da:	08 95       	ret

000026dc <__mulhi_const_10>:
    26dc:	7a e0       	ldi	r23, 0x0A	; 10
    26de:	97 9f       	mul	r25, r23
    26e0:	90 2d       	mov	r25, r0
    26e2:	87 9f       	mul	r24, r23
    26e4:	80 2d       	mov	r24, r0
    26e6:	91 0d       	add	r25, r1
    26e8:	11 24       	eor	r1, r1
    26ea:	08 95       	ret

000026ec <fgets>:
    26ec:	cf 92       	push	r12
    26ee:	df 92       	push	r13
    26f0:	ef 92       	push	r14
    26f2:	ff 92       	push	r15
    26f4:	0f 93       	push	r16
    26f6:	1f 93       	push	r17
    26f8:	cf 93       	push	r28
    26fa:	df 93       	push	r29
    26fc:	8c 01       	movw	r16, r24
    26fe:	6a 01       	movw	r12, r20
    2700:	fa 01       	movw	r30, r20
    2702:	83 81       	ldd	r24, Z+3	; 0x03
    2704:	80 ff       	sbrs	r24, 0
    2706:	1a c0       	rjmp	.+52     	; 0x273c <fgets+0x50>
    2708:	16 16       	cp	r1, r22
    270a:	17 06       	cpc	r1, r23
    270c:	bc f4       	brge	.+46     	; 0x273c <fgets+0x50>
    270e:	7b 01       	movw	r14, r22
    2710:	e8 01       	movw	r28, r16
    2712:	0e c0       	rjmp	.+28     	; 0x2730 <fgets+0x44>
    2714:	c6 01       	movw	r24, r12
    2716:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <fgetc>
    271a:	ff ef       	ldi	r31, 0xFF	; 255
    271c:	8f 3f       	cpi	r24, 0xFF	; 255
    271e:	9f 07       	cpc	r25, r31
    2720:	69 f0       	breq	.+26     	; 0x273c <fgets+0x50>
    2722:	89 93       	st	Y+, r24
    2724:	08 94       	sec
    2726:	e1 08       	sbc	r14, r1
    2728:	f1 08       	sbc	r15, r1
    272a:	8a 30       	cpi	r24, 0x0A	; 10
    272c:	91 05       	cpc	r25, r1
    272e:	21 f0       	breq	.+8      	; 0x2738 <fgets+0x4c>
    2730:	21 e0       	ldi	r18, 0x01	; 1
    2732:	e2 16       	cp	r14, r18
    2734:	f1 04       	cpc	r15, r1
    2736:	71 f7       	brne	.-36     	; 0x2714 <fgets+0x28>
    2738:	18 82       	st	Y, r1
    273a:	02 c0       	rjmp	.+4      	; 0x2740 <fgets+0x54>
    273c:	00 e0       	ldi	r16, 0x00	; 0
    273e:	10 e0       	ldi	r17, 0x00	; 0
    2740:	c8 01       	movw	r24, r16
    2742:	df 91       	pop	r29
    2744:	cf 91       	pop	r28
    2746:	1f 91       	pop	r17
    2748:	0f 91       	pop	r16
    274a:	ff 90       	pop	r15
    274c:	ef 90       	pop	r14
    274e:	df 90       	pop	r13
    2750:	cf 90       	pop	r12
    2752:	08 95       	ret

00002754 <gets>:
    2754:	0f 93       	push	r16
    2756:	1f 93       	push	r17
    2758:	cf 93       	push	r28
    275a:	df 93       	push	r29
    275c:	8c 01       	movw	r16, r24
    275e:	e0 91 25 07 	lds	r30, 0x0725
    2762:	f0 91 26 07 	lds	r31, 0x0726
    2766:	83 81       	ldd	r24, Z+3	; 0x03
    2768:	80 ff       	sbrs	r24, 0
    276a:	12 c0       	rjmp	.+36     	; 0x2790 <gets+0x3c>
    276c:	e8 01       	movw	r28, r16
    276e:	80 91 25 07 	lds	r24, 0x0725
    2772:	90 91 26 07 	lds	r25, 0x0726
    2776:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <fgetc>
    277a:	2f ef       	ldi	r18, 0xFF	; 255
    277c:	8f 3f       	cpi	r24, 0xFF	; 255
    277e:	92 07       	cpc	r25, r18
    2780:	39 f0       	breq	.+14     	; 0x2790 <gets+0x3c>
    2782:	89 93       	st	Y+, r24
    2784:	8a 30       	cpi	r24, 0x0A	; 10
    2786:	91 05       	cpc	r25, r1
    2788:	91 f7       	brne	.-28     	; 0x276e <gets+0x1a>
    278a:	21 97       	sbiw	r28, 0x01	; 1
    278c:	18 82       	st	Y, r1
    278e:	02 c0       	rjmp	.+4      	; 0x2794 <gets+0x40>
    2790:	00 e0       	ldi	r16, 0x00	; 0
    2792:	10 e0       	ldi	r17, 0x00	; 0
    2794:	c8 01       	movw	r24, r16
    2796:	df 91       	pop	r29
    2798:	cf 91       	pop	r28
    279a:	1f 91       	pop	r17
    279c:	0f 91       	pop	r16
    279e:	08 95       	ret

000027a0 <printf>:
    27a0:	cf 93       	push	r28
    27a2:	df 93       	push	r29
    27a4:	cd b7       	in	r28, 0x3d	; 61
    27a6:	de b7       	in	r29, 0x3e	; 62
    27a8:	fe 01       	movw	r30, r28
    27aa:	36 96       	adiw	r30, 0x06	; 6
    27ac:	61 91       	ld	r22, Z+
    27ae:	71 91       	ld	r23, Z+
    27b0:	80 91 27 07 	lds	r24, 0x0727
    27b4:	90 91 28 07 	lds	r25, 0x0728
    27b8:	af 01       	movw	r20, r30
    27ba:	0e 94 46 14 	call	0x288c	; 0x288c <vfprintf>
    27be:	df 91       	pop	r29
    27c0:	cf 91       	pop	r28
    27c2:	08 95       	ret

000027c4 <putchar>:
    27c4:	60 91 27 07 	lds	r22, 0x0727
    27c8:	70 91 28 07 	lds	r23, 0x0728
    27cc:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <fputc>
    27d0:	08 95       	ret

000027d2 <puts>:
    27d2:	0f 93       	push	r16
    27d4:	1f 93       	push	r17
    27d6:	cf 93       	push	r28
    27d8:	df 93       	push	r29
    27da:	8c 01       	movw	r16, r24
    27dc:	e0 91 27 07 	lds	r30, 0x0727
    27e0:	f0 91 28 07 	lds	r31, 0x0728
    27e4:	83 81       	ldd	r24, Z+3	; 0x03
    27e6:	81 ff       	sbrs	r24, 1
    27e8:	1a c0       	rjmp	.+52     	; 0x281e <puts+0x4c>
    27ea:	c0 e0       	ldi	r28, 0x00	; 0
    27ec:	d0 e0       	ldi	r29, 0x00	; 0
    27ee:	05 c0       	rjmp	.+10     	; 0x27fa <puts+0x28>
    27f0:	19 95       	eicall
    27f2:	00 97       	sbiw	r24, 0x00	; 0
    27f4:	11 f0       	breq	.+4      	; 0x27fa <puts+0x28>
    27f6:	cf ef       	ldi	r28, 0xFF	; 255
    27f8:	df ef       	ldi	r29, 0xFF	; 255
    27fa:	f8 01       	movw	r30, r16
    27fc:	81 91       	ld	r24, Z+
    27fe:	8f 01       	movw	r16, r30
    2800:	60 91 27 07 	lds	r22, 0x0727
    2804:	70 91 28 07 	lds	r23, 0x0728
    2808:	db 01       	movw	r26, r22
    280a:	18 96       	adiw	r26, 0x08	; 8
    280c:	ed 91       	ld	r30, X+
    280e:	fc 91       	ld	r31, X
    2810:	19 97       	sbiw	r26, 0x09	; 9
    2812:	88 23       	and	r24, r24
    2814:	69 f7       	brne	.-38     	; 0x27f0 <puts+0x1e>
    2816:	8a e0       	ldi	r24, 0x0A	; 10
    2818:	19 95       	eicall
    281a:	00 97       	sbiw	r24, 0x00	; 0
    281c:	11 f0       	breq	.+4      	; 0x2822 <puts+0x50>
    281e:	cf ef       	ldi	r28, 0xFF	; 255
    2820:	df ef       	ldi	r29, 0xFF	; 255
    2822:	ce 01       	movw	r24, r28
    2824:	df 91       	pop	r29
    2826:	cf 91       	pop	r28
    2828:	1f 91       	pop	r17
    282a:	0f 91       	pop	r16
    282c:	08 95       	ret

0000282e <sprintf>:
    282e:	0f 93       	push	r16
    2830:	1f 93       	push	r17
    2832:	cf 93       	push	r28
    2834:	df 93       	push	r29
    2836:	cd b7       	in	r28, 0x3d	; 61
    2838:	de b7       	in	r29, 0x3e	; 62
    283a:	2e 97       	sbiw	r28, 0x0e	; 14
    283c:	0f b6       	in	r0, 0x3f	; 63
    283e:	f8 94       	cli
    2840:	de bf       	out	0x3e, r29	; 62
    2842:	0f be       	out	0x3f, r0	; 63
    2844:	cd bf       	out	0x3d, r28	; 61
    2846:	0e 89       	ldd	r16, Y+22	; 0x16
    2848:	1f 89       	ldd	r17, Y+23	; 0x17
    284a:	86 e0       	ldi	r24, 0x06	; 6
    284c:	8c 83       	std	Y+4, r24	; 0x04
    284e:	1a 83       	std	Y+2, r17	; 0x02
    2850:	09 83       	std	Y+1, r16	; 0x01
    2852:	8f ef       	ldi	r24, 0xFF	; 255
    2854:	9f e7       	ldi	r25, 0x7F	; 127
    2856:	9e 83       	std	Y+6, r25	; 0x06
    2858:	8d 83       	std	Y+5, r24	; 0x05
    285a:	ae 01       	movw	r20, r28
    285c:	46 5e       	subi	r20, 0xE6	; 230
    285e:	5f 4f       	sbci	r21, 0xFF	; 255
    2860:	ce 01       	movw	r24, r28
    2862:	01 96       	adiw	r24, 0x01	; 1
    2864:	68 8d       	ldd	r22, Y+24	; 0x18
    2866:	79 8d       	ldd	r23, Y+25	; 0x19
    2868:	0e 94 46 14 	call	0x288c	; 0x288c <vfprintf>
    286c:	ef 81       	ldd	r30, Y+7	; 0x07
    286e:	f8 85       	ldd	r31, Y+8	; 0x08
    2870:	e0 0f       	add	r30, r16
    2872:	f1 1f       	adc	r31, r17
    2874:	10 82       	st	Z, r1
    2876:	2e 96       	adiw	r28, 0x0e	; 14
    2878:	0f b6       	in	r0, 0x3f	; 63
    287a:	f8 94       	cli
    287c:	de bf       	out	0x3e, r29	; 62
    287e:	0f be       	out	0x3f, r0	; 63
    2880:	cd bf       	out	0x3d, r28	; 61
    2882:	df 91       	pop	r29
    2884:	cf 91       	pop	r28
    2886:	1f 91       	pop	r17
    2888:	0f 91       	pop	r16
    288a:	08 95       	ret

0000288c <vfprintf>:
    288c:	2f 92       	push	r2
    288e:	3f 92       	push	r3
    2890:	4f 92       	push	r4
    2892:	5f 92       	push	r5
    2894:	6f 92       	push	r6
    2896:	7f 92       	push	r7
    2898:	8f 92       	push	r8
    289a:	9f 92       	push	r9
    289c:	af 92       	push	r10
    289e:	bf 92       	push	r11
    28a0:	cf 92       	push	r12
    28a2:	df 92       	push	r13
    28a4:	ef 92       	push	r14
    28a6:	ff 92       	push	r15
    28a8:	0f 93       	push	r16
    28aa:	1f 93       	push	r17
    28ac:	cf 93       	push	r28
    28ae:	df 93       	push	r29
    28b0:	cd b7       	in	r28, 0x3d	; 61
    28b2:	de b7       	in	r29, 0x3e	; 62
    28b4:	2d 97       	sbiw	r28, 0x0d	; 13
    28b6:	0f b6       	in	r0, 0x3f	; 63
    28b8:	f8 94       	cli
    28ba:	de bf       	out	0x3e, r29	; 62
    28bc:	0f be       	out	0x3f, r0	; 63
    28be:	cd bf       	out	0x3d, r28	; 61
    28c0:	3c 01       	movw	r6, r24
    28c2:	7d 87       	std	Y+13, r23	; 0x0d
    28c4:	6c 87       	std	Y+12, r22	; 0x0c
    28c6:	5a 01       	movw	r10, r20
    28c8:	fc 01       	movw	r30, r24
    28ca:	17 82       	std	Z+7, r1	; 0x07
    28cc:	16 82       	std	Z+6, r1	; 0x06
    28ce:	83 81       	ldd	r24, Z+3	; 0x03
    28d0:	81 ff       	sbrs	r24, 1
    28d2:	c8 c1       	rjmp	.+912    	; 0x2c64 <vfprintf+0x3d8>
    28d4:	2e 01       	movw	r4, r28
    28d6:	08 94       	sec
    28d8:	41 1c       	adc	r4, r1
    28da:	51 1c       	adc	r5, r1
    28dc:	f3 01       	movw	r30, r6
    28de:	93 81       	ldd	r25, Z+3	; 0x03
    28e0:	ec 85       	ldd	r30, Y+12	; 0x0c
    28e2:	fd 85       	ldd	r31, Y+13	; 0x0d
    28e4:	93 fd       	sbrc	r25, 3
    28e6:	85 91       	lpm	r24, Z+
    28e8:	93 ff       	sbrs	r25, 3
    28ea:	81 91       	ld	r24, Z+
    28ec:	fd 87       	std	Y+13, r31	; 0x0d
    28ee:	ec 87       	std	Y+12, r30	; 0x0c
    28f0:	88 23       	and	r24, r24
    28f2:	09 f4       	brne	.+2      	; 0x28f6 <vfprintf+0x6a>
    28f4:	b3 c1       	rjmp	.+870    	; 0x2c5c <vfprintf+0x3d0>
    28f6:	85 32       	cpi	r24, 0x25	; 37
    28f8:	41 f4       	brne	.+16     	; 0x290a <vfprintf+0x7e>
    28fa:	93 fd       	sbrc	r25, 3
    28fc:	85 91       	lpm	r24, Z+
    28fe:	93 ff       	sbrs	r25, 3
    2900:	81 91       	ld	r24, Z+
    2902:	fd 87       	std	Y+13, r31	; 0x0d
    2904:	ec 87       	std	Y+12, r30	; 0x0c
    2906:	85 32       	cpi	r24, 0x25	; 37
    2908:	29 f4       	brne	.+10     	; 0x2914 <vfprintf+0x88>
    290a:	90 e0       	ldi	r25, 0x00	; 0
    290c:	b3 01       	movw	r22, r6
    290e:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <fputc>
    2912:	e4 cf       	rjmp	.-56     	; 0x28dc <vfprintf+0x50>
    2914:	ff 24       	eor	r15, r15
    2916:	ee 24       	eor	r14, r14
    2918:	10 e0       	ldi	r17, 0x00	; 0
    291a:	10 32       	cpi	r17, 0x20	; 32
    291c:	b0 f4       	brcc	.+44     	; 0x294a <vfprintf+0xbe>
    291e:	8b 32       	cpi	r24, 0x2B	; 43
    2920:	69 f0       	breq	.+26     	; 0x293c <vfprintf+0xb0>
    2922:	8c 32       	cpi	r24, 0x2C	; 44
    2924:	28 f4       	brcc	.+10     	; 0x2930 <vfprintf+0xa4>
    2926:	80 32       	cpi	r24, 0x20	; 32
    2928:	51 f0       	breq	.+20     	; 0x293e <vfprintf+0xb2>
    292a:	83 32       	cpi	r24, 0x23	; 35
    292c:	71 f4       	brne	.+28     	; 0x294a <vfprintf+0xbe>
    292e:	0b c0       	rjmp	.+22     	; 0x2946 <vfprintf+0xba>
    2930:	8d 32       	cpi	r24, 0x2D	; 45
    2932:	39 f0       	breq	.+14     	; 0x2942 <vfprintf+0xb6>
    2934:	80 33       	cpi	r24, 0x30	; 48
    2936:	49 f4       	brne	.+18     	; 0x294a <vfprintf+0xbe>
    2938:	11 60       	ori	r17, 0x01	; 1
    293a:	2c c0       	rjmp	.+88     	; 0x2994 <vfprintf+0x108>
    293c:	12 60       	ori	r17, 0x02	; 2
    293e:	14 60       	ori	r17, 0x04	; 4
    2940:	29 c0       	rjmp	.+82     	; 0x2994 <vfprintf+0x108>
    2942:	18 60       	ori	r17, 0x08	; 8
    2944:	27 c0       	rjmp	.+78     	; 0x2994 <vfprintf+0x108>
    2946:	10 61       	ori	r17, 0x10	; 16
    2948:	25 c0       	rjmp	.+74     	; 0x2994 <vfprintf+0x108>
    294a:	17 fd       	sbrc	r17, 7
    294c:	2e c0       	rjmp	.+92     	; 0x29aa <vfprintf+0x11e>
    294e:	28 2f       	mov	r18, r24
    2950:	20 53       	subi	r18, 0x30	; 48
    2952:	2a 30       	cpi	r18, 0x0A	; 10
    2954:	98 f4       	brcc	.+38     	; 0x297c <vfprintf+0xf0>
    2956:	16 ff       	sbrs	r17, 6
    2958:	08 c0       	rjmp	.+16     	; 0x296a <vfprintf+0xde>
    295a:	8f 2d       	mov	r24, r15
    295c:	88 0f       	add	r24, r24
    295e:	f8 2e       	mov	r15, r24
    2960:	ff 0c       	add	r15, r15
    2962:	ff 0c       	add	r15, r15
    2964:	f8 0e       	add	r15, r24
    2966:	f2 0e       	add	r15, r18
    2968:	15 c0       	rjmp	.+42     	; 0x2994 <vfprintf+0x108>
    296a:	8e 2d       	mov	r24, r14
    296c:	88 0f       	add	r24, r24
    296e:	e8 2e       	mov	r14, r24
    2970:	ee 0c       	add	r14, r14
    2972:	ee 0c       	add	r14, r14
    2974:	e8 0e       	add	r14, r24
    2976:	e2 0e       	add	r14, r18
    2978:	10 62       	ori	r17, 0x20	; 32
    297a:	0c c0       	rjmp	.+24     	; 0x2994 <vfprintf+0x108>
    297c:	8e 32       	cpi	r24, 0x2E	; 46
    297e:	21 f4       	brne	.+8      	; 0x2988 <vfprintf+0xfc>
    2980:	16 fd       	sbrc	r17, 6
    2982:	6c c1       	rjmp	.+728    	; 0x2c5c <vfprintf+0x3d0>
    2984:	10 64       	ori	r17, 0x40	; 64
    2986:	06 c0       	rjmp	.+12     	; 0x2994 <vfprintf+0x108>
    2988:	8c 36       	cpi	r24, 0x6C	; 108
    298a:	11 f4       	brne	.+4      	; 0x2990 <vfprintf+0x104>
    298c:	10 68       	ori	r17, 0x80	; 128
    298e:	02 c0       	rjmp	.+4      	; 0x2994 <vfprintf+0x108>
    2990:	88 36       	cpi	r24, 0x68	; 104
    2992:	59 f4       	brne	.+22     	; 0x29aa <vfprintf+0x11e>
    2994:	ec 85       	ldd	r30, Y+12	; 0x0c
    2996:	fd 85       	ldd	r31, Y+13	; 0x0d
    2998:	93 fd       	sbrc	r25, 3
    299a:	85 91       	lpm	r24, Z+
    299c:	93 ff       	sbrs	r25, 3
    299e:	81 91       	ld	r24, Z+
    29a0:	fd 87       	std	Y+13, r31	; 0x0d
    29a2:	ec 87       	std	Y+12, r30	; 0x0c
    29a4:	88 23       	and	r24, r24
    29a6:	09 f0       	breq	.+2      	; 0x29aa <vfprintf+0x11e>
    29a8:	b8 cf       	rjmp	.-144    	; 0x291a <vfprintf+0x8e>
    29aa:	98 2f       	mov	r25, r24
    29ac:	95 54       	subi	r25, 0x45	; 69
    29ae:	93 30       	cpi	r25, 0x03	; 3
    29b0:	18 f0       	brcs	.+6      	; 0x29b8 <vfprintf+0x12c>
    29b2:	90 52       	subi	r25, 0x20	; 32
    29b4:	93 30       	cpi	r25, 0x03	; 3
    29b6:	38 f4       	brcc	.+14     	; 0x29c6 <vfprintf+0x13a>
    29b8:	24 e0       	ldi	r18, 0x04	; 4
    29ba:	30 e0       	ldi	r19, 0x00	; 0
    29bc:	a2 0e       	add	r10, r18
    29be:	b3 1e       	adc	r11, r19
    29c0:	3f e3       	ldi	r19, 0x3F	; 63
    29c2:	39 83       	std	Y+1, r19	; 0x01
    29c4:	0f c0       	rjmp	.+30     	; 0x29e4 <vfprintf+0x158>
    29c6:	83 36       	cpi	r24, 0x63	; 99
    29c8:	31 f0       	breq	.+12     	; 0x29d6 <vfprintf+0x14a>
    29ca:	83 37       	cpi	r24, 0x73	; 115
    29cc:	81 f0       	breq	.+32     	; 0x29ee <vfprintf+0x162>
    29ce:	83 35       	cpi	r24, 0x53	; 83
    29d0:	09 f0       	breq	.+2      	; 0x29d4 <vfprintf+0x148>
    29d2:	5a c0       	rjmp	.+180    	; 0x2a88 <vfprintf+0x1fc>
    29d4:	22 c0       	rjmp	.+68     	; 0x2a1a <vfprintf+0x18e>
    29d6:	f5 01       	movw	r30, r10
    29d8:	80 81       	ld	r24, Z
    29da:	89 83       	std	Y+1, r24	; 0x01
    29dc:	22 e0       	ldi	r18, 0x02	; 2
    29de:	30 e0       	ldi	r19, 0x00	; 0
    29e0:	a2 0e       	add	r10, r18
    29e2:	b3 1e       	adc	r11, r19
    29e4:	21 e0       	ldi	r18, 0x01	; 1
    29e6:	c2 2e       	mov	r12, r18
    29e8:	d1 2c       	mov	r13, r1
    29ea:	42 01       	movw	r8, r4
    29ec:	14 c0       	rjmp	.+40     	; 0x2a16 <vfprintf+0x18a>
    29ee:	92 e0       	ldi	r25, 0x02	; 2
    29f0:	29 2e       	mov	r2, r25
    29f2:	31 2c       	mov	r3, r1
    29f4:	2a 0c       	add	r2, r10
    29f6:	3b 1c       	adc	r3, r11
    29f8:	f5 01       	movw	r30, r10
    29fa:	80 80       	ld	r8, Z
    29fc:	91 80       	ldd	r9, Z+1	; 0x01
    29fe:	16 ff       	sbrs	r17, 6
    2a00:	03 c0       	rjmp	.+6      	; 0x2a08 <vfprintf+0x17c>
    2a02:	6f 2d       	mov	r22, r15
    2a04:	70 e0       	ldi	r23, 0x00	; 0
    2a06:	02 c0       	rjmp	.+4      	; 0x2a0c <vfprintf+0x180>
    2a08:	6f ef       	ldi	r22, 0xFF	; 255
    2a0a:	7f ef       	ldi	r23, 0xFF	; 255
    2a0c:	c4 01       	movw	r24, r8
    2a0e:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <strnlen>
    2a12:	6c 01       	movw	r12, r24
    2a14:	51 01       	movw	r10, r2
    2a16:	1f 77       	andi	r17, 0x7F	; 127
    2a18:	15 c0       	rjmp	.+42     	; 0x2a44 <vfprintf+0x1b8>
    2a1a:	82 e0       	ldi	r24, 0x02	; 2
    2a1c:	28 2e       	mov	r2, r24
    2a1e:	31 2c       	mov	r3, r1
    2a20:	2a 0c       	add	r2, r10
    2a22:	3b 1c       	adc	r3, r11
    2a24:	f5 01       	movw	r30, r10
    2a26:	80 80       	ld	r8, Z
    2a28:	91 80       	ldd	r9, Z+1	; 0x01
    2a2a:	16 ff       	sbrs	r17, 6
    2a2c:	03 c0       	rjmp	.+6      	; 0x2a34 <vfprintf+0x1a8>
    2a2e:	6f 2d       	mov	r22, r15
    2a30:	70 e0       	ldi	r23, 0x00	; 0
    2a32:	02 c0       	rjmp	.+4      	; 0x2a38 <vfprintf+0x1ac>
    2a34:	6f ef       	ldi	r22, 0xFF	; 255
    2a36:	7f ef       	ldi	r23, 0xFF	; 255
    2a38:	c4 01       	movw	r24, r8
    2a3a:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <strnlen_P>
    2a3e:	6c 01       	movw	r12, r24
    2a40:	10 68       	ori	r17, 0x80	; 128
    2a42:	51 01       	movw	r10, r2
    2a44:	13 fd       	sbrc	r17, 3
    2a46:	1c c0       	rjmp	.+56     	; 0x2a80 <vfprintf+0x1f4>
    2a48:	06 c0       	rjmp	.+12     	; 0x2a56 <vfprintf+0x1ca>
    2a4a:	80 e2       	ldi	r24, 0x20	; 32
    2a4c:	90 e0       	ldi	r25, 0x00	; 0
    2a4e:	b3 01       	movw	r22, r6
    2a50:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <fputc>
    2a54:	ea 94       	dec	r14
    2a56:	8e 2d       	mov	r24, r14
    2a58:	90 e0       	ldi	r25, 0x00	; 0
    2a5a:	c8 16       	cp	r12, r24
    2a5c:	d9 06       	cpc	r13, r25
    2a5e:	a8 f3       	brcs	.-22     	; 0x2a4a <vfprintf+0x1be>
    2a60:	0f c0       	rjmp	.+30     	; 0x2a80 <vfprintf+0x1f4>
    2a62:	f4 01       	movw	r30, r8
    2a64:	17 fd       	sbrc	r17, 7
    2a66:	85 91       	lpm	r24, Z+
    2a68:	17 ff       	sbrs	r17, 7
    2a6a:	81 91       	ld	r24, Z+
    2a6c:	4f 01       	movw	r8, r30
    2a6e:	90 e0       	ldi	r25, 0x00	; 0
    2a70:	b3 01       	movw	r22, r6
    2a72:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <fputc>
    2a76:	e1 10       	cpse	r14, r1
    2a78:	ea 94       	dec	r14
    2a7a:	08 94       	sec
    2a7c:	c1 08       	sbc	r12, r1
    2a7e:	d1 08       	sbc	r13, r1
    2a80:	c1 14       	cp	r12, r1
    2a82:	d1 04       	cpc	r13, r1
    2a84:	71 f7       	brne	.-36     	; 0x2a62 <vfprintf+0x1d6>
    2a86:	e7 c0       	rjmp	.+462    	; 0x2c56 <vfprintf+0x3ca>
    2a88:	84 36       	cpi	r24, 0x64	; 100
    2a8a:	11 f0       	breq	.+4      	; 0x2a90 <vfprintf+0x204>
    2a8c:	89 36       	cpi	r24, 0x69	; 105
    2a8e:	51 f5       	brne	.+84     	; 0x2ae4 <vfprintf+0x258>
    2a90:	f5 01       	movw	r30, r10
    2a92:	17 ff       	sbrs	r17, 7
    2a94:	07 c0       	rjmp	.+14     	; 0x2aa4 <vfprintf+0x218>
    2a96:	80 81       	ld	r24, Z
    2a98:	91 81       	ldd	r25, Z+1	; 0x01
    2a9a:	a2 81       	ldd	r26, Z+2	; 0x02
    2a9c:	b3 81       	ldd	r27, Z+3	; 0x03
    2a9e:	24 e0       	ldi	r18, 0x04	; 4
    2aa0:	30 e0       	ldi	r19, 0x00	; 0
    2aa2:	08 c0       	rjmp	.+16     	; 0x2ab4 <vfprintf+0x228>
    2aa4:	80 81       	ld	r24, Z
    2aa6:	91 81       	ldd	r25, Z+1	; 0x01
    2aa8:	aa 27       	eor	r26, r26
    2aaa:	97 fd       	sbrc	r25, 7
    2aac:	a0 95       	com	r26
    2aae:	ba 2f       	mov	r27, r26
    2ab0:	22 e0       	ldi	r18, 0x02	; 2
    2ab2:	30 e0       	ldi	r19, 0x00	; 0
    2ab4:	a2 0e       	add	r10, r18
    2ab6:	b3 1e       	adc	r11, r19
    2ab8:	01 2f       	mov	r16, r17
    2aba:	0f 76       	andi	r16, 0x6F	; 111
    2abc:	b7 ff       	sbrs	r27, 7
    2abe:	08 c0       	rjmp	.+16     	; 0x2ad0 <vfprintf+0x244>
    2ac0:	b0 95       	com	r27
    2ac2:	a0 95       	com	r26
    2ac4:	90 95       	com	r25
    2ac6:	81 95       	neg	r24
    2ac8:	9f 4f       	sbci	r25, 0xFF	; 255
    2aca:	af 4f       	sbci	r26, 0xFF	; 255
    2acc:	bf 4f       	sbci	r27, 0xFF	; 255
    2ace:	00 68       	ori	r16, 0x80	; 128
    2ad0:	bc 01       	movw	r22, r24
    2ad2:	cd 01       	movw	r24, r26
    2ad4:	a2 01       	movw	r20, r4
    2ad6:	2a e0       	ldi	r18, 0x0A	; 10
    2ad8:	30 e0       	ldi	r19, 0x00	; 0
    2ada:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <__ultoa_invert>
    2ade:	d8 2e       	mov	r13, r24
    2ae0:	d4 18       	sub	r13, r4
    2ae2:	3f c0       	rjmp	.+126    	; 0x2b62 <vfprintf+0x2d6>
    2ae4:	85 37       	cpi	r24, 0x75	; 117
    2ae6:	21 f4       	brne	.+8      	; 0x2af0 <vfprintf+0x264>
    2ae8:	1f 7e       	andi	r17, 0xEF	; 239
    2aea:	2a e0       	ldi	r18, 0x0A	; 10
    2aec:	30 e0       	ldi	r19, 0x00	; 0
    2aee:	20 c0       	rjmp	.+64     	; 0x2b30 <vfprintf+0x2a4>
    2af0:	19 7f       	andi	r17, 0xF9	; 249
    2af2:	8f 36       	cpi	r24, 0x6F	; 111
    2af4:	a9 f0       	breq	.+42     	; 0x2b20 <vfprintf+0x294>
    2af6:	80 37       	cpi	r24, 0x70	; 112
    2af8:	20 f4       	brcc	.+8      	; 0x2b02 <vfprintf+0x276>
    2afa:	88 35       	cpi	r24, 0x58	; 88
    2afc:	09 f0       	breq	.+2      	; 0x2b00 <vfprintf+0x274>
    2afe:	ae c0       	rjmp	.+348    	; 0x2c5c <vfprintf+0x3d0>
    2b00:	0b c0       	rjmp	.+22     	; 0x2b18 <vfprintf+0x28c>
    2b02:	80 37       	cpi	r24, 0x70	; 112
    2b04:	21 f0       	breq	.+8      	; 0x2b0e <vfprintf+0x282>
    2b06:	88 37       	cpi	r24, 0x78	; 120
    2b08:	09 f0       	breq	.+2      	; 0x2b0c <vfprintf+0x280>
    2b0a:	a8 c0       	rjmp	.+336    	; 0x2c5c <vfprintf+0x3d0>
    2b0c:	01 c0       	rjmp	.+2      	; 0x2b10 <vfprintf+0x284>
    2b0e:	10 61       	ori	r17, 0x10	; 16
    2b10:	14 ff       	sbrs	r17, 4
    2b12:	09 c0       	rjmp	.+18     	; 0x2b26 <vfprintf+0x29a>
    2b14:	14 60       	ori	r17, 0x04	; 4
    2b16:	07 c0       	rjmp	.+14     	; 0x2b26 <vfprintf+0x29a>
    2b18:	14 ff       	sbrs	r17, 4
    2b1a:	08 c0       	rjmp	.+16     	; 0x2b2c <vfprintf+0x2a0>
    2b1c:	16 60       	ori	r17, 0x06	; 6
    2b1e:	06 c0       	rjmp	.+12     	; 0x2b2c <vfprintf+0x2a0>
    2b20:	28 e0       	ldi	r18, 0x08	; 8
    2b22:	30 e0       	ldi	r19, 0x00	; 0
    2b24:	05 c0       	rjmp	.+10     	; 0x2b30 <vfprintf+0x2a4>
    2b26:	20 e1       	ldi	r18, 0x10	; 16
    2b28:	30 e0       	ldi	r19, 0x00	; 0
    2b2a:	02 c0       	rjmp	.+4      	; 0x2b30 <vfprintf+0x2a4>
    2b2c:	20 e1       	ldi	r18, 0x10	; 16
    2b2e:	32 e0       	ldi	r19, 0x02	; 2
    2b30:	f5 01       	movw	r30, r10
    2b32:	17 ff       	sbrs	r17, 7
    2b34:	07 c0       	rjmp	.+14     	; 0x2b44 <vfprintf+0x2b8>
    2b36:	60 81       	ld	r22, Z
    2b38:	71 81       	ldd	r23, Z+1	; 0x01
    2b3a:	82 81       	ldd	r24, Z+2	; 0x02
    2b3c:	93 81       	ldd	r25, Z+3	; 0x03
    2b3e:	44 e0       	ldi	r20, 0x04	; 4
    2b40:	50 e0       	ldi	r21, 0x00	; 0
    2b42:	06 c0       	rjmp	.+12     	; 0x2b50 <vfprintf+0x2c4>
    2b44:	60 81       	ld	r22, Z
    2b46:	71 81       	ldd	r23, Z+1	; 0x01
    2b48:	80 e0       	ldi	r24, 0x00	; 0
    2b4a:	90 e0       	ldi	r25, 0x00	; 0
    2b4c:	42 e0       	ldi	r20, 0x02	; 2
    2b4e:	50 e0       	ldi	r21, 0x00	; 0
    2b50:	a4 0e       	add	r10, r20
    2b52:	b5 1e       	adc	r11, r21
    2b54:	a2 01       	movw	r20, r4
    2b56:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <__ultoa_invert>
    2b5a:	d8 2e       	mov	r13, r24
    2b5c:	d4 18       	sub	r13, r4
    2b5e:	01 2f       	mov	r16, r17
    2b60:	0f 77       	andi	r16, 0x7F	; 127
    2b62:	06 ff       	sbrs	r16, 6
    2b64:	09 c0       	rjmp	.+18     	; 0x2b78 <vfprintf+0x2ec>
    2b66:	0e 7f       	andi	r16, 0xFE	; 254
    2b68:	df 14       	cp	r13, r15
    2b6a:	30 f4       	brcc	.+12     	; 0x2b78 <vfprintf+0x2ec>
    2b6c:	04 ff       	sbrs	r16, 4
    2b6e:	06 c0       	rjmp	.+12     	; 0x2b7c <vfprintf+0x2f0>
    2b70:	02 fd       	sbrc	r16, 2
    2b72:	04 c0       	rjmp	.+8      	; 0x2b7c <vfprintf+0x2f0>
    2b74:	0f 7e       	andi	r16, 0xEF	; 239
    2b76:	02 c0       	rjmp	.+4      	; 0x2b7c <vfprintf+0x2f0>
    2b78:	1d 2d       	mov	r17, r13
    2b7a:	01 c0       	rjmp	.+2      	; 0x2b7e <vfprintf+0x2f2>
    2b7c:	1f 2d       	mov	r17, r15
    2b7e:	80 2f       	mov	r24, r16
    2b80:	90 e0       	ldi	r25, 0x00	; 0
    2b82:	04 ff       	sbrs	r16, 4
    2b84:	0c c0       	rjmp	.+24     	; 0x2b9e <vfprintf+0x312>
    2b86:	fe 01       	movw	r30, r28
    2b88:	ed 0d       	add	r30, r13
    2b8a:	f1 1d       	adc	r31, r1
    2b8c:	20 81       	ld	r18, Z
    2b8e:	20 33       	cpi	r18, 0x30	; 48
    2b90:	11 f4       	brne	.+4      	; 0x2b96 <vfprintf+0x30a>
    2b92:	09 7e       	andi	r16, 0xE9	; 233
    2b94:	09 c0       	rjmp	.+18     	; 0x2ba8 <vfprintf+0x31c>
    2b96:	02 ff       	sbrs	r16, 2
    2b98:	06 c0       	rjmp	.+12     	; 0x2ba6 <vfprintf+0x31a>
    2b9a:	1e 5f       	subi	r17, 0xFE	; 254
    2b9c:	05 c0       	rjmp	.+10     	; 0x2ba8 <vfprintf+0x31c>
    2b9e:	86 78       	andi	r24, 0x86	; 134
    2ba0:	90 70       	andi	r25, 0x00	; 0
    2ba2:	00 97       	sbiw	r24, 0x00	; 0
    2ba4:	09 f0       	breq	.+2      	; 0x2ba8 <vfprintf+0x31c>
    2ba6:	1f 5f       	subi	r17, 0xFF	; 255
    2ba8:	80 2e       	mov	r8, r16
    2baa:	99 24       	eor	r9, r9
    2bac:	03 fd       	sbrc	r16, 3
    2bae:	12 c0       	rjmp	.+36     	; 0x2bd4 <vfprintf+0x348>
    2bb0:	00 ff       	sbrs	r16, 0
    2bb2:	0d c0       	rjmp	.+26     	; 0x2bce <vfprintf+0x342>
    2bb4:	fd 2c       	mov	r15, r13
    2bb6:	1e 15       	cp	r17, r14
    2bb8:	50 f4       	brcc	.+20     	; 0x2bce <vfprintf+0x342>
    2bba:	fe 0c       	add	r15, r14
    2bbc:	f1 1a       	sub	r15, r17
    2bbe:	1e 2d       	mov	r17, r14
    2bc0:	06 c0       	rjmp	.+12     	; 0x2bce <vfprintf+0x342>
    2bc2:	80 e2       	ldi	r24, 0x20	; 32
    2bc4:	90 e0       	ldi	r25, 0x00	; 0
    2bc6:	b3 01       	movw	r22, r6
    2bc8:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <fputc>
    2bcc:	1f 5f       	subi	r17, 0xFF	; 255
    2bce:	1e 15       	cp	r17, r14
    2bd0:	c0 f3       	brcs	.-16     	; 0x2bc2 <vfprintf+0x336>
    2bd2:	04 c0       	rjmp	.+8      	; 0x2bdc <vfprintf+0x350>
    2bd4:	1e 15       	cp	r17, r14
    2bd6:	10 f4       	brcc	.+4      	; 0x2bdc <vfprintf+0x350>
    2bd8:	e1 1a       	sub	r14, r17
    2bda:	01 c0       	rjmp	.+2      	; 0x2bde <vfprintf+0x352>
    2bdc:	ee 24       	eor	r14, r14
    2bde:	84 fe       	sbrs	r8, 4
    2be0:	0f c0       	rjmp	.+30     	; 0x2c00 <vfprintf+0x374>
    2be2:	80 e3       	ldi	r24, 0x30	; 48
    2be4:	90 e0       	ldi	r25, 0x00	; 0
    2be6:	b3 01       	movw	r22, r6
    2be8:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <fputc>
    2bec:	82 fe       	sbrs	r8, 2
    2bee:	1f c0       	rjmp	.+62     	; 0x2c2e <vfprintf+0x3a2>
    2bf0:	81 fe       	sbrs	r8, 1
    2bf2:	03 c0       	rjmp	.+6      	; 0x2bfa <vfprintf+0x36e>
    2bf4:	88 e5       	ldi	r24, 0x58	; 88
    2bf6:	90 e0       	ldi	r25, 0x00	; 0
    2bf8:	10 c0       	rjmp	.+32     	; 0x2c1a <vfprintf+0x38e>
    2bfa:	88 e7       	ldi	r24, 0x78	; 120
    2bfc:	90 e0       	ldi	r25, 0x00	; 0
    2bfe:	0d c0       	rjmp	.+26     	; 0x2c1a <vfprintf+0x38e>
    2c00:	c4 01       	movw	r24, r8
    2c02:	86 78       	andi	r24, 0x86	; 134
    2c04:	90 70       	andi	r25, 0x00	; 0
    2c06:	00 97       	sbiw	r24, 0x00	; 0
    2c08:	91 f0       	breq	.+36     	; 0x2c2e <vfprintf+0x3a2>
    2c0a:	81 fc       	sbrc	r8, 1
    2c0c:	02 c0       	rjmp	.+4      	; 0x2c12 <vfprintf+0x386>
    2c0e:	80 e2       	ldi	r24, 0x20	; 32
    2c10:	01 c0       	rjmp	.+2      	; 0x2c14 <vfprintf+0x388>
    2c12:	8b e2       	ldi	r24, 0x2B	; 43
    2c14:	07 fd       	sbrc	r16, 7
    2c16:	8d e2       	ldi	r24, 0x2D	; 45
    2c18:	90 e0       	ldi	r25, 0x00	; 0
    2c1a:	b3 01       	movw	r22, r6
    2c1c:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <fputc>
    2c20:	06 c0       	rjmp	.+12     	; 0x2c2e <vfprintf+0x3a2>
    2c22:	80 e3       	ldi	r24, 0x30	; 48
    2c24:	90 e0       	ldi	r25, 0x00	; 0
    2c26:	b3 01       	movw	r22, r6
    2c28:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <fputc>
    2c2c:	fa 94       	dec	r15
    2c2e:	df 14       	cp	r13, r15
    2c30:	c0 f3       	brcs	.-16     	; 0x2c22 <vfprintf+0x396>
    2c32:	da 94       	dec	r13
    2c34:	f2 01       	movw	r30, r4
    2c36:	ed 0d       	add	r30, r13
    2c38:	f1 1d       	adc	r31, r1
    2c3a:	80 81       	ld	r24, Z
    2c3c:	90 e0       	ldi	r25, 0x00	; 0
    2c3e:	b3 01       	movw	r22, r6
    2c40:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <fputc>
    2c44:	dd 20       	and	r13, r13
    2c46:	a9 f7       	brne	.-22     	; 0x2c32 <vfprintf+0x3a6>
    2c48:	06 c0       	rjmp	.+12     	; 0x2c56 <vfprintf+0x3ca>
    2c4a:	80 e2       	ldi	r24, 0x20	; 32
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    2c4e:	b3 01       	movw	r22, r6
    2c50:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <fputc>
    2c54:	ea 94       	dec	r14
    2c56:	ee 20       	and	r14, r14
    2c58:	c1 f7       	brne	.-16     	; 0x2c4a <vfprintf+0x3be>
    2c5a:	40 ce       	rjmp	.-896    	; 0x28dc <vfprintf+0x50>
    2c5c:	f3 01       	movw	r30, r6
    2c5e:	86 81       	ldd	r24, Z+6	; 0x06
    2c60:	97 81       	ldd	r25, Z+7	; 0x07
    2c62:	02 c0       	rjmp	.+4      	; 0x2c68 <vfprintf+0x3dc>
    2c64:	8f ef       	ldi	r24, 0xFF	; 255
    2c66:	9f ef       	ldi	r25, 0xFF	; 255
    2c68:	2d 96       	adiw	r28, 0x0d	; 13
    2c6a:	0f b6       	in	r0, 0x3f	; 63
    2c6c:	f8 94       	cli
    2c6e:	de bf       	out	0x3e, r29	; 62
    2c70:	0f be       	out	0x3f, r0	; 63
    2c72:	cd bf       	out	0x3d, r28	; 61
    2c74:	df 91       	pop	r29
    2c76:	cf 91       	pop	r28
    2c78:	1f 91       	pop	r17
    2c7a:	0f 91       	pop	r16
    2c7c:	ff 90       	pop	r15
    2c7e:	ef 90       	pop	r14
    2c80:	df 90       	pop	r13
    2c82:	cf 90       	pop	r12
    2c84:	bf 90       	pop	r11
    2c86:	af 90       	pop	r10
    2c88:	9f 90       	pop	r9
    2c8a:	8f 90       	pop	r8
    2c8c:	7f 90       	pop	r7
    2c8e:	6f 90       	pop	r6
    2c90:	5f 90       	pop	r5
    2c92:	4f 90       	pop	r4
    2c94:	3f 90       	pop	r3
    2c96:	2f 90       	pop	r2
    2c98:	08 95       	ret

00002c9a <strnlen_P>:
    2c9a:	fc 01       	movw	r30, r24
    2c9c:	05 90       	lpm	r0, Z+
    2c9e:	61 50       	subi	r22, 0x01	; 1
    2ca0:	70 40       	sbci	r23, 0x00	; 0
    2ca2:	01 10       	cpse	r0, r1
    2ca4:	d8 f7       	brcc	.-10     	; 0x2c9c <strnlen_P+0x2>
    2ca6:	80 95       	com	r24
    2ca8:	90 95       	com	r25
    2caa:	8e 0f       	add	r24, r30
    2cac:	9f 1f       	adc	r25, r31
    2cae:	08 95       	ret

00002cb0 <strnlen>:
    2cb0:	fc 01       	movw	r30, r24
    2cb2:	61 50       	subi	r22, 0x01	; 1
    2cb4:	70 40       	sbci	r23, 0x00	; 0
    2cb6:	01 90       	ld	r0, Z+
    2cb8:	01 10       	cpse	r0, r1
    2cba:	d8 f7       	brcc	.-10     	; 0x2cb2 <strnlen+0x2>
    2cbc:	80 95       	com	r24
    2cbe:	90 95       	com	r25
    2cc0:	8e 0f       	add	r24, r30
    2cc2:	9f 1f       	adc	r25, r31
    2cc4:	08 95       	ret

00002cc6 <fgetc>:
    2cc6:	cf 93       	push	r28
    2cc8:	df 93       	push	r29
    2cca:	ec 01       	movw	r28, r24
    2ccc:	2b 81       	ldd	r18, Y+3	; 0x03
    2cce:	20 ff       	sbrs	r18, 0
    2cd0:	35 c0       	rjmp	.+106    	; 0x2d3c <fgetc+0x76>
    2cd2:	26 ff       	sbrs	r18, 6
    2cd4:	09 c0       	rjmp	.+18     	; 0x2ce8 <fgetc+0x22>
    2cd6:	2f 7b       	andi	r18, 0xBF	; 191
    2cd8:	2b 83       	std	Y+3, r18	; 0x03
    2cda:	8e 81       	ldd	r24, Y+6	; 0x06
    2cdc:	9f 81       	ldd	r25, Y+7	; 0x07
    2cde:	01 96       	adiw	r24, 0x01	; 1
    2ce0:	9f 83       	std	Y+7, r25	; 0x07
    2ce2:	8e 83       	std	Y+6, r24	; 0x06
    2ce4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ce6:	28 c0       	rjmp	.+80     	; 0x2d38 <fgetc+0x72>
    2ce8:	22 ff       	sbrs	r18, 2
    2cea:	0f c0       	rjmp	.+30     	; 0x2d0a <fgetc+0x44>
    2cec:	e8 81       	ld	r30, Y
    2cee:	f9 81       	ldd	r31, Y+1	; 0x01
    2cf0:	80 81       	ld	r24, Z
    2cf2:	99 27       	eor	r25, r25
    2cf4:	87 fd       	sbrc	r24, 7
    2cf6:	90 95       	com	r25
    2cf8:	00 97       	sbiw	r24, 0x00	; 0
    2cfa:	19 f4       	brne	.+6      	; 0x2d02 <fgetc+0x3c>
    2cfc:	20 62       	ori	r18, 0x20	; 32
    2cfe:	2b 83       	std	Y+3, r18	; 0x03
    2d00:	1d c0       	rjmp	.+58     	; 0x2d3c <fgetc+0x76>
    2d02:	31 96       	adiw	r30, 0x01	; 1
    2d04:	f9 83       	std	Y+1, r31	; 0x01
    2d06:	e8 83       	st	Y, r30
    2d08:	11 c0       	rjmp	.+34     	; 0x2d2c <fgetc+0x66>
    2d0a:	ea 85       	ldd	r30, Y+10	; 0x0a
    2d0c:	fb 85       	ldd	r31, Y+11	; 0x0b
    2d0e:	ce 01       	movw	r24, r28
    2d10:	19 95       	eicall
    2d12:	97 ff       	sbrs	r25, 7
    2d14:	0b c0       	rjmp	.+22     	; 0x2d2c <fgetc+0x66>
    2d16:	2b 81       	ldd	r18, Y+3	; 0x03
    2d18:	3f ef       	ldi	r19, 0xFF	; 255
    2d1a:	8f 3f       	cpi	r24, 0xFF	; 255
    2d1c:	93 07       	cpc	r25, r19
    2d1e:	11 f4       	brne	.+4      	; 0x2d24 <fgetc+0x5e>
    2d20:	80 e1       	ldi	r24, 0x10	; 16
    2d22:	01 c0       	rjmp	.+2      	; 0x2d26 <fgetc+0x60>
    2d24:	80 e2       	ldi	r24, 0x20	; 32
    2d26:	82 2b       	or	r24, r18
    2d28:	8b 83       	std	Y+3, r24	; 0x03
    2d2a:	08 c0       	rjmp	.+16     	; 0x2d3c <fgetc+0x76>
    2d2c:	2e 81       	ldd	r18, Y+6	; 0x06
    2d2e:	3f 81       	ldd	r19, Y+7	; 0x07
    2d30:	2f 5f       	subi	r18, 0xFF	; 255
    2d32:	3f 4f       	sbci	r19, 0xFF	; 255
    2d34:	3f 83       	std	Y+7, r19	; 0x07
    2d36:	2e 83       	std	Y+6, r18	; 0x06
    2d38:	90 e0       	ldi	r25, 0x00	; 0
    2d3a:	02 c0       	rjmp	.+4      	; 0x2d40 <fgetc+0x7a>
    2d3c:	8f ef       	ldi	r24, 0xFF	; 255
    2d3e:	9f ef       	ldi	r25, 0xFF	; 255
    2d40:	df 91       	pop	r29
    2d42:	cf 91       	pop	r28
    2d44:	08 95       	ret

00002d46 <fputc>:
    2d46:	0f 93       	push	r16
    2d48:	1f 93       	push	r17
    2d4a:	cf 93       	push	r28
    2d4c:	df 93       	push	r29
    2d4e:	8c 01       	movw	r16, r24
    2d50:	eb 01       	movw	r28, r22
    2d52:	8b 81       	ldd	r24, Y+3	; 0x03
    2d54:	81 ff       	sbrs	r24, 1
    2d56:	1b c0       	rjmp	.+54     	; 0x2d8e <fputc+0x48>
    2d58:	82 ff       	sbrs	r24, 2
    2d5a:	0d c0       	rjmp	.+26     	; 0x2d76 <fputc+0x30>
    2d5c:	2e 81       	ldd	r18, Y+6	; 0x06
    2d5e:	3f 81       	ldd	r19, Y+7	; 0x07
    2d60:	8c 81       	ldd	r24, Y+4	; 0x04
    2d62:	9d 81       	ldd	r25, Y+5	; 0x05
    2d64:	28 17       	cp	r18, r24
    2d66:	39 07       	cpc	r19, r25
    2d68:	64 f4       	brge	.+24     	; 0x2d82 <fputc+0x3c>
    2d6a:	e8 81       	ld	r30, Y
    2d6c:	f9 81       	ldd	r31, Y+1	; 0x01
    2d6e:	01 93       	st	Z+, r16
    2d70:	f9 83       	std	Y+1, r31	; 0x01
    2d72:	e8 83       	st	Y, r30
    2d74:	06 c0       	rjmp	.+12     	; 0x2d82 <fputc+0x3c>
    2d76:	e8 85       	ldd	r30, Y+8	; 0x08
    2d78:	f9 85       	ldd	r31, Y+9	; 0x09
    2d7a:	80 2f       	mov	r24, r16
    2d7c:	19 95       	eicall
    2d7e:	00 97       	sbiw	r24, 0x00	; 0
    2d80:	31 f4       	brne	.+12     	; 0x2d8e <fputc+0x48>
    2d82:	8e 81       	ldd	r24, Y+6	; 0x06
    2d84:	9f 81       	ldd	r25, Y+7	; 0x07
    2d86:	01 96       	adiw	r24, 0x01	; 1
    2d88:	9f 83       	std	Y+7, r25	; 0x07
    2d8a:	8e 83       	std	Y+6, r24	; 0x06
    2d8c:	02 c0       	rjmp	.+4      	; 0x2d92 <fputc+0x4c>
    2d8e:	0f ef       	ldi	r16, 0xFF	; 255
    2d90:	1f ef       	ldi	r17, 0xFF	; 255
    2d92:	c8 01       	movw	r24, r16
    2d94:	df 91       	pop	r29
    2d96:	cf 91       	pop	r28
    2d98:	1f 91       	pop	r17
    2d9a:	0f 91       	pop	r16
    2d9c:	08 95       	ret

00002d9e <__ultoa_invert>:
    2d9e:	fa 01       	movw	r30, r20
    2da0:	aa 27       	eor	r26, r26
    2da2:	28 30       	cpi	r18, 0x08	; 8
    2da4:	51 f1       	breq	.+84     	; 0x2dfa <__ultoa_invert+0x5c>
    2da6:	20 31       	cpi	r18, 0x10	; 16
    2da8:	81 f1       	breq	.+96     	; 0x2e0a <__ultoa_invert+0x6c>
    2daa:	e8 94       	clt
    2dac:	6f 93       	push	r22
    2dae:	6e 7f       	andi	r22, 0xFE	; 254
    2db0:	6e 5f       	subi	r22, 0xFE	; 254
    2db2:	7f 4f       	sbci	r23, 0xFF	; 255
    2db4:	8f 4f       	sbci	r24, 0xFF	; 255
    2db6:	9f 4f       	sbci	r25, 0xFF	; 255
    2db8:	af 4f       	sbci	r26, 0xFF	; 255
    2dba:	b1 e0       	ldi	r27, 0x01	; 1
    2dbc:	3e d0       	rcall	.+124    	; 0x2e3a <__ultoa_invert+0x9c>
    2dbe:	b4 e0       	ldi	r27, 0x04	; 4
    2dc0:	3c d0       	rcall	.+120    	; 0x2e3a <__ultoa_invert+0x9c>
    2dc2:	67 0f       	add	r22, r23
    2dc4:	78 1f       	adc	r23, r24
    2dc6:	89 1f       	adc	r24, r25
    2dc8:	9a 1f       	adc	r25, r26
    2dca:	a1 1d       	adc	r26, r1
    2dcc:	68 0f       	add	r22, r24
    2dce:	79 1f       	adc	r23, r25
    2dd0:	8a 1f       	adc	r24, r26
    2dd2:	91 1d       	adc	r25, r1
    2dd4:	a1 1d       	adc	r26, r1
    2dd6:	6a 0f       	add	r22, r26
    2dd8:	71 1d       	adc	r23, r1
    2dda:	81 1d       	adc	r24, r1
    2ddc:	91 1d       	adc	r25, r1
    2dde:	a1 1d       	adc	r26, r1
    2de0:	20 d0       	rcall	.+64     	; 0x2e22 <__ultoa_invert+0x84>
    2de2:	09 f4       	brne	.+2      	; 0x2de6 <__ultoa_invert+0x48>
    2de4:	68 94       	set
    2de6:	3f 91       	pop	r19
    2de8:	2a e0       	ldi	r18, 0x0A	; 10
    2dea:	26 9f       	mul	r18, r22
    2dec:	11 24       	eor	r1, r1
    2dee:	30 19       	sub	r19, r0
    2df0:	30 5d       	subi	r19, 0xD0	; 208
    2df2:	31 93       	st	Z+, r19
    2df4:	de f6       	brtc	.-74     	; 0x2dac <__ultoa_invert+0xe>
    2df6:	cf 01       	movw	r24, r30
    2df8:	08 95       	ret
    2dfa:	46 2f       	mov	r20, r22
    2dfc:	47 70       	andi	r20, 0x07	; 7
    2dfe:	40 5d       	subi	r20, 0xD0	; 208
    2e00:	41 93       	st	Z+, r20
    2e02:	b3 e0       	ldi	r27, 0x03	; 3
    2e04:	0f d0       	rcall	.+30     	; 0x2e24 <__ultoa_invert+0x86>
    2e06:	c9 f7       	brne	.-14     	; 0x2dfa <__ultoa_invert+0x5c>
    2e08:	f6 cf       	rjmp	.-20     	; 0x2df6 <__ultoa_invert+0x58>
    2e0a:	46 2f       	mov	r20, r22
    2e0c:	4f 70       	andi	r20, 0x0F	; 15
    2e0e:	40 5d       	subi	r20, 0xD0	; 208
    2e10:	4a 33       	cpi	r20, 0x3A	; 58
    2e12:	18 f0       	brcs	.+6      	; 0x2e1a <__ultoa_invert+0x7c>
    2e14:	49 5d       	subi	r20, 0xD9	; 217
    2e16:	31 fd       	sbrc	r19, 1
    2e18:	40 52       	subi	r20, 0x20	; 32
    2e1a:	41 93       	st	Z+, r20
    2e1c:	02 d0       	rcall	.+4      	; 0x2e22 <__ultoa_invert+0x84>
    2e1e:	a9 f7       	brne	.-22     	; 0x2e0a <__ultoa_invert+0x6c>
    2e20:	ea cf       	rjmp	.-44     	; 0x2df6 <__ultoa_invert+0x58>
    2e22:	b4 e0       	ldi	r27, 0x04	; 4
    2e24:	a6 95       	lsr	r26
    2e26:	97 95       	ror	r25
    2e28:	87 95       	ror	r24
    2e2a:	77 95       	ror	r23
    2e2c:	67 95       	ror	r22
    2e2e:	ba 95       	dec	r27
    2e30:	c9 f7       	brne	.-14     	; 0x2e24 <__ultoa_invert+0x86>
    2e32:	00 97       	sbiw	r24, 0x00	; 0
    2e34:	61 05       	cpc	r22, r1
    2e36:	71 05       	cpc	r23, r1
    2e38:	08 95       	ret
    2e3a:	9b 01       	movw	r18, r22
    2e3c:	ac 01       	movw	r20, r24
    2e3e:	0a 2e       	mov	r0, r26
    2e40:	06 94       	lsr	r0
    2e42:	57 95       	ror	r21
    2e44:	47 95       	ror	r20
    2e46:	37 95       	ror	r19
    2e48:	27 95       	ror	r18
    2e4a:	ba 95       	dec	r27
    2e4c:	c9 f7       	brne	.-14     	; 0x2e40 <__ultoa_invert+0xa2>
    2e4e:	62 0f       	add	r22, r18
    2e50:	73 1f       	adc	r23, r19
    2e52:	84 1f       	adc	r24, r20
    2e54:	95 1f       	adc	r25, r21
    2e56:	a0 1d       	adc	r26, r0
    2e58:	08 95       	ret

00002e5a <__mulsi3>:
    2e5a:	62 9f       	mul	r22, r18
    2e5c:	d0 01       	movw	r26, r0
    2e5e:	73 9f       	mul	r23, r19
    2e60:	f0 01       	movw	r30, r0
    2e62:	82 9f       	mul	r24, r18
    2e64:	e0 0d       	add	r30, r0
    2e66:	f1 1d       	adc	r31, r1
    2e68:	64 9f       	mul	r22, r20
    2e6a:	e0 0d       	add	r30, r0
    2e6c:	f1 1d       	adc	r31, r1
    2e6e:	92 9f       	mul	r25, r18
    2e70:	f0 0d       	add	r31, r0
    2e72:	83 9f       	mul	r24, r19
    2e74:	f0 0d       	add	r31, r0
    2e76:	74 9f       	mul	r23, r20
    2e78:	f0 0d       	add	r31, r0
    2e7a:	65 9f       	mul	r22, r21
    2e7c:	f0 0d       	add	r31, r0
    2e7e:	99 27       	eor	r25, r25
    2e80:	72 9f       	mul	r23, r18
    2e82:	b0 0d       	add	r27, r0
    2e84:	e1 1d       	adc	r30, r1
    2e86:	f9 1f       	adc	r31, r25
    2e88:	63 9f       	mul	r22, r19
    2e8a:	b0 0d       	add	r27, r0
    2e8c:	e1 1d       	adc	r30, r1
    2e8e:	f9 1f       	adc	r31, r25
    2e90:	bd 01       	movw	r22, r26
    2e92:	cf 01       	movw	r24, r30
    2e94:	11 24       	eor	r1, r1
    2e96:	08 95       	ret

00002e98 <__divmodsi4>:
    2e98:	97 fb       	bst	r25, 7
    2e9a:	09 2e       	mov	r0, r25
    2e9c:	05 26       	eor	r0, r21
    2e9e:	0e d0       	rcall	.+28     	; 0x2ebc <__divmodsi4_neg1>
    2ea0:	57 fd       	sbrc	r21, 7
    2ea2:	04 d0       	rcall	.+8      	; 0x2eac <__divmodsi4_neg2>
    2ea4:	14 d0       	rcall	.+40     	; 0x2ece <__udivmodsi4>
    2ea6:	0a d0       	rcall	.+20     	; 0x2ebc <__divmodsi4_neg1>
    2ea8:	00 1c       	adc	r0, r0
    2eaa:	38 f4       	brcc	.+14     	; 0x2eba <__divmodsi4_exit>

00002eac <__divmodsi4_neg2>:
    2eac:	50 95       	com	r21
    2eae:	40 95       	com	r20
    2eb0:	30 95       	com	r19
    2eb2:	21 95       	neg	r18
    2eb4:	3f 4f       	sbci	r19, 0xFF	; 255
    2eb6:	4f 4f       	sbci	r20, 0xFF	; 255
    2eb8:	5f 4f       	sbci	r21, 0xFF	; 255

00002eba <__divmodsi4_exit>:
    2eba:	08 95       	ret

00002ebc <__divmodsi4_neg1>:
    2ebc:	f6 f7       	brtc	.-4      	; 0x2eba <__divmodsi4_exit>
    2ebe:	90 95       	com	r25
    2ec0:	80 95       	com	r24
    2ec2:	70 95       	com	r23
    2ec4:	61 95       	neg	r22
    2ec6:	7f 4f       	sbci	r23, 0xFF	; 255
    2ec8:	8f 4f       	sbci	r24, 0xFF	; 255
    2eca:	9f 4f       	sbci	r25, 0xFF	; 255
    2ecc:	08 95       	ret

00002ece <__udivmodsi4>:
    2ece:	a1 e2       	ldi	r26, 0x21	; 33
    2ed0:	1a 2e       	mov	r1, r26
    2ed2:	aa 1b       	sub	r26, r26
    2ed4:	bb 1b       	sub	r27, r27
    2ed6:	fd 01       	movw	r30, r26
    2ed8:	0d c0       	rjmp	.+26     	; 0x2ef4 <__udivmodsi4_ep>

00002eda <__udivmodsi4_loop>:
    2eda:	aa 1f       	adc	r26, r26
    2edc:	bb 1f       	adc	r27, r27
    2ede:	ee 1f       	adc	r30, r30
    2ee0:	ff 1f       	adc	r31, r31
    2ee2:	a2 17       	cp	r26, r18
    2ee4:	b3 07       	cpc	r27, r19
    2ee6:	e4 07       	cpc	r30, r20
    2ee8:	f5 07       	cpc	r31, r21
    2eea:	20 f0       	brcs	.+8      	; 0x2ef4 <__udivmodsi4_ep>
    2eec:	a2 1b       	sub	r26, r18
    2eee:	b3 0b       	sbc	r27, r19
    2ef0:	e4 0b       	sbc	r30, r20
    2ef2:	f5 0b       	sbc	r31, r21

00002ef4 <__udivmodsi4_ep>:
    2ef4:	66 1f       	adc	r22, r22
    2ef6:	77 1f       	adc	r23, r23
    2ef8:	88 1f       	adc	r24, r24
    2efa:	99 1f       	adc	r25, r25
    2efc:	1a 94       	dec	r1
    2efe:	69 f7       	brne	.-38     	; 0x2eda <__udivmodsi4_loop>
    2f00:	60 95       	com	r22
    2f02:	70 95       	com	r23
    2f04:	80 95       	com	r24
    2f06:	90 95       	com	r25
    2f08:	9b 01       	movw	r18, r22
    2f0a:	ac 01       	movw	r20, r24
    2f0c:	bd 01       	movw	r22, r26
    2f0e:	cf 01       	movw	r24, r30
    2f10:	08 95       	ret

00002f12 <_exit>:
    2f12:	f8 94       	cli

00002f14 <__stop_program>:
    2f14:	ff cf       	rjmp	.-2      	; 0x2f14 <__stop_program>
